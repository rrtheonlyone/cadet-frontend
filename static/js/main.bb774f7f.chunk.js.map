{"version":3,"sources":["commons/sideContent/SideContentTypes.ts","commons/workspace/WorkspaceTypes.ts","commons/workspace/WorkspaceActions.ts","commons/application/types/InterpreterTypes.ts","features/sourceRecorder/sourcecast/SourcecastTypes.ts","commons/application/actions/CommonsActions.ts","commons/application/types/CommonsTypes.ts","commons/application/types/ActionTypes.ts","commons/application/actions/SessionActions.ts","commons/application/types/SessionTypes.ts","features/sourceRecorder/SourceRecorderTypes.ts","commons/utils/Constants.ts","commons/application/actions/InterpreterActions.ts","commons/utils/JsSlangHelper.ts","commons/application/types/ExternalTypes.ts","commons/application/ApplicationTypes.ts","commons/application/reducers/SessionsReducer.ts","commons/assessment/AssessmentTypes.ts","commons/controlBar/ControlBarChapterSelect.tsx","commons/ControlButton.tsx","commons/controlBar/ControlBarClearButton.tsx","commons/controlBar/ControlBarEvalButton.tsx","commons/controlBar/ControlBarReturnToAcademyButton.tsx","commons/controlBar/ControlBarNextButton.tsx","commons/controlBar/ControlBarPreviousButton.tsx","commons/controlBar/ControlBarQuestionViewButton.tsx","commons/controlBar/ControlBarResetButton.tsx","commons/controlBar/ControlBarRunButton.tsx","commons/controlBar/ControlBarSaveButton.tsx","commons/Markdown.tsx","commons/sideContent/SideContentCanvasOutput.tsx","commons/sideContent/SideContentAutograderCard.tsx","commons/sideContent/SideContentResultCard.tsx","commons/sideContent/SideContentAutograder.tsx","commons/sideContent/SideContentToneMatrix.tsx","commons/utils/DateHelper.ts","commons/utils/HistoryHelper.ts","commons/utils/NotificationsHelper.ts","commons/utils/ParamParseHelper.ts","commons/controlBar/ControlBar.tsx","commons/documentation/Documentation.ts","commons/utils/Hooks.ts","commons/editor/EditorHotkeys.ts","commons/editor/UseHighlighting.tsx","commons/editor/UseNavigation.tsx","commons/editor/UseRefactor.tsx","commons/collabEditing/CollabEditingTypes.ts","commons/collabEditing/CollabEditingHelper.ts","commons/editor/UseShareAce.tsx","commons/editor/UseTypeInference.tsx","commons/editor/Editor.tsx","commons/mcqChooser/McqChooser.tsx","commons/repl/ReplInput.tsx","commons/repl/Repl.tsx","commons/sideContent/SideContentHelper.ts","commons/sideContent/SideContent.tsx","commons/workspace/Workspace.tsx","commons/assessmentWorkspace/AssessmentWorkspaceGradingResult.tsx","commons/assessmentWorkspace/AssessmentWorkspace.tsx","commons/assessmentWorkspace/AssessmentWorkspaceContainer.ts","commons/ContentDisplay.tsx","commons/notificationBadge/NotificationBadgeHelper.ts","commons/notificationBadge/NotificationBadgeTypes.ts","commons/notificationBadge/NotificationBadge.tsx","commons/notificationBadge/NotificationBadgeContainer.ts","commons/assessment/Assessment.tsx","commons/assessment/AssessmentContainer.ts","features/academy/AcademyTypes.ts","features/dashboard/DashboardActions.ts","features/dashboard/DashboardTypes.ts","pages/academy/dashboard/Dashboard.tsx","pages/academy/dashboard/DashboardContainer.ts","features/game/assets/FontAssets.ts","features/game/utils/StyleUtils.ts","features/game/commons/CommonConstants.ts","features/game/layer/GameLayerTypes.ts","features/game/sound/GameSoundTypes.ts","features/game/assets/SoundAssets.ts","features/game/dialogue/GameDialogueConstants.ts","features/game/assets/ImageAssets.ts","features/game/utils/GameUtils.ts","features/game/effects/FadeEffect.ts","features/game/effects/Typewriter.ts","features/game/dialogue/GameDialogueRenderer.ts","features/game/dialogue/GameDialogueHelper.ts","features/game/utils/TextUtils.ts","features/game/effects/Notification.ts","features/game/phase/GamePhaseTypes.ts","features/game/state/GameStateTypes.ts","features/game/scenes/gameManager/GameGlobalAPI.ts","features/game/action/GameActionTypes.ts","features/game/location/GameMapTypes.ts","features/game/action/GameActionManager.ts","features/game/action/GameActionExecuter.ts","features/game/action/GameActionConditionChecker.ts","features/game/boundingBoxes/GameBoundingBoxManager.ts","features/game/utils/SpriteUtils.ts","features/game/character/GameCharacterConstants.ts","features/game/character/GameCharacterManager.ts","features/game/dialogue/GameDialogueGenerator.ts","features/game/commons/CommonTypes.ts","features/game/utils/StringUtils.ts","features/game/dialogue/GameDialogueSpeakerRenderer.ts","features/game/dialogue/GameDialogueManager.ts","features/game/effects/LoadingScreen.ts","features/game/layer/GameLayerManager.ts","features/game/effects/GlowingObject.ts","features/game/objects/GameObjectManager.ts","features/game/effects/ScrollEffect.ts","features/game/popUp/GamePopUpConstants.ts","features/game/popUp/GamePopUpManager.ts","features/game/mode/GameModeTypes.ts","features/game/objective/GameObjective.ts","features/game/save/GameSaveHelper.ts","features/game/state/GameStateManager.ts","features/academy/AcademyReducer.ts","features/dashboard/DashboardReducer.ts","features/playground/PlaygroundReducer.ts","features/playground/PlaygroundTypes.ts","commons/workspace/WorkspaceReducer.ts","features/sourceRecorder/sourcecast/SourcecastReducer.ts","features/sourceRecorder/sourcereel/SourcereelReducer.ts","features/sourceRecorder/sourcereel/SourcereelTypes.ts","commons/application/ApplicationReducer.ts","commons/application/reducers/RootReducer.ts","commons/collabEditing/CollabEditingActions.ts","features/academy/AcademyActions.ts","features/groundControl/GroundControlActions.ts","features/groundControl/GroundControlTypes.ts","features/persistence/PersistenceActions.ts","features/persistence/PersistenceTypes.ts","features/playground/PlaygroundActions.ts","features/sourceRecorder/sourcecast/SourcecastActions.ts","features/sourceRecorder/SourceRecorderActions.ts","features/sourceRecorder/sourcereel/SourcereelActions.ts","commons/utils/ActionsHelper.ts","commons/mocks/AssessmentMocks.ts","commons/mocks/UserMocks.ts","commons/mocks/GradingMocks.ts","commons/mocks/GroupMocks.ts","commons/mocks/BackendMocks.ts","commons/utils/AuthHelper.ts","commons/sagas/BackendSaga.ts","commons/sagas/RequestsSaga.ts","commons/sagas/LoginSaga.ts","commons/dialogs/ConfirmDialog.tsx","commons/dialogs/PromptDialog.tsx","commons/utils/DialogHelper.tsx","commons/sagas/PersistenceSaga.tsx","commons/sagas/PlaygroundSaga.ts","commons/sagas/WorkspaceSaga.ts","commons/sagas/MainSaga.ts","pages/localStorage.ts","pages/createStore.ts","commons/utils/CastBackend.ts","features/game/utils/ButtonUtils.ts","features/game/state/GameStateConstants.ts","features/game/state/GameUserStateManager.ts","features/game/effects/FlyEffect.ts","features/game/awards/GameAwardsConstants.ts","features/game/awards/GameAwardsHelper.ts","features/game/awards/GameAwardsTypes.ts","features/game/awards/GameAwardsManager.ts","features/game/background/GameBackgroundManager.ts","features/game/commons/CommonRadioButton.ts","features/game/scenes/settings/SettingsConstants.ts","features/game/escape/GameEscapeConstants.ts","features/game/escape/GameEscapeManager.ts","features/game/input/GameInputManager.ts","features/game/phase/GamePhaseManager.ts","features/game/commons/CommonBackButton.ts","features/game/mode/explore/GameModeExploreConstants.ts","features/game/mode/explore/GameModeExplore.ts","features/game/mode/menu/GameModeMenuConstants.ts","features/game/mode/menu/GameModeMenu.ts","features/game/mode/move/GameModeMoveConstants.ts","features/game/mode/move/GameModeMove.ts","features/game/mode/sequence/GameModeSequence.ts","features/game/mode/talk/GameModeTalkConstants.ts","features/game/mode/talk/GameModeTalk.ts","features/game/scenes/gameManager/GameManager.ts","features/game/scenes/gameManager/GameManagerHelper.ts","features/game/save/GameSaveManager.ts","features/game/save/GameSaveRequests.ts","features/game/scenes/awardsHall/AwardsHallConstants.ts","features/game/scenes/awardsHall/AwardsHall.ts","features/game/scenes/awardsHall/AwardsHelper.ts","features/game/scenes/bindings/BindingsConstants.ts","features/game/scenes/bindings/Bindings.ts","features/game/utils/LoaderUtils.ts","features/game/scenes/chapterSelect/ChapterSelectConstants.ts","features/game/commons/CommonTextHover.ts","features/game/assets/TextAssets.ts","features/game/location/GameMap.ts","features/game/parser/ParserConverter.ts","features/game/parser/ParserValidator.ts","features/game/parser/ActionParser.ts","features/game/parser/ConditionParser.ts","features/game/parser/CharacterParser.ts","features/game/parser/SpeakerParser.ts","features/game/parser/DialogueParser.ts","features/game/parser/MusicParser.ts","features/game/parser/Parser.ts","features/game/parser/LocationParser.ts","features/game/parser/ObjectParser.ts","features/game/parser/BoundingBoxParser.ts","features/game/parser/LocationDetailsParser.ts","features/game/location/GameMapHelper.ts","features/game/utils/TxtLoaderUtils.ts","features/game/scenes/chapterSelect/ChapterSelectHelper.ts","features/game/scenes/chapterSelect/ChapterSelect.ts","features/game/scenes/checkpointTransition/CheckpointTransitionConstants.ts","features/game/scenes/checkpointTransition/CheckpointTransition.ts","features/game/scenes/mainMenu/MainMenuConstants.ts","features/game/scenes/mainMenu/MainMenu.ts","features/game/scenes/roomPreview/RoomPreviewConstants.ts","features/game/scenes/roomPreview/RoomPreviewHelper.ts","features/game/scenes/roomPreview/RoomPreview.ts","features/game/scenes/settings/Settings.ts","features/game/sound/GameSoundManager.ts","features/storySimulator/StorySimulatorRequest.ts","features/storySimulator/StorySimulatorService.ts","features/game/chapter/GameChapterMocks.ts","features/game/parser/AwardParser.ts","features/game/scenes/entry/EntryScene.ts","features/game/SourceAcademyGame.ts","pages/academy/game/Game.tsx","pages/academy/grading/subcomponents/GradingEditGradingCell.tsx","pages/academy/grading/subcomponents/GradingGradeCell.tsx","pages/academy/grading/subcomponents/GradingStatusCell.tsx","pages/academy/grading/subcomponents/GradingUnsubmitCell.tsx","pages/academy/grading/subcomponents/GradingEditor.tsx","pages/academy/grading/subcomponents/GradingEditorContainer.ts","pages/academy/grading/subcomponents/GradingWorkspace.tsx","pages/academy/grading/subcomponents/GradingWorkspaceContainer.ts","pages/academy/grading/subcomponents/GradingXPCell.tsx","pages/academy/grading/Grading.tsx","pages/academy/grading/GradingContainer.ts","pages/academy/groundControl/subcomponents/GroundControlDeleteCell.tsx","pages/academy/groundControl/subcomponents/GroundControlDropzone.tsx","pages/academy/groundControl/subcomponents/GroundControlEditCell.tsx","pages/academy/groundControl/subcomponents/GroundControlPublishCell.tsx","pages/academy/groundControl/GroundControl.tsx","pages/academy/groundControl/GroundControlContainer.ts","commons/controlBar/ControlBarAutorunButtons.tsx","commons/controlBar/ControlBarExternalLibrarySelect.tsx","commons/sideContent/SideContentEnvVisualizer.tsx","commons/sideContent/SideContentInspector.tsx","commons/sideContent/SideContentListVisualizer.tsx","commons/sourceRecorder/SourceRecorderControlBar.tsx","commons/sourceRecorder/SourceRecorderEditor.tsx","commons/sourceRecorder/SourceRecorderDeleteCell.tsx","commons/sourceRecorder/SourceRecorderSelectCell.tsx","commons/sourceRecorder/SourceRecorderTable.tsx","pages/academy/sourcereel/subcomponents/SourcereelControlbar.tsx","pages/academy/sourcereel/Sourcereel.tsx","pages/academy/sourcereel/SourcereelContainer.ts","features/storySimulator/StorySimulatorTypes.ts","pages/academy/storySimulator/subcomponents/StorySimulatorAssetFileUploader.tsx","pages/academy/storySimulator/subcomponents/StorySimulatorAssetSelectionHelper.tsx","pages/academy/storySimulator/subcomponents/StorySimulatorAssetViewer.tsx","pages/academy/storySimulator/subcomponents/StorySimulatorAssetSelection.tsx","commons/utils/SortableList.tsx","pages/academy/storySimulator/subcomponents/StorySimulatorChapterEditor.tsx","pages/academy/storySimulator/subcomponents/StorySimulatorChapterSim.tsx","features/storySimulator/scenes/mainMenu/MainMenuConstants.ts","pages/academy/storySimulator/subcomponents/StorySimulatorCheckpointTxtLoader.tsx","pages/academy/storySimulator/subcomponents/StorySimulatorCheckpointSim.tsx","features/storySimulator/assets/ImageAssets.ts","features/storySimulator/scenes/mainMenu/MainMenu.ts","features/storySimulator/background/SSBackgroundManager.ts","features/storySimulator/cursorMode/SSCursorModeTypes.ts","features/storySimulator/boundingBoxes/SSBBoxManager.ts","features/storySimulator/cursorMode/SSCursorModeConstants.ts","features/storySimulator/cursorMode/SSCursorMode.ts","features/storySimulator/logger/SSLogConstants.ts","features/storySimulator/logger/SSLogManagerHelper.ts","features/storySimulator/logger/SSLogManager.ts","features/storySimulator/objects/SSObjectManager.ts","features/storySimulator/transform/SSTransformManagerConstants.ts","features/storySimulator/transform/SSTransformManager.ts","features/storySimulator/scenes/ObjectPlacement/ObjectPlacementConstants.ts","features/storySimulator/scenes/ObjectPlacement/ObjectPlacement.ts","pages/academy/storySimulator/subcomponents/storySimulatorGame.ts","pages/academy/storySimulator/StorySimulator.tsx","pages/academy/subcomponents/AcademyDefaultChapterContainer.ts","pages/academy/subcomponents/AcademyDefaultChapter.tsx","pages/academy/subcomponents/AcademyNavigationBar.tsx","pages/academy/Academy.tsx","pages/academy/AcademyContainer.ts","pages/contributors/subcomponents/ContributorsDetails.tsx","pages/contributors/subcomponents/ContributorsGithubApi.ts","pages/contributors/subcomponents/ContributorsList.tsx","pages/contributors/Contributors.tsx","pages/login/Login.tsx","pages/login/LoginContainer.tsx","commons/XMLParser/XMLParserTypes.ts","commons/XMLParser/XMLParserHelper.ts","commons/editingOverviewCard/EditingOverviewCard.tsx","commons/controlBar/ControlBarToggleEditModeButton.tsx","commons/editingWorkspaceSideContent/EditingWorkspaceSideContentHelper.ts","commons/editingWorkspaceSideContent/EditingWorkspaceSideContentTextAreaContent.tsx","commons/editingWorkspaceSideContent/EditingWorkspaceSideContentAutograderTab.tsx","commons/editingWorkspaceSideContent/EditingWorkspaceSideContentDeploymentTab.tsx","commons/editingWorkspaceSideContent/EditingWorkspaceSideContentGradingTab.tsx","commons/editingWorkspaceSideContent/EditingWorkspaceSideContentManageQuestionTab.tsx","commons/editingWorkspaceSideContent/EditingWorkspaceSideContentMcqQuestionTemplateTab.tsx","commons/editingWorkspaceSideContent/EditingWorkspaceSideContentProgrammingQuestionTemplateTab.tsx","commons/editingWorkspace/EditingWorkspace.tsx","commons/editingWorkspace/EditingWorkspaceContainer.ts","commons/missionCreator/MissionCreator.tsx","commons/missionCreator/MissionCreatorContainer.ts","pages/missionControl/MissionControl.tsx","pages/missionControl/MissionControlContainer.ts","pages/notFound/NotFound.tsx","commons/controlBar/ControlBarExecutionTime.tsx","commons/controlBar/ControlBarPersistenceButtons.tsx","commons/controlBar/ControlBarSessionButton.tsx","commons/controlBar/ControlBarShareButton.tsx","commons/sideContent/SideContentFaceapiDisplay.tsx","commons/sideContent/SideContentSubstVisualizer.tsx","commons/sideContent/SideContentVideoDisplay.tsx","commons/utils/IntroductionHelper.ts","pages/playground/Playground.tsx","pages/playground/PlaygroundContainer.ts","pages/sourcecast/Sourcecast.tsx","pages/sourcecast/SourcecastContainer.ts","commons/profile/ProfileCard.tsx","commons/profile/Profile.tsx","commons/profile/ProfileContainer.ts","commons/dropdown/DropdownAbout.tsx","commons/dropdown/DropdownHelp.tsx","commons/dropdown/Dropdown.tsx","commons/navigationBar/NavigationBar.tsx","commons/utils/QueryHelper.ts","commons/application/Application.tsx","commons/application/ApplicationContainer.ts","commons/utils/RegisterServiceWorker.ts","index.tsx","assets/default_cover_image.jpg"],"names":["SideContentType","browseReplHistoryDown","workspaceLocation","action","browseReplHistoryUp","changeExternalLibrary","newExternal","changeEditorHeight","height","changeEditorWidth","widthChange","changeExecTime","execTime","changeSideContentHeight","chapterSelect","chapter","variant","externalLibrarySelect","externalLibraryName","toggleEditorAutorun","updateActiveTab","activeTab","beginClearContext","library","clearReplInput","clearReplOutput","clearReplOutputLast","endClearContext","ensureLibrariesLoaded","evalEditor","evalRepl","evalTestcase","testcaseId","updateEditorValue","newEditorValue","setEditorBreakpoint","breakpoints","highlightEditorLine","highlightedLines","updateReplValue","newReplValue","sendReplInputToOutput","newOutput","type","value","resetTestcase","index","navigateToDeclaration","cursorPosition","moveCursor","resetWorkspace","workspaceOptions","updateWorkspace","setEditorReadonly","editorReadonly","updateCurrentAssessmentId","assessmentId","questionId","updateCurrentSubmissionId","submissionId","updateHasUnsavedChanges","hasUnsavedChanges","fetchChapter","changeChapter","updateChapter","promptAutocomplete","row","column","callback","notifyProgramEvaluated","result","lastDebuggerResult","code","context","logOut","fetchAuth","providerId","fetchAssessment","id","fetchAssessmentOverviews","fetchGrading","fetchGradingOverviews","filterToGroup","login","logoutGoogle","setGameState","gameState","setTokens","accessToken","refreshToken","setUser","user","setGoogleUser","submitAnswer","answer","submitAssessment","submitGrading","gradeAdjustment","xpAdjustment","comments","submitGradingAndContinue","updateHistoryHelpers","loc","updateAssessmentOverviews","overviews","updateAssessment","assessment","updateGradingOverviews","updateGrading","grading","unsubmitSubmission","fetchNotifications","acknowledgeNotifications","withFilter","updateNotifications","notifications","KeyboardCommand","PlaybackStatus","RecordingStatus","isTrue","toUpperCase","useBackend","process","playgroundOnly","sentryDsn","REACT_APP_SENTRY_DSN","authProviders","Map","i","name","endpoint","set","isDefault","Links","Constants","sourceAcademyVersion","backendUrl","defaultSourceChapter","defaultSourceVariant","defaultQuestionId","maxBrowseIndex","urlShortener","urlShortenerSignature","moduleBackendUrl","googleClientId","googleApiKey","googleAppId","handleConsoleLog","logString","evalInterpreterSuccess","evalTestcaseSuccess","evalTestcaseFailure","evalInterpreterError","errors","beginInterruptExecution","endInterruptExecution","beginDebuggerPause","endDebuggerPause","debuggerResume","debuggerReset","highlightLine","line","window","Inspector","Error","highlightClean","inspectorUpdate","updateContext","stringify","externalBuiltIns","display","str","undefined","rawDisplay","output","String","__REDUX_STORE__","dispatch","prompt","alert","visualiseList","list","ListVisualizer","draw","createContext","externals","externalContext","moduleParams","createSlangContext","makeElevatedContext","ProxyFrame","prototype","runtime","environments","head","fakeFrame","proxyGlobalEnv","Proxy","get","target","prop","receiver","proxyEnvs","proxyRuntime","elevatedContext","proxyContext","customBuiltIns","importBuiltins","defineBuiltin","fname","getDifferenceInMethods","eFrame","frame","difference","keys","ExternalLibraryName","runesLibrary","curvesLibrary","soundsLibrary","binaryTreesLibrary","videoLibrary","libEntries","NONE","RUNES","CURVES","SOUNDS","BINARYTREES","PIXNFLIX","MACHINELEARNING","ALL","concat","externalLibraries","ApplicationEnvironment","Role","sourceLanguages","variantDisplay","styliseChapter","chap","res","has","defaultAcademy","gameCanvas","defaultApplication","title","environment","Production","defaultDashboard","gradingSummary","defaultPlayground","usingSubst","createDefaultWorkspace","autogradingResults","editorPrepend","editorSessionId","editorValue","editorPostpend","editorTestcases","editorHeight","editorWidth","externalLibrary","replHistory","browseIndex","records","originalValue","replValue","sharedbAceInitValue","sharedbAceIsInviting","sideContentActiveTab","questionOverview","websocketStatus","globals","isEditorAutorun","isRunning","isDebugging","enableDebugging","debuggerContext","defaultWorkspaceManager","currentAssessment","currentQuestion","currentSubmission","playground","sourcecast","audioUrl","codeDeltasToApply","currentPlayerTime","description","inputToApply","playbackData","init","inputs","playbackDuration","playbackStatus","paused","sourcecastIndex","sourcereel","recordingStatus","notStarted","timeElapsedBeforePause","timeResumed","defaultSession","assessments","assessmentOverviews","grade","gradingOverviews","gradings","group","historyHelper","lastAcademyLocations","lastGeneralLocations","maxGrade","maxXp","role","story","playStory","completed_quests","collectibles","xp","defaultState","academy","application","dashboard","session","workspaces","SessionsReducer","state","payload","googleUser","helper","newAcademyLocations","isAcademyRe","exec","newGeneralLocations","newAssessments","newGradings","RegExp","AssessmentStatuses","GradingStatuses","AssessmentCategories","TestcaseTypes","QuestionTypes","overviewTemplate","category","Mission","closeAt","coverImage","openAt","reading","shortSummary","status","not_attempted","gradingStatus","programmingTemplate","roomId","content","external","symbols","graderLibrary","prepend","solutionTemplate","postpend","testcases","testcasesPrivate","mcqTemplate","choices","hint","solution","ControlBarChapterSelect","props","chapters","map","lang","displayName","chapterListRenderer","items","itemsParentRef","query","renderItem","defaultLangs","filter","item","variantLangs","ulRef","active","key","text","icon","chapterRenderer","handleClick","onClick","ChapterSelectComponent","Select","ofType","currentChap","currentVariant","handleSelect","e","disabled","className","Classes","MINIMAL","onItemSelect","itemRenderer","itemListRenderer","filterable","rightIcon","IconNames","DOUBLE_CARET_VERTICAL","chapterSelector","chapSelect","sourceChapter","sourceVariant","handleChapterSelect","defaultOptions","fullWidth","iconOnRight","intent","Intent","minimal","controlButton","label","options","opts","fill","ic","color","iconColor","ControlBarClearButton","REMOVE","handleReplOutputClear","ControlBarEvalButton","CODE","handleReplEval","ControlBarReturnToAcademyButton","ARROW_RIGHT","ControlBarNextButton","questionProgress","onClickReturn","onClickNext","ControlBarPreviousButton","ARROW_LEFT","ControlBarQuestionViewButton","ControlBarResetButton","REPEAT","ControlBarRunButton","PLAY","handleEditorEval","ControlButtonSaveButton","saveButtonOpts","WARNING","FLOPPY_DISK","onClickSave","React","converter","Converter","tables","simplifiedAutoLink","strikethrough","tasklists","openLinksInNewWindow","classNames","RUNNING_TEXT","dangerouslySetInnerHTML","__html","makeHtml","SideContentCanvasOutput","$parent","componentDidMount","this","appendChild","canvas","hidden","render","ref","r","SideContentAutograderCard","evalSelf","handleTestcaseEval","isEvaluated","testcase","isEqual","extraClasses","correct","wrong","private","elevation","Elevation","ONE","INTERACTIVE","program","parseError","ShapeDrawn","$canvas","renderResult","SideContentResultCard","isCorrect","resultType","expected","error","errorType","errorExplanation","join","actual","SideContentAutograder","constructor","super","toggleTestcases","setState","showTestcases","toggleResults","showResults","testcasesHeader","CARET_DOWN","resultsHeader","length","results","collapseButton","isOpen","toggleFunc","CARET_RIGHT","SideContentToneMatrix","$container","shouldComponentUpdate","ToneMatrix","initialise_matrix","handleClear","clear_matrix","handleRandomise","randomise_matrix","DARK","BUTTON_GROUP","beforeNow","dateString","date","moment","now","isBefore","getPrettyDate","format","history","createBrowserHistory","basename","notification","Toaster","create","position","Position","TOP","showSuccessMessage","message","timeout","show","SUCCESS","showWarningMessage","showMessage","dismiss","assessmentCategoryLink","cat","Sidequest","toLowerCase","stringParamToInt","num","parseInt","Number","isInteger","ControlBar","editorButtons","flowButtons","replButtons","externalLibrariesDocumentation","shortenCaption","substring","MAX_CAPTION_LENGTH","lib","names","libDocs","SourceDocumentation","ext_lib","caption","meta","docHTML","builtinDocumentation","Object","entries","builtins","forEach","chapterDoc","docs","entry","info","Documentation","useMergedRef","refs","element","current","useInput","defaultValue","setValue","useState","inputProps","onChange","event","keyBindings","evaluate","win","mac","navigate","refactor","highlightScope","typeInferenceDisplay","useHighlighting","inProps","outProps","reactAceRef","markerIdsRef","editorValueRef","handleVariableHighlighting","setTimeout","editor","chapterNumber","getCursorPosition","bgTokenizer","removeMarker","ranges","getAllOccurrencesInScope","AceRange","start","end","range","addMarker","handleHighlightScope","getScope","push","prevOnChange","onCursorChange","prevOnCursorChange","args","useNavigation","handleDeclarationNavigate","externalUrl","handleNavigate","pos","selection","getCursor","token","getTokenAt","url","textbook","ext","newPos","hasDeclaration","some","node","test","open","useRefactor","sourceLocations","getSelection","Range","addRange","XMLHttpReadyState","XMLHttpStatus","checkSessionIdExists","handleConnectionOK","handleSessionIdNotFound","handleCannotReachServer","xmlhttp","XMLHttpRequest","onreadystatechange","readyState","DONE","OK","JSON","parse","responseText","shareDBServer","send","useShareAce","handleEditorValueChange","handleFinishInvite","handleSetWebsocketStatus","handleStartCollabEditing","ShareAce","sharedbAce","WsUrl","pluginWsUrl","namespace","on","add","WS","interval","sessionIdNotFound","clearInterval","close","cannotReachServer","reconnect","setInterval","addEventListener","shareAce","useTypeInference","handleSendReplInputToOutput","handleTypeInferenceDisplay","getTypeInformation","split","st","commentEveryLine","handlers","goGreen","EditorBase","forwardedRef","handleEditorUpdateBreakpointsRef","handleEditorUpdateBreakpoints","handlePromptAutocompleteRef","handlePromptAutocomplete","HighlightRulesSelector","ModeSelector","getSession","domEvent","indexOf","isFocused","clientX","getBoundingClientRect","left","getDocumentPosition","getLine","getBreakpoints","includes","clearBreakpoint","setBreakpoint","stop","annotations","getAnnotations","count","anno","setAnnotations","makeHandleAnnotationChange","acequire","setCompleters","getCompletions","prefix","charAt","newCursorPosition","clearSelection","moveCursorToPosition","renderer","showCursor","scrollCursorIntoView","handleUpdateHasUnsavedChanges","newCode","delta","keyHandlers","aceEditorProps","editorProps","$blockScrolling","Infinity","markers","lineNums","startRow","startCol","endRow","endCol","fontSize","highlightActiveLine","mode","theme","width","setOptions","enableBasicAutocompletion","enableLiveAutocompletion","fontFamily","hooks","hook","commands","_","bindKey","Editor","McqChooser","onButtonClickFactory","mcqOption","handleMCQSubmit","mcq","hintElement","getButtonIntent","currentOption","chosenOption","correctOptionSelected","DANGER","choice","ReplInput","replInputBottom","execBrowseHistoryDown","execBrowseHistoryUp","execEvaluate","handleBrowseHistoryDown","handleBrowseHistoryUp","scrollIntoView","componentDidUpdate","clientWidth","innerWidth","handleReplValueChange","minLines","maxLines","showGutter","showPrintMargin","Repl","cards","slice","Output","style","CARD","ELEVATION_0","consoleLogs","Array","potentialTabs","currentlyActiveTabsLabel","SideContent","tabs","defaultSelectedTabId","handleActiveTabChange","dynamicTabs","setDynamicTabs","useSelector","allActiveTabs","spawnedTabs","tab","toSpawn","getDynamicTabs","generateIconId","tabId","renderedTabs","tabTitle","iconName","iconSize","tabBody","body","tabPanel","panel","renderTab","changeTabsCallback","newTabId","prevTabId","resetAlert","iconId","document","getElementById","classList","remove","renderActiveTabPanelOnly","selectedTabId","Workspace","editorDividerDiv","leftParentResizable","maxDividerHeight","sideDividerDiv","toggleEditorDividerDisplay","_a","_b","editorWidthPercentage","updateSize","marginRight","toggleDividerDisplay","clientHeight","resizableHeight","rightParentHeight","parentNode","createWorkspaceInput","customEditor","mcqProps","sideContent","sideContentProps","resizableSideContent","sideContentResizableProps","controlBarProps","editorResizableProps","sideContentIsResizeable","replProps","enable","rightResizeOnly","minWidth","onResize","onResizeStop","_c","diff","handleEditorWidthChange","size","as","bounds","bottomResizeOnly","handleSideContentHeightChange","sideContentHeight","top","right","bottom","topRight","bottomRight","bottomLeft","topLeft","AssessmentWorkspaceGradingResult","graderName","gradedAt","AssessmentWorkspace","NINJA","questions","BRIEFCASE","longSummary","briefing","AIRPLANE","autograder","isGraded","grader","TICK","GRID_VIEW","toneMatrix","listingPath","assessmentWorkspacePath","toString","onClickProgress","deferredNavigate","blockedQuestionId","qn","question","programming","reduce","acc","clearButton","evalButton","nextButton","Path","previousButton","questionView","resetButton","showResetTemplateOverlay","closeDate","handleSave","showOverlay","handleAssessmentFetch","notAttempted","checkWorkspaceReset","Spinner","SIZE_LARGE","overlay","closeOverlay","resetTemplateOverlay","ERROR","isCloseButtonShown","onClose","DIALOG_BODY","DIALOG_FOOTER","workspaceProps","handleEditorHeightChange","option","storedAssessmentId","storedQuestionId","questionData","handleUpdateCurrentAssessmentId","handleResetWorkspace","handleClearContext","AssessmentWorkspaceContainer","connect","bindActionCreators","changeEvent","val","handleInterruptEval","newValue","heightChange","handleDebuggerPause","handleDebuggerResume","handleDebuggerReset","col","ContentDisplay","loadContentDispatch","THREE","filterNotificationsByAssessment","n","submission_id","assessment_id","filterNotificationsBySubmission","filterNotificationsByType","assessmentType","assessment_type","NotificationTypes","makeNotificationMessage","new","deadline","autograded","submitted","unsubmitted","graded","new_message","NotificationBadge","notificationFilter","notificationIcon","round","large","disableHover","makeNotificationTag","multiline","onRemove","handleAcknowledgeNotifications","notificationTags","interactionKind","PopoverInteractionKind","HOVER","RIGHT","hoverOpenDelay","hoverCloseDelay","lazy","NotificationBadgeContainer","Assessment","toggleClosedAssessments","showClosedAssessments","toggleOpenAssessments","showOpenedAssessments","toggleUpcomingAssessments","showUpcomingAssessments","setBetchaAssessment","betchaAssessment","setBetchaAssessmentNull","handleSubmitAssessment","sortAssessments","sortBy","a","makeSubmissionButton","overview","attempted","CONFIRM","makeAssessmentInteractButton","optionalLabel","attempting","EDIT","EYE_OPEN","to","makeOverviewCard","renderAttemptButton","renderGradingStatus","alt","src","defaultCoverImage","makeOverviewCardTitle","TIME","ellipsize","makeGradingStatus","isStudent","match","params","assessmentWorkspaceProps","FLAME","isOverviewUpcoming","upcomingCards","isOverviewOpened","openedCards","closedCards","upcomingCardsCollapsible","openedCardsCollapsible","closedCardsCollapsible","submissionText","betchaText","betchaDialog","handleAssessmentOverviewFetch","tooltip","none","CROSS","DISABLE","PRIMARY","AssessmentContainer","withRouter","assessmentCategory","Student","assessmentRegExp","fetchGroupGradingSummary","updateGroupGradingSummary","Dashboard","columnDefs","defaultColumnDefs","gridApi","handleFetchGradingSummary","onGridReady","api","resizeGrid","sizeColumnsToFit","headerName","field","sort","resizable","sortable","prevProps","setRowData","grid","domLayout","defaultColDef","onFirstDataRendered","onGridSizeChanged","rowData","rowHeight","suppressMovableColumns","DashboardContainer","FontAssets","zektonFont","pngPath","fntPath","alienCowsFont","alienLeagueFont","educatedDeersFont","pixelFont","Color","navy","lightBlue","offWhite","white","darkGrey","lightGrey","blue","darkBlue","orange","yellow","red","maroon","black","purple","paleYellow","HexColor","Direction","calcTableFormatPos","direction","Row","numOfItems","maxXSpace","screenSize","x","maxYSpace","y","numItemLimit","redistributeLast","itemsPerList","numOfLists","Math","ceil","itemNumber","itemIndexInList","listIndex","floor","indexToCoordinate","screenSpace","listSpace","maxItems","partitionSpace","calcListFormatPos","xSpacing","ySpacing","repoAssetsFolder","assetsFolder","fadeDuration","nullFunction","nullInteractionId","nullSequenceNumber","popupDuration","defaultAssetPath","defaultFontStyle","align","Phaser","GameObjects","BitmapText","ALIGN_CENTER","screenCenter","Layer","defaultLayerSequence","Background","Selector","Collectibles","Objects","BBox","Character","Speaker","PopUp","Dialogue","SpeakerBox","UI","Effects","Escape","musicFadeOutTween","volume","ease","GameSoundType","SoundAssets","buttonHover","path","config","soundType","SFX","buttonClick","radioButtonClick","dialogueAdvance","popUpEnter","popUpExit","menuEnter","menuExit","modeEnter","notifEnter","notifExit","galacticHarmony","loop","BGM","DialogueConstants","promptSize","promptPadding","rect","dialogueRectMargin","textPadding","speakerTextConfig","oriX","oriY","textTypeWriterStyle","lineSpacing","wordWrap","speakerTextStyle","ImageAssets","shortButton","mediumButton","longButton","topButton","speechBox","speakerBox","defaultLocationImg","locationPreviewFrame","locationPreviewFill","talkOptButton","talkOptCheck","modeMenuBanner","popUpFrame","mediumBox","diamond","arrow","cookies","scrollFrame","escapeMenuBackground","awardsMenu","awardsBanner","awardsPageChosen","awardsPage","awardsBackground","chapterSelectBackground","chapterRepeatButton","chapterContinueButton","chapterSelectFrame","chapterSelectBorder","chapterSelectArrow","mainMenuBackground","mainMenuOptBanner","settingBackground","settingBanner","settingOption","verifiedFrame","bindingsBackground","squareKeyboardIcon","medKeyboardIcon","sleep","ms","Promise","resolve","limitNumber","min","max","toS3Path","fileName","mandatory","object","errorMsg","fadeOut","targets","duration","alpha","fadeIn","fadeAndDestroy","scene","tween","destroy","blackFade","async","delay","fadeBlack","Rectangle","blackScreen","layerManager","addToLayer","setAlpha","tweens","blink","gameObject","Typewriter","textStyle","typeWriterInterval","textSprite","Text","typeWriting","charPointer","container","changeLine","DialogueRenderer","typewriterStyle","typewriter","dialogueBox","blinkingDiamond","gameManager","GameGlobalAPI","getInstance","getGameManager","Image","setInteractive","useHandCursor","pixelPerfect","dialogueConstants","createTypewriter","drawDiamond","getDialogueContainer","Container","diamondSprite","setDisplaySize","clearBlink","getDialogueBox","off","Input","Events","GAMEOBJECT_POINTER_UP","changeText","createBitmapText","setTintFill","setOrigin","notifStyle","notifTextConfig","GamePhaseType","GameStateStorage","UserStateTypes","StateChangeType","instance","setGameManager","gameManagerRef","getCurrLocId","currentLocationId","getLocationAtId","locationId","getCurrentCheckpoint","getModesByLocId","stateManager","getLocationMode","addLocationMode","removeLocationMode","hasLocationUpdateAttr","attr","hasLocationUpdateMode","locationName","changeLocationTo","hasTriggeredInteraction","triggerInteraction","consumedLocationUpdate","getLocationAttr","addLocationAttr","attrElem","removeLocationAttr","subscribeState","observer","subscribe","unsubscribeState","unsubscribe","makeObjectGlow","objectId","turnOn","objectManager","makeObjectBlink","getObjPropertyMap","setObjProperty","newObjProp","enableObjectAction","callbacks","disableObjectAction","getBBoxPropertyMap","setBBoxProperty","newBBoxProp","enableBBoxAction","boundingBoxManager","disableBBoxAction","isAllComplete","isObjectiveComplete","areObjectivesComplete","completeObjective","addToUserStateList","listName","userStateManager","addToList","doesIdExistInList","clearSeveralLayers","layerTypes","addContainerToLayer","layer","gameObj","fadeInLayer","fadeOutLayer","dialogueRenderer","notifText","SourceAcademyGame","getSoundManager","playSound","showNotification","displayNotification","actionIds","phaseManager","pushPhase","Sequence","actionManager","processGameActions","popPhase","dialogueId","dialogueManager","showDialogue","getDialogue","getDialogues","collectibleId","displayPopUp","itemId","popUpManager","destroyAllPopUps","destroyPopUp","getSaveManager","saveGame","settingsJson","saveSettings","getLoadedUserState","soundKey","playBgMusic","stopAllSound","pauseCurrBgMusic","continueCurrBgMusic","applySoundSettings","userSettings","applyUserSettings","loadSounds","soundAssets","enableKeyboardInput","inputManager","enableMouseInput","gamePhaseType","swapPhase","isCurrentPhase","renderBackgroundLayerContainer","backgroundManager","hideCharacterFromMap","characterId","characterManager","showCharacterOnMap","createCharacterSprite","overrideExpression","overridePosition","getCharacterById","GameActionType","GameLocationAttr","GameActionManager","actionMap","getActionFromId","actionId","initialise","getActions","processGameAction","actionType","actionParams","actionConditions","isRepeatable","interactionId","checkCanPlayAction","globalAPI","LocationChange","ChangeBackground","ObtainCollectible","obtainCollectible","CompleteObjective","AddItem","RemoveItem","AddLocationMode","RemoveLocationMode","BringUpDialogue","showDialogueInSamePhase","AddPopup","MakeObjectBlink","MakeObjectGlow","PlayBGM","PlaySFX","executeGameAction","all","checkConditionSatisfied","actionCondition","every","condition","conditional","conditionParams","boolean","UserState","existsInUserStateList","ChecklistState","checkAllConditionsSatisfied","GameBoundingBoxManager","observerId","bboxes","notify","changeType","hasUpdate","boundingBoxes","currLocationId","handleBBoxChange","renderBBoxLayerContainer","bboxIdsToRender","clear","handleAdd","bbox","activate","deactivate","createBBox","bboxProperty","bboxSprite","isInteractive","sprite","onPointerout","onHover","Add","Mutate","handleMutate","Delete","handleDelete","bboxProp","resize","obj","ratio","displayHeight","displayWidth","resizeOverflow","resizeUnderflow","CharConstants","charWidth","charRect","Left","Middle","Right","CharacterManager","characterMap","characterSpriteMap","charId","getCharacters","characters","handleCharacterChange","renderCharacterLayerContainer","idsToRender","character","defaultPosition","defaultExpression","expressions","characterXPosition","assetKey","characterSprite","char","DialogueGenerator","dialogueContent","currPart","currLineNum","next","generateNextLine","dialogueLine","goto","GamePosition","StringUtils","lines","paragraphHeaderAndBodyLines","startsWith","console","trim","isHeaderFunction","currHeader","sep","limit","currWord","letter","phrase","trimRight","word","capitalize","DialogueSpeakerRenderer","username","currentSpeakerId","changeSpeakerTo","newSpeakerDetail","hidePreviousSpeaker","showNewSpeaker","previousSpeakerId","drawSpeakerSprite","drawSpeakerBox","speakerId","speakerContainer","createSpeakerBox","speakerPosition","expression","speakerSprite","rectangle","speakerText","DialogueManager","dialogueMap","speakerRenderer","dialogueGenerator","getDialogueGenerator","getDialogueRenderer","getSpeakerRenderer","getAccountInfo","dialogue","playWholeDialogue","showNextLine","speakerDetail","lineWithName","replace","processGameActionsInSamePhase","barX","barWidth","barY","innerBarX","innerBarY","addLoadingScreen","progressBar","progressBox","load","graphics","fillStyle","fillRect","barHeight","GameLayerManager","mainLayer","layers","existing","layerType","layerContainer","getLayer","hideLayer","layerToHide","setVisible","showLayer","layerToFadeIn","layerToFadeOut","clearLayerContents","clearAllLayers","GlowingImage","imageGlow","clickArea","glowClearer","blinkClearer","image","setTint","startGlow","clearGlow","startBlink","getContainer","getClickArea","GameObjectManager","objects","handleObjectChange","renderObjectsLayerContainer","objIdsToRender","createObject","objectProperty","objectProp","popUpYPos","popUpConstants","imgXOffset","imgYOffset","tweenDuration","GamePopUpManager","currPopUp","popUpFrameImg","getAssetKey","popUpImage","setActive","setScale","scaleY","scrollEntry","popUp","atPosContainer","scrollExit","delete","objProp","getObjects","GameMode","gameModeToPhase","Move","Explore","Talk","Menu","GameObjective","objective","totalNumOfObjectives","numOfCompletedObjectives","setObjective","prevState","addObjective","addObjectives","getObjectiveState","getObjectives","setObjectives","mapToJsObject","jsObject","jsObjectToMap","locationStatesToJson","locationStates","location","locationWithArrays","locationProperty","Set","from","GameStateManager","subscribers","checkpoint","checkpointObjective","locationHasUpdate","objectPropertyMap","bboxPropertyMap","triggeredInteractions","getLocationById","locId","update","obs","updateLocationStateMode","targetLocId","updateLocationStateAttr","navigation","talkTopics","attrId","currLocId","checkLocationsExist","locIds","gameSaveState","getLoadedGameStoryState","objectives","loadFromGameStoryState","loadNewGameStoryState","values","chapterObjective","locationWithSets","jsonToLocationStates","getLocations","getBBoxes","modes","oldAttr","isComplete","getLocationStates","getCheckpointObjectives","getTriggeredInteractions","AcademyReducer","DashboardReducer","PlaygroundReducer","queryString","shortURL","persistenceFile","WorkspaceReducer","lastOutput","sourcecastState","playerTime","deltas","SourcecastReducer","sourcereelState","initData","input","timeNow","recording","timeBefore","finished","SourcereelReducer","newIndex","newRecords","lastRecords","lastIndex","parseFloat","newReplHistoryRecords","pop","updatedLastOutput","playgroundWorkspace","ApplicationReducer","createRootReducer","combineReducers","router","connectRouter","finishInvite","initInvite","invalidEditorSessionId","setEditorSessionId","setWebsocketStatus","saveCanvas","changeDateAssessment","deleteAssessment","publishAssessment","togglePublishTo","uploadAssessment","file","forceUpdate","persistenceOpenPicker","persistenceSaveFile","persistenceSaveFileAs","persistenceInitialise","generateLzString","shortenURL","keyword","updateShortURL","toggleUsingSubst","changeQueryString","playgroundUpdatePersistenceFile","fetchSourcecastIndex","updateSourcecastIndex","saveSourcecastData","audio","URL","createObjectURL","setCurrentPlayerTime","setCodeDeltasToApply","setInputToApply","setSourcecastData","setSourcecastDuration","setSourcecastStatus","deleteSourcecastEntry","recordInit","recordInput","resetInputs","timerPause","Date","timerReset","timerResume","timerStart","timerStop","actions","CommonsActions","CollabEditingActions","DashboardActions","InterpreterActions","PlaygroundActions","SessionActions","SourcecastActions","SourceRecorderActions","SourcereelActions","WorkspaceActions","GroundControlActions","AcademyActions","PersistenceActions","mockAssessmentOverviews","excluded","Practical","mockGlobals","b","mockSoundLibrary","mockRuneLibrary","mockCurveLibrary","mockToneMatrixLibrary","mockAssessmentQuestions","public","score","mockClosedAssessmentQuestions","errorLine","mockPathQuestions","mockAssessments","missionPDF","Roles","mockFetchRole","trainer","mockNotifications","assessment_title","mockGradingOverviews","assessmentName","currentGrade","currentXp","xpBonus","initialGrade","initialXp","studentId","studentName","submissionStatus","groupName","questionCount","gradedCount","mockGrading","student","mockGradingSummary","leaderName","ungradedMissions","submittedMissions","ungradedSidequests","submittedSidequests","mockBackendSaga","takeEvery","store","put","select","call","permittedRoles","admin","subX","subY","mockFetchGradingOverview","mockFetchGrading","newQuestions","newAssessment","findIndex","newOverviews","sendGrade","newGrading","gradingQuestion","notificationsToAcknowledge","ids","newNotifications","computeRedirectUri","ep","port","protocol","hostname","encodeURIComponent","BackendSaga","payloadProviderId","find","clientId","searchParams","getClientId","redirectUrl","tokens","postAuth","getUser","getAssessmentOverviews","getAssessment","resp","postAnswer","codes","ok","handleResponseError","postAssessment","getGradingOverviews","getGrading","request","noHeaderAccept","shouldAutoLogout","shouldRefresh","postUnsubmit","postGrading","getNotifications","postAcknowledgeNotifications","getSourcecastIndex","postSourcecast","groupOverviews","getGradingSummary","respMsg","LoginSaga","updateLoginHref","epUrl","computeEndpointUrl","href","ConfirmDialog","buttons","onResponse","largeButtons","escapeResponse","escapeHandler","canEscapeKeyClose","contents","DIALOG_FOOTER_ACTIONS","PromptDialog","enterResponse","validationFunction","inputRef","isValid","setIsValid","returnResponse","buttonResponse","disableOnInvalid","handleEnter","keyCode","handleValidate","autoFocus","onKeyDown","DialogHelper","dialog","dialogOnClose","containerElement","createElement","dialogHelper","ReactDOM","singleton","closeDialog","promisifyDialog","DialogComponent","propFn","reject","finally","showSimpleConfirmDialog","showConfirmDialog","negativeLabel","positiveLabel","showSimplePromptDialog","DISCOVERY_DOCS","UPLOAD_PATH","startInitialisation","initialisationPromise","then","gapi","onerror","client","apiKey","discoveryDocs","scope","auth2","getAuthInstance","currentUser","listen","handleUserChanged","isSignedIn","getBasicProfile","getEmail","ensureInitialised","ensureInitialisedAndAuthorised","signIn","pickFile","pickFolders","showFolders","showFiles","view","google","picker","DocsView","ViewId","DOCS","FOLDERS","rootFolder","setParent","setOwnedByMe","setIncludeFolders","setSelectFolderEnabled","setMode","DocsViewMode","LIST","PickerBuilder","setTitle","enableFeature","Feature","NAV_HIDDEN","addView","setOAuthToken","getAuthResponse","access_token","setAppId","setDeveloperKey","setCallback","data","Response","ACTION","Action","PICKED","mimeType","parentId","picked","CANCEL","build","createFile","filename","parent","parents","appProperties","source","headers","createMultipartBody","method","uploadType","updateFile","contentsMime","metaJson","boundary","generateBoundary","random","persistenceSaga","takeLatest","toastKey","drive","files","fileId","fields","lastSaved","v","ex","pickedDir","saveToDir","pickedFile","response","newFile","PlaygroundSaga","updateQueryString","hasTimedOut","race","shortenURLRequest","shorturl","codeString","newQueryString","qs","prgrm","compressToEncodedURIComponent","signature","fetchOpts","formData","k","append","FormData","fetch","json","lastNonDetResult","WorkspaceSaga","checkWebGLAvailable","loadedScripts","getReadyWebGLForCanvas","tempvalue","exploded","externalSymbols","evalCode","blockExtraMethods","autocompleteCode","prependLength","editorNames","displaySuggestions","getNames","editorSuggestions","chapterName","builtinSuggestions","extLib","extLibSuggestions","break","blockKey","unblockKey","restorer","removed","getRestoreExtraMethodsString","restoreExtraMethods","interrupted","runInContext","scheduler","originalMaxExecTime","take","interrupt","InterruptedError","nodes","evalTestCode","newChapter","oldVariant","newVariant","oldChapter","newExternalLibraryName","oldExternalLibraryName","loadLib","runes","phaser","findDeclaration","updateInspector","EnvVisualizer","draw_env","visualiseEnv","toBeBlocked","storeValues","toRemove","getStoreExtraMethodsString","nullifier","debuggerOn","substIsActive","substActiveAndCorrectChapter","executionMethod","substVisualizer","wasm_compile_and_run","wasmCode","wasmContext","Sourceror","wasmModule","returnedValue","isNonDet","isLazy","isWasm","resume","TRY_AGAIN","useSubst","call_variant","manualToggleDebugger","oldErrors","parsed","typeErrors","typeCheck","validateAndAnnotate","idx","success","MainSaga","fork","PersistenceSaga","sagaMiddleware","createSagaMiddleware","middleware","routerMiddleware","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","serialize","maxAge","compose","initialStore","loadedStore","playgroundEditorValue","playgroundIsEditorAutorun","playgroundExternalLibrary","playgroundSourceChapter","playgroundSourceVariant","loadStore","serializedState","localStorage","getItem","decompressed","decompressFromUTF16","err","loadStoredState","enhancers","applyMiddleware","createdStore","_createStore","run","throttle","stateToBeSaved","serialized","compressToUTF16","setItem","saveState","getState","createStore","appHistory","redirectUri","provider","client_id","redirect_uri","errorMessage","refresh_token","capitalise","computeGradingStatus","back","password","q","eval","gradingOverview","adjustment","notificationIds","noContentType","chapterno","Headers","newTokens","postRefresh","numGraded","numQuestions","createButton","textConfig","bitMapTextStyle","onDown","onUp","onOut","onPointerMove","onHoverEffect","onClickSound","onHoverSound","button","Sprite","addListener","GAMEOBJECT_POINTER_OVER","GAMEOBJECT_POINTER_OUT","GAMEOBJECT_POINTER_DOWN","GAMEOBJECT_POINTER_MOVE","pointer","localX","localY","userStateStyle","GameUserStateManager","userState","getUserState","getList","isGameType","GameType","Simulator","askAssessmentComplete","assessmentCheckContainer","activateAssessmentContainer","setPosition","achievements","entryTweenProps","exitTweenProps","pageBannerTextStyle","ALIGN_LEFT","listBannerTextStyle","awardTitleStyle","awardKeyStyle","awardDescStyle","previewXPos","previewYPos","AwardsConstants","backButtonYPos","pageYStartPos","pageYSpacing","pageTextXPos","listYStartPos","listYSpacing","listTextXPos","previewDim","previewTitleTextConfig","previewKeyTextConfig","previewDescTextYOffset","arrowDownYPos","arrowXMidPos","arrowXOffset","arrowXScale","arrowYScale","itemsPerPage","getAwardProps","awardKeys","getAwardProp","awardKey","getAwardsMapping","AwardPage","GameAwardsManager","uiContainer","previewContainer","itemsContainer","pageChosenContainer","currActivePage","activePageNumber","getScene","getLayerManager","getPhaseManager","getUserStateManager","page","pageName","setPage","createItemsContainer","bannerPos","getPageOptPositions","chosenIdx","pg","bannerChosen","awardsConstants","setPreview","createUIContainer","awardContainer","blackUnderlay","awardBg","pageOptButtons","pageOptButtonPositions","createPageOpt","backButton","AwardMenu","arrowLeft","nextPage","setRotation","PI","arrowRight","award","previewSprite","previewTitle","previewKey","previewDesc","currPageNum","newPageNum","MAX_SAFE_INTEGER","getItems","xPos","yPos","itemPositions","awardProp","createItemButton","pageNum","Achievements","itemList","itemStartIdx","GameBackgroundManager","renderBackgroundImage","backgroundAsset","CommonRadioButton","defaultChoiceIdx","radioChoiceConfig","circleDim","checkedDim","outlineThickness","choiceTextConfig","bitmapTextStyle","buttonClickSoundKey","activeChoice","activeChoiceIdx","buttonPositions","getRadioButtons","renderRadioButtons","buttonPos","createRadioButton","Ellipse","setStrokeStyle","choiceText","optionChecked","getValueIdx","getChoices","getChosenChoice","optionTextStyle","optionHeaderTextStyle","applySettingsTextStyle","settingsConstants","optHeaderTextConfig","optXSpace","optYSpace","optXPos","volContainerOpts","escapeOptButtonStyle","volumeRadioOptTextStyle","optTextStyle","escapeConstants","buttonYPos","escapeOptTextConfig","settingsTextConfig","settingsYOffset","settingsYSpace","radioChoiceTextConfig","radioButtonsXSpace","volOptXPos","volOptYPos","GameEscapeManager","bgmVolumeRadioButtons","sfxVolumeRadioButtons","getSettingsSaveManager","getInputManager","escapeMenuContainer","escapeMenuBg","settings","getSettings","settingsPos","Column","setting","bgmVolume","sfxVolume","sfxVolIdx","bgmVolIdx","createSettingsRadioOptions","getOptButtons","createEscapeOptButton","cleanUp","EscapeMenu","applySettings","sfxVol","bgmVol","clearListeners","activateUI","deactivateUI","GameInputManager","keyboardListeners","eventListeners","mouse","enabled","keyboard","registerKeyboardListener","keyboardListener","addKey","registerEventListener","eventListener","removeAllListeners","GamePhaseManager","phaseMap","phaseStack","phaseTransitionCallback","None","fn","prevPhase","executePhaseTransition","getCurrentPhase","newPhase","phase","backTextYPos","backButtonStyle","CommonBackButton","renderBackButton","magnifyingGlass","magnifyingGlassHighlight","magnifyingGlassChecked","GameModeExplore","exploreMenuContainer","explorePointerUp","explorePointerOver","explorePointerOut","setDefaultCursor","modeButtonStyle","modeMenuConstants","buttonYPosOffset","GameModeMenu","getLatestLocationModes","latestModesInLoc","modeMenuContainer","modeBanner","getModeButtons","createModeButton","moveButtonStyle","modeMoveConstants","buttonYSpace","buttonXPosOffset","previewFrameXPos","previewWidth","previewHeight","GameModeMove","previewMask","setTexture","getLatestNavigations","moveMenuContainer","Graphics","previewFrame","previewFill","setMask","createGeometryMask","navigations","getMoveButtons","createMoveButton","previewLoc","previewDefault","nav","GameModeSequence","talkButtonYSpace","talkButtonStyle","GameModeTalk","getLatestTalkTopics","talkMenuContainer","getTalkTopicButtons","createTalkTopicButton","checkedSprite","dialogueIds","GameManager","Scene","currentCheckpoint","saveManager","escapeManager","awardsManager","GameCharacterManager","GameDialogueManager","GameBBoxManager","gameCheckpoint","continueGame","chapterNum","checkpointNum","setCurrentSceneRef","registerGameInfo","preload","escapeMenu","awardMenu","getLoadedLocation","startingLoc","checkpointTransition","preloadLocationsAssets","bindKeyboardTriggers","getSoundAssets","getMapAssets","assetPath","loadAssessments","loadAchievements","startAction","gameLocation","bgmKey","getStartActions","bringUpUpdateNotif","renderLocation","Keyboard","KeyCodes","ESC","TAB","transitionToNextCheckpoint","getEndActions","GameSaveManager","fullSaveState","getChapterNum","getCheckpointNum","getFullSaveState","gameSaveStates","userSaveState","recentlyPlayedCheckpoint","largestCompletedChapter","createHeaders","loadedData","gameStates","isEmpty","loadData","Game","getCurrentSceneRef","prevGameState","gameStateManager","gameStoryState","currentLocation","currentPhase","lastCheckpointPlayed","gameStateToJson","saveData","completedChapter","getLargestCompletedChapterNum","userSettingsToJson","getLoadedPhase","AwardsHallConstants","defaultScrollSpeed","itemPerCol","tileDim","maxAwardsPerCol","awardsXSpacing","awardYStartPos","awardYSpace","awardDim","hoverWidth","bannerXOffset","bannerTextConfig","awardBannerTextStyle","awardHoverTitleStyle","awardHoverKeyStyle","awardHoverDescStyle","AwardsHall","backgroundTile","awardsContainer","isScrollLeft","isScrollRight","scrollLim","awardXSpace","achievementLength","collectibleLength","renderBackground","renderAwards","newXPos","tilePositionX","TileSprite","banners","banner","bannerCont","createBanner","leftArrow","rightArrow","getAwards","achievementsPos","achievement","createAward","collectiblesPos","collectible","awardCont","hoverCont","hoverContainer","awardTitle","awardAssetKey","getBounds","awardDesc","hoverTextBg","scrollFrameTop","scrollFrameBot","createAwardsHoverContainer","bannerContainer","bannerBg","bannerText","bindingConstants","keyTextConfig","keyDescTextConfig","keyIconXPos","keyStartYPos","keyYSpacing","keyStyle","keyDescStyle","Bindings","renderBindings","background","blackOverlay","bindingsContainer","bindings","getBindings","bindingPositions","binding","createBinding","desc","bindingContainer","keyIcon","keyText","keyDesc","loadImage","textures","once","loadText","cache","exists","chapterIndexStyle","chapterTitleStyle","chapterActionAltStyle","chapConstants","buttonsYOffset","buttonsXOffset","frameXOffset","frameYOffset","indexTextConfig","titleTextConfig","maskRect","marginX","marginY","imageRect","imageDist","imageRectWidth","CommonTextHover","renderTextHover","hoverText","toTxtPath","TextAssets","defaultCheckpoint","awardsMapping","GameMap","mapAssets","locations","gameStartActions","checkpointCompleteActions","addSoundAsset","soundAsset","addMapAsset","addLocation","setModesAt","setNavigationFrom","getNavigationFrom","setGameStartActions","setCheckpointCompleteActions","addItemToMap","setItemAt","setBGMusicAt","stringToPositionMap","middle","stringToGameModeMap","talk","explore","move","menu","stringToLocAttrMap","stringToActionTypeMap","move_character","MoveCharacter","update_character","UpdateCharacter","obtain_collectible","complete_objective","change_location","add_item","remove_item","change_background","show_dialogue","add_mode","remove_mode","add_popup","make_object_glow","make_object_blink","play_bgm","play_sfx","stringToGameStateStorageMap","checklist","userstate","stringToUserStateMap","ParserConverter","GameAttr","ParserValidator","locAttrAssertions","attrAssertions","assertLocAttr","locAttr","assertAttr","gameAttr","assertLocAttrs","itemIds","verifyAssertions","verifyLocAttrAssertions","verifyAttrAssertions","assertionDetails","gameLocationAttr","assertionDetail","Parser","actionAssertionError","bgms","numberOfBgm","sound","sfxs","numberOfSfx","attribute","ActionParser","fullActionStrings","fullActionString","parseAction","rawActionString","actionString","conditionalsString","splitByChar","gameAction","parseActionContent","conditionDetails","hasExclamation","gameStateStorage","condParams","stringToGameStateStorage","validator","actionParamString","repeatable","gameActionType","stringToActionType","actionParamObj","gameLocAttr","stringToLocAttr","stringToGameMode","stringToPosition","generateActionId","CharacterParser","characterList","characterDetails","parseCharacterDetails","addToLoc","characterAssetKey","characterAssetPath","SpeakerParser","rawStr","speakerPositionStr","addCharacterExprToMap","charExpression","isGotoLabel","isActionLabel","isSpeaker","MusicParser","soundList","musicDetails","musicIndex","actionIdNum","chapterText","continueParse","checkPointLines","splitToLines","splitToParagraph","header","parseCheckpointConfig","parseCheckpointParagraphs","locationBody","parseLocationConfig","parseLocationParagraphs","locationConfig","configValues","gameMode","otherLocationId","entityHeader","objectList","parseObjectConfig","parseActions","shortPath","objectDetails","objectAssetKey","objectPath","boundingBoxList","boundingBox","parseBBoxConfig","bboxDetails","bboxId","checkpointConfig","locationDetails","locationDetail","locationAssetKey","locationPath","dialogueText","dialogueDetails","dialogueBody","parseDialogue","parseDialogueContent","newMap","mapValues","mapByHeader","createDialogueLines","dialogueLines","currIndex","lastLine","nextLine","callGameManagerOnTxtLoad","getGameChapters","filenames","defaultCheckpointText","callGameManagerForSim","checkpointFilenames","getSSChapterSimFilenames","createChapter","imageUrl","lastCheckpointsIdx","chapterContainer","chapterPreview","chapterFrame","chapterRepeatHover","chapterContinueHover","chapterRepeat","worldX","worldY","chapterContinue","chapterIndexText","chapterTitleText","chapterDone","blackTint","ChapterSelect","backButtonContainer","loadedGameState","autoScrolling","preloadChapterAssets","renderChapters","autoScroll","chapterDetail","mask","createMask","createChapterContainer","Display","Masks","GeometryMask","border","chapterIndex","lastCheckpoint","chapterIdx","scrollToIndex","xTarget","transitionTextStyle","checkpointConstants","checkpointText","transitionTextConfig","entryTween","exitTween","CheckpointTransition","showTransitionText","chapterDetails","currChapter","currCheckpoint","isLastCheckpoint","saveChapterComplete","isLastChapter","transitionText","mainMenuStyle","ALIGN_RIGHT","mainMenuConstants","optionsText","studentRoom","awards","optXOffset","textXOffset","bannerHide","bannerShow","onFocusOptTween","outFocusOptTween","MainMenu","renderOptionButtons","backgroundImg","optionsContainer","getOptionButtons","createOptionButton","tweenOnHover","tweenOffHover","optButton","roomDefaultCode","verifiedStyle","roomConstants","getRoomPreviewCode","mission","progQn","getStudentRoomCode","RoomPreview","awardManager","studentCode","preloadImageMap","preloadSoundMap","verifCont","verifMask","getVerifCont","getVerifMask","getRoomCode","hoverTextFrame","hoverMask","originX","originY","onLoop","createVerifiedHoverContainer","remotePath","attachVerificationTag","Settings","renderOptions","settingBgImg","optCont","optHeader","getSettingsHeader","optHeaderPos","createOptionHeader","createOptRadioOptions","applySettingsButton","optHeaderCont","headerDiv","headerText","GameSoundManager","soundAssetMap","currBgMusicKey","currBgMusic","getBaseSoundManager","getCurrentScene","unlock","isPlaying","getSoundAsset","setVolume","asset","loadSound","loadSoundAssetMap","assetMap","vol","play","isMounted","fadeOutAndDestroyMusic","stopAll","pause","isPaused","sendRequest","route","requestPath","headerConfig","requestDetails","sendAssetRequest","sendStoryRequest","s3AssetFolders","fetchAssetPaths","folders","folderName","fetchFolder","combinedList","newList","uploadAssetsToS3","fileList","uploadAssetToS3","fetchChapters","updateChapterRequest","GameChapterMocks","AwardParser","assetText","assetLines","awardType","awardBody","parseAwardParagraphs","awardProperties","stringToUserState","EntryScene","preloadAssets","loadGameChapters","loadRoomCode","loadLastSaveState","preloadAwards","applyLoadedSettings","log","awardsMappingTxt","setAwardsMapping","awardInfo","bitmapFont","gameType","global","accountInfo","soundManager","currentSceneRef","ssChapterSimFilenames","getIsUsingMock","isUsingMock","roomCode","gameChapters","setStorySimState","stopAllSounds","setAccountInfo","setStorySimStateSetter","toggleUsingMock","setChapterSimStack","reverse","debug","physics","default","scale","FIT","isTestStudent","setIsTestStudent","setIsUsingMock","clearData","GradingEditGradingCell","activeClassName","ACTIVE","ANNOTATION","GradingGradeCell","LEFT","GradingStatusCell","GradingUnsubmitCell","handleConfirmUnsubmit","handleUnsubmitSubmission","isAlertOpen","handleUnsubmitAlertClose","Admin","canEscapeKeyCancel","canOutsideClickCancel","cancelButtonText","onConfirm","onCancel","GradingEditor","validateGradesBeforeSave","handleSaving","gradeAdjustmentInput","xpAdjustmentInput","onClickSaveAndContinue","currentlySaving","handleGradingSaveAndContinue","discardChanges","confirm","onGradeAdjustmentInputChange","valueAsNumber","valueAsString","onXpAdjustmentInputChange","generateMarkdownPreview","markdown","selectedTab","discardButtonOpts","saveAndContinueButtonOpts","totalGrade","totalXp","gradePlaceholder","xpPlaceholder","onValueChange","buttonPosition","placeholder","onTabChange","minEditorHeight","maxEditorHeight","minPreviewHeight","getIcon","blueprintIconProvider","handleGradingSave","TRASH","UPDATED","blueprintIcon","mdeToBlueprintIconMapping","htmlTitle","HEADER","BOLD","ITALIC","STRIKETHROUGH","LINK","CITATION","MEDIA","UNGROUP_OBJECTS","NUMBERED_LIST","SQUARE","HELP","GradingEditorContainer","GradingWorkspace","gradingWorkspacePath","handleGradingFetch","storedSubmissionId","handleUpdateCurrentSubmissionId","GradingWorkspaceContainer","unsavedChanges","GradingXPCell","Grading","GradingStatus","GradingMarks","NotificationBadgeCell","GradingExp","updatePaginationState","newTotalPages","paginationGetTotalPages","newCurrPage","paginationGetCurrentPage","currPage","maxPages","rowCountString","formatRowCountString","paginationGetRowCount","isBackDisabled","isForwardDisabled","pageSize","totalRows","handleFilterChange","changeVal","filterValue","handleFilterKeypress","handleApplyFilter","setQuickFilter","handleGroupsFilter","groupFilterEnabled","handleFetchGradingOverviews","exportCSV","exportDataAsCsv","toISOString","columnKeys","changePaginationView","paginationGoToFirstPage","paginationGoToPreviousPage","paginationGoToNextPage","paginationGoToLastPage","sortSubmissionsByNotifications","cellRendererFramework","suppressMovable","suppressMenu","suppressSizeToFit","maxWidth","valueFormatter","cellStyle","backgroundColor","Colors","GREEN5","RED5","comparator","valueA","valueB","nodeA","nodeB","isInverted","cellRendererParams","padding","colId","hide","loadingDisplay","labelFor","inline","leftIcon","onKeyPress","onBlur","GIT_REPO","CHEVRON_BACKWARD","CHEVRON_LEFT","CHEVRON_RIGHT","CHEVRON_FORWARD","EXPORT","onPaginationChanged","pagination","paginationPageSize","suppressPaginationPanel","GradingContainer","DeleteCell","handleCloseDialog","dialogOpen","handleOpenDialog","handleDeleteAssessment","canOutsideClickClose","dropZoneStyle","flex","flexDirection","alignItems","justifyContent","borderWidth","borderRadius","borderColor","borderStyle","outline","transition","MaterialDropzone","setFile","getRootProps","getInputProps","isDragActive","isDragAccept","isDragReject","useDropzone","onDrop","acceptedFiles","handleToggleOnChange","toggleDisplayConfirmation","toggleForceUpdate","handleConfirmForceUpdate","handleCancelForceUpdate","displayConfirmation","UPLOAD","handleUploadAssessment","DELETE","checked","EditCell","maxDate","setFullYear","dateInput","formatDate","handleDateChange","parseDate","forOpenDate","timePrecision","closeOnSelection","toLocaleString","selectedDate","handleUpdate","handleAssessmentChangeDate","fieldName","prettyOpenAt","prettyCloseAt","PublishCell","handlePublishAssessment","isPublished","lowerCaseText","toggleButton","GroundControl","sortByCategoryAndDate","assessmentOverview","clone","formattedOpenAt","formattedCloseAt","Grid","GroundControlContainer","ControlBarAutorunButtons","toggleAutorunButton","handleToggleEditorAutorun","autoRunButton","AUTOMATIC_UPDATES","stopButton","STOP","debuggerResetButton","pauseButton","resumeButton","ControlBarExternalLibrarySelect","iExternals","ExternalSelectComponent","externalRenderer","modifiers","currentExternal","handleExternalSelect","SideContentEnvVisualizer","tryToLoad","loading","sourceDocsChapter3_2","rel","SideContentInspector","SideContentListVisualizer","sourceDocsChapter2_2","SourceRecorderControlBar","handleSeeked","stopPreviousPlaybackAndApplyFromStart","handleAudioLoaded","handleSetSourcecastDuration","applyDeltas","handleSetCodeDeltasToApply","currentDeltaRevision","applyPlaybackDataFromStart","currentRevision","currentTime","deltaWithTime","time","futureData","len","handleSetInputToApply","handlePlayerPausing","handleSetEditorReadonly","handleSetSourcecastStatus","stopCurrentPlayback","handlePlayerPlaying","playing","handlePlayerStopping","handleSetCurrentPlayerTime","currentPlayerProgress","updatePlayerTime","handlePlayerProgressBarChange","renderLabel","totalTime","sec","currentSourcecastItem","PlayerPlayButton","PlayerPauseButton","PAUSE","onEnded","onLoadedMetadata","onSeeked","onTimeUpdate","stepSize","labelRenderer","SourcecastEditor","AceEditor","onChangeMethod","onSelectionChange","getMarkers","markerProps","lineNum","handleGutterClick","$breakpoints","handleAnnotationChange","handleEvaluate","isRecording","handleRecordInput","getTimerDuration","editorCursorPositionToBeApplied","getRange","isBackwards","getDocument","applyDelta","setRange","componentWillUnmount","readOnly","SourceRecorderDeleteCell","handleDeleteSourcecastEntry","SourceRecorderSelectCell","handleSetSourcecastData","SourcecastTable","onresize","valueGetter","getStandardDate","inserted_at","SourcastDeleteCell","handleFetchSourcecastIndex","SourcereelControlbar","recorder","updateTimerDuration","handleTruncatePlaybackData","truncatedInputs","handleResetInputs","handleRecorderPausing","handleTimerPause","updater","exportWAV","handleRecorderStarting","Recorder","handleRecordInit","handleTimerStart","handleRecorderResuming","handleTimerResume","handleRecorderResumingFromCurrent","handleRecorderStopping","handleTimerStop","fileDataBlob","handleRecorderResetting","handleTimerReset","handleRecorderSaving","handleSaveSourcecastData","saveTitle","saveDescription","handleSaveTitleInputChange","handleSaveDescriptionInputChange","getPermission","RecorderPauseButton","RecorderResumeButton","RecorderResumeFromCurrentButton","RecorderStartButton","RecorderStopButton","RecorderResetButton","REFRESH","RecorderSaveButton","popoverClassName","inheritDarkTheme","htmlFor","Sourcereel","autorunButtons","COMPASS","INTRODUCTION","introduction","listVisualizerTab","inspectorTab","envVisualizerTab","sourcecastControlbarProps","dataVisualiser","SEARCH","inspector","GLOBE","envVisualiser","SourcereelContainer","readonly","StorySimState","AssetFileUploader","setFileList","uploadFolder","setUploadFolder","folderOverwrite","setFolderOverwrite","showfolderOverwrite","setShowFolderOverwrite","handleChangeUploadFolder","innerText","BOTTOM","folder","multiple","loadedFiles","finalFolder","assetPathsToTree","assetPaths","iconRenderer","rootFolders","assetObj","parentFolders","secondaryLabel","childNodes","AssetViewer","memo","displayAssetPath","crossOrigin","toolIcons","filePath","deleteFile","deleteS3File","StorySimulatorAssetSelection","currentAsset","setCurrentAsset","assetTree","setAssetTree","useEffect","StorySimulatorAssetViewer","onNodeClick","nodeData","treeMap","isSelected","isExpanded","selectedPath","sessionStorage","SortableItem","SortableElement","SortableList","SortableContainer","ChapterEditor","titleProps","setImageUrl","imageUrlProps","chosenFiles","setItems","setChosenFiles","onSortEnd","useCallback","oldIndex","arrayMove","useSortableList","setIsPublished","openDate","setOpenDate","txtsNotChosen","setTxtsNotChosen","rerender","setRender","textAsset","deleteFileFromChosen","txtFile","prevItemList","addFileToChosen","textFile","labelElement","updatedChapter","inAYear","createChapterIndex","deleteChapterRequest","getFullYear","defaultChapter","ChapterSim","textAssets","requestFn","fetchedValue","useRequest","chosenIndex","setChosenIndex","StorySimulatorChapterEditor","mainMenuOptStyle","SSMainMenuConstants","maxOptButtonsRow","optButtonsXSpace","optButtonsYSpace","gameTxtStorageName","checkpointTxt","loadFileLocally","storageName","reader","FileReader","readAsText","onloadend","CheckpointTxtLoader","s3TxtFiles","chosenFilename","setChosenFilename","uploadButton","chooseS3Txt","createHeadersWithCors","txt","CheckpointSim","simulateCheckpoint","clearSessionStorage","SSImageAssets","storySimBg","invertedButton","blueUnderlay","colorIcon","imageIcon","bboxIcon","handIcon","listIcon","eraseIcon","iconBg","createOptButton","ObjectPlacement","AssetUploader","defaultChapterText","backgroundUnderlay","SSBackgroundManager","backgroundAssetPath","objectPlacement","getObjectPlacement","backgroundAssetKey","addAsset","assetKeyOnLoad","backgroundSprite","getBackgroundAssetPath","screenLog","CursorMode","SSBBoxManager","checkpointTitle","bboxBeingDrawn","startingCoordinates","bboxDetailMap","addBBoxListeners","isCursorMode","DrawBBox","createNewBBox","registerBBox","setDraggable","setActiveSelection","getCoordinates","setDataEnabled","generateItemIdNumber","objectDetail","getLoggables","getItemById","resizeWhileBeingDrawn","startX","startY","currentX","currentY","checkpointTxtLog","bboxDetail","bboxDetailArray","toIntString","setAttribute","deleteAll","altTextStyle","SSCursorModeConstants","iconBgSize","iconSpacing","inactiveAlpha","onHoverAlpha","activeAlpha","SSCursorMode","defaultCursorMode","DragResizeObj","isModes","currCursorMode","cursorModes","currActiveModeIdx","getCurrCursorMode","setCursorMode","newMode","addCursorMode","isMode","cursorModeContainer","currIdx","modeButton","renderCursorModesContainer","activeMode","modeIcon","removeAll","spacing","loggableStyle","getIdFromShortPath","padWithTab","SSLogManager","detailMapContainer","printCheckpoint","locationAssetPath","checkpointLoggers","loggables","checkpointLogger","toCapitalizedWords","showDetailMap","loggable","loggerRectangle","loggerText","formatObjectDetails","setLetterSpacing","hideDetailMap","SSObjectManager","objectDetailMap","renderObject","objectSprite","registerObject","generateItemId","getAssetPath","objectIdNumber","objectDetailArray","itemDetail","transformConstants","activeSelectMargin","scaleFactor","SSTransformManager","activeSelection","activeSelectRect","trackDraggables","drawActiveSelectRect","bindDeleteKey","dragX","dragY","getCursorManager","setObjAttribute","setBBoxAttribute","resizeActive","enlarge","factor","multiplyDimensions","abs","deselect","BACKSPACE","deleteActiveSelection","getType","deleteObj","deleteBBox","objPlacementConstants","cursorModeXPos","cursorModeYPos","transformManager","bboxManager","logManager","itemIdNumber","openBracket","closedBracket","createUIButtons","OPEN_BRACKET","CLOSED_BRACKET","isDown","Default","populateCursorModes","loadBackground","loadObject","cursorMode","StorySimulator","setAssetPaths","setTextAssets","storySimState","game","createStorySimulatorGame","paths","endsWith","obtainTextAssets","StorySimulatorAssetFileUploader","StorySimulatorChapterSim","AcademyDefaultChapterContainer","handleFetchChapter","handleUpdateChapter","AcademyNavigationBar","Alignment","BUTTON","LIGHTBULB","PREDICTIVE_ANALYSIS","Contest","COMPARISON","MANUAL","Staff","MOBILE_VIDEO","ENDORSED","CROWN","Academy","assessmentRenderFactory","routerProps","dynamicRedirect","clickedFrom","lastAcademy","redirectToGame","redirectTo404","handleFetchNotifications","component","exact","AcademyContainer","dot","ContributorsDetails","githubOrg","ignoreRepos","ignoreContributors","ContributorsList","repos","contributors","repo","link","contributors_url","fetchRepos","responses","endpoints","contributor","photo","avatar_url","githubPage","html_url","githubName","commits","contributions","fetchContributors","contributorList","array","arrayMapped","Contributors","LoginButton","LARGE","LOG_IN","playgroundButton","Login","handleFetchAuth","ELEVATION_4","LOCK","vertical","providers","handleLogin","LoginContainer","useDispatch","dispatchProps","capitalizeFirstLetter","retrieveLocalAssessment","retrieveLocalAssessmentOverview","storeLocalAssessment","storeLocalAssessmentOverview","makeAssessmentOverview","maxGradeVal","maxXpVal","task","CONTENT","TASK","rawOverview","$","kind","duedate","coverimage","number","startdate","READING","WEBSUMMARY","makeAssessment","questionArr","makeQuestions","globalDeployment","makeLibrary","DEPLOYMENT","graderDeployment","GRADERDEPLOYMENT","TEXT","deploymentArr","deployment","IMPORT","EXTERNAL","nameVal","symbolsVal","SYMBOL","globalsVal","GLOBAL","IDENTIFIER","VALUE","Function","interpreter","PROBLEMS","PROBLEM","problem","curId","localMaxXp","maxxp","maxgrade","makeProgramming","makeMCQ","choicesVal","SNIPPET","SOLUTION","solutionVal","CHOICE","TESTCASES","publicTestcases","PUBLIC","privateTestcases","PRIVATE","PREPEND","POSTPEND","TEMPLATE","makeTestcase","GRADER","graderTemplate","download","click","removeChild","exportLibrary","assessmentToXml","snippet","publicTests","privateTests","EditingOverviewCard","saveEditOverview","fieldValue","editingOverviewField","updateEditingOverview","handleEditOverview","toggleEditField","toggleOptionsOverlay","showOptionsOverlay","handleExportXml","assessmentStr","overviewStr","builder","Builder","xml","xmlStr","buildObject","exportXml","makeEditingOverviewTextarea","makeEditingOverviewCard","makeEditingOverviewCardTitle","createPlaceholder","makeOptionsButton","makeOverviewCardButton","makeExportButton","WRENCH","saveCategory","optionsOverlay","categorySelect","assessmentCategoriesArr","CategorySelectComponent","categoryRenderer","ControlBarToggleEditModeButton","editMode","editingMode","toggleEditMode","getValueFromPath","assignToPath","limitNumberRange","TextAreaContent","saveEditAssessment","isNumber","isNaN","originalVal","processResults","assessmentVal","isEditing","handleEditAssessment","makeEditingTextarea","fieldVal","isNumberVal","useRawValue","filler","AutograderTab","addTestcase","removeTestcase","splice","autograderCard","testcasePath","publicTestPath","privateTestPath","PLUS","DeploymentTab","deploymentTab","deploymentPath","pathToLibrary","symbol","textareaContent","MINUS","handleSymbolDelete","globalValueTextareaContent","handleGlobalDelete","resetLibrary","handleRefreshLibrary","symbolsFragment","externalSelect","handleNewSymbol","globalsFragment","borderSpacing","handleNewGlobal","removeSpaces","pathVal","handleGlobalValueUpdate","altEval","_e","handleSwitchDeployment","isEmptyLibrary","pathToCopy","isOptionalDeployment","GradingTab","gradingTab","ManageQuestionTab","manageQuestionTab","DOCUMENT","confirmSave","makeQuestion","deepCopy","deleteQuestion","CARET_UP","shiftQuestion","FONT","dir","template","modifyAssessment","showSaveOverlay","confirmSaveOverlay","arr","MCQQuestionTemplateTab","mcqTab","mcqButton","deleteButton","delOption","addOption","QuestionEditorSelect","questionEditors","CHEVRON_UP","CHEVRON_DOWN","ProgrammingQuestionTemplateTab","programmingTab","activeEditor","copyFromEditorButton","handleCopyFromEditor","copyToEditorButton","handleCopyToEditor","editorPanel","menuRenderer","currentEditor","handleChangeActiveEditor","templateFocused","templateValue","focusEditor","unFocusEditor","handleTemplateChange","handleUpdateWorkspace","EditingWorkspace","formatedQuestionId","originalMaxGrade","getMaxMarks","originalMaxXp","resetWorkspaceValues","uniq","handleSaveGradeAndXp","curGrade","changeGrade","curXp","changeXp","updateAssessmentOverview","updateEditAssessmentState","updateAndSaveAssessment","toggleEditingMode","toggle","qnType","questionTemplateTab","editorQuestionOverview","editorQuestionTemplate","HOME","editorLocalDeployment","editorLocalGraderDeployment","editorGrading","editorAutograder","editorBriefing","editorManageQuestion","editorGlobalDeployment","editorGlobalGraderDeployment","currentState","seen","hasOwnProperty","EditingWorkspaceContainer","MissionCreator","fileReader","handleFileRead","parseString","entireAssessment","assessmentArr","makeEntireAssessment","fileInputText","handleChangeFile","makeMission","bind","accept","NEW_OBJECT","MissionCreatorContainer","ownProps","MissionControl","editingOverview","editOverview","assessmentProps","missionEditingCard","MissionControlContainer","NotFound","ControlBarExecutionTime","handleChangeExecTime","stateToIntent","INACTIVE","SAVED","DIRTY","ControlBarPersistenceButtons","currentFile","isDirty","mainButton","CLOUD","openButton","DOCUMENT_OPEN","onClickOpen","saveButton","saveAsButton","SEND_TO","onClickSaveAs","logoutButton","loggedInAs","LOG_OUT","onClickLogOut","onOpening","onPopoverOpening","POPOVER_DISMISS","ControlBarSessionButtons","inviteInputElem","joinElemValue","handleChange","selectInviteInputText","inviteButton","GRAPH","onSessionCreated","createNewSession","sessionId","handleSetEditorSessionId","handleInitInvite","DUPLICATE","joinButton","onSubmit","handleInvalidEditorSessionId","preventDefault","KEY_ENTER","leaveButton","FEED","SOCIAL_MEDIA","RED3","GREEN3","focus","ControlBarShareButton","shareInputElem","selectShareInputText","isLoading","SHARE","SIZE_SMALL","handleShortenURL","handleGenerateLz","handleUpdateShortURL","currentTarget","SideContentFaceapiDisplay","_WIDTH","_HEIGHT","takePhotoA","video","takePhotoB","takePhotoC","resetPhotoA","resetPhotoB","resetPhotoC","autoPlay","CAMERA","RESET","SubstDefaultText","LESS_THAN","GREATER_THAN","substKeyMap","FIRST_STEP","LAST_STEP","SubstCodeDisplay","SideContentSubstVisualizer","getDiffMarkers","contIndex","pathified","redexed","redex","diffMarkers","mainprog","front","startR","startC","endR","endC","sliderShift","stepFirst","stepLast","lastStepValue","hasRunCode","substHandlers","keyMap","wrapEnabled","getText","explanation","SideContentVideoDisplay","$video","swapModes","handleSnapPicture","handleStartVideo","handleWidthChange","handleHeightChange","VD","deinit","handleCloseVideo","handleUpdateDimensions","m","videoIsActive","stillIsActive","VIDEO","HORIZONTAL_DISTRIBUTION","minorStepSize","majorStepSize","VERTICAL_DISTRIBUTION","MAIN_INTRODUCTION","sourceDocs","HOTKEYS_INTRODUCTION","aceHotkeys","sourceHotkeys","generateIntroductionText","sourceType","source_1","source_1_Wasm","source_1_Lazy","source_2","source_2_Lazy","source_3","source_3_Nondet","source_3_Concurrent","source_4","source_4_Gpu","generateSourceDocsLink","generateSourceIntroduction","videoDisplayTab","FaceapiDisplayTab","MUGSHOT","Playground","lastEdit","setLastEdit","isGreen","setIsGreen","setSelectedTab","hasBreakpoints","setHasBreakpoints","onEditorValueChange","handleUsingSubst","onChangeTabs","processStepperOutput","editorOutput","isStepperOutput","chapterSelectHandler","persistenceUser","handlePersistenceUpdateFile","persistenceIsDirty","persistenceButtons","handlePersistenceSaveFile","handlePersistenceOpenPicker","handlePersistenceLogOut","handlePersistenceInitialise","executionTime","sessionButtons","shareButton","playgroundIntroductionTab","FLOW_REVIEW","numberOfBreakpoints","arrayItem","PlaygroundContainer","s","Sourcecast","SourceRecorderEditor","SourceRecorderTable","SourcecastContainer","ProfileCard","isInvalidMission","isInvalidXP","missionDetail","animate","parseColour","getFrac","stripes","xpDetails","renderIcon","Profile","numClosed","userDetails","den","frac","PULSE","summaryCallouts","toFixed","USER","ProfileContainer","DropdownAbout","moduleDetails","DropdownHelp","techSVC","techSVCNumber","githubIssues","piazza","Dropdown","toggleAboutOpen","isAboutOpen","toggleHelpOpen","isHelpOpen","toggleProfileOpen","isProfileOpen","profile","titleCase","logout","handleLogOut","wrd","substr","NavigationBar","SYMBOL_DIAMOND","MUSIC","HEART","parseQuery","isArray","Application","redirectToPlayground","redirectToAcademy","parsePlayground","toAcademy","toIncubator","toLogin","qstr","search","parsePrgrm","parseChapter","currentPlaygroundChapter","parseVariant","currentPlaygroundVariant","parseExternalLibrary","currentExternalLibrary","parseExecTime","handleEnsureLibrariesLoaded","handleExternalLibrarySelect","handleSetExecTime","qsParsed","hash","lz","decompressFromEncodedURIComponent","variantQuery","matchingLang","language","ApplicationContainer","isLocalhost","Boolean","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","Sentry","dsn","rootContainer","setBackendStaticURL","origin","contentType","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","module","exports"],"mappings":"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CA,QACA,SACA,SACA,QACA,QACA,QACA,oBACA,QACA,YACA,SACA,aACA,QACA,SACA,qBACA,oBACA,mBACA,cACA,SACA,YACA,aACA,aACA,iBACA,SACA,QACA,SACA,OACA,SACA,OACA,SACA,QACA,YACA,SACA,WACA,eACA,UACA,aAGIC,GAAgB,CACpB,aACA,iBACA,iBACA,iCACA,oCACA,2BACA,wCACA,OACA,OACA,YACA,eACA,cACA,kBACA,eACA,2BACA,YACA,QAEA,mBACA,YACA,YACA,eACA,wBACA,WACA,eACA,kBACA,uBACA,MACA,SACA,0BACA,yBACA,oBACA,+BAGIC,GAAgB,CACpB,aACA,WACA,eACA,OACA,OACA,gBACA,iBACA,cACA,aACA,gBACA,2BACA,2BACA,yBACA,eACA,iBACA,iBACA,cACA,mBAEA,cACA,SACA,aAEA,OACA,gBACA,WACA,QACA,OACA,SACA,SAGIC,GAAqB,CACzB,kBACA,UACA,YACA,gBACA,QACA,cACA,gBAGIC,GAAe,CACnB,SACA,WACA,UACA,UACA,aACA,aACA,kBACA,iBACA,yBACA,gCACA,gBACA,kBACA,mBACA,eACA,gBAiBIC,GAAqD,CACzD,CAACN,GAAoBO,KAAM,IAC3B,CAACP,GAAoBQ,MAAOP,IAC5B,CAACD,GAAoBS,OAAQP,IAC7B,CAACF,GAAoBU,OAAQP,IAC7B,CAACH,GAAoBW,YAAaP,IAClC,CAACJ,GAAoBY,SAAUP,IAC/B,CAACL,GAAoBa,gBArBQ,CAC7B,cACA,oBACA,eACA,eACA,aACA,mBAgBA,CACEb,GAAoBc,IACpBb,GAAac,OAAOb,GAAeC,GAAeC,GAAoBC,MAI7DW,GAA2C,IAAIxG,IAAI8F,IC5GzD,IAAKW,GAMAC,I,SANAD,K,0BAAAA,E,wBAAAA,E,aAAAA,Q,cAMAC,K,kBAAAA,E,cAAAA,E,eAAAA,Q,KAeL,MAAMC,GAAoC,CAC/C,CAAE3N,QAAS,EAAGC,QAAS,WACvB,CAAED,QAAS,EAAGC,QAAS,QACvB,CAAED,QAAS,EAAGC,QAAS,QACvB,CAAED,QAAS,EAAGC,Q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","file":"static/js/main.bb774f7f.chunk.js","sourcesContent":["import { IconName } from '@blueprintjs/core';\n\nimport { DebuggerContext } from '../workspace/WorkspaceTypes';\n\nexport const NOTIFY_PROGRAM_EVALUATED = 'NOTIFY_PROGRAM_EVALUATED';\n\nexport enum SideContentType {\n  autograder = 'autograder',\n  briefing = 'briefing',\n  dataVisualiser = 'data_visualiser',\n  editorGrading = 'editor_grading',\n  editorAutograder = 'editor_autograder',\n  editorBriefing = 'editor_briefing',\n  editorGlobalDeployment = 'editor_global_deployment',\n  editorGlobalGraderDeployment = 'editor_global_grader_deployment',\n  editorLocalDeployment = 'editor_local_deployment',\n  editorLocalGraderDeployment = 'editor_local_grader_deployment',\n  editorManageQuestion = 'editor_manage_question',\n  editorQuestionOverview = 'editor_question_overview',\n  editorQuestionTemplate = 'editor_question_template',\n  envVisualiser = 'env_visualiser',\n  grading = 'grading',\n  introduction = 'introduction',\n  inspector = 'inspector',\n  questionOverview = 'question_overview',\n  sourcereel = 'sourcereel',\n  substVisualizer = 'subst_visualiser',\n  toneMatrix = 'tone_matrix'\n}\n\n/**\n * @property label A string that will appear as the tooltip.\n *\n * @property iconName BlueprintJS IconName element, used to render the\n *   icon which will be displayed over the SideContent panel.\n *\n * @property body The element to be rendered in the SideContent panel\n *  when the tab is selected.\n *\n * @property id A string/number that will be used as the tab ID and key.\n *  If id is undefined, id will be set to label by the renderTab function.\n *\n * @property disabled Set this property to true to disable a tab. The\n * corresponding tab label will still be rendered on hover, but the\n * tab will be greyed out and cannot be selected. Default value: false.\n */\nexport type SideContentTab = {\n  label: string;\n  iconName: IconName;\n  body: JSX.Element;\n  toSpawn: (context: DebuggerContext) => boolean;\n  id?: SideContentType;\n  disabled?: boolean;\n};\n","import { Context } from 'js-slang';\n\nimport { SourcecastWorkspaceState } from '../../features/sourceRecorder/sourcecast/SourcecastTypes';\nimport { SourcereelWorkspaceState } from '../../features/sourceRecorder/sourcereel/SourcereelTypes';\nimport { InterpreterOutput } from '../application/ApplicationTypes';\nimport { ExternalLibraryName } from '../application/types/ExternalTypes';\nimport { AutogradingResult, Testcase } from '../assessment/AssessmentTypes';\nimport { HighlightedLines, Position } from '../editor/EditorTypes';\nimport { SideContentType } from '../sideContent/SideContentTypes';\n\nexport const BEGIN_CLEAR_CONTEXT = 'BEGIN_CLEAR_CONTEXT';\nexport const BROWSE_REPL_HISTORY_DOWN = 'BROWSE_REPL_HISTORY_DOWN';\nexport const BROWSE_REPL_HISTORY_UP = 'BROWSE_REPL_HISTORY_UP';\nexport const CHANGE_EDITOR_HEIGHT = 'CHANGE_EDITOR_HEIGHT';\nexport const CHANGE_EDITOR_WIDTH = 'CHANGE_EDITOR_WIDTH';\nexport const CHANGE_EXEC_TIME = 'CHANGE_EXEC_TIME';\nexport const CHANGE_EXTERNAL_LIBRARY = 'CHANGE_EXTERNAL_LIBRARY';\nexport const CHANGE_SIDE_CONTENT_HEIGHT = 'CHANGE_SIDE_CONTENT_HEIGHT';\nexport const CHAPTER_SELECT = 'CHAPTER_SELECT';\nexport const CLEAR_REPL_INPUT = 'CLEAR_REPL_INPUT';\nexport const CLEAR_REPL_OUTPUT = 'CLEAR_REPL_OUTPUT';\nexport const CLEAR_REPL_OUTPUT_LAST = 'CLEAR_REPL_OUTPUT_LAST';\nexport const END_CLEAR_CONTEXT = 'END_CLEAR_CONTEXT';\nexport const ENSURE_LIBRARIES_LOADED = 'ENSURE_LIBRARIES_LOADED';\nexport const EVAL_EDITOR = 'EVAL_EDITOR';\nexport const EVAL_REPL = 'EVAL_REPL';\nexport const PROMPT_AUTOCOMPLETE = 'PROMPT_AUTOCOMPLETE';\nexport const EVAL_SILENT = 'EVAL_SILENT';\nexport const EVAL_TESTCASE = 'EVAL_TESTCASE';\nexport const MOVE_CURSOR = 'MOVE_CURSOR';\nexport const NAV_DECLARATION = 'NAV_DECLARATION';\nexport const PLAYGROUND_EXTERNAL_SELECT = 'PLAYGROUND_EXTERNAL_SELECT ';\nexport const RESET_TESTCASE = 'RESET_TESTCASE';\nexport const RESET_WORKSPACE = 'RESET_WORKSPACE';\nexport const SEND_REPL_INPUT_TO_OUTPUT = 'SEND_REPL_INPUT_TO_OUTPUT';\nexport const TOGGLE_EDITOR_AUTORUN = 'TOGGLE_EDITOR_AUTORUN';\nexport const UPDATE_ACTIVE_TAB = 'UPDATE_ACTIVE_TAB';\nexport const UPDATE_CURRENT_ASSESSMENT_ID = 'UPDATE_CURRENT_ASSESSMENT_ID';\nexport const UPDATE_CURRENT_SUBMISSION_ID = 'UPDATE_CURRENT_SUBMISSION_ID';\nexport const UPDATE_EDITOR_VALUE = 'UPDATE_EDITOR_VALUE';\nexport const UPDATE_EDITOR_BREAKPOINTS = 'UPDATE_EDITOR_BREAKPOINTS';\nexport const UPDATE_HAS_UNSAVED_CHANGES = 'UPDATE_HAS_UNSAVED_CHANGES';\nexport const UPDATE_REPL_VALUE = 'UPDATE_REPL_VALUE';\nexport const UPDATE_WORKSPACE = 'UPDATE_WORKSPACE';\nexport const FETCH_CHAPTER = 'FETCH_CHAPTER';\nexport const UPDATE_CHAPTER = 'UPDATE_CHAPTER';\nexport const CHANGE_CHAPTER = 'CHANGE_CHAPTER';\n\nexport type WorkspaceLocation = keyof WorkspaceManagerState;\n\ntype AssessmentWorkspaceAttr = {\n  readonly currentAssessment?: number;\n  readonly currentQuestion?: number;\n  readonly hasUnsavedChanges: boolean;\n};\ntype AssessmentWorkspaceState = AssessmentWorkspaceAttr & WorkspaceState;\n\ntype GradingWorkspaceAttr = {\n  readonly currentSubmission?: number;\n  readonly currentQuestion?: number;\n  readonly hasUnsavedChanges: boolean;\n};\ntype GradingWorkspaceState = GradingWorkspaceAttr & WorkspaceState;\n\ntype PlaygroundWorkspaceAttr = {\n  readonly usingSubst: boolean;\n};\nexport type PlaygroundWorkspaceState = PlaygroundWorkspaceAttr & WorkspaceState;\n\nexport type WorkspaceManagerState = {\n  readonly assessment: AssessmentWorkspaceState;\n  readonly grading: GradingWorkspaceState;\n  readonly playground: PlaygroundWorkspaceState;\n  readonly sourcecast: SourcecastWorkspaceState;\n  readonly sourcereel: SourcereelWorkspaceState;\n};\n\nexport type WorkspaceState = {\n  readonly autogradingResults: AutogradingResult[];\n  readonly breakpoints: string[];\n  readonly context: Context;\n  readonly editorPrepend: string;\n  readonly editorReadonly: boolean;\n  readonly editorSessionId: string;\n  readonly editorValue: string | null;\n  readonly editorPostpend: string;\n  readonly editorTestcases: Testcase[];\n  readonly editorHeight: number;\n  readonly editorWidth: string;\n  readonly execTime: number;\n  readonly highlightedLines: HighlightedLines[];\n  readonly newCursorPosition?: Position;\n  readonly isRunning: boolean;\n  readonly isDebugging: boolean;\n  readonly enableDebugging: boolean;\n  readonly isEditorAutorun: boolean;\n  readonly output: InterpreterOutput[];\n  readonly externalLibrary: ExternalLibraryName;\n  readonly replHistory: ReplHistory;\n  readonly replValue: string;\n  readonly sharedbAceInitValue: string;\n  readonly sharedbAceIsInviting: boolean;\n  readonly sideContentActiveTab: SideContentType;\n  readonly sideContentHeight?: number;\n  readonly websocketStatus: number;\n  readonly globals: Array<[string, any]>;\n  readonly debuggerContext: DebuggerContext;\n};\n\ntype ReplHistory = {\n  browseIndex: null | number; // [0, 49] if browsing, else null\n  records: string[];\n  originalValue: string;\n};\n\nexport type DebuggerContext = {\n  result: any;\n  lastDebuggerResult: any;\n  code: string;\n  context: Context;\n  workspaceLocation?: WorkspaceLocation;\n};\n","import { Context } from 'js-slang';\nimport { Variant } from 'js-slang/dist/types';\nimport { action } from 'typesafe-actions';\n\nimport { SET_EDITOR_READONLY } from '../../features/sourceRecorder/sourcecast/SourcecastTypes';\nimport { ExternalLibraryName } from '../application/types/ExternalTypes';\nimport { HIGHLIGHT_LINE } from '../application/types/InterpreterTypes';\nimport { Library } from '../assessment/AssessmentTypes';\nimport { Position } from '../editor/EditorTypes';\nimport { NOTIFY_PROGRAM_EVALUATED, SideContentType } from '../sideContent/SideContentTypes';\nimport {\n  BEGIN_CLEAR_CONTEXT,\n  BROWSE_REPL_HISTORY_DOWN,\n  BROWSE_REPL_HISTORY_UP,\n  CHANGE_CHAPTER,\n  CHANGE_EDITOR_HEIGHT,\n  CHANGE_EDITOR_WIDTH,\n  CHANGE_EXEC_TIME,\n  CHANGE_EXTERNAL_LIBRARY,\n  CHANGE_SIDE_CONTENT_HEIGHT,\n  CHAPTER_SELECT,\n  CLEAR_REPL_INPUT,\n  CLEAR_REPL_OUTPUT,\n  CLEAR_REPL_OUTPUT_LAST,\n  END_CLEAR_CONTEXT,\n  ENSURE_LIBRARIES_LOADED,\n  EVAL_EDITOR,\n  EVAL_REPL,\n  EVAL_TESTCASE,\n  FETCH_CHAPTER,\n  MOVE_CURSOR,\n  NAV_DECLARATION,\n  PLAYGROUND_EXTERNAL_SELECT,\n  PROMPT_AUTOCOMPLETE,\n  RESET_TESTCASE,\n  RESET_WORKSPACE,\n  SEND_REPL_INPUT_TO_OUTPUT,\n  TOGGLE_EDITOR_AUTORUN,\n  UPDATE_ACTIVE_TAB,\n  UPDATE_CHAPTER,\n  UPDATE_CURRENT_ASSESSMENT_ID,\n  UPDATE_CURRENT_SUBMISSION_ID,\n  UPDATE_EDITOR_BREAKPOINTS,\n  UPDATE_EDITOR_VALUE,\n  UPDATE_HAS_UNSAVED_CHANGES,\n  UPDATE_REPL_VALUE,\n  UPDATE_WORKSPACE,\n  WorkspaceLocation,\n  WorkspaceState\n} from './WorkspaceTypes';\n\nexport const browseReplHistoryDown = (workspaceLocation: WorkspaceLocation) =>\n  action(BROWSE_REPL_HISTORY_DOWN, { workspaceLocation });\n\nexport const browseReplHistoryUp = (workspaceLocation: WorkspaceLocation) =>\n  action(BROWSE_REPL_HISTORY_UP, { workspaceLocation });\n\nexport const changeExternalLibrary = (newExternal: string, workspaceLocation: WorkspaceLocation) =>\n  action(CHANGE_EXTERNAL_LIBRARY, { newExternal, workspaceLocation });\n\nexport const changeEditorHeight = (height: number, workspaceLocation: WorkspaceLocation) =>\n  action(CHANGE_EDITOR_HEIGHT, { height, workspaceLocation });\n\nexport const changeEditorWidth = (widthChange: string, workspaceLocation: WorkspaceLocation) =>\n  action(CHANGE_EDITOR_WIDTH, { widthChange, workspaceLocation });\n\nexport const changeExecTime = (execTime: string, workspaceLocation: WorkspaceLocation) =>\n  action(CHANGE_EXEC_TIME, { execTime, workspaceLocation });\n\nexport const changeSideContentHeight = (height: number, workspaceLocation: WorkspaceLocation) =>\n  action(CHANGE_SIDE_CONTENT_HEIGHT, { height, workspaceLocation });\n\nexport const chapterSelect = (\n  chapter: number,\n  variant: Variant,\n  workspaceLocation: WorkspaceLocation\n) =>\n  action(CHAPTER_SELECT, {\n    chapter,\n    variant,\n    workspaceLocation\n  });\n\nexport const externalLibrarySelect = (\n  externalLibraryName: ExternalLibraryName,\n  workspaceLocation: WorkspaceLocation\n) =>\n  action(PLAYGROUND_EXTERNAL_SELECT, {\n    externalLibraryName,\n    workspaceLocation\n  });\n\nexport const toggleEditorAutorun = (workspaceLocation: WorkspaceLocation) =>\n  action(TOGGLE_EDITOR_AUTORUN, { workspaceLocation });\n\nexport const updateActiveTab = (activeTab: SideContentType, workspaceLocation: WorkspaceLocation) =>\n  action(UPDATE_ACTIVE_TAB, { activeTab, workspaceLocation });\n\n/**\n * Starts the process to clear the js-slang Context\n * at a specified workspace location.\n *\n * This action is to be handled by saga, in order to\n * call upon side effects such as loading libraries in\n * the global scope.\n *\n * @param library the Library that the context shall be using\n * @param workspaceLocation the location of the workspace\n *\n * @see Library in assessmentShape.ts\n */\nexport const beginClearContext = (library: Library, workspaceLocation: WorkspaceLocation) =>\n  action(BEGIN_CLEAR_CONTEXT, {\n    library,\n    workspaceLocation\n  });\n\nexport const clearReplInput = (workspaceLocation: WorkspaceLocation) =>\n  action(CLEAR_REPL_INPUT, { workspaceLocation });\n\nexport const clearReplOutput = (workspaceLocation: WorkspaceLocation) =>\n  action(CLEAR_REPL_OUTPUT, { workspaceLocation });\n\nexport const clearReplOutputLast = (workspaceLocation: WorkspaceLocation) =>\n  action(CLEAR_REPL_OUTPUT_LAST, { workspaceLocation });\n\n/**\n * Finishes the process to clear the js-slang Context\n * at a specified workspace location.\n *\n * This action is to be handled in the reducer, to call the reset on the\n * Context in the state.\n *\n * @param library the Library that the context shall be using\n * @param workspaceLocation the location of the workspace\n *\n * @see Library in assessmentShape.ts\n */\nexport const endClearContext = (library: Library, workspaceLocation: WorkspaceLocation) =>\n  action(END_CLEAR_CONTEXT, {\n    library,\n    workspaceLocation\n  });\n\nexport const ensureLibrariesLoaded = () => action(ENSURE_LIBRARIES_LOADED);\n\nexport const evalEditor = (workspaceLocation: WorkspaceLocation) =>\n  action(EVAL_EDITOR, { workspaceLocation });\n\nexport const evalRepl = (workspaceLocation: WorkspaceLocation) =>\n  action(EVAL_REPL, { workspaceLocation });\n\nexport const evalTestcase = (workspaceLocation: WorkspaceLocation, testcaseId: number) =>\n  action(EVAL_TESTCASE, { workspaceLocation, testcaseId });\n\nexport const updateEditorValue = (newEditorValue: string, workspaceLocation: WorkspaceLocation) =>\n  action(UPDATE_EDITOR_VALUE, { newEditorValue, workspaceLocation });\n\nexport const setEditorBreakpoint = (breakpoints: string[], workspaceLocation: WorkspaceLocation) =>\n  action(UPDATE_EDITOR_BREAKPOINTS, { breakpoints, workspaceLocation });\n\nexport const highlightEditorLine = (\n  highlightedLines: number[],\n  workspaceLocation: WorkspaceLocation\n) => action(HIGHLIGHT_LINE, { highlightedLines, workspaceLocation });\n\nexport const updateReplValue = (newReplValue: string, workspaceLocation: WorkspaceLocation) =>\n  action(UPDATE_REPL_VALUE, { newReplValue, workspaceLocation });\n\nexport const sendReplInputToOutput = (newOutput: string, workspaceLocation: WorkspaceLocation) =>\n  action(SEND_REPL_INPUT_TO_OUTPUT, {\n    type: 'code',\n    workspaceLocation,\n    value: newOutput\n  });\n\nexport const resetTestcase = (workspaceLocation: WorkspaceLocation, index: number) =>\n  action(RESET_TESTCASE, { workspaceLocation, index });\n\nexport const navigateToDeclaration = (\n  workspaceLocation: WorkspaceLocation,\n  cursorPosition: Position\n) => action(NAV_DECLARATION, { workspaceLocation, cursorPosition });\n\nexport const moveCursor = (workspaceLocation: WorkspaceLocation, cursorPosition: Position) =>\n  action(MOVE_CURSOR, { workspaceLocation, cursorPosition });\n\n/**\n * Resets a workspace to its default properties.\n *\n * @param workspaceLocation the workspace to be reset\n * @param workspaceOptions an object with any number of properties\n *   in IWorkspaceState, that will take precedence over the default\n *   values. For example, one can use this to specify a particular\n *   editorValue.\n */\nexport const resetWorkspace = (\n  workspaceLocation: WorkspaceLocation,\n  workspaceOptions?: Partial<WorkspaceState>\n) =>\n  action(RESET_WORKSPACE, {\n    workspaceLocation,\n    workspaceOptions\n  });\n\nexport const updateWorkspace = (\n  workspaceLocation: WorkspaceLocation,\n  workspaceOptions?: Partial<WorkspaceState>\n) =>\n  action(UPDATE_WORKSPACE, {\n    workspaceLocation,\n    workspaceOptions\n  });\n\nexport const setEditorReadonly = (workspaceLocation: WorkspaceLocation, editorReadonly: boolean) =>\n  action(SET_EDITOR_READONLY, {\n    workspaceLocation,\n    editorReadonly\n  });\n\nexport const updateCurrentAssessmentId = (assessmentId: number, questionId: number) =>\n  action(UPDATE_CURRENT_ASSESSMENT_ID, {\n    assessmentId,\n    questionId\n  });\n\nexport const updateCurrentSubmissionId = (submissionId: number, questionId: number) =>\n  action(UPDATE_CURRENT_SUBMISSION_ID, {\n    submissionId,\n    questionId\n  });\n\nexport const updateHasUnsavedChanges = (\n  workspaceLocation: WorkspaceLocation,\n  hasUnsavedChanges: boolean\n) =>\n  action(UPDATE_HAS_UNSAVED_CHANGES, {\n    workspaceLocation,\n    hasUnsavedChanges\n  });\n\nexport const fetchChapter = () => action(FETCH_CHAPTER);\n\nexport const changeChapter = (chapter: number, variant: Variant) =>\n  action(CHANGE_CHAPTER, { chapter, variant });\n\nexport const updateChapter = (chapter: number, variant: Variant) =>\n  action(UPDATE_CHAPTER, { chapter, variant });\n\nexport const promptAutocomplete = (\n  workspaceLocation: WorkspaceLocation,\n  row: number,\n  column: number,\n  callback: any // TODO: define a type for this\n) =>\n  action(PROMPT_AUTOCOMPLETE, {\n    workspaceLocation,\n    row,\n    column,\n    callback\n  });\n\nexport const notifyProgramEvaluated = (\n  result: any,\n  lastDebuggerResult: any,\n  code: string,\n  context: Context,\n  workspaceLocation?: WorkspaceLocation\n) =>\n  action(NOTIFY_PROGRAM_EVALUATED, {\n    result,\n    lastDebuggerResult,\n    code,\n    context,\n    workspaceLocation\n  });\n","export const BEGIN_INTERRUPT_EXECUTION = 'BEGIN_INTERRUPT_EXECUTION';\nexport const END_INTERRUPT_EXECUTION = 'END_INTERRUPT_EXECUTION';\nexport const EVAL_INTERPRETER_ERROR = 'EVAL_INTERPRETER_ERROR';\nexport const EVAL_INTERPRETER_SUCCESS = 'EVAL_INTERPRETER_SUCCESS';\nexport const EVAL_TESTCASE_FAILURE = 'EVAL_TESTCASE_FAILURE';\nexport const EVAL_TESTCASE_SUCCESS = 'EVAL_TESTCASE_SUCCESS';\nexport const HANDLE_CONSOLE_LOG = 'HANDLE_CONSOLE_LOG';\nexport const BEGIN_DEBUG_PAUSE = 'BEGIN_DEBUG_PAUSE';\nexport const END_DEBUG_PAUSE = 'END_DEBUG_PAUSE';\nexport const DEBUG_RESUME = 'DEBUG_RESUME';\nexport const DEBUG_RESET = 'DEBUG_RESET';\nexport const HIGHLIGHT_LINE = 'HIGHLIGHT_LINE';\n","import { WorkspaceState } from '../../../commons/workspace/WorkspaceTypes';\nimport {\n  CodeDelta,\n  Input,\n  PlaybackData,\n  PlaybackStatus,\n  SourcecastData\n} from '../SourceRecorderTypes';\n\nexport const FETCH_SOURCECAST_INDEX = 'FETCH_SOURCECAST_INDEX';\nexport const SET_EDITOR_READONLY = 'SET_EDITOR_READONLY';\nexport const UPDATE_SOURCECAST_INDEX = 'UPDATE_SOURCECAST_INDEX';\n\ntype SourcecastWorkspaceAttr = {\n  readonly audioUrl: string;\n  readonly codeDeltasToApply: CodeDelta[] | null;\n  readonly currentPlayerTime: number;\n  readonly description: string | null;\n  readonly inputToApply: Input | null;\n  readonly playbackData: PlaybackData;\n  readonly playbackDuration: number;\n  readonly playbackStatus: PlaybackStatus;\n  readonly sourcecastIndex: SourcecastData[] | null;\n  readonly title: string | null;\n};\nexport type SourcecastWorkspaceState = SourcecastWorkspaceAttr & WorkspaceState;\n","import { action } from 'typesafe-actions'; // EDITED\n\nimport { LOG_OUT } from '../types/CommonsTypes';\n\nexport const logOut = () => action(LOG_OUT);\n","export const LOG_OUT = 'LOG_OUT';\n","// game Dev Action Types\nexport const FETCH_TEST_STORIES = 'FETCH_TEST_STORIES';\nexport const SAVE_USER_STATE = 'SAVE_USER_STATE';\nexport const SET_GAME_STATE = 'SET_GAME_STATE';\n","import { action } from 'typesafe-actions'; // EDITED\n\nimport { Grading, GradingOverview } from '../../../features/grading/GradingTypes';\nimport { Assessment, AssessmentOverview } from '../../assessment/AssessmentTypes';\nimport {\n  Notification,\n  NotificationFilterFunction\n} from '../../notificationBadge/NotificationBadgeTypes';\nimport { GameState, Role, Story } from '../ApplicationTypes';\nimport * as actionTypes from '../types/ActionTypes';\nimport {\n  ACKNOWLEDGE_NOTIFICATIONS,\n  FETCH_ASSESSMENT,\n  FETCH_ASSESSMENT_OVERVIEWS,\n  FETCH_AUTH,\n  FETCH_GRADING,\n  FETCH_GRADING_OVERVIEWS,\n  FETCH_NOTIFICATIONS,\n  LOGIN,\n  LOGOUT_GOOGLE,\n  SET_GOOGLE_USER,\n  SET_TOKENS,\n  SET_USER,\n  SUBMIT_ANSWER,\n  SUBMIT_ASSESSMENT,\n  SUBMIT_GRADING,\n  SUBMIT_GRADING_AND_CONTINUE,\n  UNSUBMIT_SUBMISSION,\n  UPDATE_ASSESSMENT,\n  UPDATE_ASSESSMENT_OVERVIEWS,\n  UPDATE_GRADING,\n  UPDATE_GRADING_OVERVIEWS,\n  UPDATE_HISTORY_HELPERS,\n  UPDATE_NOTIFICATIONS\n} from '../types/SessionTypes';\n\nexport const fetchAuth = (code: string, providerId?: string) =>\n  action(FETCH_AUTH, { code, providerId });\n\nexport const fetchAssessment = (id: number) => action(FETCH_ASSESSMENT, id);\n\nexport const fetchAssessmentOverviews = () => action(FETCH_ASSESSMENT_OVERVIEWS);\n\nexport const fetchGrading = (submissionId: number) => action(FETCH_GRADING, submissionId);\n\n/**\n * @param filterToGroup - param when set to true, only shows submissions under the group\n * of the grader\n */\nexport const fetchGradingOverviews = (filterToGroup = true) =>\n  action(FETCH_GRADING_OVERVIEWS, filterToGroup);\n\nexport const login = (providerId: string) => action(LOGIN, providerId);\n\nexport const logoutGoogle = () => action(LOGOUT_GOOGLE);\n\nexport const setGameState = (gameState: GameState) => action(actionTypes.SET_GAME_STATE, gameState);\n\nexport const setTokens = ({\n  accessToken,\n  refreshToken\n}: {\n  accessToken: string;\n  refreshToken: string;\n}) =>\n  action(SET_TOKENS, {\n    accessToken,\n    refreshToken\n  });\n\nexport const setUser = (user: {\n  name: string;\n  role: Role;\n  group: string | null;\n  grade: number;\n  story?: Story;\n  gameState?: GameState;\n}) => action(SET_USER, user);\n\nexport const setGoogleUser = (user?: string) => action(SET_GOOGLE_USER, user);\n\nexport const submitAnswer = (id: number, answer: string | number) =>\n  action(SUBMIT_ANSWER, {\n    id,\n    answer\n  });\n\nexport const submitAssessment = (id: number) => action(SUBMIT_ASSESSMENT, id);\n\nexport const submitGrading = (\n  submissionId: number,\n  questionId: number,\n  gradeAdjustment: number = 0,\n  xpAdjustment: number = 0,\n  comments?: string\n) =>\n  action(SUBMIT_GRADING, {\n    submissionId,\n    questionId,\n    gradeAdjustment,\n    xpAdjustment,\n    comments\n  });\n\nexport const submitGradingAndContinue = (\n  submissionId: number,\n  questionId: number,\n  gradeAdjustment: number = 0,\n  xpAdjustment: number = 0,\n  comments?: string\n) =>\n  action(SUBMIT_GRADING_AND_CONTINUE, {\n    submissionId,\n    questionId,\n    gradeAdjustment,\n    xpAdjustment,\n    comments\n  });\n\nexport const updateHistoryHelpers = (loc: string) => action(UPDATE_HISTORY_HELPERS, loc);\n\nexport const updateAssessmentOverviews = (overviews: AssessmentOverview[]) =>\n  action(UPDATE_ASSESSMENT_OVERVIEWS, overviews);\n\nexport const updateAssessment = (assessment: Assessment) => action(UPDATE_ASSESSMENT, assessment);\n\nexport const updateGradingOverviews = (overviews: GradingOverview[]) =>\n  action(UPDATE_GRADING_OVERVIEWS, overviews);\n\n/**\n * An extra id parameter is included here because of\n * no id for Grading.\n */\nexport const updateGrading = (submissionId: number, grading: Grading) =>\n  action(UPDATE_GRADING, {\n    submissionId,\n    grading\n  });\n\nexport const unsubmitSubmission = (submissionId: number) =>\n  action(UNSUBMIT_SUBMISSION, {\n    submissionId\n  });\n\n/**\n * Notification actions\n */\n\nexport const fetchNotifications = () => action(FETCH_NOTIFICATIONS);\n\nexport const acknowledgeNotifications = (withFilter?: NotificationFilterFunction) =>\n  action(ACKNOWLEDGE_NOTIFICATIONS, {\n    withFilter\n  });\n\nexport const updateNotifications = (notifications: Notification[]) =>\n  action(UPDATE_NOTIFICATIONS, notifications);\n","import { Grading, GradingOverview } from '../../../features/grading/GradingTypes';\nimport { Assessment, AssessmentOverview } from '../../assessment/AssessmentTypes';\nimport { Notification } from '../../notificationBadge/NotificationBadgeTypes';\nimport { HistoryHelper } from '../../utils/HistoryHelper';\nimport { GameState, Role, Story } from '../ApplicationTypes';\n\nexport const FETCH_AUTH = 'FETCH_AUTH';\nexport const FETCH_ASSESSMENT = 'FETCH_ASSESSMENT';\nexport const FETCH_ASSESSMENT_OVERVIEWS = 'FETCH_ASSESSMENT_OVERVIEWS';\nexport const FETCH_GRADING = 'FETCH_GRADING';\nexport const FETCH_GRADING_OVERVIEWS = 'FETCH_GRADING_OVERVIEWS';\nexport const LOGIN = 'LOGIN';\nexport const LOGOUT_GOOGLE = 'LOGOUT_GOOGLE';\nexport const SET_TOKENS = 'SET_TOKENS';\nexport const SET_USER = 'SET_USER';\nexport const SET_GOOGLE_USER = 'SET_GOOGLE_USER';\nexport const SUBMIT_ANSWER = 'SUBMIT_ANSWER';\nexport const SUBMIT_ASSESSMENT = 'SUBMIT_ASSESSMENT';\nexport const SUBMIT_GRADING = 'SUBMIT_GRADING';\nexport const SUBMIT_GRADING_AND_CONTINUE = 'SUBMIT_GRADING_AND_CONTINUE';\nexport const UNSUBMIT_SUBMISSION = 'UNSUBMIT_SUBMISSION';\nexport const UPDATE_HISTORY_HELPERS = 'UPDATE_HISTORY_HELPERS';\nexport const UPDATE_ASSESSMENT_OVERVIEWS = 'UPDATE_ASSESSMENT_OVERVIEWS';\nexport const UPDATE_ASSESSMENT = 'UPDATE_ASSESSMENT';\nexport const UPDATE_GRADING_OVERVIEWS = 'UPDATE_GRADING_OVERVIEWS';\nexport const UPDATE_GRADING = 'UPDATE_GRADING';\nexport const FETCH_NOTIFICATIONS = 'FETCH_NOTIFICATIONS';\nexport const ACKNOWLEDGE_NOTIFICATIONS = 'ACKNOWLEDGE_NOTIFICATIONS';\nexport const UPDATE_NOTIFICATIONS = 'UPDATE_NOTIFICATIONS';\n\nexport type SessionState = {\n  readonly accessToken?: string;\n  readonly assessmentOverviews?: AssessmentOverview[];\n  readonly assessments: Map<number, Assessment>;\n  readonly grade: number;\n  readonly gradingOverviews?: GradingOverview[];\n  readonly gradings: Map<number, Grading>;\n  readonly group: string | null;\n  readonly historyHelper: HistoryHelper;\n  readonly maxGrade: number;\n  readonly maxXp: number;\n  readonly refreshToken?: string;\n  readonly role?: Role;\n  readonly story: Story;\n  readonly gameState: GameState;\n  readonly name?: string;\n  readonly xp: number;\n  readonly notifications: Notification[];\n  readonly googleUser?: string;\n};\n","import { Ace } from 'ace-builds/ace';\n\nimport { ExternalLibraryName } from '../../commons/application/types/ExternalTypes';\nimport { Position } from '../../commons/editor/EditorTypes';\nimport { SideContentType } from '../../commons/sideContent/SideContentTypes';\n\nexport const SAVE_SOURCECAST_DATA = 'SAVE_SOURCECAST_DATA';\nexport const SET_CURRENT_PLAYER_TIME = 'SET_CURRENT_PLAYER_TIME';\nexport const SET_CODE_DELTAS_TO_APPLY = 'SET_CODE_DELTAS_TO_APPLY';\nexport const SET_INPUT_TO_APPLY = 'SET_INPUT_TO_APPLY';\nexport const SET_SOURCECAST_DATA = 'SET_SOURCECAST_DATA';\nexport const SET_SOURCECAST_PLAYBACK_DURATION = 'SET_SOURCECAST_PLAYBACK_DURATION';\nexport const SET_SOURCECAST_PLAYBACK_STATUS = 'SET_SOURCECAST_PLAYBACK_STATUS';\n\nexport type InputTypeShape = {\n  activeTabChange: SideContentType;\n  chapterSelect: number;\n  cursorPositionChange: Position;\n  codeDelta: CodeDelta;\n  externalLibrarySelect: ExternalLibraryName;\n  keyboardCommand: KeyboardCommand;\n  selectionRangeData: SelectionData;\n};\n\nexport enum KeyboardCommand {\n  run = 'run'\n}\n\nexport enum PlaybackStatus {\n  playing = 'playing',\n  paused = 'paused'\n}\n\nexport type CodeDelta = Ace.Delta;\n\nexport type SelectionRange = Ace.Range;\n\nexport type SelectionData = {\n  range: SelectionRange;\n  isBackwards: boolean;\n};\n\n// Refer: https://stackoverflow.com/questions/55758713/match-pair-for-keyof-and-valueof-an-interface\nexport type Input = keyof InputTypeShape extends infer K\n  ? K extends keyof InputTypeShape\n    ? { time: number; type: K; data: InputTypeShape[K] }\n    : never\n  : never;\n\nexport type PlaybackData = {\n  init: {\n    chapter: number;\n    externalLibrary: ExternalLibraryName;\n    editorValue: string;\n  };\n  inputs: Input[];\n};\n\nexport type SourcecastData = {\n  title: string;\n  description: string;\n  inserted_at: string;\n  updated_at: string;\n  playbackData: string;\n  id: number;\n  uploader: {\n    id: number;\n    name: string;\n  };\n  url: string;\n};\n\nexport enum RecordingStatus {\n  notStarted = 'notStarted',\n  recording = 'recording',\n  paused = 'paused',\n  finished = 'finished'\n}\n","function isTrue(value?: string): boolean {\n  return typeof value === 'string' && value.toUpperCase() === 'TRUE';\n}\n\nconst isTest = process.env.NODE_ENV === 'test';\n\nconst sourceAcademyVersion = process.env.REACT_APP_VERSION;\nconst backendUrl = process.env.REACT_APP_BACKEND_URL;\nconst useBackend = !isTest && isTrue(process.env.REACT_APP_USE_BACKEND);\nconst defaultSourceChapter = 4;\nconst defaultSourceVariant = 'default';\nconst defaultQuestionId = 0;\nconst maxBrowseIndex = 50;\nconst urlShortener = process.env.REACT_APP_URL_SHORTENER_DOMAIN;\nconst urlShortenerSignature = process.env.REACT_APP_URL_SHORTENER_SIGNATURE;\nconst moduleBackendUrl = process.env.REACT_APP_MODULE_BACKEND_URL || 'modules';\nconst playgroundOnly = !isTest && isTrue(process.env.REACT_APP_PLAYGROUND_ONLY);\nconst sentryDsn = process.env.REACT_APP_SENTRY_DSN;\nconst googleClientId = process.env.REACT_APP_GOOGLE_CLIENT_ID;\nconst googleApiKey = process.env.REACT_APP_GOOGLE_API_KEY;\nconst googleAppId = process.env.REACT_APP_GOOGLE_APP_ID;\n\nconst authProviders: Map<\n  string,\n  { name: string; endpoint: string; isDefault: boolean }\n> = new Map();\n\nfor (let i = 1; ; ++i) {\n  const id = process.env[`REACT_APP_OAUTH2_PROVIDER${i}`];\n  if (!id) {\n    break;\n  }\n\n  const name = process.env[`REACT_APP_OAUTH2_PROVIDER${i}_NAME`] || 'Unnamed provider';\n  const endpoint = process.env[`REACT_APP_OAUTH2_PROVIDER${i}_ENDPOINT`] || '';\n\n  authProviders.set(id, { name, endpoint, isDefault: i === 1 });\n}\n\nexport enum Links {\n  githubIssues = 'https://github.com/source-academy/cadet-frontend/issues',\n  githubOrg = 'https://github.com/source-academy',\n\n  moduleDetails = 'https://www.comp.nus.edu.sg/~cs1101s',\n  luminus = 'https://luminus.nus.edu.sg/modules/41d42e9a-5880-43b5-8ee6-75f5a41355e3/announcements/active',\n  piazza = 'https://piazza.com/class/kas136yscf8605',\n  shareDBServer = 'api2.sourceacademy.nus.edu.sg/',\n  sourceDocs = 'https://source-academy.github.io/source/',\n  sourceDocsChapter2_2 = 'https://source-academy.github.io/sicp/chapters/2.2.html',\n  sourceDocsChapter3_2 = 'https://source-academy.github.io/sicp/chapters/3.2.html',\n  techSVC = 'mailto:techsvc@comp.nus.edu.sg',\n  techSVCNumber = '6516 2736',\n  textbook = 'https://source-academy.github.io/sicp/',\n\n  aceHotkeys = 'https://github.com/ajaxorg/ace/wiki/Default-Keyboard-Shortcuts',\n  sourceHotkeys = 'https://github.com/source-academy/cadet-frontend/wiki/Source-Academy-Keyboard-Shortcuts',\n\n  source_1 = 'https://source-academy.github.io/source/source_1/',\n  source_1_Lazy = 'https://source-academy.github.io/source/source_1_lazy/',\n  source_1_Wasm = 'https://source-academy.github.io/source/source_1_wasm/',\n  source_2 = 'https://source-academy.github.io/source/source_2/',\n  source_2_Lazy = 'https://source-academy.github.io/source/source_2_lazy/',\n  source_3 = 'https://source-academy.github.io/source/source_1/',\n  source_3_Concurrent = 'https://source-academy.github.io/source/source_3_concurrent/',\n  source_3_Nondet = 'https://source-academy.github.io/source/source_3_non-det/',\n  source_4 = 'https://source-academy.github.io/source/source_4/',\n  source_4_Gpu = 'https://source-academy.github.io/source/source_4_gpu/'\n}\n\nconst Constants = {\n  sourceAcademyVersion,\n  backendUrl,\n  useBackend,\n  defaultSourceChapter,\n  defaultSourceVariant,\n  defaultQuestionId,\n  maxBrowseIndex,\n  urlShortener,\n  urlShortenerSignature,\n  moduleBackendUrl,\n  authProviders,\n  playgroundOnly,\n  sentryDsn,\n  googleClientId,\n  googleApiKey,\n  googleAppId\n};\n\nexport default Constants;\n","import { SourceError, Value } from 'js-slang/dist/types';\nimport { action } from 'typesafe-actions';\n\nimport { WorkspaceLocation } from '../../workspace/WorkspaceTypes';\nimport {\n  BEGIN_DEBUG_PAUSE,\n  BEGIN_INTERRUPT_EXECUTION,\n  DEBUG_RESET,\n  DEBUG_RESUME,\n  END_DEBUG_PAUSE,\n  END_INTERRUPT_EXECUTION,\n  EVAL_INTERPRETER_ERROR,\n  EVAL_INTERPRETER_SUCCESS,\n  EVAL_TESTCASE_FAILURE,\n  EVAL_TESTCASE_SUCCESS,\n  HANDLE_CONSOLE_LOG\n} from '../types/InterpreterTypes';\n\nexport const handleConsoleLog = (logString: string, workspaceLocation: WorkspaceLocation) =>\n  action(HANDLE_CONSOLE_LOG, { logString, workspaceLocation });\n\nexport const evalInterpreterSuccess = (value: Value, workspaceLocation: WorkspaceLocation) =>\n  action(EVAL_INTERPRETER_SUCCESS, { type: 'result', value, workspaceLocation });\n\nexport const evalTestcaseSuccess = (\n  value: Value,\n  workspaceLocation: WorkspaceLocation,\n  index: number\n) => action(EVAL_TESTCASE_SUCCESS, { type: 'result', value, workspaceLocation, index });\n\nexport const evalTestcaseFailure = (\n  value: Value,\n  workspaceLocation: WorkspaceLocation,\n  index: number\n) => action(EVAL_TESTCASE_FAILURE, { type: 'errors', value, workspaceLocation, index });\n\nexport const evalInterpreterError = (errors: SourceError[], workspaceLocation: WorkspaceLocation) =>\n  action(EVAL_INTERPRETER_ERROR, { type: 'errors', errors, workspaceLocation });\n\nexport const beginInterruptExecution = (workspaceLocation: WorkspaceLocation) =>\n  action(BEGIN_INTERRUPT_EXECUTION, { workspaceLocation });\n\nexport const endInterruptExecution = (workspaceLocation: WorkspaceLocation) =>\n  action(END_INTERRUPT_EXECUTION, { workspaceLocation });\n\nexport const beginDebuggerPause = (workspaceLocation: WorkspaceLocation) =>\n  action(BEGIN_DEBUG_PAUSE, { workspaceLocation });\n\nexport const endDebuggerPause = (workspaceLocation: WorkspaceLocation) =>\n  action(END_DEBUG_PAUSE, { workspaceLocation });\n\nexport const debuggerResume = (workspaceLocation: WorkspaceLocation) =>\n  action(DEBUG_RESUME, { workspaceLocation });\n\nexport const debuggerReset = (workspaceLocation: WorkspaceLocation) =>\n  action(DEBUG_RESET, { workspaceLocation });\n","/* tslint:disable: ban-types*/\nimport createSlangContext, { defineBuiltin, importBuiltins } from 'js-slang/dist/createContext';\nimport { Context, CustomBuiltIns, Value, Variant } from 'js-slang/dist/types';\nimport { stringify } from 'js-slang/dist/utils/stringify';\nimport { difference, keys } from 'lodash';\n\nimport { handleConsoleLog } from '../application/actions/InterpreterActions';\n\n/**\n * This file contains wrappers for certain functions\n * in the @source-academy/slang module.\n *\n * Use this file especially when attempting to create a slang Context.\n */\n\n/**\n * Function that takes a value and displays it in the interpreter.\n * It uses the js-slang stringify to convert values into a \"nicer\"\n * output. e.g. [1, 2, 3] displays as [1, 2, 3].\n * An action is dispatched using the redux store reference\n * within the global window object.\n *\n * @param value the value to be displayed\n * @param workspaceLocation used to determine\n *   which REPL the value shows up in.\n */\nfunction display(value: Value, str: string, workspaceLocation: any) {\n  display((str === undefined ? '' : str + ' ') + stringify(value), '', workspaceLocation);\n  return value;\n}\n\n/**\n * Function that takes a value and displays it in the interpreter.\n * The value is displayed however native JS would convert it to a string.\n * e.g. [1, 2, 3] would be displayed as 1,2,3.\n * An action is dispatched using the redux store reference\n * within the global window object.\n *\n * @param value the value to be displayed\n * @param workspaceLocation used to determine\n *   which REPL the value shows up in.\n */\nfunction rawDisplay(value: Value, str: string, workspaceLocation: any) {\n  const output = (str === undefined ? '' : str + ' ') + String(value);\n  // TODO in 2019: fix this hack\n  if (typeof (window as any).__REDUX_STORE__ !== 'undefined') {\n    (window as any).__REDUX_STORE__.dispatch(handleConsoleLog(output, workspaceLocation));\n  }\n  return value;\n}\n\n/**\n * A function to prompt the user using a popup.\n * The function is not called 'prompt' to prevent shadowing.\n *\n * @param value the value to be displayed as a prompt\n */\nfunction cadetPrompt(value: any) {\n  return prompt(value);\n}\n\n/**\n * A function to alert the user using the browser's alert()\n * function.\n *\n * @param value the value to alert the user with\n */\nfunction cadetAlert(value: any) {\n  alert(stringify(value));\n}\n\n/**\n * A dummy function to pass into createContext.\n * An actual implementation will have to be added\n * with the list visualiser implementation. See #187\n *\n * @param list the list to be visualised.\n */\nfunction visualiseList(list: any) {\n  if ((window as any).ListVisualizer) {\n    (window as any).ListVisualizer.draw(list);\n    return list;\n  } else {\n    throw new Error('List visualizer is not enabled');\n  }\n}\n\nexport function visualiseEnv(context: Context) {\n  if ((window as any).EnvVisualizer) {\n    (window as any).EnvVisualizer.draw_env({ context });\n  } else {\n    throw new Error('Env visualizer is not enabled');\n  }\n}\n\nexport function highlightLine(line: number | undefined) {\n  if ((window as any).Inspector) {\n    (window as any).Inspector.highlightClean();\n    // if number is undefined it just clears the highlighting.\n    (window as any).Inspector.highlightLine(line);\n  } else {\n    throw new Error('Inspector not loaded');\n  }\n}\n\nexport function inspectorUpdate(context: Context | undefined) {\n  if ((window as any).Inspector) {\n    (window as any).Inspector.updateContext(context, stringify);\n  } else {\n    throw new Error('Inspector not loaded');\n  }\n}\n\nexport const externalBuiltIns = {\n  display,\n  rawDisplay,\n  prompt: cadetPrompt,\n  alert: cadetAlert,\n  visualiseList\n};\n\n/**\n * A wrapper around js-slang's createContext. This\n * provides the original function with the required\n * externalBuiltIns, such as display and prompt.\n */\nexport function createContext<T>(\n  chapter: number,\n  externals: string[],\n  externalContext: T,\n  variant: Variant = 'default',\n  moduleParams?: any\n) {\n  return createSlangContext<T>(\n    chapter,\n    variant,\n    externals,\n    externalContext,\n    externalBuiltIns,\n    moduleParams\n  );\n}\n\n// Assumes that the grader doesn't need additional external libraries apart from the standard\n// libraries (lists, streams).\nfunction loadStandardLibraries(proxyContext: Context, customBuiltIns: CustomBuiltIns) {\n  importBuiltins(proxyContext, customBuiltIns);\n  defineBuiltin(proxyContext, 'makeUndefinedErrorFunction', (fname: string) => () => {\n    throw new Error(`Name ${fname} not declared.`);\n  });\n}\n\n// Given a Context, returns a privileged Context that when referenced,\n// intercepts reads from the underlying Context and returns desired values\nexport function makeElevatedContext(context: Context) {\n  function ProxyFrame() {}\n  ProxyFrame.prototype = context.runtime.environments[0].head;\n  // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n  // @ts-ignore\n  const fakeFrame: { [key: string]: any } = new ProxyFrame();\n  // Explanation: Proxy doesn't work for defineProperty in use-strict.\n  // The js-slang will defineProperty on loadStandardLibraries\n  // Creating a raw JS object and setting prototype will allow defineProperty on the child\n  // while reflection should work on parent.\n\n  const proxyGlobalEnv = new Proxy(context.runtime.environments[0], {\n    get(target, prop: string | number, receiver) {\n      if (prop === 'head') {\n        return fakeFrame;\n      }\n      return target[prop];\n    }\n  });\n\n  const proxyEnvs = new Proxy(context.runtime.environments, {\n    get(target, prop, receiver) {\n      if (prop === '0') {\n        return proxyGlobalEnv;\n      }\n      return target[prop];\n    }\n  });\n\n  const proxyRuntime = new Proxy(context.runtime, {\n    get(target, prop, receiver) {\n      if (prop === 'environments') {\n        return proxyEnvs;\n      }\n      return target[prop];\n    }\n  });\n\n  const elevatedContext = new Proxy(context, {\n    get(target, prop, receiver) {\n      switch (prop) {\n        case 'chapter':\n          return 4;\n        case 'runtime':\n          return proxyRuntime;\n        default:\n          return target[prop];\n      }\n    }\n  });\n\n  loadStandardLibraries(elevatedContext, externalBuiltIns);\n  return elevatedContext;\n}\n\nexport function getDifferenceInMethods(elevatedContext: Context, context: Context) {\n  const eFrame = elevatedContext.runtime.environments[0].head;\n  const frame = context.runtime.environments[0].head;\n  return difference(keys(eFrame), keys(frame));\n}\n\nexport function getStoreExtraMethodsString(toRemove: string[], unblockKey: string) {\n  return `const _____${unblockKey} = [${toRemove.join(', ')}];`;\n}\n\nexport function getRestoreExtraMethodsString(removed: string[], unblockKey: string) {\n  const store = `_____${unblockKey}`;\n  return removed\n    .map((x, key) => (x === 'makeUndefinedErrorFunction' ? '' : `const ${x} = ${store}[${key}];`))\n    .join('\\n');\n}\n\nexport function getBlockExtraMethodsString(toRemove: string[]) {\n  return toRemove\n    .map(x =>\n      x === 'makeUndefinedErrorFunction' ? '' : `const ${x} = makeUndefinedErrorFunction('${x}');`\n    )\n    .join('\\n');\n}\n","/**\n * Defined for displaying an external library.\n * @see Library the definition of a Library at AssessmentTypes.ts in an assessment.\n */\nexport type External = {\n  key: number;\n  name: ExternalLibraryName;\n  symbols: string[];\n};\n\nexport enum ExternalLibraryName {\n  NONE = 'NONE',\n  RUNES = 'RUNES',\n  CURVES = 'CURVES',\n  SOUNDS = 'SOUNDS',\n  BINARYTREES = 'BINARYTREES',\n  PIXNFLIX = 'PIX&FLIX',\n  MACHINELEARNING = 'MACHINELEARNING',\n  ALL = 'ALL'\n}\n\nexport type ExternalLibrary = {\n  name: ExternalLibraryName;\n  symbols: string[];\n};\n\nconst runesLibrary = [\n  'show',\n  'color',\n  'random_color',\n  'red',\n  'pink',\n  'purple',\n  'indigo',\n  'blue',\n  'green',\n  'yellow',\n  'orange',\n  'brown',\n  'black',\n  'white',\n  'scale_independent',\n  'scale',\n  'translate',\n  'rotate',\n  'stack_frac',\n  'stack',\n  'stackn',\n  'quarter_turn_right',\n  'quarter_turn_left',\n  'turn_upside_down',\n  'beside_frac',\n  'beside',\n  'flip_vert',\n  'flip_horiz',\n  'make_cross',\n  'repeat_pattern',\n  'square',\n  'blank',\n  'rcross',\n  'sail',\n  'corner',\n  'nova',\n  'circle',\n  'heart',\n  'pentagram',\n  'ribbon',\n  'anaglyph',\n  'overlay_frac',\n  'overlay',\n  'hollusion' // currently not documented; animation not working\n];\n\nconst curvesLibrary = [\n  'make_point',\n  'draw_points_on',\n  'draw_connected',\n  'draw_points_squeezed_to_window',\n  'draw_connected_squeezed_to_window',\n  'draw_connected_full_view',\n  'draw_connected_full_view_proportional',\n  'x_of',\n  'y_of',\n  'unit_line',\n  'unit_line_at',\n  'unit_circle',\n  'connect_rigidly',\n  'connect_ends',\n  'put_in_standard_position',\n  'translate',\n  'scale',\n  /** Contest functions */\n  'rotate_pi_over_2',\n  'scale_x_y',\n  'gosperize',\n  'gosper_curve',\n  'show_connected_gosper',\n  'repeated',\n  'param_gosper',\n  'param_gosperize',\n  'rotate_around_origin',\n  'arc', // used in GOSPERIZE\n  'invert', // used in DRAGONIZE\n  'alternative_unit_circle', // undocumented\n  'full_view_proportional', // undocumented\n  'squeeze_full_view', // undocumented\n  'squeeze_rectangular_portion' // undocumented\n];\n\nconst soundsLibrary = [\n  'make_sound',\n  'get_wave',\n  'get_duration',\n  'play',\n  'stop',\n  'consecutively',\n  'simultaneously',\n  'noise_sound',\n  'sine_sound',\n  'silence_sound',\n  'letter_name_to_midi_note',\n  'letter_name_to_frequency',\n  'midi_note_to_frequency',\n  'square_sound',\n  'triangle_sound',\n  'sawtooth_sound',\n  'play_unsafe',\n  'display_waveform',\n  /** Microphone Sounds */\n  'init_record',\n  'record',\n  'record_for',\n  /** Contest functions */\n  'adsr',\n  'stacking_adsr',\n  'trombone',\n  'piano',\n  'bell',\n  'violin',\n  'cello'\n];\n\nconst binaryTreesLibrary = [\n  'make_empty_tree',\n  'is_tree',\n  'make_tree',\n  'is_empty_tree',\n  'entry',\n  'left_branch',\n  'right_branch'\n];\n\nconst videoLibrary = [\n  'red_of',\n  'green_of',\n  'blue_of',\n  'set_rgb',\n  'copy_pixel',\n  'copy_image',\n  'constrain_color',\n  'compose_filter',\n  'make_distortion_filter',\n  'make_static_distortion_filter',\n  'pixel_similar',\n  'get_video_width',\n  'get_video_height',\n  'apply_filter',\n  'reset_filter'\n];\n\nconst machineLearningLibrary = [\n  'init_webcam',\n  'train_recognition',\n  'load_faceapi',\n  'change_label',\n  'array_push',\n  'normalise_data'\n];\n\n/**\n * Defines which external libraries are available for usage, and what\n * external symbols (exposed functions) are under them.\n */\n\nconst libEntries: Array<[ExternalLibraryName, string[]]> = [\n  [ExternalLibraryName.NONE, []],\n  [ExternalLibraryName.RUNES, runesLibrary],\n  [ExternalLibraryName.CURVES, curvesLibrary],\n  [ExternalLibraryName.SOUNDS, soundsLibrary],\n  [ExternalLibraryName.BINARYTREES, binaryTreesLibrary],\n  [ExternalLibraryName.PIXNFLIX, videoLibrary],\n  [ExternalLibraryName.MACHINELEARNING, machineLearningLibrary],\n  [\n    ExternalLibraryName.ALL,\n    runesLibrary.concat(curvesLibrary, soundsLibrary, binaryTreesLibrary, videoLibrary)\n  ]\n];\n\nexport const externalLibraries: Map<string, string[]> = new Map(libEntries);\n","import { SourceError, Variant } from 'js-slang/dist/types';\n\nimport { AcademyState } from '../../features/academy/AcademyTypes';\nimport { DashboardState } from '../../features/dashboard/DashboardTypes';\nimport { Grading } from '../../features/grading/GradingTypes';\nimport { PlaygroundState } from '../../features/playground/PlaygroundTypes';\nimport { PlaybackStatus, RecordingStatus } from '../../features/sourceRecorder/SourceRecorderTypes';\nimport { Assessment } from '../assessment/AssessmentTypes';\nimport { SideContentType } from '../sideContent/SideContentTypes';\nimport Constants from '../utils/Constants';\nimport { createContext } from '../utils/JsSlangHelper';\nimport {\n  DebuggerContext,\n  WorkspaceLocation,\n  WorkspaceManagerState,\n  WorkspaceState\n} from '../workspace/WorkspaceTypes';\nimport { ExternalLibraryName } from './types/ExternalTypes';\nimport { SessionState } from './types/SessionTypes';\n\nexport type OverallState = {\n  readonly academy: AcademyState;\n  readonly application: ApplicationState;\n  readonly playground: PlaygroundState;\n  readonly session: SessionState;\n  readonly workspaces: WorkspaceManagerState;\n  readonly dashboard: DashboardState;\n};\n\nexport type ApplicationState = {\n  readonly title: string;\n  readonly environment: ApplicationEnvironment;\n};\n\nexport type Story = {\n  story: string;\n  playStory: boolean;\n};\n\nexport type GameState = {\n  collectibles: { [id: string]: string };\n  completed_quests: string[];\n};\n\n/**\n * An output while the program is still being run in the interpreter. As a\n * result, there are no return values or SourceErrors yet. However, there could\n * have been calls to display (console.log) that need to be printed out.\n */\nexport type RunningOutput = {\n  type: 'running';\n  consoleLogs: string[];\n};\n\n/**\n * An output which reflects the program which the user had entered. Not a true\n * Output from the interpreter, but simply there to let he user know what had\n * been entered.\n */\nexport type CodeOutput = {\n  type: 'code';\n  value: string;\n};\n\n/**\n * An output which represents a program being run successfully, i.e. with a\n * return value at the end. A program can have either a return value, or errors,\n * but not both.\n */\nexport type ResultOutput = {\n  type: 'result';\n  value: any;\n  consoleLogs: string[];\n  runtime?: number;\n  isProgram?: boolean;\n};\n\n/**\n * An output which represents a program being run unsuccessfully, i.e. with\n * errors at the end. A program can have either a return value, or errors, but\n * not both.\n */\nexport type ErrorOutput = {\n  type: 'errors';\n  errors: SourceError[];\n  consoleLogs: string[];\n};\n\nexport type InterpreterOutput = RunningOutput | CodeOutput | ResultOutput | ErrorOutput;\n\nexport enum ApplicationEnvironment {\n  Development = 'development',\n  Production = 'production',\n  Test = 'test'\n}\n\nexport enum Role {\n  Student = 'student',\n  Staff = 'staff',\n  Admin = 'admin'\n}\n\n/**\n * Defines what chapters are available for usage.\n * For external libraries, see ExternalLibrariesTypes.ts\n */\nexport type SourceLanguage = {\n  chapter: number;\n  variant: Variant;\n};\n\nexport const sourceLanguages: SourceLanguage[] = [\n  { chapter: 1, variant: 'default' },\n  { chapter: 1, variant: 'wasm' },\n  { chapter: 1, variant: 'lazy' },\n  { chapter: 2, variant: 'default' },\n  { chapter: 2, variant: 'lazy' },\n  { chapter: 3, variant: 'default' },\n  { chapter: 3, variant: 'concurrent' },\n  { chapter: 3, variant: 'non-det' },\n  { chapter: 4, variant: 'default' },\n  { chapter: 4, variant: 'gpu' }\n];\n\nconst variantDisplay: Map<Variant, string> = new Map([\n  ['wasm', 'WebAssembly'],\n  ['non-det', 'Non-Det'],\n  ['concurrent', 'Concurrent'],\n  ['lazy', 'Lazy'],\n  ['gpu', 'GPU']\n]);\n\nexport const styliseChapter = (chap: number, variant: Variant = 'default') => {\n  let res = `Source \\xa7${chap}`;\n  if (variantDisplay.has(variant)) {\n    res += ' ' + variantDisplay.get(variant);\n  }\n  return res;\n};\n\nconst currentEnvironment = (): ApplicationEnvironment => {\n  switch (process.env.NODE_ENV) {\n    case 'development':\n      return ApplicationEnvironment.Development;\n    case 'production':\n      return ApplicationEnvironment.Production;\n    default:\n      return ApplicationEnvironment.Test;\n  }\n};\n\nexport const defaultAcademy: AcademyState = {\n  gameCanvas: undefined\n};\n\nexport const defaultApplication: ApplicationState = {\n  title: 'Cadet',\n  environment: currentEnvironment()\n};\n\nexport const defaultDashboard: DashboardState = {\n  gradingSummary: []\n};\n\nexport const defaultPlayground: PlaygroundState = {\n  usingSubst: false\n};\n\nexport const defaultEditorValue = '// Type your program in here!';\n\n/**\n * Create a default IWorkspaceState for 'resetting' a workspace.\n * Takes in parameters to set the js-slang library and chapter.\n *\n * @param workspaceLocation the location of the workspace, used for context\n */\nexport const createDefaultWorkspace = (workspaceLocation: WorkspaceLocation): WorkspaceState => ({\n  autogradingResults: [],\n  breakpoints: [],\n  context: createContext<WorkspaceLocation>(\n    Constants.defaultSourceChapter,\n    [],\n    workspaceLocation,\n    Constants.defaultSourceVariant as Variant\n  ),\n  editorPrepend: '',\n  editorSessionId: '',\n  editorValue: workspaceLocation === 'playground' || 'sourcecast' ? defaultEditorValue : '',\n  editorPostpend: '',\n  editorReadonly: false,\n  editorTestcases: [],\n  editorHeight: 150,\n  editorWidth: '50%',\n  externalLibrary: ExternalLibraryName.NONE,\n  execTime: 1000,\n  highlightedLines: [],\n  output: [],\n  replHistory: {\n    browseIndex: null,\n    records: [],\n    originalValue: ''\n  },\n  replValue: '',\n  sharedbAceInitValue: '',\n  sharedbAceIsInviting: false,\n  sideContentActiveTab: SideContentType.questionOverview,\n  websocketStatus: 0,\n  globals: [],\n  isEditorAutorun: false,\n  isRunning: false,\n  isDebugging: false,\n  enableDebugging: true,\n  debuggerContext: {} as DebuggerContext\n});\n\nexport const defaultRoomId = null;\n\nexport const defaultWorkspaceManager: WorkspaceManagerState = {\n  assessment: {\n    ...createDefaultWorkspace('assessment'),\n    currentAssessment: undefined,\n    currentQuestion: undefined,\n    hasUnsavedChanges: false\n  },\n  grading: {\n    ...createDefaultWorkspace('grading'),\n    currentSubmission: undefined,\n    currentQuestion: undefined,\n    hasUnsavedChanges: false\n  },\n  playground: {\n    ...createDefaultWorkspace('playground'),\n    usingSubst: false\n  },\n  sourcecast: {\n    ...createDefaultWorkspace('sourcecast'),\n    audioUrl: '',\n    codeDeltasToApply: null,\n    currentPlayerTime: 0,\n    description: null,\n    inputToApply: null,\n    playbackData: {\n      init: { editorValue: '', chapter: 1, externalLibrary: ExternalLibraryName.NONE },\n      inputs: []\n    },\n    playbackDuration: 0,\n    playbackStatus: PlaybackStatus.paused,\n    sourcecastIndex: null,\n    title: null\n  },\n  sourcereel: {\n    ...createDefaultWorkspace('sourcereel'),\n    playbackData: {\n      init: { editorValue: '', chapter: 1, externalLibrary: ExternalLibraryName.NONE },\n      inputs: []\n    },\n    recordingStatus: RecordingStatus.notStarted,\n    timeElapsedBeforePause: 0,\n    timeResumed: 0\n  }\n};\n\nexport const defaultSession: SessionState = {\n  accessToken: undefined,\n  assessments: new Map<number, Assessment>(),\n  assessmentOverviews: undefined,\n  grade: 0,\n  gradingOverviews: undefined,\n  gradings: new Map<number, Grading>(),\n  group: null,\n  historyHelper: {\n    lastAcademyLocations: [null, null],\n    lastGeneralLocations: [null, null]\n  },\n  maxGrade: 0,\n  maxXp: 0,\n  refreshToken: undefined,\n  role: undefined,\n  name: undefined,\n  story: {\n    story: '',\n    playStory: false\n  },\n  gameState: {\n    completed_quests: [],\n    collectibles: {}\n  },\n  xp: 0,\n  notifications: []\n};\n\nexport const defaultState: OverallState = {\n  academy: defaultAcademy,\n  application: defaultApplication,\n  dashboard: defaultDashboard,\n  playground: defaultPlayground,\n  session: defaultSession,\n  workspaces: defaultWorkspaceManager\n};\n","import { Reducer } from 'redux';\n\nimport { SourceActionType } from '../../utils/ActionsHelper';\nimport { defaultSession } from '../ApplicationTypes';\nimport { SET_GAME_STATE } from '../types/ActionTypes';\nimport { LOG_OUT } from '../types/CommonsTypes';\nimport {\n  SessionState,\n  SET_GOOGLE_USER,\n  SET_TOKENS,\n  SET_USER,\n  UPDATE_ASSESSMENT,\n  UPDATE_ASSESSMENT_OVERVIEWS,\n  UPDATE_GRADING,\n  UPDATE_GRADING_OVERVIEWS,\n  UPDATE_HISTORY_HELPERS,\n  UPDATE_NOTIFICATIONS\n} from '../types/SessionTypes';\n\nexport const SessionsReducer: Reducer<SessionState> = (\n  state = defaultSession,\n  action: SourceActionType\n) => {\n  switch (action.type) {\n    case LOG_OUT:\n      return defaultSession;\n    case SET_TOKENS:\n      return {\n        ...state,\n        accessToken: action.payload.accessToken,\n        refreshToken: action.payload.refreshToken\n      };\n    case SET_USER:\n      return {\n        ...state,\n        ...action.payload\n      };\n    case SET_GOOGLE_USER:\n      return {\n        ...state,\n        googleUser: action.payload\n      };\n    case UPDATE_HISTORY_HELPERS:\n      const helper = state.historyHelper;\n      const isAcademy = isAcademyRe.exec(action.payload) != null;\n      const newAcademyLocations = isAcademy\n        ? [helper.lastAcademyLocations[1], action.payload]\n        : [...helper.lastAcademyLocations];\n      const newGeneralLocations = [helper.lastGeneralLocations[1], action.payload];\n      return {\n        ...state,\n        historyHelper: {\n          lastAcademyLocations: newAcademyLocations,\n          lastGeneralLocations: newGeneralLocations\n        }\n      };\n    case UPDATE_ASSESSMENT:\n      const newAssessments = new Map(state.assessments);\n      newAssessments.set(action.payload.id, action.payload);\n      return {\n        ...state,\n        assessments: newAssessments\n      };\n    case UPDATE_ASSESSMENT_OVERVIEWS:\n      return {\n        ...state,\n        assessmentOverviews: action.payload\n      };\n    case UPDATE_GRADING:\n      const newGradings = new Map(state.gradings);\n      newGradings.set(action.payload.submissionId, action.payload.grading);\n      return {\n        ...state,\n        gradings: newGradings\n      };\n    case UPDATE_GRADING_OVERVIEWS:\n      return {\n        ...state,\n        gradingOverviews: action.payload\n      };\n    case UPDATE_NOTIFICATIONS:\n      return {\n        ...state,\n        notifications: action.payload\n      };\n    case SET_GAME_STATE:\n      return {\n        ...state,\n        gameState: action.payload\n      };\n    default:\n      return state;\n  }\n};\n\nexport const isAcademyRe = new RegExp('^/academy.*', 'i');\n","import { SourceError, Variant } from 'js-slang/dist/types';\n\nimport { ExternalLibrary, ExternalLibraryName } from '../application/types/ExternalTypes';\n\nexport const FETCH_ASSESSMENT_OVERVIEWS = 'FETCH_ASSESSMENT_OVERVIEWS';\nexport const SUBMIT_ASSESSMENT = 'SUBMIT_ASSESSMENT';\n\nexport enum AssessmentStatuses {\n  attempting = 'attempting',\n  attempted = 'attempted',\n  not_attempted = 'not_attempted',\n  submitted = 'submitted'\n}\nexport type AssessmentStatus = keyof typeof AssessmentStatuses;\n\nexport type AssessmentWorkspaceParams = {\n  assessmentId?: string;\n  questionId?: string;\n};\n\nexport enum GradingStatuses {\n  excluded = 'excluded',\n  graded = 'graded',\n  grading = 'grading',\n  none = 'none'\n}\nexport type GradingStatus = keyof typeof GradingStatuses;\n\nexport enum AssessmentCategories {\n  Contest = 'Contest',\n  Mission = 'Mission',\n  Path = 'Path',\n  Sidequest = 'Sidequest',\n  Practical = 'Practical'\n}\nexport type AssessmentCategory = keyof typeof AssessmentCategories;\n\nexport enum TestcaseTypes {\n  // These are rendered in full by the Mission Autograder\n  public = 'public',\n  // These are rendered with a placeholder by the Autograder\n  hidden = 'hidden',\n  // These should only exist in the grading workspace for submissions\n  private = 'private'\n}\nexport type TestcaseType = keyof typeof TestcaseTypes;\n\nexport enum QuestionTypes {\n  programming = 'programming',\n  mcq = 'mcq'\n}\nexport type QuestionType = keyof typeof QuestionTypes;\n\n/*\nW* Used to display information regarding an assessment in the UI.\n*\n * @property closeAt an ISO 8601 compliant date string specifiying when\n *   the assessment closes\n * @property openAt an ISO 8601 compliant date string specifiying when\n *   the assessment opens\n */\nexport type AssessmentOverview = {\n  category: AssessmentCategory;\n  closeAt: string;\n  coverImage: string;\n  fileName?: string; // For mission control\n  grade: number;\n  gradingStatus: GradingStatus;\n  id: number;\n  isPublished?: boolean;\n  maxGrade: number;\n  maxXp: number;\n  number?: string; // For mission control\n  openAt: string;\n  private?: boolean;\n  reading?: string; // For mission control\n  shortSummary: string;\n  status: AssessmentStatus;\n  story: string | null;\n  title: string;\n  xp: number;\n};\n\n/*\n * Used when an assessment is being actively attempted/graded.\n */\nexport type Assessment = {\n  category: AssessmentCategory;\n  globalDeployment?: Library; // For mission control\n  graderDeployment?: Library; // For mission control\n  id: number;\n  longSummary: string;\n  missionPDF: string;\n  title: string;\n  questions: Question[];\n};\n\nexport interface IProgrammingQuestion extends BaseQuestion {\n  answer: string | null;\n  autogradingResults: AutogradingResult[];\n  graderTemplate?: string;\n  prepend: string;\n  postpend: string;\n  solutionTemplate: string;\n  testcases: Testcase[];\n  testcasesPrivate?: Testcase[]; // For mission control\n  type: 'programming';\n}\n\nexport interface IMCQQuestion extends BaseQuestion {\n  answer: number | null;\n  choices: MCQChoice[];\n  solution: number | null;\n  type: 'mcq';\n}\n\nexport type BaseQuestion = {\n  answer: string | number | null;\n  comments?: string;\n  content: string;\n  editorValue?: string | null;\n  grade: number;\n  gradedAt?: string;\n  grader?: {\n    name: string;\n    id: number;\n  };\n  graderLibrary?: Library; // For mission control\n  id: number;\n  library: Library;\n  maxGrade: number;\n  maxXp: number;\n  roomId: string | null;\n  type: QuestionType;\n  xp: number;\n};\n\nexport type Question = IProgrammingQuestion | IMCQQuestion;\n\nexport type Library = {\n  chapter: number;\n  variant?: Variant;\n  external: ExternalLibrary;\n  globals: Array<{\n    0: string;\n    1: any;\n    2?: string; // For mission control\n  }>;\n  moduleParams?: any;\n};\n\nexport type Testcase = {\n  answer: string; // the correct answer to the testcase\n  errors?: SourceError[]; // errors raised by interpreter during execution\n  program: string; // the program to be appended to the student's code\n  result?: any; // the result from the execution of the testcase\n  score: number;\n  type: TestcaseType;\n};\n\nexport type MCQChoice = {\n  content: string;\n  hint: string | null;\n};\n\nexport type AutogradingResult = {\n  resultType: string;\n  expected?: string; // the correct answer for the testcase\n  actual?: string; // the received answer from the student's code\n  errors?: AutogradingError[];\n};\n\nexport type AutogradingError = {\n  errorType: string;\n  line?: number;\n  location?: string;\n  errorLine?: string;\n  errorExplanation?: string;\n};\n\nexport const emptyLibrary = (): Library => {\n  return {\n    chapter: -1,\n    external: {\n      name: 'NONE' as ExternalLibraryName,\n      symbols: []\n    },\n    globals: []\n  };\n};\n\nexport const normalLibrary = (): Library => {\n  return {\n    chapter: 1,\n    external: {\n      name: 'NONE' as ExternalLibraryName,\n      symbols: []\n    },\n    globals: []\n  };\n};\n\nexport const overviewTemplate = (): AssessmentOverview => {\n  return {\n    category: AssessmentCategories.Mission,\n    closeAt: '2100-12-01T00:00+08',\n    coverImage: 'https://fakeimg.pl/300/',\n    grade: 1,\n    id: -1,\n    maxGrade: 0,\n    maxXp: 0,\n    openAt: '2000-01-01T00:00+08',\n    title: 'Insert title here',\n    reading: '',\n    shortSummary: 'Insert short summary here',\n    status: AssessmentStatuses.not_attempted,\n    story: 'mission',\n    xp: 0,\n    gradingStatus: 'none'\n  };\n};\n\nexport const programmingTemplate = (): IProgrammingQuestion => {\n  return {\n    autogradingResults: [],\n    answer: '// [Marking Scheme]\\n// 1 mark for correct answer',\n    roomId: '19422043',\n    content: 'Enter content here',\n    id: 0,\n    library: emptyLibrary(),\n    graderLibrary: emptyLibrary(),\n    prepend: '',\n    solutionTemplate: '//This is a mock solution template',\n    postpend: '',\n    testcases: [],\n    testcasesPrivate: [],\n    type: 'programming',\n    xp: 0,\n    grade: 0,\n    maxGrade: 0,\n    maxXp: 0\n  };\n};\n\nexport const testcaseTemplate = (): Testcase => {\n  return {\n    type: TestcaseTypes.public,\n    answer: '',\n    score: 0,\n    program: ''\n  };\n};\n\nexport const mcqTemplate = (): IMCQQuestion => {\n  return {\n    answer: 3,\n    roomId: null,\n    content: 'This is a mock MCQ question',\n    choices: [\n      {\n        content: 'A',\n        hint: null\n      },\n      {\n        content: 'B',\n        hint: null\n      },\n      {\n        content: 'C',\n        hint: null\n      },\n      {\n        content: 'D',\n        hint: null\n      }\n    ],\n    id: 2,\n    library: emptyLibrary(),\n    graderLibrary: emptyLibrary(),\n    type: 'mcq',\n    solution: 0,\n    xp: 0,\n    grade: 0,\n    maxGrade: 0,\n    maxXp: 0\n  };\n};\n\nexport const assessmentTemplate = (): Assessment => {\n  return {\n    category: 'Mission',\n    globalDeployment: normalLibrary(),\n    graderDeployment: emptyLibrary(),\n    id: -1,\n    longSummary: 'Insert mission briefing here',\n    missionPDF: 'www.google.com',\n    questions: [programmingTemplate()],\n    title: 'Insert title here'\n  };\n};\n","import { Button, Classes, Menu, MenuItem } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport { ItemListRenderer, ItemRenderer, Select } from '@blueprintjs/select';\nimport { Variant } from 'js-slang/dist/types';\nimport * as React from 'react';\n\nimport { SourceLanguage, sourceLanguages, styliseChapter } from '../application/ApplicationTypes';\nimport { Chapter } from '../application/types/ChapterTypes';\n\ntype ControlBarChapterSelectProps = DispatchProps & StateProps;\n\ntype DispatchProps = {\n  handleChapterSelect?: (i: Chapter, e?: React.SyntheticEvent<HTMLElement>) => void;\n};\n\ntype StateProps = {\n  sourceChapter: number;\n  sourceVariant: Variant;\n  disabled?: boolean;\n  key: string;\n};\n\nexport function ControlBarChapterSelect(props: ControlBarChapterSelectProps) {\n  const chapters = sourceLanguages.map((lang: SourceLanguage) => {\n    return {\n      chapter: lang.chapter,\n      variant: lang.variant,\n      displayName: styliseChapter(lang.chapter, lang.variant)\n    };\n  });\n\n  const chapterListRenderer: ItemListRenderer<Chapter> = ({\n    items,\n    itemsParentRef,\n    query,\n    renderItem\n  }) => {\n    const defaultLangs = items.filter(item => item.variant === 'default').map(renderItem);\n    const variantLangs = items.filter(item => item.variant !== 'default').map(renderItem);\n    return (\n      <Menu ulRef={itemsParentRef}>\n        {defaultLangs}\n        <MenuItem active={false} key=\"variant-menu\" text=\"Variant\" icon=\"cog\">\n          {variantLangs}\n        </MenuItem>\n      </Menu>\n    );\n  };\n\n  const chapterRenderer: ItemRenderer<Chapter> = (lang, { handleClick }) => (\n    <MenuItem\n      active={false}\n      key={lang.chapter + lang.variant}\n      onClick={handleClick}\n      text={lang.displayName}\n    />\n  );\n  const ChapterSelectComponent = Select.ofType<Chapter>();\n\n  const chapterSelector = (currentChap: number, currentVariant: Variant, disabled: boolean) => {\n    return (\n      <div>\n        <Button\n          className={Classes.MINIMAL}\n          text={styliseChapter(currentChap, currentVariant)}\n          rightIcon={disabled ? null : IconNames.DOUBLE_CARET_VERTICAL}\n          disabled={disabled || false}\n        />\n      </div>\n    );\n  };\n\n  const chapSelect = (\n    currentChap: number,\n    currentVariant: Variant,\n    handleSelect = (i: Chapter, e?: React.SyntheticEvent<HTMLElement>) => {},\n    disabled: boolean\n  ) => (\n    <ChapterSelectComponent\n      className={Classes.MINIMAL}\n      items={chapters}\n      onItemSelect={handleSelect}\n      itemRenderer={chapterRenderer}\n      itemListRenderer={chapterListRenderer}\n      filterable={false}\n      disabled={disabled || false}\n    >\n      {chapterSelector(currentChap, currentVariant, disabled)}\n    </ChapterSelectComponent>\n  );\n\n  return chapSelect(\n    props.sourceChapter,\n    props.sourceVariant,\n    props.handleChapterSelect,\n    props.disabled || false\n  );\n}\n","import { Button, IButtonProps, Icon, IconName, Intent } from '@blueprintjs/core';\nimport * as React from 'react';\n\ntype controlButtonOptionals = {\n  className?: string;\n  fullWidth?: boolean;\n  iconColor?: string;\n  iconOnRight?: boolean;\n  intent?: Intent;\n  minimal?: boolean;\n  type?: 'submit' | 'reset' | 'button';\n};\n\nconst defaultOptions = {\n  className: '',\n  fullWidth: false,\n  iconOnRight: false,\n  intent: Intent.NONE,\n  minimal: true\n};\n\nconst controlButton = (\n  label: string,\n  icon: IconName | null,\n  onClick: (() => void) | null = null,\n  options: controlButtonOptionals = {},\n  disabled: boolean = false\n) => {\n  const opts: controlButtonOptionals = { ...defaultOptions, ...options };\n  const props: IButtonProps = { disabled };\n\n  props.fill = opts.fullWidth !== undefined && opts.fullWidth;\n  props.intent = opts.intent === undefined ? Intent.NONE : opts.intent;\n  props.minimal = opts.minimal !== undefined && opts.minimal;\n  props.className = opts.className;\n  props.type = opts.type;\n\n  if (icon) {\n    const ic: JSX.Element = (\n      <Icon icon={icon} color={opts.iconColor ? opts.iconColor : undefined} />\n    );\n    opts.iconOnRight ? (props.rightIcon = ic) : (props.icon = ic);\n  }\n\n  if (onClick) {\n    props.onClick = onClick;\n  }\n\n  return <Button {...props}>{label}</Button>;\n};\n\nexport default controlButton;\n","import { IconNames } from '@blueprintjs/icons';\n\nimport controlButton from '../ControlButton';\n\ntype ControlBarClearButtonProps = DispatchProps & StateProps;\n\ntype DispatchProps = {\n  handleReplOutputClear: () => void;\n};\n\ntype StateProps = {\n  key: string;\n};\n\nexport function ControlBarClearButton(props: ControlBarClearButtonProps) {\n  return controlButton('Clear', IconNames.REMOVE, props.handleReplOutputClear);\n}\n","import { Tooltip } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport * as React from 'react';\n\nimport controlButton from '../ControlButton';\n\ntype ControlBarEvalButtonProps = DispatchProps & StateProps;\n\ntype DispatchProps = {\n  handleReplEval: () => void;\n};\n\ntype StateProps = {\n  isRunning: boolean;\n  key: string;\n};\n\nexport function ControlBarEvalButton(props: ControlBarEvalButtonProps) {\n  return props.isRunning ? null : (\n    <Tooltip content=\"...or press shift-enter in the REPL\">\n      {controlButton('Eval', IconNames.CODE, props.handleReplEval)}\n    </Tooltip>\n  );\n}\n","import { IconNames } from '@blueprintjs/icons';\n\nimport controlButton from '../ControlButton';\n\ntype ControlBarReturnToAcademyButtonProps = DispatchProps & StateProps;\n\ntype DispatchProps = {\n  onClick?(): any;\n};\n\ntype StateProps = {\n  key: string;\n};\n\nexport function ControlBarReturnToAcademyButton(props: ControlBarReturnToAcademyButtonProps) {\n  return controlButton('Return to Academy', IconNames.ARROW_RIGHT, props.onClick, {\n    iconOnRight: true\n  });\n}\n","import { IconNames } from '@blueprintjs/icons';\nimport * as React from 'react';\n\nimport controlButton from '../ControlButton';\nimport { ControlBarReturnToAcademyButton } from './ControlBarReturnToAcademyButton';\n\ntype ControlBarNextButtonProps = DispatchProps & StateProps;\n\ntype DispatchProps = {\n  onClickNext?(): any;\n  onClickReturn?(): any;\n};\n\ntype StateProps = {\n  key: string;\n  questionProgress: [number, number] | null;\n};\n\nexport function ControlBarNextButton(props: ControlBarNextButtonProps) {\n  return props.questionProgress![0] === props.questionProgress![1] ? (\n    <ControlBarReturnToAcademyButton onClick={props.onClickReturn} key=\"return_to_academy\" />\n  ) : (\n    controlButton('Next', IconNames.ARROW_RIGHT, props.onClickNext, { iconOnRight: true })\n  );\n}\n","import { IconNames } from '@blueprintjs/icons';\n\nimport controlButton from '../ControlButton';\n\ntype ControlBarPreviousButtonProps = DispatchProps & StateProps;\n\ntype DispatchProps = {\n  onClick?(): any;\n};\n\ntype StateProps = {\n  key: string;\n  questionProgress: [number, number] | null;\n};\n\nexport function ControlBarPreviousButton(props: ControlBarPreviousButtonProps) {\n  return props.questionProgress![0] <= 1\n    ? null\n    : controlButton('Previous', IconNames.ARROW_LEFT, props.onClick);\n}\n","import controlButton from '../ControlButton';\n\n/**\n * @prop questionProgress a tuple of (current question number, question length) where\n *   the current question number is 1-based.\n */\ntype ControlBarQuestionViewButtonProps = StateProps;\n\ntype StateProps = {\n  questionProgress: [number, number] | null;\n  key: string;\n};\n\nexport function ControlBarQuestionViewButton(props: ControlBarQuestionViewButtonProps) {\n  return controlButton(\n    `Question ${props.questionProgress![0]} of ${props.questionProgress![1]}  `,\n    null,\n    null,\n    {},\n    true\n  );\n}\n","import { IconNames } from '@blueprintjs/icons';\n\nimport controlButton from '../ControlButton';\n\ntype ControlBarResetButtonProps = DispatchProps & StateProps;\n\ntype DispatchProps = {\n  onClick?(): any;\n};\n\ntype StateProps = {\n  key: string;\n};\n\nexport function ControlBarResetButton(props: ControlBarResetButtonProps) {\n  return controlButton('Reset', IconNames.REPEAT, props.onClick);\n}\n","import { Tooltip } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport * as React from 'react';\n\nimport controlButton from '../ControlButton';\n\ntype ControlButtonRunButtonProps = DispatchProps & StateProps;\n\ntype DispatchProps = {\n  handleEditorEval: () => void;\n};\n\ntype StateProps = {\n  key: string;\n};\n\nexport function ControlBarRunButton(props: ControlButtonRunButtonProps) {\n  return (\n    <Tooltip content=\"...or press shift-enter in the editor\">\n      {controlButton('Run', IconNames.PLAY, props.handleEditorEval)}\n    </Tooltip>\n  );\n}\n","import { Intent } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\n\nimport controlButton from '../ControlButton';\n\ntype ControlBarSaveButtonProps = DispatchProps & StateProps;\n\ntype DispatchProps = {\n  onClickSave?(): any;\n};\n\ntype StateProps = {\n  key: string;\n  hasUnsavedChanges?: boolean;\n};\n\nexport function ControlButtonSaveButton(props: ControlBarSaveButtonProps) {\n  const saveButtonOpts = props.hasUnsavedChanges ? { intent: Intent.WARNING, minimal: false } : {};\n\n  return controlButton('Save', IconNames.FLOPPY_DISK, props.onClickSave, saveButtonOpts);\n}\n","import { Classes } from '@blueprintjs/core';\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { Converter } from 'showdown';\n\ntype MarkdownProps = {\n  className?: string;\n  content: string;\n  openLinksInNewWindow?: boolean;\n  simplifiedAutoLink?: boolean;\n  strikethrough?: boolean;\n  tasklists?: boolean;\n};\n\nconst Markdown: React.FC<MarkdownProps> = props => {\n  const converter = new Converter({\n    tables: true,\n    simplifiedAutoLink: props.simplifiedAutoLink,\n    strikethrough: props.strikethrough,\n    tasklists: props.tasklists,\n    openLinksInNewWindow: props.openLinksInNewWindow\n  });\n\n  return (\n    <div\n      className={classNames(props.className ? props.className : 'md', Classes.RUNNING_TEXT)}\n      dangerouslySetInnerHTML={{ __html: converter.makeHtml(props.content) }}\n    />\n  );\n};\n\nexport default React.memo(Markdown);\n","import * as React from 'react';\n\ntype SideContentCanvasOutputProps = StateProps;\n\ntype StateProps = {\n  canvas: HTMLCanvasElement;\n};\n\n/**\n * Takes the output of the rendered graphics (in a hidden canvas tag under <body>)\n * and makes it into a new <canvas> output for viewing.\n */\nclass SideContentCanvasOutput extends React.Component<SideContentCanvasOutputProps, {}> {\n  private $parent: HTMLElement | null = null;\n\n  public componentDidMount() {\n    this.$parent!.appendChild(this.props.canvas);\n    this.props.canvas.hidden = false;\n  }\n\n  public render() {\n    return <div ref={r => (this.$parent = r)} className=\"canvas-container\" />;\n  }\n}\n\nexport default SideContentCanvasOutput;\n","import { Card, Classes, Elevation, Pre } from '@blueprintjs/core';\nimport classNames from 'classnames';\nimport { parseError } from 'js-slang';\nimport { stringify } from 'js-slang/dist/utils/stringify';\nimport * as React from 'react';\n\nimport { Testcase, TestcaseTypes } from '../assessment/AssessmentTypes';\nimport SideContentCanvasOutput from './SideContentCanvasOutput';\n\ntype SideContentAutograderCardProps = DispatchProps & StateProps;\n\ntype DispatchProps = {\n  handleTestcaseEval: (testcaseId: number) => void;\n};\n\ntype StateProps = {\n  testcase: Testcase;\n  index: number;\n};\n\nconst renderResult = (value: any) => {\n  /** A class which is the output of the show() function */\n  const ShapeDrawn = (window as any).ShapeDrawn;\n  if (typeof ShapeDrawn !== 'undefined' && value instanceof ShapeDrawn) {\n    return <SideContentCanvasOutput canvas={value.$canvas} />;\n  } else {\n    return stringify(value);\n  }\n};\n\nclass SideContentAutograderCard extends React.Component<SideContentAutograderCardProps, {}> {\n  public render() {\n    const isEvaluated = this.props.testcase.result !== undefined || this.props.testcase.errors;\n    const isEqual = stringify(this.props.testcase.result) === this.props.testcase.answer;\n\n    const extraClasses = {\n      correct: isEvaluated && isEqual,\n      wrong: isEvaluated && !isEqual,\n      private: this.props.testcase.type === TestcaseTypes.private\n    };\n\n    // Render a placeholder cell in place of the actual testcase data for hidden testcases\n    if (this.props.testcase.type === TestcaseTypes.hidden) {\n      return (\n        <div className={classNames('AutograderCard', extraClasses)}>\n          <Card className=\"bp3-interactive\" elevation={Elevation.ONE} onClick={this.evalSelf}>\n            <Pre className=\"testcase-placeholder\">Hidden testcase</Pre>\n          </Card>\n        </div>\n      );\n    }\n\n    return (\n      <div className={classNames('AutograderCard', extraClasses)}>\n        <Card className={Classes.INTERACTIVE} elevation={Elevation.ONE} onClick={this.evalSelf}>\n          <Pre className=\"testcase-program\">{this.props.testcase.program}</Pre>\n          <Pre className=\"testcase-expected\">{this.props.testcase.answer}</Pre>\n          <Pre className=\"testcase-actual\">\n            {this.props.testcase.errors\n              ? parseError(this.props.testcase.errors)\n              : this.props.testcase.result !== undefined\n              ? renderResult(this.props.testcase.result)\n              : 'No Answer'}\n          </Pre>\n        </Card>\n      </div>\n    );\n  }\n\n  // Enable clicks on the card to run the testcase\n  private evalSelf = () => {\n    this.props.handleTestcaseEval(this.props.index);\n  };\n}\n\nexport default SideContentAutograderCard;\n","import { Card, Elevation, Pre } from '@blueprintjs/core';\nimport * as React from 'react';\n\nimport { AutogradingError, AutogradingResult } from '../assessment/AssessmentTypes';\n\ntype SideContentResultCardProps = StateProps;\n\ntype StateProps = {\n  index: number;\n  result: AutogradingResult;\n};\n\nclass SideContentResultCard extends React.Component<SideContentResultCardProps, {}> {\n  public render() {\n    const buildErrorString = (errors: AutogradingError[]) => {\n      return errors\n        .map(error =>\n          error.errorType === 'timeout'\n            ? 'Timeout: Submission exceeded time limit for this test case.'\n            : `Line ${error.line}: Error: ${error.errorExplanation}`\n        )\n        .join('\\n');\n    };\n\n    const isCorrect = this.props.result.resultType === 'pass' ? ' correct' : ' wrong';\n\n    return (\n      <div className={'ResultCard' + isCorrect}>\n        <Card elevation={Elevation.ONE}>\n          <div className=\"result-data\">\n            <div className=\"result-idx\">{this.props.index + 1}</div>\n            <div className=\"result-status\">{this.props.result.resultType.toUpperCase()}</div>\n          </div>\n          <Pre className=\"result-expected\">{this.props.result.expected!}</Pre>\n          <Pre className=\"result-actual\">\n            {this.props.result.resultType === 'error'\n              ? buildErrorString(this.props.result.errors!)\n              : this.props.result.actual!}\n          </Pre>\n        </Card>\n      </div>\n    );\n  }\n}\n\nexport default SideContentResultCard;\n","import { Collapse, Icon } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport * as React from 'react';\n\nimport { AutogradingResult, Testcase } from '../assessment/AssessmentTypes';\nimport controlButton from '../ControlButton';\nimport SideContentAutograderCard from './SideContentAutograderCard';\nimport SideContentResultCard from './SideContentResultCard';\n\nexport type SideContentAutograderProps = DispatchProps & StateProps;\n\ntype DispatchProps = {\n  handleTestcaseEval: (testcaseId: number) => void;\n};\n\ntype StateProps = {\n  autogradingResults: AutogradingResult[];\n  testcases: Testcase[];\n};\n\ntype State = {\n  showTestcases: boolean;\n  showResults: boolean;\n};\n\nclass SideContentAutograder extends React.Component<SideContentAutograderProps, State> {\n  public constructor(props: SideContentAutograderProps) {\n    super(props);\n\n    this.state = {\n      showTestcases: true,\n      showResults: true\n    };\n  }\n\n  public render() {\n    const testcasesHeader = (\n      <div className=\"testcases-header\">\n        <div className=\"header-fn\">\n          <Icon icon={IconNames.CARET_DOWN} />\n          Testcase (click to run)\n        </div>\n        <div className=\"header-expected\">\n          <Icon icon={IconNames.CARET_DOWN} />\n          Expected result\n        </div>\n        <div className=\"header-actual\">\n          <Icon icon={IconNames.CARET_DOWN} />\n          Actual result\n        </div>\n      </div>\n    );\n\n    const resultsHeader = (\n      <div className=\"results-header\">\n        <div className=\"header-data\">\n          <div className=\"header-sn\">\n            <Icon icon={IconNames.CARET_DOWN} />\n            S/N\n          </div>\n          <div className=\"header-status\">\n            <Icon icon={IconNames.CARET_DOWN} />\n            Testcase status\n          </div>\n        </div>\n        <div className=\"header-expected\">\n          <Icon icon={IconNames.CARET_DOWN} />\n          Expected result\n        </div>\n        <div className=\"header-actual\">\n          <Icon icon={IconNames.CARET_DOWN} />\n          Actual result\n        </div>\n      </div>\n    );\n\n    const testcases =\n      this.props.testcases.length > 0 ? (\n        <div>\n          {testcasesHeader}\n          {this.props.testcases.map((testcase, index) => (\n            <SideContentAutograderCard\n              key={index}\n              index={index}\n              testcase={testcase}\n              handleTestcaseEval={this.props.handleTestcaseEval}\n            />\n          ))}\n        </div>\n      ) : (\n        <div className=\"noResults\">There are no testcases provided for this question.</div>\n      );\n\n    const results =\n      this.props.autogradingResults.length > 0 ? (\n        <div>\n          {resultsHeader}\n          {this.props.autogradingResults.map((result, index) => (\n            <SideContentResultCard key={index} index={index} result={result} />\n          ))}\n        </div>\n      ) : (\n        <div className=\"noResults\">There are no results to show.</div>\n      );\n\n    const collapseButton = (label: string, isOpen: boolean, toggleFunc: () => void) =>\n      controlButton(label, isOpen ? IconNames.CARET_DOWN : IconNames.CARET_RIGHT, toggleFunc, {\n        minimal: true,\n        className: 'collapse-button'\n      });\n\n    return (\n      <div className=\"Autograder\">\n        {collapseButton('Testcases', this.state.showTestcases, this.toggleTestcases)}\n        <Collapse isOpen={this.state.showTestcases}>{testcases}</Collapse>\n        {collapseButton('Autograder Results', this.state.showResults, this.toggleResults)}\n        <Collapse isOpen={this.state.showResults}>{results}</Collapse>\n      </div>\n    );\n  }\n\n  private toggleTestcases = () =>\n    this.setState({\n      ...this.state,\n      showTestcases: !this.state.showTestcases\n    });\n\n  private toggleResults = () =>\n    this.setState({\n      ...this.state,\n      showResults: !this.state.showResults\n    });\n}\n\nexport default SideContentAutograder;\n","import { Button, Classes } from '@blueprintjs/core';\nimport classNames from 'classnames';\nimport * as React from 'react';\n\nclass SideContentToneMatrix extends React.Component<{}, {}> {\n  private $container: HTMLElement | null = null;\n\n  public shouldComponentUpdate() {\n    return false;\n  }\n\n  public componentDidMount() {\n    if ((window as any).ToneMatrix) {\n      (window as any).ToneMatrix.initialise_matrix(this.$container!);\n    }\n  }\n\n  public handleClear() {\n    (window as any).ToneMatrix.clear_matrix();\n  }\n\n  public handleRandomise() {\n    (window as any).ToneMatrix.randomise_matrix();\n  }\n\n  public render() {\n    return (\n      <div className=\"sa-tone-matrix\">\n        <div className=\"row\">\n          <div className={classNames('controls', 'col-xs-12', Classes.DARK, Classes.BUTTON_GROUP)}>\n            <Button id=\"clear-matrix\" onClick={this.handleClear}>\n              Clear\n            </Button>\n            <Button id=\"randomise-matrix\" onClick={this.handleRandomise}>\n              Randomise\n            </Button>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-xs-12\" ref={r => (this.$container = r)} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default SideContentToneMatrix;\n","import moment from 'moment';\n\n/**\n * Checks if a date is before or at the current time.\n *\n * @param {string} d an ISO 8601 compliant date string\n *   e.g 2018-07-06T10:20:09.961Z\n * @returns {boolean} true if the date specified by the paramter\n *   is before the time of execution of this function.\n */\nexport const beforeNow = (dateString: string): boolean => {\n  const date = moment(dateString);\n  const now = moment();\n  return date.isBefore(now);\n};\n\n/**\n * Return a string representation of a date that is\n * nice to look at. To be used for displaying the date,\n * e.g when showing the assessment overview.\n *\n * @param {string} d an ISO 8601 compliant date string\n *   e.g 2018-07-06T10:20:09.961Z\n * @returns {string} A user-friendly readable date string,\n *   e.g 7th June, 20:09\n */\nexport const getPrettyDate = (dateString: string): string => {\n  const date = moment(dateString);\n  const prettyDate = date.format('Do MMMM, HH:mm');\n  return prettyDate;\n};\n\nexport const getStandardDateTime = (dateString: string): string => {\n  const date = moment(dateString);\n  const prettyDate = date.format('MMMM Do YYYY, HH:mm');\n  return prettyDate;\n};\n\nexport const getStandardDate = (dateString: string): string => {\n  const date = moment(dateString);\n  const prettyDate = date.format('MMMM Do YYYY');\n  return prettyDate;\n};\n","/** history is created and exported here instead of in src/index.tsx as jest\n * would otherwise throw an error. See: https://stackoverflow.com/a/42611909/6910451\n */\nimport { createBrowserHistory } from 'history';\n\n/**\n * HistoryHelper is a slice of the session property of the application redux\n * store. It keeps track of the last visited location in general, and the last\n * visited location under /academy. This allows us to implement different routes\n * for the 'SOURCE ACADEMY' button depending on the current location of the\n * user.\n */\nexport type HistoryHelper = {\n  lastAcademyLocations: lastLocation[];\n  lastGeneralLocations: lastLocation[];\n};\n\ntype lastLocation = string | null;\n\nexport const history = createBrowserHistory({ basename: process.env.PUBLIC_URL });\n","import { Intent, IToastProps, Position, Toaster } from '@blueprintjs/core';\n\nconst notification = Toaster.create({\n  position: Position.TOP\n});\n\nexport const showSuccessMessage = (\n  message: string | JSX.Element,\n  timeout: number = 2000,\n  key?: string\n) =>\n  notification.show(\n    {\n      intent: Intent.SUCCESS,\n      message,\n      timeout\n    },\n    key\n  );\n\nexport const showWarningMessage = (\n  message: string | JSX.Element,\n  timeout: number = 2000,\n  key?: string\n) =>\n  notification.show(\n    {\n      intent: Intent.WARNING,\n      message,\n      timeout\n    },\n    key\n  );\n\nexport const showMessage = (props: IToastProps, key?: string) => notification.show(props, key);\n\nexport const dismiss = (key: string) => notification.dismiss(key);\n","import { AssessmentCategories, AssessmentCategory } from '../assessment/AssessmentTypes';\n\n/**\n * Converts an AssessmentCategory into a string for use in URLs.\n *\n * Note that there is an exception to the usual logic, for sidequests.\n * Sidequests show up on the frontend as 'Quests' (#295) and the URLs\n * must be represented as such.\n *\n * @param {AssessmentCategory} cat - Any AssessmentCategory, usually\n *   retrieved from the AssessmentCategories enum\n */\nexport const assessmentCategoryLink = (cat: AssessmentCategory): string =>\n  cat === AssessmentCategories.Sidequest ? 'quests' : cat.toLowerCase().concat('s');\n\n/** Converts an optinal string\n *  parameter into an integer or null value.\n *\n *  @param {string} str - An optional string to be\n *    converted to an integer.\n */\nexport const stringParamToInt = (str?: string): number | null => {\n  if (str === undefined) {\n    return null;\n  }\n  const num = parseInt(str, 10);\n  return Number.isInteger(num) ? num : null;\n};\n","import { Classes } from '@blueprintjs/core';\nimport classNames from 'classnames';\nimport * as React from 'react';\n\nexport type ControlBarProps = OwnProps;\n\ntype OwnProps = {\n  editorButtons: Array<JSX.Element | null>;\n  flowButtons?: Array<JSX.Element | null>;\n  replButtons: Array<JSX.Element | null>;\n};\n\nfunction ControlBar(props: ControlBarProps) {\n  const editorControl = () => {\n    return (\n      <div className={classNames('ControlBar_editor', Classes.BUTTON_GROUP)}>\n        {props.editorButtons}\n      </div>\n    );\n  };\n\n  const flowControl = () => {\n    return (\n      props.flowButtons && (\n        <div className={classNames('ControlBar_flow', Classes.BUTTON_GROUP)}>\n          {props.flowButtons}\n        </div>\n      )\n    );\n  };\n\n  const replControl = () => {\n    return (\n      <div className={classNames('ControlBar_repl', Classes.BUTTON_GROUP)}>{props.replButtons}</div>\n    );\n  };\n\n  return (\n    <div className=\"ControlBar\">\n      {editorControl()}\n      {flowControl()}\n      {replControl()}\n    </div>\n  );\n}\n\nexport default ControlBar;\n","import { SourceDocumentation } from 'js-slang';\n\nimport { externalLibraries } from '../application/types/ExternalTypes';\n\nconst externalLibrariesDocumentation = {};\n\nconst MAX_CAPTION_LENGTH = 25;\n\nfunction shortenCaption(name: string): string {\n  if (name.length <= MAX_CAPTION_LENGTH) {\n    return name;\n  }\n\n  return (name = name.substring(0, MAX_CAPTION_LENGTH - 3) + '...');\n}\n\nfor (const [lib, names] of externalLibraries) {\n  const libDocs = names.map((name: string) => {\n    if (name in SourceDocumentation.ext_lib) {\n      return {\n        caption: shortenCaption(name),\n        value: name,\n        meta: SourceDocumentation.ext_lib[name].meta,\n        docHTML: SourceDocumentation.ext_lib[name].description\n      };\n    } else {\n      return {\n        caption: shortenCaption(name),\n        value: name,\n        meta: 'const'\n      };\n    }\n  });\n\n  externalLibrariesDocumentation[lib] = libDocs;\n}\n\nconst builtinDocumentation = {};\n\nObject.entries(SourceDocumentation.builtins).forEach((chapterDoc: any) => {\n  const [chapter, docs] = chapterDoc;\n  builtinDocumentation[chapter] = Object.entries(docs).map((entry: any) => {\n    const [name, info] = entry;\n    return {\n      caption: shortenCaption(name),\n      value: name,\n      meta: info.meta,\n      docHTML: info.description\n    };\n  });\n});\n\nexport const Documentation = {\n  builtins: builtinDocumentation,\n  externalLibraries: externalLibrariesDocumentation\n};\n","import React from 'react';\n\n// The following section is licensed under the following terms:\n//\n// MIT License\n//\n// Copyright (c) 2019 Jared Lunde\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\n// The following hook is from\n// https://github.com/jaredLunde/react-hook/blob/master/packages/merged-ref/src/index.tsx\nexport const useMergedRef = <T extends any>(...refs: React.Ref<T>[]): React.RefCallback<T> => (\n  element: T\n) =>\n  refs.forEach(ref => {\n    if (typeof ref === 'function') ref(element);\n    else if (ref && typeof ref === 'object') (ref as React.MutableRefObject<T>).current = element;\n  });\n\n// End\n\n/**\n * This hook sends a request to the backend to fetch the initial state of the field\n *\n * @param requestFn The function that creates a request\n * @param defaultValue T\n */\nexport function useRequest<T>(requestFn: () => Promise<T>, defaultValue: T) {\n  const [value, setValue] = React.useState<T>(defaultValue);\n\n  React.useEffect(() => {\n    (async () => {\n      const fetchedValue = await requestFn();\n      setValue(fetchedValue);\n    })();\n  }, [requestFn]);\n\n  return { value, setValue };\n}\n\n/**\n * This hook creates an input prop that can\n * be attached as props for text fields.\n * When attached as prop, any change in the text field\n * will cause the value of the hook to change\n *\n * @param defaultValue default value of input field\n */\nexport function useInput<T>(defaultValue: T) {\n  const [value, setValue] = React.useState<T>(defaultValue);\n\n  return {\n    value,\n    setValue,\n    inputProps: {\n      value,\n      onChange: (event: any) => {\n        setValue(event.target.value);\n      }\n    }\n  };\n}\n","export type KeyFunction = keyof typeof keyBindings;\n\nexport const keyBindings = {\n  evaluate: {\n    win: 'Shift-Enter',\n    mac: 'Shift-Enter'\n  },\n  navigate: {\n    win: 'Ctrl-B',\n    mac: 'Command-B'\n  },\n  refactor: {\n    win: 'Ctrl-M',\n    mac: 'Command-M'\n  },\n  highlightScope: {\n    win: 'Ctrl-Shift-H',\n    mac: 'Command-Shift-H'\n  },\n  typeInferenceDisplay: {\n    win: 'Ctrl-Shift-M',\n    mac: 'Command-Shift-M'\n  }\n};\n","import { Ace, Range as AceRange } from 'ace-builds';\nimport { createContext, getAllOccurrencesInScope, getScope } from 'js-slang';\nimport * as React from 'react';\n\nimport { EditorHook } from './Editor';\n\nconst useHighlighting: EditorHook = (inProps, outProps, keyBindings, reactAceRef) => {\n  const markerIdsRef = React.useRef<Array<number>>([]);\n\n  // editorValue is the prop that is going to change all the time\n  // use a ref so that the callbacks below can be memoised\n  const editorValueRef = React.useRef<string>(inProps.editorValue);\n  React.useEffect(() => {\n    editorValueRef.current = inProps.editorValue;\n  }, [inProps.editorValue]);\n\n  const { sourceChapter } = inProps;\n  const handleVariableHighlighting = React.useCallback(() => {\n    // using Ace Editor's way of highlighting as seen here: https://github.com/ajaxorg/ace/blob/master/lib/ace/editor.js#L497\n    // We use async blocks so we don't block the browser during editing\n\n    setTimeout(() => {\n      if (!reactAceRef.current) {\n        return;\n      }\n      const editor = reactAceRef.current.editor;\n      const session: Ace.EditSession = editor.session;\n      const code = editorValueRef.current;\n      const chapterNumber = sourceChapter;\n      const position = editor.getCursorPosition();\n      if (!session || !(session as any).bgTokenizer) {\n        return;\n      }\n      markerIdsRef.current.forEach(id => {\n        session.removeMarker(id);\n      });\n      const ranges = getAllOccurrencesInScope(code, createContext(chapterNumber), {\n        line: position.row + 1,\n        column: position.column\n      }).map(\n        loc => new AceRange(loc.start.line - 1, loc.start.column, loc.end.line - 1, loc.end.column)\n      );\n\n      const markerType = 'ace_variable_highlighting';\n      markerIdsRef.current = ranges.map(range => {\n        // returns the marker ID for removal later\n        return session.addMarker(range, markerType, 'text');\n      });\n    }, 10);\n  }, [reactAceRef, sourceChapter]);\n\n  const handleHighlightScope = React.useCallback(() => {\n    if (!reactAceRef.current) {\n      return;\n    }\n    const code = editorValueRef.current;\n    const chapter = sourceChapter;\n    const position = reactAceRef.current.editor.getCursorPosition();\n\n    const ranges = getScope(code, createContext(chapter), {\n      line: position.row + 1,\n      column: position.column\n    });\n\n    if (ranges.length !== 0) {\n      ranges.forEach(range => {\n        // Highlight the scope ranges\n        markerIdsRef.current.push(\n          reactAceRef.current!.editor.session.addMarker(\n            new AceRange(\n              range.start.line - 1,\n              range.start.column,\n              range.end.line - 1,\n              range.end.column\n            ),\n            'ace_selection',\n            'text'\n          )\n        );\n      });\n    }\n  }, [reactAceRef, sourceChapter]);\n\n  const { onChange: prevOnChange, onCursorChange: prevOnCursorChange } = outProps;\n  outProps.onChange = (...args) => {\n    handleVariableHighlighting();\n    prevOnChange && prevOnChange(...args);\n  };\n  outProps.onCursorChange = (...args) => {\n    handleVariableHighlighting();\n    prevOnCursorChange && prevOnCursorChange(...args);\n  };\n  keyBindings.highlightScope = handleHighlightScope;\n};\n\nexport default useHighlighting;\n","import { createContext, hasDeclaration } from 'js-slang';\nimport * as React from 'react';\n\nimport { Documentation } from '../documentation/Documentation';\nimport { Links } from '../utils/Constants';\nimport { EditorHook } from './Editor';\n\n// EditorHook structure:\n// EditorHooks grant access to 4 things:\n// inProps are provided by the parent component\n// outProps go into the underlying React-Ace\n// keyBindings allow exporting new hotkeys\n// reactAceRef is the underlying reactAce instance for hooking.\n\nconst useNavigation: EditorHook = (inProps, outProps, keyBindings, reactAceRef) => {\n  // editorValue is the prop that is going to change all the time\n  // use a ref so that the callbacks below can be memoised\n  const editorValueRef = React.useRef<string>(inProps.editorValue);\n  React.useEffect(() => {\n    editorValueRef.current = inProps.editorValue;\n  }, [inProps.editorValue]);\n\n  const { sourceChapter, handleDeclarationNavigate } = inProps;\n  const sourceVariant = inProps.sourceVariant === 'default' ? '' : `_${inProps.sourceVariant}`;\n  const external = inProps.externalLibraryName === undefined ? 'NONE' : inProps.externalLibraryName;\n  const externalUrl = inProps.externalLibraryName === 'ALL' ? `External%20libraries` : external;\n\n  const handleNavigate = React.useCallback(() => {\n    const editor = reactAceRef.current!.editor;\n    const pos = editor.selection.getCursor();\n    const token = editor.session.getTokenAt(pos.row, pos.column);\n    const url = Links.textbook;\n\n    const ext = Documentation.externalLibraries[external];\n\n    handleDeclarationNavigate(editor.getCursorPosition());\n\n    const newPos = editor.selection.getCursor();\n    if (newPos.row !== pos.row || newPos.column !== pos.column) {\n      return;\n    }\n\n    if (\n      hasDeclaration(editorValueRef.current, createContext(sourceChapter), {\n        line: newPos.row + 1, // getCursorPosition returns 0-indexed row, function here takes in 1-indexed row\n        column: newPos.column\n      })\n    ) {\n      return;\n    }\n\n    if (ext.some((node: { caption: string }) => node.caption === (token && token.value))) {\n      if (\n        token !== null &&\n        (/\\bsupport.function\\b/.test(token.type) || /\\bbuiltinConsts\\b/.test(token.type))\n      ) {\n        window.open(`${url}source/${externalUrl}/global.html#${token.value}`); // opens external library link\n      }\n    } else if (\n      token !== null &&\n      (/\\bsupport.function\\b/.test(token.type) || /\\bbuiltinconsts\\b/.test(token.type))\n    ) {\n      window.open(\n        `${url}source/source_${sourceChapter}${sourceVariant}/global.html#${token.value}`\n      ); // opens builtn library link\n    }\n    if (token !== null && /\\bstorage.type\\b/.test(token.type)) {\n      window.open(`${url}source/source_${sourceChapter}.pdf`);\n    }\n  }, [reactAceRef, sourceChapter, sourceVariant, handleDeclarationNavigate, external, externalUrl]);\n\n  keyBindings.navigate = handleNavigate;\n};\n\nexport default useNavigation;\n","import { Range } from 'ace-builds';\nimport { createContext, getAllOccurrencesInScope } from 'js-slang';\nimport * as React from 'react';\n\nimport { EditorHook } from './Editor';\n\n// EditorHook structure:\n// EditorHooks grant access to 4 things:\n// inProps are provided by the parent component\n// outProps go into the underlying React-Ace\n// keyBindings allow exporting new hotkeys\n// reactAceRef is the underlying reactAce instance for hooking.\n\nconst useRefactor: EditorHook = (inProps, outProps, keyBindings, reactAceRef) => {\n  // editorValue is the prop that is going to change all the time\n  // use a ref so that the callbacks below can be memoised\n  const editorValueRef = React.useRef<string>(inProps.editorValue);\n  React.useEffect(() => {\n    editorValueRef.current = inProps.editorValue;\n  }, [inProps.editorValue]);\n\n  const { sourceChapter } = inProps;\n\n  const refactor = React.useCallback(() => {\n    const editor = reactAceRef.current!.editor;\n    if (!editor) {\n      return;\n    }\n    const code = editorValueRef.current;\n    const position = editor.getCursorPosition();\n    const sourceLocations = getAllOccurrencesInScope(code, createContext(sourceChapter), {\n      line: position.row + 1, // getCursorPosition returns 0-indexed row, function here takes in 1-indexed row\n      column: position.column\n    });\n\n    const selection = editor.getSelection();\n    const ranges = sourceLocations.map(\n      loc => new Range(loc.start.line - 1, loc.start.column, loc.end.line - 1, loc.end.column)\n    );\n    ranges.forEach(range => selection.addRange(range));\n  }, [editorValueRef, reactAceRef, sourceChapter]);\n\n  keyBindings.refactor = refactor;\n};\n\nexport default useRefactor;\n","export const INIT_INVITE = 'INIT_INVITE';\nexport const INVALID_EDITOR_SESSION_ID = 'INVALID_EDITOR_SESSION_ID';\nexport const FINISH_INVITE = 'FINISH_INVITE';\nexport const SET_EDITOR_SESSION_ID = 'SET_EDITOR_SESSION_ID';\nexport const SET_WEBSOCKET_STATUS = 'SET_WEBSOCKET_STATUS';\n\nexport enum XMLHttpReadyState {\n  UNSENT = 0,\n  OPENED = 1,\n  HEADERS_RECEIVED = 2,\n  LOADING = 3,\n  DONE = 4\n}\n\nexport enum XMLHttpStatus {\n  OK = 200,\n  PAGE_NOT_FOUND = 404\n}\n","import { Links } from '../utils/Constants';\nimport { XMLHttpReadyState, XMLHttpStatus } from './CollabEditingTypes';\n\nexport function checkSessionIdExists(\n  editorSessionId: string,\n  handleConnectionOK: () => void,\n  handleSessionIdNotFound: () => void,\n  handleCannotReachServer: () => void\n) {\n  const xmlhttp = new XMLHttpRequest();\n  xmlhttp.onreadystatechange = () => {\n    if (xmlhttp.readyState !== XMLHttpReadyState.DONE) {\n      return;\n    }\n    if (xmlhttp.status !== XMLHttpStatus.OK) {\n      handleCannotReachServer();\n      return;\n    }\n    const sessionIdExists: boolean = JSON.parse(xmlhttp.responseText).state;\n    if (!sessionIdExists) {\n      handleSessionIdNotFound();\n      return;\n    }\n    handleConnectionOK();\n  };\n  xmlhttp.open('GET', 'https://' + Links.shareDBServer + 'gists/' + editorSessionId, true);\n  xmlhttp.send();\n}\n\nexport function createNewSession(onSessionCreated: (sessionId: string) => void) {\n  const xmlhttp: XMLHttpRequest = new XMLHttpRequest();\n  xmlhttp.onreadystatechange = () => {\n    if (xmlhttp.readyState === XMLHttpReadyState.DONE && xmlhttp.status === XMLHttpStatus.OK) {\n      const id: string = JSON.parse(xmlhttp.responseText).id;\n      onSessionCreated(id);\n    }\n  };\n  xmlhttp.open('GET', 'https://' + Links.shareDBServer + 'gists/latest/', true);\n  xmlhttp.send();\n}\n","import * as React from 'react';\nimport sharedbAce from 'sharedb-ace';\n\nimport { checkSessionIdExists } from '../collabEditing/CollabEditingHelper';\nimport { Links } from '../utils/Constants';\nimport { EditorHook } from './Editor';\n\n// EditorHook structure:\n// EditorHooks grant access to 4 things:\n// inProps are provided by the parent component\n// outProps go into the underlying React-Ace\n// keyBindings allow exporting new hotkeys\n// reactAceRef is the underlying reactAce instance for hooking.\n\nconst useShareAce: EditorHook = (inProps, outProps, keyBindings, reactAceRef) => {\n  // editorValue is the prop that is going to change all the time\n  // use a ref so that the callbacks below can be memoised\n  const editorValueRef = React.useRef<string>(inProps.editorValue);\n  React.useEffect(() => {\n    editorValueRef.current = inProps.editorValue;\n  }, [inProps.editorValue]);\n\n  const {\n    editorSessionId,\n    sharedbAceIsInviting,\n    handleEditorValueChange,\n    handleFinishInvite,\n    sharedbAceInitValue,\n    handleSetWebsocketStatus\n  } = inProps;\n\n  const handleStartCollabEditing = React.useCallback(() => {\n    const editor = reactAceRef.current!.editor;\n    const ShareAce = new sharedbAce(editorSessionId, {\n      WsUrl: 'wss://' + Links.shareDBServer + 'ws/',\n      pluginWsUrl: null,\n      namespace: 'codepad'\n    });\n    ShareAce.on('ready', () => {\n      ShareAce.add(\n        editor,\n        ['code'],\n        [\n          // TODO: Removal\n          // SharedbAceRWControl,\n          // SharedbAceMultipleCursors\n        ]\n      );\n      if (sharedbAceIsInviting) {\n        handleEditorValueChange(sharedbAceInitValue!);\n        handleFinishInvite!();\n      }\n    });\n\n    // WebSocket connection status detection logic\n    const WS = ShareAce.WS;\n    // Since interval is used as a closure.\n    // eslint-disable-next-line prefer-const\n    let interval: any;\n    const sessionIdNotFound = () => {\n      clearInterval(interval);\n      WS.close();\n    };\n    const cannotReachServer = () => {\n      WS.reconnect();\n    };\n    const checkStatus = () => {\n      if (ShareAce === null) {\n        return;\n      }\n      checkSessionIdExists(editorSessionId, () => {}, sessionIdNotFound, cannotReachServer);\n    };\n    // Checks connection status every 5sec\n    interval = setInterval(checkStatus, 5000);\n\n    WS.addEventListener('open', (event: Event) => {\n      handleSetWebsocketStatus!(1);\n    });\n    WS.addEventListener('close', (event: Event) => {\n      handleSetWebsocketStatus!(0);\n    });\n    return ShareAce;\n  }, [\n    reactAceRef,\n    editorSessionId,\n    handleEditorValueChange,\n    handleSetWebsocketStatus,\n    handleFinishInvite,\n    sharedbAceInitValue,\n    sharedbAceIsInviting\n  ]);\n\n  React.useEffect(() => {\n    const shareAce = editorSessionId !== '' ? handleStartCollabEditing() : null;\n    return () => {\n      // Terminates the session if it exists.\n      // Assumes editorSessionId is immutable.\n      if (shareAce) {\n        shareAce.WS.close();\n      }\n    };\n  }, [handleStartCollabEditing, reactAceRef, editorSessionId]);\n};\n\nexport default useShareAce;\n","import { createContext, getTypeInformation } from 'js-slang';\nimport * as React from 'react';\n\nimport { EditorHook } from './Editor';\n\n// EditorHook structure:\n// EditorHooks grant access to 4 things:\n// inProps are provided by the parent component\n// outProps go into the underlying React-Ace\n// keyBindings allow exporting new hotkeys\n// reactAceRef is the underlying reactAce instance for hooking.\n\nconst useTypeInference: EditorHook = (inProps, outProps, keyBindings, reactAceRef) => {\n  // editorValue is the prop that is going to change all the time\n  // use a ref so that the callbacks below can be memoised\n  const editorValueRef = React.useRef<string>(inProps.editorValue);\n  React.useEffect(() => {\n    editorValueRef.current = inProps.editorValue;\n  }, [inProps.editorValue]);\n\n  const { sourceChapter, handleSendReplInputToOutput } = inProps;\n\n  const handleTypeInferenceDisplay = React.useCallback(() => {\n    const code = editorValueRef.current;\n    const editor = reactAceRef.current!.editor;\n    const pos = editor.getCursorPosition();\n    const token = editor.session.getTokenAt(pos.row, pos.column);\n\n    // comment out everyline of the inference string returned by getTypeInformation\n    const commentEveryLine = (str: string) => {\n      const arr = str.split('\\n');\n      return arr\n        .filter(st => st !== '')\n        .map(st => '// ' + st)\n        .join('\\n');\n    };\n\n    let output;\n\n    // display the information\n    if (handleSendReplInputToOutput) {\n      if (pos && token) {\n        // if the token is a comment, ignore it\n        if (token.type === 'comment') {\n          return;\n        }\n        const str = getTypeInformation(\n          code,\n          createContext(sourceChapter),\n          { line: pos.row + 1, column: pos.column },\n          token.value\n        );\n        output = commentEveryLine(str);\n        if (str.length === 0) {\n          output = '// type information not found';\n        }\n      } else {\n        output = '// invalid token. Please put cursor on an identifier.';\n      }\n      handleSendReplInputToOutput(output);\n    }\n  }, [editorValueRef, reactAceRef, handleSendReplInputToOutput, sourceChapter]);\n\n  keyBindings.typeInferenceDisplay = handleTypeInferenceDisplay;\n};\n\nexport default useTypeInference;\n","/* eslint-disable simple-import-sort/sort */\nimport { Ace, require as acequire } from 'ace-builds';\nimport 'ace-builds/src-noconflict/ext-language_tools';\nimport 'ace-builds/src-noconflict/ext-searchbox';\nimport 'js-slang/dist/editors/ace/theme/source';\n\nimport { HighlightRulesSelector, ModeSelector } from 'js-slang/dist/editors/ace/modes/source';\nimport { Variant } from 'js-slang/dist/types';\nimport * as React from 'react';\nimport AceEditor, { IAceEditorProps } from 'react-ace';\nimport { HotKeys } from 'react-hotkeys';\n\nimport { Documentation } from '../documentation/Documentation';\nimport { useMergedRef } from '../utils/Hooks';\nimport { keyBindings, KeyFunction } from './EditorHotkeys';\nimport { AceMouseEvent, HighlightedLines, Position } from './EditorTypes';\n\n// =============== Hooks ===============\n// TODO: Should further refactor into EditorBase + different variants.\n// Ideally, hooks should be specified by the parent component instead.\nimport useHighlighting from './UseHighlighting';\nimport useNavigation from './UseNavigation';\nimport useRefactor from './UseRefactor';\nimport useShareAce from './UseShareAce';\nimport useTypeInference from './UseTypeInference';\n\nexport type EditorKeyBindingHandlers = { [name in KeyFunction]?: () => void };\nexport type EditorHook = (\n  inProps: Readonly<EditorProps>,\n  outProps: IAceEditorProps,\n  keyBindings: EditorKeyBindingHandlers,\n  reactAceRef: React.MutableRefObject<AceEditor | null>\n) => void;\n\n/**\n * @property editorValue - The string content of the react-ace editor\n * @property handleEditorChange  - A callback function\n *           for the react-ace editor's `onChange`\n * @property handleEvalEditor  - A callback function for evaluation\n *           of the editor's content, using `slang`\n */\nexport type EditorProps = DispatchProps & StateProps;\n\ntype DispatchProps = {\n  handleDeclarationNavigate: (cursorPosition: Position) => void;\n  handleEditorEval: () => void;\n  handleEditorValueChange: (newCode: string) => void;\n  handleReplValueChange?: (newCode: string) => void;\n  handleReplEval?: () => void;\n  handleEditorUpdateBreakpoints: (breakpoints: string[]) => void;\n  handleFinishInvite?: () => void;\n  handlePromptAutocomplete: (row: number, col: number, callback: any) => void;\n  handleSendReplInputToOutput?: (newOutput: string) => void;\n  handleSetWebsocketStatus?: (websocketStatus: number) => void;\n  handleUpdateHasUnsavedChanges?: (hasUnsavedChanges: boolean) => void;\n};\n\ntype StateProps = {\n  breakpoints: string[];\n  editorSessionId: string;\n  editorValue: string;\n  highlightedLines: HighlightedLines[];\n  isEditorAutorun: boolean;\n  newCursorPosition?: Position;\n  sharedbAceInitValue?: string;\n  sharedbAceIsInviting?: boolean;\n  sourceChapter?: number;\n  externalLibraryName?: string;\n  sourceVariant?: Variant;\n  hooks?: EditorHook[];\n};\n\nconst getMarkers = (\n  highlightedLines: StateProps['highlightedLines']\n): IAceEditorProps['markers'] => {\n  return highlightedLines.map(lineNums => ({\n    startRow: lineNums[0],\n    startCol: 0,\n    endRow: lineNums[1],\n    endCol: 1,\n    className: 'myMarker',\n    type: 'fullLine'\n  }));\n};\n\nconst getModeString = (chapter: number, variant: Variant, library: string) =>\n  `source${chapter}${variant}${library}`;\n\n/**\n * This _modifies global state_ and defines a new Ace mode globally.\n *\n * Don't call this directly in render functions!\n */\nconst selectMode = (chapter: number, variant: Variant, library: string) => {\n  HighlightRulesSelector(chapter, variant, library, Documentation.externalLibraries[library]);\n  ModeSelector(chapter, variant, library);\n};\n\nconst makeHandleGutterClick = (\n  handleEditorUpdateBreakpoints: DispatchProps['handleEditorUpdateBreakpoints']\n) => (e: AceMouseEvent) => {\n  const target = e.domEvent.target! as HTMLDivElement;\n  if (\n    target.className.indexOf('ace_gutter-cell') === -1 ||\n    !e.editor.isFocused() ||\n    e.clientX > 35 + target.getBoundingClientRect().left\n  ) {\n    return;\n  }\n\n  // Breakpoint related.\n  const row = e.getDocumentPosition().row;\n  const content = e.editor.session.getLine(row);\n  const breakpoints = e.editor.session.getBreakpoints();\n  if (\n    breakpoints[row] === undefined &&\n    content.length !== 0 &&\n    !content.includes('//') &&\n    !content.includes('debugger;')\n  ) {\n    e.editor.session.setBreakpoint(row, undefined!);\n  } else {\n    e.editor.session.clearBreakpoint(row);\n  }\n  e.stop();\n  handleEditorUpdateBreakpoints(e.editor.session.getBreakpoints());\n};\n\n// Note: This is untestable/unused because JS-hint has been removed.\nconst makeHandleAnnotationChange = (session: Ace.EditSession) => () => {\n  const annotations = session.getAnnotations();\n  let count = 0;\n  for (const anno of annotations) {\n    if (anno.type === 'info') {\n      anno.type = 'error';\n      // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n      // @ts-ignore // Probably some undocumented type\n      anno.className = 'ace_error';\n      count++;\n    }\n  }\n  if (count !== 0) {\n    session.setAnnotations(annotations);\n  }\n};\n\nconst makeCompleter = (handlePromptAutocomplete: DispatchProps['handlePromptAutocomplete']) => ({\n  getCompletions: (\n    editor: Ace.Editor,\n    session: Ace.EditSession,\n    pos: Ace.Point,\n    prefix: string,\n    callback: () => void\n  ) => {\n    // Don't prompt if prefix starts with number\n    if (prefix && /\\d/.test(prefix.charAt(0))) {\n      callback();\n      return;\n    }\n\n    // Cursor col is insertion location i.e. last char col + 1\n    handlePromptAutocomplete(pos.row + 1, pos.column, callback);\n  }\n});\n\nconst moveCursor = (editor: AceEditor['editor'], position: Position) => {\n  editor.selection.clearSelection();\n  editor.moveCursorToPosition(position);\n  editor.renderer.showCursor();\n  editor.renderer.scrollCursorIntoView(position, 0.5);\n};\n\n/* Override handler, so does not trigger when focus is in editor */\nconst handlers = {\n  goGreen: () => {}\n};\n\nconst EditorBase = React.forwardRef<AceEditor, EditorProps>(function EditorBase(\n  props,\n  forwardedRef\n) {\n  const reactAceRef: React.MutableRefObject<AceEditor | null> = React.useRef(null);\n\n  // Refs for things that technically shouldn't change... but just in case.\n  const handleEditorUpdateBreakpointsRef = React.useRef(props.handleEditorUpdateBreakpoints);\n  const handlePromptAutocompleteRef = React.useRef(props.handlePromptAutocomplete);\n\n  React.useEffect(() => {\n    handleEditorUpdateBreakpointsRef.current = props.handleEditorUpdateBreakpoints;\n    handlePromptAutocompleteRef.current = props.handlePromptAutocomplete;\n  }, [props.handleEditorUpdateBreakpoints, props.handlePromptAutocomplete]);\n\n  const [sourceChapter, sourceVariant, externalLibraryName] = [\n    props.sourceChapter || 1,\n    props.sourceVariant || 'default',\n    props.externalLibraryName || 'NONE'\n  ];\n\n  React.useEffect(() => {\n    selectMode(sourceChapter, sourceVariant, externalLibraryName);\n  }, [sourceChapter, sourceVariant, externalLibraryName]);\n\n  React.useLayoutEffect(() => {\n    if (!reactAceRef.current) {\n      return;\n    }\n    const editor = reactAceRef.current.editor;\n    const session = editor.getSession();\n    // NOTE: Everything in this function is designed to run exactly ONCE per instance of react-ace.\n    // The () => ref.current() are designed to use the latest instance only.\n\n    // NOTE: the two `any`s below are because the Ace editor typedefs are\n    // hopelessly incomplete\n    editor.on(\n      'gutterclick' as any,\n      makeHandleGutterClick((...args) => handleEditorUpdateBreakpointsRef.current(...args)) as any\n    );\n\n    // Change all info annotations to error annotations\n    session.on('changeAnnotation' as any, makeHandleAnnotationChange(session));\n\n    // Start autocompletion\n    acequire('ace/ext/language_tools').setCompleters([\n      makeCompleter((...args) => handlePromptAutocompleteRef.current(...args))\n    ]);\n    // This should run exactly once.\n  }, [reactAceRef, handleEditorUpdateBreakpointsRef, handlePromptAutocompleteRef]);\n\n  React.useLayoutEffect(() => {\n    if (!reactAceRef.current) {\n      return;\n    }\n    const newCursorPosition = props.newCursorPosition;\n    if (newCursorPosition) {\n      moveCursor(reactAceRef.current.editor, newCursorPosition);\n    }\n  }, [reactAceRef, props.newCursorPosition]);\n\n  const {\n    handleUpdateHasUnsavedChanges,\n    handleEditorValueChange,\n    isEditorAutorun,\n    handleEditorEval\n  } = props;\n  const onChange = React.useCallback(\n    (newCode: string, delta: Ace.Delta) => {\n      if (!reactAceRef.current) {\n        return;\n      }\n      if (handleUpdateHasUnsavedChanges) {\n        handleUpdateHasUnsavedChanges(true);\n      }\n      handleEditorValueChange(newCode);\n      const annotations = reactAceRef.current.editor.getSession().getAnnotations();\n      if (isEditorAutorun && annotations.length === 0) {\n        handleEditorEval();\n      }\n    },\n    [\n      reactAceRef,\n      handleUpdateHasUnsavedChanges,\n      handleEditorValueChange,\n      handleEditorEval,\n      isEditorAutorun\n    ]\n  );\n\n  const keyHandlers: EditorKeyBindingHandlers = {\n    evaluate: handleEditorEval\n  };\n\n  const aceEditorProps: IAceEditorProps = {\n    className: 'react-ace',\n    editorProps: {\n      $blockScrolling: Infinity\n    },\n    markers: React.useMemo(() => getMarkers(props.highlightedLines), [props.highlightedLines]),\n    fontSize: 17,\n    height: '100%',\n    highlightActiveLine: false,\n    mode: getModeString(sourceChapter, sourceVariant, externalLibraryName),\n    theme: 'source',\n    value: props.editorValue,\n    width: '100%',\n    setOptions: {\n      enableBasicAutocompletion: true,\n      enableLiveAutocompletion: true,\n      fontFamily: \"'Inconsolata', monospace\"\n    },\n    onChange\n  };\n\n  // Hooks must not change after an editor is instantiated, so to prevent that\n  // we store the original value and always use that only\n  const [hooks] = React.useState(props.hooks);\n  if (hooks) {\n    // Note: the following is extremely non-standard use of hooks\n    // DO NOT refactor this into any form where the hook is called from a lambda\n    for (const hook of hooks) {\n      hook(props, aceEditorProps, keyHandlers, reactAceRef);\n    }\n  }\n\n  aceEditorProps.commands = Object.entries(keyHandlers)\n    .filter(([_, exec]) => exec)\n    .map(([name, exec]) => ({ name, bindKey: keyBindings[name], exec: exec! }));\n\n  return (\n    <HotKeys className=\"Editor\" handlers={handlers}>\n      <div className=\"row editor-react-ace\">\n        <AceEditor {...aceEditorProps} ref={useMergedRef(reactAceRef, forwardedRef)} />\n      </div>\n    </HotKeys>\n  );\n});\n\nconst Editor = React.forwardRef<AceEditor, EditorProps>((props, ref) => (\n  <EditorBase\n    {...props}\n    hooks={[useHighlighting, useNavigation, useTypeInference, useShareAce, useRefactor]}\n    ref={ref}\n  />\n));\n\nexport default Editor;\n","import { Button, Card, Intent } from '@blueprintjs/core';\nimport * as React from 'react';\n\nimport { IMCQQuestion } from '../assessment/AssessmentTypes';\nimport Markdown from '../Markdown';\nimport { showSuccessMessage, showWarningMessage } from '../utils/NotificationsHelper';\n\nexport type McqChooserProps = {\n  mcq: IMCQQuestion;\n  handleMCQSubmit: (choiceId: number) => void;\n};\n\ntype State = {\n  mcqOption: number | null;\n};\n\nclass McqChooser extends React.PureComponent<McqChooserProps, State> {\n  constructor(props: McqChooserProps) {\n    super(props);\n    this.state = {\n      mcqOption: props.mcq.answer\n    };\n  }\n  public render() {\n    const options = this.props.mcq.choices.map((choice, i) => (\n      <Button\n        key={i}\n        className=\"mcq-option col-xs-12\"\n        active={i === this.state.mcqOption}\n        intent={this.getButtonIntent(i, this.state.mcqOption, this.props.mcq.solution)}\n        onClick={this.onButtonClickFactory(i)}\n        minimal={true}\n      >\n        <Markdown content={choice.content} />\n      </Button>\n    ));\n    return (\n      <div className=\"MCQChooser row\">\n        <Card className=\"mcq-content-parent col-xs-12 middle-xs\">\n          <div className=\"row mcq-options-parent between-xs\">{options}</div>\n        </Card>\n      </div>\n    );\n  }\n\n  /**\n   * A function to generate an onClick function that causes\n   * and mcq submission with a given answer id.\n   *\n   * Post-condition: the local state will be updated to store the\n   * mcq option selected, and a notification will be displayed with\n   * a hint, if the question is ungraded.\n   *\n   * @param i the id of the answer\n   */\n  private onButtonClickFactory = (i: number) => (e: any) => {\n    if (i !== this.state.mcqOption) {\n      this.props.handleMCQSubmit(i);\n      this.setState({\n        mcqOption: i\n      });\n    }\n    const shouldDisplayMessage = this.props.mcq.solution !== null && this.props.mcq.choices[i].hint;\n    if (shouldDisplayMessage) {\n      const hintElement = (\n        <Markdown className=\"markdown-notification\" content={this.props.mcq.choices[i].hint!} />\n      );\n      if (i === this.props.mcq.solution) {\n        showSuccessMessage(hintElement, 4000);\n      } else {\n        showWarningMessage(hintElement, 4000);\n      }\n    }\n  };\n\n  /**\n   * Handles the logic for what intent an MCQ option should show up as.\n   * This is dependent on the presence of an actual solution (for ungraded assessments),\n   * the current selection, and whether the selected option is active.\n   *\n   * @param currentOption the current button key, corresponding to a choice ID\n   * @param chosenOption the mcq option that is chosen in the state, i.e what should show up as \"selected\"\n   * @param solution the solution to the mcq, if any\n   */\n  private getButtonIntent = (\n    currentOption: number,\n    chosenOption: number | null,\n    solution: number | null\n  ): Intent => {\n    const active = currentOption === chosenOption;\n    const correctOptionSelected = active && solution !== null && currentOption === solution;\n    if (solution === null) {\n      return Intent.NONE;\n    } else if (active && correctOptionSelected) {\n      return Intent.SUCCESS;\n    } else if (active && !correctOptionSelected) {\n      return Intent.DANGER;\n    } else {\n      return Intent.NONE;\n    }\n  };\n}\n\nexport default McqChooser;\n","import * as React from 'react';\nimport AceEditor from 'react-ace';\n// source mode and chapter imported in Editor.tsx\n\nexport type ReplInputProps = DispatchProps & StateProps;\n\ntype DispatchProps = {\n  handleBrowseHistoryDown: () => void;\n  handleBrowseHistoryUp: () => void;\n  handleReplValueChange: (newCode: string) => void;\n  handleReplEval: () => void;\n};\n\ntype StateProps = {\n  replValue: string;\n  sourceChapter: number;\n};\n\nclass ReplInput extends React.PureComponent<ReplInputProps, {}> {\n  private replInputBottom?: HTMLDivElement;\n  private execBrowseHistoryDown: () => void;\n  private execBrowseHistoryUp: () => void;\n  private execEvaluate: () => void;\n\n  constructor(props: ReplInputProps) {\n    super(props);\n    this.execBrowseHistoryDown = props.handleBrowseHistoryDown;\n    this.execBrowseHistoryUp = props.handleBrowseHistoryUp;\n    this.execEvaluate = () => {\n      if (!this.replInputBottom) {\n        return;\n      }\n      this.replInputBottom.scrollIntoView();\n      this.props.handleReplEval();\n    };\n  }\n\n  public componentDidUpdate() {\n    if (!this.replInputBottom) {\n      return;\n    }\n    if (this.replInputBottom.clientWidth >= window.innerWidth - 50) {\n      /* There is a bug where\n       *   if the workspace has been resized via re-resizable such that the\n       *   has disappeared off the screen, width 63\n       * then\n       *   calling scrollIntoView would cause the Repl to suddenly take up 100%\n       *   of the screen width. This pushes the editor off-screen so that the\n       *   user can no longer resize the workspace at all\n       * Fix: the if condition is true when the Repl has dissapeared off-screen.\n       *   (-15 to account for the scrollbar */\n    } else {\n      this.replInputBottom.scrollIntoView();\n    }\n  }\n\n  public render() {\n    return (\n      <>\n        <AceEditor\n          className=\"repl-react-ace react-ace\"\n          mode={`source${this.props.sourceChapter || 1}defaultNONE`}\n          theme=\"source\"\n          height=\"1px\"\n          width=\"100%\"\n          value={this.props.replValue}\n          onChange={this.props.handleReplValueChange}\n          commands={[\n            {\n              name: 'browseHistoryDown',\n              bindKey: {\n                win: 'Down',\n                mac: 'Down'\n              },\n              exec: this.execBrowseHistoryDown\n            },\n            {\n              name: 'browseHistoryUp',\n              bindKey: {\n                win: 'Up',\n                mac: 'Up'\n              },\n              exec: this.execBrowseHistoryUp\n            },\n            {\n              name: 'evaluate',\n              bindKey: {\n                win: 'Shift-Enter',\n                mac: 'Shift-Enter'\n              },\n              exec: this.execEvaluate\n            }\n          ]}\n          minLines={1}\n          maxLines={20}\n          fontSize={17}\n          highlightActiveLine={false}\n          showGutter={false}\n          showPrintMargin={false}\n          setOptions={{\n            fontFamily: \"'Inconsolata', 'Consolas', monospace\"\n          }}\n        />\n        <div className=\"replInputBottom\" ref={e => (this.replInputBottom = e!)} />\n      </>\n    );\n  }\n}\n\nexport default ReplInput;\n","import { Card, Classes, Pre } from '@blueprintjs/core';\nimport classNames from 'classnames';\nimport { parseError } from 'js-slang';\nimport { Variant } from 'js-slang/dist/types';\nimport { stringify } from 'js-slang/dist/utils/stringify';\nimport * as React from 'react';\nimport { HotKeys } from 'react-hotkeys';\n\nimport { InterpreterOutput } from '../application/ApplicationTypes';\nimport SideContentCanvasOutput from '../sideContent/SideContentCanvasOutput';\nimport ReplInput, { ReplInputProps } from './ReplInput';\nimport { OutputProps } from './ReplTypes';\n\nexport type ReplProps = DispatchProps & StateProps;\n\ntype StateProps = {\n  output: InterpreterOutput[];\n  replValue: string;\n  hidden?: boolean;\n  usingSubst?: boolean;\n  sourceChapter?: number;\n  sourceVariant?: Variant;\n};\n\ntype DispatchProps = {\n  handleBrowseHistoryDown: () => void;\n  handleBrowseHistoryUp: () => void;\n  handleReplEval: () => void;\n  handleReplValueChange: (newCode: string) => void;\n};\n\nclass Repl extends React.PureComponent<ReplProps, {}> {\n  public constructor(props: ReplProps) {\n    super(props);\n  }\n\n  public render() {\n    const cards = this.props.output.map((slice, index) => (\n      <Output output={slice} key={index} usingSubst={this.props.usingSubst || false} />\n    ));\n    const inputProps: ReplInputProps = this.props as ReplInputProps;\n    return (\n      <div className=\"Repl\" style={{ display: this.props.hidden ? 'none' : undefined }}>\n        <div className=\"repl-output-parent\">\n          {cards}\n          <HotKeys\n            className={classNames('repl-input-parent', 'row', Classes.CARD, Classes.ELEVATION_0)}\n            handlers={handlers}\n          >\n            {this.props.sourceVariant !== 'concurrent' ? <ReplInput {...inputProps} /> : null}\n          </HotKeys>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport const Output: React.SFC<OutputProps> = (props: OutputProps) => {\n  switch (props.output.type) {\n    case 'code':\n      return (\n        <Card>\n          <Pre className=\"codeOutput\">{props.output.value}</Pre>\n        </Card>\n      );\n    case 'running':\n      return (\n        <Card>\n          <Pre className=\"logOutput\">{props.output.consoleLogs.join('\\n')}</Pre>\n        </Card>\n      );\n    case 'result':\n      // We check if we are using Stepper, so we can process the REPL results properly\n      if (props.usingSubst && props.output.value instanceof Array) {\n        return (\n          <Card>\n            <Pre className=\"logOutput\">Check out the substituter tab!</Pre>\n          </Card>\n        );\n      } else if (props.output.consoleLogs.length === 0) {\n        return (\n          <Card>\n            <Pre className=\"resultOutput\">{renderResult(props.output.value)}</Pre>\n          </Card>\n        );\n      } else {\n        return (\n          <Card>\n            <Pre className=\"logOutput\">{props.output.consoleLogs.join('\\n')}</Pre>\n            <Pre className=\"resultOutput\">{renderResult(props.output.value)}</Pre>\n          </Card>\n        );\n      }\n    case 'errors':\n      if (props.output.consoleLogs.length === 0) {\n        return (\n          <Card>\n            <Pre className=\"errorOutput\">{parseError(props.output.errors)}</Pre>\n          </Card>\n        );\n      } else {\n        return (\n          <Card>\n            <Pre className=\"logOutput\">{props.output.consoleLogs.join('\\n')}</Pre>\n            <br />\n            <Pre className=\"errorOutput\">{parseError(props.output.errors)}</Pre>\n          </Card>\n        );\n      }\n    default:\n      return <Card>''</Card>;\n  }\n};\n\nconst renderResult = (value: any) => {\n  /** A class which is the output of the show() function */\n  const ShapeDrawn = (window as any).ShapeDrawn;\n  if (typeof ShapeDrawn !== 'undefined' && value instanceof ShapeDrawn) {\n    return <SideContentCanvasOutput canvas={value.$canvas} />;\n  } else {\n    return stringify(value);\n  }\n};\n\n/* Override handler, so does not trigger when focus is in editor */\nconst handlers = {\n  goGreen: () => {}\n};\n\nexport default Repl;\n","import { DebuggerContext, WorkspaceLocation } from '../workspace/WorkspaceTypes';\nimport { SideContentTab } from './SideContentTypes';\n\nconst potentialTabs: SideContentTab[] = [];\n\nconst currentlyActiveTabsLabel: Map<WorkspaceLocation, string[]> = new Map<\n  WorkspaceLocation,\n  string[]\n>();\n\nexport const getDynamicTabs = (debuggerContext: DebuggerContext): SideContentTab[] => {\n  const spawnedTabs = potentialTabs.filter(tab => tab.toSpawn(debuggerContext));\n\n  if (debuggerContext.workspaceLocation) {\n    currentlyActiveTabsLabel.set(\n      debuggerContext.workspaceLocation,\n      spawnedTabs.map(tab => tab.label)\n    );\n  }\n\n  return spawnedTabs;\n};\n\nexport const getCurrentlyActiveTabs = (\n  workspaceLocation?: WorkspaceLocation\n): string[] | undefined => {\n  if (workspaceLocation) {\n    return currentlyActiveTabsLabel.get(workspaceLocation);\n  }\n  return undefined;\n};\n\nexport const isCurrentlyActive = (\n  label: string,\n  workspaceLocation?: WorkspaceLocation\n): boolean => {\n  const activeTabs = getCurrentlyActiveTabs(workspaceLocation);\n  return activeTabs\n    ? activeTabs.findIndex((activeTabLabel: string) => activeTabLabel === label) !== -1\n    : false;\n};\n\nexport const isEmptyDebuggerContext = (debuggerContext: DebuggerContext): boolean => {\n  return Object.keys(debuggerContext).length === 0;\n};\n","import { Card, Icon, Tab, TabId, Tabs, Tooltip } from '@blueprintjs/core';\nimport * as React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { OverallState } from '../application/ApplicationTypes';\nimport { DebuggerContext, WorkspaceLocation } from '../workspace/WorkspaceTypes';\nimport { getDynamicTabs } from './SideContentHelper';\nimport { SideContentTab, SideContentType } from './SideContentTypes';\n\n/**\n * @property animate Set this to false to disable the movement\n * of the selected tab indicator. Default value: true.\n *\n * @property defaultSelectedTabId The id of a SideContentTab to be\n *  selected initially when the SideContent component is mounted.\n *\n * @property handleActiveTabChange A dispatch bound to the\n * UPDATE_ACTIVE_TAB action creator; updates the Redux store with\n * the id of the active side content tab in the current workspace.\n *\n * @property onChange A function that is called whenever the\n * active tab is changed by the user.\n *\n * @property tabs An array of SideContentTabs.\n *  The tabs will be rendered in order of the array.\n *  If this array is empty, no tabs will be rendered.\n *\n * @property renderActiveTabPanelOnly Set this property to\n * true to enable unmounting of tab panels whenever tabs are\n * switched. If it is left undefined, the value will default\n * to false, and the tab panels will all be loaded with the\n * mounting of the SideContent component. Switching tabs\n * will merely hide them from view.\n */\nexport type SideContentProps = DispatchProps & StateProps;\n\ntype DispatchProps = {\n  handleActiveTabChange: (activeTab: SideContentType) => void;\n  onChange?: (\n    newTabId: SideContentType,\n    prevTabId: SideContentType,\n    event: React.MouseEvent<HTMLElement>\n  ) => void;\n};\n\ntype StateProps = {\n  animate?: boolean;\n  selectedTabId?: SideContentType;\n  defaultSelectedTabId?: SideContentType;\n  renderActiveTabPanelOnly?: boolean;\n  tabs: SideContentTab[];\n  workspaceLocation?: WorkspaceLocation;\n};\n\nconst SideContent = (props: SideContentProps) => {\n  const { tabs, defaultSelectedTabId, handleActiveTabChange, onChange } = props;\n  const [dynamicTabs, setDynamicTabs] = React.useState(tabs);\n  const workspaces = useSelector((state: OverallState) => state.workspaces);\n\n  React.useEffect(() => {\n    // Set initial sideContentActiveTab for this workspace\n    handleActiveTabChange(defaultSelectedTabId ? defaultSelectedTabId : tabs[0].id!);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // Fetch debuggerContext from store\n  let debuggerContext: DebuggerContext;\n  if (props.workspaceLocation) {\n    debuggerContext = workspaces[props.workspaceLocation].debuggerContext;\n  } else {\n    debuggerContext = {} as DebuggerContext;\n  }\n\n  React.useEffect(() => {\n    const allActiveTabs = tabs.concat(getDynamicTabs(debuggerContext));\n    setDynamicTabs(allActiveTabs);\n  }, [tabs, debuggerContext]);\n\n  /**\n   * Generates an icon id given a TabId.\n   * Used to set and remove the 'side-content-tab-alert' style to the tabs.\n   */\n  const generateIconId = (tabId: TabId) => `${tabId}-icon`;\n\n  const renderedTabs = React.useMemo(() => {\n    const renderTab = (tab: SideContentTab, workspaceLocation?: WorkspaceLocation) => {\n      const iconSize = 20;\n      const tabId = tab.id === undefined ? tab.label : tab.id;\n      const tabTitle: JSX.Element = (\n        <Tooltip content={tab.label}>\n          <div className=\"side-content-tooltip\" id={generateIconId(tabId)}>\n            <Icon icon={tab.iconName} iconSize={iconSize} />\n          </div>\n        </Tooltip>\n      );\n\n      const tabBody: JSX.Element = workspaceLocation\n        ? {\n            ...tab.body,\n            props: {\n              ...tab.body.props,\n              workspaceLocation\n            }\n          }\n        : tab.body;\n      const tabPanel: JSX.Element = <div className=\"side-content-text\">{tabBody}</div>;\n\n      return (\n        <Tab\n          key={tabId}\n          id={tabId}\n          title={tabTitle}\n          panel={tabPanel}\n          disabled={tab.disabled}\n          className=\"side-content-tab\"\n        />\n      );\n    };\n\n    return dynamicTabs.map(tab => renderTab(tab, props.workspaceLocation));\n  }, [dynamicTabs, props.workspaceLocation]);\n\n  const changeTabsCallback = React.useCallback(\n    (\n      newTabId: SideContentType,\n      prevTabId: SideContentType,\n      event: React.MouseEvent<HTMLElement>\n    ): void => {\n      /**\n       * Remove the 'side-content-tab-alert' class that causes tabs flash.\n       * To be run when tabs are changed.\n       * Currently this style is only used for the \"Inspector\" and \"Env Visualizer\" tabs.\n       */\n      const resetAlert = (prevTabId: TabId) => {\n        const iconId = generateIconId(prevTabId);\n        const icon = document.getElementById(iconId);\n\n        // The new selected tab will still have the \"side-content-tab-alert\" class, but the CSS hides it\n        if (icon) {\n          icon.classList.remove('side-content-tab-alert');\n        }\n      };\n\n      handleActiveTabChange(newTabId);\n      if (onChange === undefined) {\n        resetAlert(prevTabId);\n      } else {\n        onChange(newTabId, prevTabId, event);\n        resetAlert(prevTabId);\n      }\n    },\n    [handleActiveTabChange, onChange]\n  );\n\n  return (\n    <div className=\"side-content\">\n      <Card>\n        <div className=\"side-content-tabs\">\n          <Tabs\n            id=\"side-content-tabs\"\n            onChange={changeTabsCallback}\n            defaultSelectedTabId={props.defaultSelectedTabId}\n            renderActiveTabPanelOnly={props.renderActiveTabPanelOnly}\n            selectedTabId={props.selectedTabId}\n          >\n            {renderedTabs}\n          </Tabs>\n        </div>\n      </Card>\n    </div>\n  );\n};\n\nexport default SideContent;\n","import { Resizable, ResizableProps, ResizeCallback } from 're-resizable';\nimport * as React from 'react';\nimport { Prompt } from 'react-router';\n\nimport ControlBar, { ControlBarProps } from '../controlBar/ControlBar';\nimport Editor, { EditorProps } from '../editor/Editor';\nimport McqChooser, { McqChooserProps } from '../mcqChooser/McqChooser';\nimport Repl, { ReplProps } from '../repl/Repl';\nimport SideContent, { SideContentProps } from '../sideContent/SideContent';\n\nexport type WorkspaceProps = DispatchProps & StateProps;\n\ntype DispatchProps = {\n  handleEditorHeightChange: (height: number) => void;\n  handleEditorWidthChange: (widthChange: number) => void;\n  handleSideContentHeightChange: (height: number) => void;\n};\n\ntype StateProps = {\n  // Either editorProps or mcqProps must be provided\n  controlBarProps: ControlBarProps;\n  customEditor?: JSX.Element;\n  editorProps?: EditorProps;\n  editorHeight?: string | number;\n  editorWidth: string;\n  hasUnsavedChanges?: boolean;\n  mcqProps?: McqChooserProps;\n  replProps: ReplProps;\n  sideContentHeight?: number;\n  sideContentProps: SideContentProps;\n  sideContentIsResizeable?: boolean;\n};\n\nclass Workspace extends React.Component<WorkspaceProps, {}> {\n  private editorDividerDiv?: HTMLDivElement = undefined;\n  private leftParentResizable?: Resizable = undefined;\n  private maxDividerHeight?: number = undefined;\n  private sideDividerDiv?: HTMLDivElement = undefined;\n\n  public constructor(props: WorkspaceProps) {\n    super(props);\n  }\n\n  public componentDidMount() {\n    this.maxDividerHeight = this.sideDividerDiv!.clientHeight;\n  }\n\n  /**\n   * side-content-divider gives the side content a bottom margin. I use a div\n   * element instead of CSS so that when the user resizes the side-content all\n   * the way up in order to hide it, there won't be a padding there to stop the\n   * REPL from being flush with the top of the editor\n   */\n  public render() {\n    const sideContent = <SideContent {...this.props.sideContentProps} />;\n    const resizableSideContent = (\n      <Resizable {...this.sideContentResizableProps()}>\n        {sideContent}\n        <div className=\"side-content-divider\" ref={e => (this.sideDividerDiv = e!)} />\n      </Resizable>\n    );\n\n    return (\n      <div className=\"workspace\">\n        {this.props.hasUnsavedChanges ? (\n          <Prompt\n            message={'You have changes that may not be saved. Are you sure you want to leave?'}\n          />\n        ) : null}\n        <ControlBar {...this.controlBarProps()} />\n        <div className=\"row workspace-parent\">\n          <div className=\"editor-divider\" ref={e => (this.editorDividerDiv = e!)} />\n          <Resizable {...this.editorResizableProps()}>\n            {this.createWorkspaceInput(this.props)}\n          </Resizable>\n          <div className=\"right-parent\">\n            {this.props.sideContentIsResizeable === undefined || this.props.sideContentIsResizeable\n              ? resizableSideContent\n              : sideContent}\n            <Repl {...this.props.replProps} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  private controlBarProps() {\n    return { ...this.props.controlBarProps };\n  }\n\n  private editorResizableProps() {\n    const onResizeStop: ResizeCallback = (_a, _b, _c, diff) =>\n      this.props.handleEditorWidthChange((diff.width * 100) / window.innerWidth);\n    const ref = (e: Resizable) => (this.leftParentResizable = e as Resizable);\n    return {\n      className: 'resize-editor left-parent',\n      enable: rightResizeOnly,\n      minWidth: 0,\n      onResize: this.toggleEditorDividerDisplay,\n      onResizeStop,\n      ref,\n      size: { width: this.props.editorWidth, height: '100%' },\n      as: undefined as any // re-resizable bug - wrong typedef\n    } as ResizableProps;\n  }\n\n  private sideContentResizableProps() {\n    const onResizeStop: ResizeCallback = (_a, _b, ref, _c) =>\n      this.props.handleSideContentHeightChange(ref.clientHeight);\n    return {\n      bounds: 'parent',\n      className: 'resize-side-content',\n      enable: bottomResizeOnly,\n      onResize: this.toggleDividerDisplay,\n      onResizeStop,\n      size:\n        /* It will always be undefined...\n          Default workspace state does not have sideContentHeight...\n        */\n        this.props.sideContentHeight === undefined\n          ? undefined\n          : {\n              height: this.props.sideContentHeight,\n              width: '100%'\n            }\n    } as ResizableProps;\n  }\n\n  /**\n   * Snaps the left-parent resizable to 100% or 0% when percentage width goes\n   * above 95% or below 5% respectively. Also changes the editor divider width\n   * in the case of < 5%.\n   */\n  private toggleEditorDividerDisplay: ResizeCallback = (_a, _b, ref) => {\n    const leftThreshold = 2;\n    const rightThreshold = 95;\n    const editorWidthPercentage = ((ref as HTMLDivElement).clientWidth / window.innerWidth) * 100;\n    // update resizable size\n    if (editorWidthPercentage > rightThreshold) {\n      this.leftParentResizable!.updateSize({ width: '100%', height: '100%' });\n    } else if (editorWidthPercentage < leftThreshold) {\n      this.leftParentResizable!.updateSize({ width: '0%', height: '100%' });\n    }\n    // Update divider margin\n    if (editorWidthPercentage < leftThreshold) {\n      this.editorDividerDiv!.style.marginRight = '0.6rem';\n    } else {\n      this.editorDividerDiv!.style.marginRight = '0';\n    }\n  };\n\n  /**\n   * Hides the side-content-divider div when side-content is resized downwards\n   * so that it's bottom border snaps flush with editor's bottom border\n   */\n  private toggleDividerDisplay: ResizeCallback = (_a, _b, ref) => {\n    /* This is actually broken... */\n    this.maxDividerHeight =\n      this.sideDividerDiv!.clientHeight > this.maxDividerHeight!\n        ? this.sideDividerDiv!.clientHeight\n        : this.maxDividerHeight;\n    const resizableHeight = (ref as HTMLDivElement).clientHeight;\n    const rightParentHeight = (ref.parentNode as HTMLDivElement).clientHeight;\n    if (resizableHeight + this.maxDividerHeight! + 2 > rightParentHeight) {\n      this.sideDividerDiv!.style.display = 'none';\n    } else {\n      this.sideDividerDiv!.style.display = 'initial';\n    }\n  };\n\n  /**\n   * Pre-condition: `this.props.editorProps`\n   * XOR `this.props.mcq` are defined.\n   */\n  private createWorkspaceInput = (props: WorkspaceProps) => {\n    if (props.customEditor) {\n      return props.customEditor;\n    } else if (props.editorProps) {\n      return <Editor {...props.editorProps} key={props.editorProps.editorSessionId} />;\n    } else {\n      return <McqChooser {...props.mcqProps!} />;\n    }\n  };\n}\n\nconst rightResizeOnly = {\n  top: false,\n  right: true,\n  bottom: false,\n  left: false,\n  topRight: false,\n  bottomRight: false,\n  bottomLeft: false,\n  topLeft: false\n};\n\nconst bottomResizeOnly = {\n  top: false,\n  right: false,\n  bottom: true,\n  left: false,\n  topRight: false,\n  bottomRight: false,\n  bottomLeft: false,\n  topLeft: false\n};\n\nexport default Workspace;\n","import { Divider, HTMLTable, Text } from '@blueprintjs/core';\nimport * as React from 'react';\n\nimport Markdown from '../Markdown';\nimport { getPrettyDate } from '../utils/DateHelper';\n\ntype AssessmentWorkspaceGradingResultProps = StateProps;\n\ntype StateProps = {\n  graderName: string;\n  gradedAt: string;\n  xp: number;\n  grade: number;\n  maxGrade: number;\n  maxXp: number;\n  comments?: string;\n};\n\nclass AssessmentWorkspaceGradingResult extends React.Component<\n  AssessmentWorkspaceGradingResultProps,\n  {}\n> {\n  public render() {\n    return (\n      <div className=\"GradingResult\">\n        <div className=\"grading-result-table\">\n          <HTMLTable>\n            <tbody>\n              <tr>\n                <th>Grade:</th>\n                <td>\n                  <Text>\n                    {this.props.grade} / {this.props.maxGrade}\n                  </Text>\n                </td>\n              </tr>\n\n              <tr>\n                <th>XP:</th>\n                <td>\n                  <Text>\n                    {this.props.xp} / {this.props.maxXp}\n                  </Text>\n                </td>\n              </tr>\n\n              <tr>\n                <th>Comments:</th>\n                <td>{!this.props.comments && <Text>None</Text>}</td>\n              </tr>\n            </tbody>\n          </HTMLTable>\n\n          {this.props.comments && (\n            <HTMLTable>\n              <tbody>\n                <tr>\n                  <td>\n                    <Divider />\n                    <Markdown\n                      content={this.props.comments}\n                      simplifiedAutoLink={true}\n                      strikethrough={true}\n                      tasklists={true}\n                      openLinksInNewWindow={true}\n                    />\n                    <Divider />\n                  </td>\n                </tr>\n              </tbody>\n            </HTMLTable>\n          )}\n\n          <br />\n\n          <div className=\"grading-result-info\">\n            <Text>\n              Graded by <b>{this.props.graderName}</b> on {getPrettyDate(this.props.gradedAt)}\n            </Text>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default AssessmentWorkspaceGradingResult;\n","import {\n  Button,\n  ButtonGroup,\n  Card,\n  Classes,\n  Dialog,\n  Intent,\n  NonIdealState,\n  Spinner\n} from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport classNames from 'classnames';\nimport { Variant } from 'js-slang/dist/types';\nimport { stringify } from 'js-slang/dist/utils/stringify';\nimport * as React from 'react';\n\nimport { InterpreterOutput } from '../application/ApplicationTypes';\nimport {\n  Assessment,\n  AssessmentCategories,\n  AutogradingResult,\n  IMCQQuestion,\n  IProgrammingQuestion,\n  Library,\n  Question,\n  QuestionTypes,\n  Testcase\n} from '../assessment/AssessmentTypes';\nimport { ControlBarProps } from '../controlBar/ControlBar';\nimport { ControlBarChapterSelect } from '../controlBar/ControlBarChapterSelect';\nimport { ControlBarClearButton } from '../controlBar/ControlBarClearButton';\nimport { ControlBarEvalButton } from '../controlBar/ControlBarEvalButton';\nimport { ControlBarNextButton } from '../controlBar/ControlBarNextButton';\nimport { ControlBarPreviousButton } from '../controlBar/ControlBarPreviousButton';\nimport { ControlBarQuestionViewButton } from '../controlBar/ControlBarQuestionViewButton';\nimport { ControlBarResetButton } from '../controlBar/ControlBarResetButton';\nimport { ControlBarRunButton } from '../controlBar/ControlBarRunButton';\nimport { ControlButtonSaveButton } from '../controlBar/ControlBarSaveButton';\nimport controlButton from '../ControlButton';\nimport { HighlightedLines, Position } from '../editor/EditorTypes';\nimport Markdown from '../Markdown';\nimport { SideContentProps } from '../sideContent/SideContent';\nimport SideContentAutograder from '../sideContent/SideContentAutograder';\nimport SideContentToneMatrix from '../sideContent/SideContentToneMatrix';\nimport { SideContentTab, SideContentType } from '../sideContent/SideContentTypes';\nimport Constants from '../utils/Constants';\nimport { beforeNow } from '../utils/DateHelper';\nimport { history } from '../utils/HistoryHelper';\nimport { showWarningMessage } from '../utils/NotificationsHelper';\nimport { assessmentCategoryLink } from '../utils/ParamParseHelper';\nimport Workspace, { WorkspaceProps } from '../workspace/Workspace';\nimport { WorkspaceState } from '../workspace/WorkspaceTypes';\nimport AssessmentWorkspaceGradingResult from './AssessmentWorkspaceGradingResult';\n\nexport type AssessmentWorkspaceProps = DispatchProps & StateProps & OwnProps;\n\nexport type DispatchProps = {\n  handleActiveTabChange: (activeTab: SideContentType) => void;\n  handleAssessmentFetch: (assessmentId: number) => void;\n  handleBrowseHistoryDown: () => void;\n  handleBrowseHistoryUp: () => void;\n  handleChapterSelect: (chapter: any, changeEvent: any) => void;\n  handleClearContext: (library: Library) => void;\n  handleDeclarationNavigate: (cursorPosition: Position) => void;\n  handleEditorEval: () => void;\n  handleEditorValueChange: (val: string) => void;\n  handleEditorHeightChange: (height: number) => void;\n  handleEditorWidthChange: (widthChange: number) => void;\n  handleEditorUpdateBreakpoints: (breakpoints: string[]) => void;\n  handleInterruptEval: () => void;\n  handleReplEval: () => void;\n  handleReplOutputClear: () => void;\n  handleReplValueChange: (newValue: string) => void;\n  handleResetWorkspace: (options: Partial<WorkspaceState>) => void;\n  handleSave: (id: number, answer: number | string) => void;\n  handleSideContentHeightChange: (heightChange: number) => void;\n  handleTestcaseEval: (testcaseId: number) => void;\n  handleUpdateCurrentAssessmentId: (assessmentId: number, questionId: number) => void;\n  handleUpdateHasUnsavedChanges: (hasUnsavedChanges: boolean) => void;\n  handleDebuggerPause: () => void;\n  handleDebuggerResume: () => void;\n  handleDebuggerReset: () => void;\n  handlePromptAutocomplete: (row: number, col: number, callback: any) => void;\n};\n\nexport type OwnProps = {\n  assessmentId: number;\n  questionId: number;\n  notAttempted: boolean;\n  closeDate: string;\n};\n\nexport type StateProps = {\n  assessment?: Assessment;\n  autogradingResults: AutogradingResult[];\n  editorPrepend: string;\n  editorValue: string | null;\n  editorPostpend: string;\n  editorTestcases: Testcase[];\n  editorHeight?: number;\n  editorWidth: string;\n  breakpoints: string[];\n  highlightedLines: HighlightedLines[];\n  hasUnsavedChanges: boolean;\n  isRunning: boolean;\n  isDebugging: boolean;\n  enableDebugging: boolean;\n  newCursorPosition?: Position;\n  output: InterpreterOutput[];\n  replValue: string;\n  sideContentHeight?: number;\n  storedAssessmentId?: number;\n  storedQuestionId?: number;\n};\n\nclass AssessmentWorkspace extends React.Component<\n  AssessmentWorkspaceProps,\n  { showOverlay: boolean; showResetTemplateOverlay: boolean }\n> {\n  public constructor(props: AssessmentWorkspaceProps) {\n    super(props);\n    this.state = {\n      showOverlay: false,\n      showResetTemplateOverlay: false\n    };\n    this.props.handleEditorValueChange('');\n  }\n\n  /**\n   * After mounting (either an older copy of the assessment\n   * or a loading screen), try to fetch a newer assessment,\n   * and show the briefing.\n   */\n  public componentDidMount() {\n    this.props.handleAssessmentFetch(this.props.assessmentId);\n    if (this.props.questionId === 0 && this.props.notAttempted) {\n      this.setState({ showOverlay: true });\n    }\n    if (!this.props.assessment) {\n      return;\n    }\n\n    let questionId = this.props.questionId;\n    if (this.props.questionId >= this.props.assessment.questions.length) {\n      questionId = this.props.assessment.questions.length - 1;\n    }\n\n    const question: Question = this.props.assessment.questions[questionId];\n\n    let answer = '';\n    if (question.type === QuestionTypes.programming) {\n      if (question.answer) {\n        answer = (question as IProgrammingQuestion).answer as string;\n      } else {\n        answer = (question as IProgrammingQuestion).solutionTemplate;\n      }\n    }\n\n    this.props.handleEditorValueChange(answer);\n  }\n\n  /**\n   * Once there is an update (due to the assessment being fetched), check\n   * if a workspace reset is needed.\n   */\n  public componentDidUpdate() {\n    this.checkWorkspaceReset(this.props);\n  }\n\n  public render() {\n    if (this.props.assessment === undefined || this.props.assessment.questions.length === 0) {\n      return (\n        <NonIdealState\n          className={classNames('WorkspaceParent', Classes.DARK)}\n          description=\"Getting mission ready...\"\n          icon={<Spinner size={Spinner.SIZE_LARGE} />}\n        />\n      );\n    }\n\n    const overlay = (\n      <Dialog className=\"assessment-briefing\" isOpen={this.state.showOverlay}>\n        <Card>\n          <Markdown content={this.props.assessment.longSummary} />\n          <Button\n            className=\"assessment-briefing-button\"\n            // tslint:disable-next-line jsx-no-lambda\n            onClick={() => this.setState({ showOverlay: false })}\n            text=\"Continue\"\n          />\n        </Card>\n      </Dialog>\n    );\n\n    const closeOverlay = () => this.setState({ showResetTemplateOverlay: false });\n    const resetTemplateOverlay = (\n      <Dialog\n        className=\"assessment-reset\"\n        icon={IconNames.ERROR}\n        isCloseButtonShown={true}\n        isOpen={this.state.showResetTemplateOverlay}\n        onClose={closeOverlay}\n        title=\"Confirmation: Reset editor?\"\n      >\n        <div className={Classes.DIALOG_BODY}>\n          <Markdown content=\"Are you sure you want to reset the template?\" />\n          <Markdown content=\"*Note this will not affect the saved copy of your program, unless you save over it.*\" />\n        </div>\n        <div className={Classes.DIALOG_FOOTER}>\n          <ButtonGroup>\n            {controlButton('Cancel', null, closeOverlay, {\n              minimal: false\n            })}\n            {controlButton(\n              'Confirm',\n              null,\n              () => {\n                closeOverlay();\n                this.props.handleEditorValueChange(\n                  (this.props.assessment!.questions[questionId] as IProgrammingQuestion)\n                    .solutionTemplate\n                );\n                this.props.handleUpdateHasUnsavedChanges(true);\n              },\n              { minimal: false, intent: Intent.DANGER }\n            )}\n          </ButtonGroup>\n        </div>\n      </Dialog>\n    );\n\n    /* If questionId is out of bounds, set it to the max. */\n    const questionId =\n      this.props.questionId >= this.props.assessment.questions.length\n        ? this.props.assessment.questions.length - 1\n        : this.props.questionId;\n    const question: Question = this.props.assessment.questions[questionId];\n    const workspaceProps: WorkspaceProps = {\n      controlBarProps: this.controlBarProps(questionId),\n      editorProps:\n        question.type === QuestionTypes.programming\n          ? {\n              editorSessionId: '',\n              editorValue: this.props.editorValue!,\n              handleDeclarationNavigate: this.props.handleDeclarationNavigate,\n              handleEditorEval: this.props.handleEditorEval,\n              handleEditorValueChange: this.props.handleEditorValueChange,\n              handleUpdateHasUnsavedChanges: this.props.handleUpdateHasUnsavedChanges,\n              breakpoints: this.props.breakpoints,\n              highlightedLines: this.props.highlightedLines,\n              newCursorPosition: this.props.newCursorPosition,\n              handleEditorUpdateBreakpoints: this.props.handleEditorUpdateBreakpoints,\n              handlePromptAutocomplete: this.props.handlePromptAutocomplete,\n              isEditorAutorun: false\n            }\n          : undefined,\n      editorHeight: this.props.editorHeight,\n      editorWidth: this.props.editorWidth,\n      handleEditorHeightChange: this.props.handleEditorHeightChange,\n      handleEditorWidthChange: this.props.handleEditorWidthChange,\n      handleSideContentHeightChange: this.props.handleSideContentHeightChange,\n      hasUnsavedChanges: this.props.hasUnsavedChanges,\n      mcqProps: {\n        mcq: question as IMCQQuestion,\n        handleMCQSubmit: (option: number) =>\n          this.props.handleSave(this.props.assessment!.questions[questionId].id, option)\n      },\n      sideContentHeight: this.props.sideContentHeight,\n      sideContentProps: this.sideContentProps(this.props, questionId),\n      replProps: {\n        handleBrowseHistoryDown: this.props.handleBrowseHistoryDown,\n        handleBrowseHistoryUp: this.props.handleBrowseHistoryUp,\n        handleReplEval: this.props.handleReplEval,\n        handleReplValueChange: this.props.handleReplValueChange,\n        output: this.props.output,\n        replValue: this.props.replValue\n      }\n    };\n    return (\n      <div className={classNames('WorkspaceParent', Classes.DARK)}>\n        {overlay}\n        {resetTemplateOverlay}\n        <Workspace {...workspaceProps} />\n      </div>\n    );\n  }\n\n  /**\n   * Checks if there is a need to reset the workspace, then executes\n   * a dispatch (in the props) if needed.\n   */\n  private checkWorkspaceReset(props: AssessmentWorkspaceProps) {\n    /* Don't reset workspace if assessment not fetched yet. */\n    if (this.props.assessment === undefined) {\n      return;\n    }\n\n    /* Reset assessment if it has changed.*/\n    const assessmentId = this.props.assessmentId;\n    const questionId = this.props.questionId;\n\n    if (\n      this.props.storedAssessmentId === assessmentId &&\n      this.props.storedQuestionId === questionId\n    ) {\n      return;\n    }\n\n    const question = this.props.assessment.questions[questionId];\n\n    let autogradingResults: AutogradingResult[] = [];\n    let editorValue: string = '';\n    let editorPrepend: string = '';\n    let editorPostpend: string = '';\n    let editorTestcases: Testcase[] = [];\n\n    if (question.type === QuestionTypes.programming) {\n      const questionData = question as IProgrammingQuestion;\n      autogradingResults = questionData.autogradingResults;\n      editorPrepend = questionData.prepend;\n      editorPostpend = questionData.postpend;\n      editorTestcases = questionData.testcases;\n\n      editorValue = questionData.answer as string;\n      if (!editorValue) {\n        editorValue = questionData.solutionTemplate!;\n      }\n    }\n\n    this.props.handleEditorUpdateBreakpoints([]);\n    this.props.handleUpdateCurrentAssessmentId(assessmentId, questionId);\n    this.props.handleResetWorkspace({\n      autogradingResults,\n      editorPrepend,\n      editorValue,\n      editorPostpend,\n      editorTestcases\n    });\n    this.props.handleClearContext(question.library);\n    this.props.handleUpdateHasUnsavedChanges(false);\n    if (editorValue) {\n      this.props.handleEditorValueChange(editorValue);\n    }\n  }\n\n  /** Pre-condition: IAssessment has been loaded */\n  private sideContentProps: (p: AssessmentWorkspaceProps, q: number) => SideContentProps = (\n    props: AssessmentWorkspaceProps,\n    questionId: number\n  ) => {\n    const tabs: SideContentTab[] = [\n      {\n        label: `Task ${questionId + 1}`,\n        iconName: IconNames.NINJA,\n        body: <Markdown content={props.assessment!.questions[questionId].content} />,\n        id: SideContentType.questionOverview,\n        toSpawn: () => true\n      },\n      {\n        label: `${props.assessment!.category} Briefing`,\n        iconName: IconNames.BRIEFCASE,\n        body: <Markdown content={props.assessment!.longSummary} />,\n        id: SideContentType.briefing,\n        toSpawn: () => true\n      },\n      {\n        label: `${props.assessment!.category} Autograder`,\n        iconName: IconNames.AIRPLANE,\n        body: (\n          <SideContentAutograder\n            testcases={props.editorTestcases}\n            autogradingResults={props.autogradingResults}\n            handleTestcaseEval={this.props.handleTestcaseEval}\n          />\n        ),\n        id: SideContentType.autograder,\n        toSpawn: () => true\n      }\n    ];\n    const isGraded = props.assessment!.questions[questionId].grader !== undefined;\n    if (isGraded) {\n      tabs.push({\n        label: `Report Card`,\n        iconName: IconNames.TICK,\n        body: (\n          <AssessmentWorkspaceGradingResult\n            graderName={props.assessment!.questions[questionId].grader!.name}\n            gradedAt={props.assessment!.questions[questionId].gradedAt!}\n            xp={props.assessment!.questions[questionId].xp}\n            grade={props.assessment!.questions[questionId].grade}\n            maxGrade={props.assessment!.questions[questionId].maxGrade}\n            maxXp={props.assessment!.questions[questionId].maxXp}\n            comments={props.assessment!.questions[questionId].comments}\n          />\n        ),\n        id: SideContentType.grading,\n        toSpawn: () => true\n      });\n    }\n\n    const functionsAttached = props.assessment!.questions[questionId].library.external.symbols;\n    if (functionsAttached.includes('get_matrix')) {\n      tabs.push({\n        label: `Tone Matrix`,\n        iconName: IconNames.GRID_VIEW,\n        body: <SideContentToneMatrix />,\n        id: SideContentType.toneMatrix,\n        toSpawn: () => true\n      });\n    }\n    return {\n      handleActiveTabChange: props.handleActiveTabChange,\n      defaultSelectedTabId: isGraded ? SideContentType.grading : SideContentType.questionOverview,\n      tabs,\n      workspaceLocation: 'assessment'\n    };\n  };\n\n  /** Pre-condition: IAssessment has been loaded */\n  private controlBarProps: (q: number) => ControlBarProps = (questionId: number) => {\n    const listingPath = `/academy/${assessmentCategoryLink(this.props.assessment!.category)}`;\n    const assessmentWorkspacePath = listingPath + `/${this.props.assessment!.id.toString()}`;\n    const questionProgress: [number, number] = [\n      questionId + 1,\n      this.props.assessment!.questions.length\n    ];\n\n    const onClickPrevious = () =>\n      history.push(assessmentWorkspacePath + `/${(questionId - 1).toString()}`);\n    const onClickNext = () =>\n      history.push(assessmentWorkspacePath + `/${(questionId + 1).toString()}`);\n    const onClickReturn = () => history.push(listingPath);\n\n    // Returns a nullary function that defers the navigation of the browser window, until the\n    // student's answer passes some checks - presently only used for Paths\n    const onClickProgress = (deferredNavigate: () => void) => {\n      return () => {\n        // Perform question blocking - determine the highest question number previously accessed\n        // by counting the number of questions that have a non-null answer\n        const blockedQuestionId =\n          this.props.assessment!.questions.filter(qn => qn.answer !== null).length - 1;\n\n        // If the current question does not block the next question, proceed as usual\n        if (questionId < blockedQuestionId) {\n          return deferredNavigate();\n        }\n        // Else evaluate its correctness - proceed iff the answer to the current question is correct\n        const question: Question = this.props.assessment!.questions[questionId];\n        if (question.type === QuestionTypes.mcq) {\n          if (question.answer !== (question as IMCQQuestion).solution) {\n            return showWarningMessage('Your MCQ solution is incorrect!', 750);\n          }\n        } else if (question.type === QuestionTypes.programming) {\n          const isCorrect = this.props.editorTestcases.reduce((acc, testcase) => {\n            return acc && stringify(testcase.result) === testcase.answer;\n          }, true);\n          if (!isCorrect) {\n            return showWarningMessage('Your solution has not passed all testcases!', 750);\n          }\n        }\n        return deferredNavigate();\n      };\n    };\n\n    const onClickSave = () =>\n      this.props.handleSave(\n        this.props.assessment!.questions[questionId].id,\n        this.props.editorValue!\n      );\n    const onClickResetTemplate = () => {\n      this.setState({ showResetTemplateOverlay: true });\n    };\n\n    const clearButton = (\n      <ControlBarClearButton\n        handleReplOutputClear={this.props.handleReplOutputClear}\n        key=\"clear_repl\"\n      />\n    );\n\n    const evalButton = (\n      <ControlBarEvalButton\n        handleReplEval={this.props.handleReplEval}\n        isRunning={this.props.isRunning}\n        key=\"eval_repl\"\n      />\n    );\n\n    const nextButton = (\n      <ControlBarNextButton\n        onClickNext={\n          this.props.assessment!.category === AssessmentCategories.Path\n            ? onClickProgress(onClickNext)\n            : onClickNext\n        }\n        onClickReturn={\n          this.props.assessment!.category === AssessmentCategories.Path\n            ? onClickProgress(onClickReturn)\n            : onClickReturn\n        }\n        questionProgress={questionProgress}\n        key=\"next_question\"\n      />\n    );\n\n    const previousButton = (\n      <ControlBarPreviousButton\n        onClick={onClickPrevious}\n        questionProgress={questionProgress}\n        key=\"previous_question\"\n      />\n    );\n\n    const questionView = (\n      <ControlBarQuestionViewButton questionProgress={questionProgress} key=\"question_view\" />\n    );\n\n    const resetButton =\n      this.props.assessment!.questions[questionId].type !== QuestionTypes.mcq ? (\n        <ControlBarResetButton onClick={onClickResetTemplate} key=\"reset_template\" />\n      ) : null;\n\n    const runButton = (\n      <ControlBarRunButton handleEditorEval={this.props.handleEditorEval} key=\"run\" />\n    );\n\n    const saveButton =\n      !beforeNow(this.props.closeDate) &&\n      this.props.assessment!.questions[questionId].type !== QuestionTypes.mcq ? (\n        <ControlButtonSaveButton\n          hasUnsavedChanges={this.props.hasUnsavedChanges}\n          onClickSave={onClickSave}\n          key=\"save\"\n        />\n      ) : null;\n\n    const handleChapterSelect = () => {};\n\n    const chapterSelect = (\n      <ControlBarChapterSelect\n        handleChapterSelect={handleChapterSelect}\n        sourceChapter={this.props.assessment!.questions[questionId].library.chapter}\n        sourceVariant={Constants.defaultSourceVariant as Variant}\n        disabled={true}\n        key=\"chapter\"\n      />\n    );\n\n    return {\n      editorButtons: [runButton, saveButton, resetButton, chapterSelect],\n      flowButtons: [previousButton, questionView, nextButton],\n      replButtons: [evalButton, clearButton]\n    };\n  };\n}\n\nexport default AssessmentWorkspace;\n","import { connect, MapDispatchToProps, MapStateToProps } from 'react-redux';\nimport { bindActionCreators, Dispatch } from 'redux';\n\nimport {\n  beginDebuggerPause,\n  beginInterruptExecution,\n  debuggerReset,\n  debuggerResume\n} from '../application/actions/InterpreterActions';\nimport { fetchAssessment, submitAnswer } from '../application/actions/SessionActions';\nimport { OverallState } from '../application/ApplicationTypes';\nimport { Library } from '../assessment/AssessmentTypes';\nimport { Position } from '../editor/EditorTypes';\nimport { SideContentType } from '../sideContent/SideContentTypes';\nimport {\n  beginClearContext,\n  browseReplHistoryDown,\n  browseReplHistoryUp,\n  changeEditorHeight,\n  changeEditorWidth,\n  changeSideContentHeight,\n  chapterSelect,\n  clearReplOutput,\n  evalEditor,\n  evalRepl,\n  evalTestcase,\n  navigateToDeclaration,\n  promptAutocomplete,\n  resetWorkspace,\n  setEditorBreakpoint,\n  updateActiveTab,\n  updateCurrentAssessmentId,\n  updateEditorValue,\n  updateHasUnsavedChanges,\n  updateReplValue\n} from '../workspace/WorkspaceActions';\nimport { WorkspaceLocation, WorkspaceState } from '../workspace/WorkspaceTypes';\nimport AssessmentWorkspace, { DispatchProps, OwnProps, StateProps } from './AssessmentWorkspace';\n\nconst mapStateToProps: MapStateToProps<StateProps, OwnProps, OverallState> = (state, props) => {\n  return {\n    assessment: state.session.assessments.get(props.assessmentId),\n    autogradingResults: state.workspaces.assessment.autogradingResults,\n    editorPrepend: state.workspaces.assessment.editorPrepend,\n    editorValue: state.workspaces.assessment.editorValue,\n    editorPostpend: state.workspaces.assessment.editorPostpend,\n    editorTestcases: state.workspaces.assessment.editorTestcases,\n    editorHeight: state.workspaces.assessment.editorHeight,\n    editorWidth: state.workspaces.assessment.editorWidth,\n    breakpoints: state.workspaces.assessment.breakpoints,\n    highlightedLines: state.workspaces.assessment.highlightedLines,\n    hasUnsavedChanges: state.workspaces.assessment.hasUnsavedChanges,\n    isRunning: state.workspaces.assessment.isRunning,\n    isDebugging: state.workspaces.assessment.isDebugging,\n    enableDebugging: state.workspaces.assessment.enableDebugging,\n    newCursorPosition: state.workspaces.assessment.newCursorPosition,\n    output: state.workspaces.assessment.output,\n    replValue: state.workspaces.assessment.replValue,\n    sideContentHeight: state.workspaces.assessment.sideContentHeight,\n    storedAssessmentId: state.workspaces.assessment.currentAssessment,\n    storedQuestionId: state.workspaces.assessment.currentQuestion\n  };\n};\n\nconst workspaceLocation: WorkspaceLocation = 'assessment';\n\nconst mapDispatchToProps: MapDispatchToProps<DispatchProps, {}> = (dispatch: Dispatch) =>\n  bindActionCreators(\n    {\n      handleActiveTabChange: (activeTab: SideContentType) =>\n        updateActiveTab(activeTab, workspaceLocation),\n      handleAssessmentFetch: fetchAssessment,\n      handleBrowseHistoryDown: () => browseReplHistoryDown(workspaceLocation),\n      handleBrowseHistoryUp: () => browseReplHistoryUp(workspaceLocation),\n      handleChapterSelect: (chapter: any, changeEvent: any) =>\n        chapterSelect(chapter, 'default', workspaceLocation),\n      handleClearContext: (library: Library) => beginClearContext(library, workspaceLocation),\n      handleDeclarationNavigate: (cursorPosition: Position) =>\n        navigateToDeclaration(workspaceLocation, cursorPosition),\n      handleEditorEval: () => evalEditor(workspaceLocation),\n      handleEditorValueChange: (val: string) => updateEditorValue(val, workspaceLocation),\n      handleEditorHeightChange: (height: number) => changeEditorHeight(height, workspaceLocation),\n      handleEditorWidthChange: (widthChange: number) =>\n        changeEditorWidth(widthChange.toString(), workspaceLocation),\n      handleEditorUpdateBreakpoints: (breakpoints: string[]) =>\n        setEditorBreakpoint(breakpoints, workspaceLocation),\n      handleInterruptEval: () => beginInterruptExecution(workspaceLocation),\n      handleReplEval: () => evalRepl(workspaceLocation),\n      handleReplOutputClear: () => clearReplOutput(workspaceLocation),\n      handleReplValueChange: (newValue: string) => updateReplValue(newValue, workspaceLocation),\n      handleResetWorkspace: (options: Partial<WorkspaceState>) =>\n        resetWorkspace(workspaceLocation, options),\n      handleSave: submitAnswer,\n      handleSideContentHeightChange: (heightChange: number) =>\n        changeSideContentHeight(heightChange, workspaceLocation),\n      handleTestcaseEval: (testcaseId: number) => evalTestcase(workspaceLocation, testcaseId),\n      handleUpdateHasUnsavedChanges: (hasUnsavedChanges: boolean) =>\n        updateHasUnsavedChanges(workspaceLocation, hasUnsavedChanges),\n      handleUpdateCurrentAssessmentId: updateCurrentAssessmentId,\n      handleDebuggerPause: () => beginDebuggerPause(workspaceLocation),\n      handleDebuggerResume: () => debuggerResume(workspaceLocation),\n      handleDebuggerReset: () => debuggerReset(workspaceLocation),\n      handlePromptAutocomplete: (row: number, col: number, callback: any) =>\n        promptAutocomplete(workspaceLocation, row, col, callback)\n    },\n    dispatch\n  );\n\nconst AssessmentWorkspaceContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(AssessmentWorkspace);\n\nexport default AssessmentWorkspaceContainer;\n","import { Card, Elevation } from '@blueprintjs/core';\nimport * as React from 'react';\n\nexport type ContentDisplayProps = {\n  fullWidth?: boolean;\n  display: JSX.Element;\n  loadContentDispatch: () => void;\n};\n\nclass ContentDisplay extends React.Component<ContentDisplayProps, {}> {\n  public componentDidMount() {\n    this.props.loadContentDispatch();\n  }\n\n  public render() {\n    return (\n      <div className=\"ContentDisplay row center-xs\">\n        <div\n          className={`${\n            this.props.fullWidth ? 'col-xs-12' : 'col-xs-10'\n          } contentdisplay-content-parent`}\n        >\n          <Card className=\"contentdisplay-content\" elevation={Elevation.THREE}>\n            {this.props.display}\n          </Card>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ContentDisplay;\n","import {\n  filterByTypeOptions,\n  Notification,\n  NotificationFilterFunction\n} from './NotificationBadgeTypes';\n\n/**\n * @return A function that takes in an array of notification and filters it by assessment id.\n */\nexport function filterNotificationsByAssessment(assessmentId: number): NotificationFilterFunction {\n  return (notifications: Notification[]) =>\n    notifications.filter(n => !n.submission_id && n.assessment_id === assessmentId);\n}\n\n/**\n * @return A function that takes in an array of notification and filters it by submission id.\n */\nexport function filterNotificationsBySubmission(submissionId: number): NotificationFilterFunction {\n  return (notifications: Notification[]) =>\n    notifications.filter(n => n.submission_id === submissionId);\n}\n\n/**\n * Notifications will be filtered to either one of the Assessment Category, or the Grading Category.\n *\n * Notifications with a submission id belongs to the Grading category.\n *\n * @return A function that takes in an array of notification and filters it by the type of notification.\n */\nexport function filterNotificationsByType(\n  assessmentType: filterByTypeOptions\n): NotificationFilterFunction {\n  return (notifications: Notification[]) =>\n    notifications.filter(n => {\n      if (assessmentType === 'Grading') {\n        return n.submission_id !== undefined;\n      }\n      return !n.submission_id && assessmentType === n.assessment_type;\n    });\n}\n\n/**\n * @return A function that takes in an array of notification and filters it by notification id.\n */\nexport function filterNotificationsById(id: number): NotificationFilterFunction {\n  return (notifications: Notification[]) => notifications.filter(n => n.id === id);\n}\n","import { AssessmentCategories, AssessmentCategory } from '../assessment/AssessmentTypes';\n\nexport type Notification = {\n  assessment_id?: number;\n  assessment_type?: AssessmentCategory;\n  assessment_title?: string;\n  id: number;\n  submission_id?: number;\n  type: NotificationType;\n};\n\nexport enum NotificationTypes {\n  new = 'new',\n  deadline = 'deadline',\n  autograded = 'autograded',\n  graded = 'graded',\n  submitted = 'submitted',\n  unsubmitted = 'unsubmitted',\n  new_message = 'new_message'\n}\n\nexport type NotificationType = keyof typeof NotificationTypes;\n\nexport type NotificationFilterFunction = (notifications: Notification[]) => Notification[];\n\nexport type filterByTypeOptions = AssessmentCategories | 'Grading';\n","import { Intent, Popover, PopoverInteractionKind, Position, Tag } from '@blueprintjs/core';\nimport * as React from 'react';\n\nimport { filterNotificationsById } from './NotificationBadgeHelper';\nimport {\n  Notification,\n  NotificationFilterFunction,\n  NotificationType,\n  NotificationTypes\n} from './NotificationBadgeTypes';\n\ntype NotificationBadgeProps = DispatchProps & StateProps & OwnProps;\n\nexport type DispatchProps = {\n  handleAcknowledgeNotifications: (withFilter?: NotificationFilterFunction) => void;\n};\n\ntype OwnProps = {\n  className?: string;\n  disableHover?: boolean; // Set to true to disable popover content\n  large?: boolean; // Set to true to use large style\n  notificationFilter?: (notifications: Notification[]) => Notification[];\n};\n\nexport type StateProps = {\n  notifications: Notification[];\n};\n\nconst NotificationBadge: React.SFC<NotificationBadgeProps> = props => {\n  const notifications = props.notificationFilter\n    ? props.notificationFilter(props.notifications)\n    : props.notifications;\n\n  if (!notifications.length) {\n    return null;\n  }\n\n  const notificationIcon = (\n    <Tag intent={Intent.DANGER} round={true} large={props.large}>\n      {notifications.length}\n    </Tag>\n  );\n\n  if (!props.disableHover) {\n    const makeNotificationTag = (notification: Notification) => {\n      const onRemove = () =>\n        props.handleAcknowledgeNotifications(filterNotificationsById(notification.id));\n\n      return (\n        <Tag\n          className=\"row badge-tag\"\n          key={`${notification.id}`}\n          minimal={true}\n          multiline={true}\n          onRemove={onRemove}\n        >\n          {makeNotificationMessage(notification.type)}\n        </Tag>\n      );\n    };\n\n    const notificationTags = <div className=\"col\">{notifications.map(makeNotificationTag)}</div>;\n\n    return (\n      <Popover\n        className={props.className}\n        content={notificationTags}\n        interactionKind={PopoverInteractionKind.HOVER}\n        position={Position.RIGHT}\n        hoverOpenDelay={50}\n        hoverCloseDelay={50}\n        lazy={true}\n      >\n        {notificationIcon}\n      </Popover>\n    );\n  }\n\n  return notificationIcon;\n};\n\nconst makeNotificationMessage = (type: NotificationType) => {\n  switch (type) {\n    case NotificationTypes.new:\n      return 'This assessment is new.';\n    case NotificationTypes.deadline:\n      return 'This assessment is closing soon.';\n    case NotificationTypes.autograded:\n      return 'This assessment has been autograded.';\n    case NotificationTypes.submitted:\n      return 'This submission is new.';\n    case NotificationTypes.unsubmitted:\n      return 'This assessment has been unsubmitted.';\n    case NotificationTypes.graded:\n      return 'This assessment has been manually graded.';\n    case NotificationTypes.new_message:\n      return 'There are new messages.';\n    default:\n      return 'Unknown notification';\n  }\n};\n\nexport default NotificationBadge;\n","import { connect, MapDispatchToProps, MapStateToProps } from 'react-redux';\nimport { bindActionCreators, Dispatch } from 'redux';\n\nimport { acknowledgeNotifications } from '../application/actions/SessionActions';\nimport { OverallState } from '../application/ApplicationTypes';\nimport NotificationBadge, { DispatchProps, StateProps } from './NotificationBadge';\n\nconst mapStateToProps: MapStateToProps<StateProps, {}, OverallState> = state => ({\n  notifications: state.session.notifications\n});\n\nconst mapDispatchToProps: MapDispatchToProps<DispatchProps, {}> = (dispatch: Dispatch) =>\n  bindActionCreators(\n    {\n      handleAcknowledgeNotifications: acknowledgeNotifications\n    },\n    dispatch\n  );\n\nconst NotificationBadgeContainer = connect(mapStateToProps, mapDispatchToProps)(NotificationBadge);\n\nexport default NotificationBadgeContainer;\n","import {\n  Button,\n  ButtonGroup,\n  Card,\n  Classes,\n  Collapse,\n  Dialog,\n  Elevation,\n  H4,\n  H6,\n  Icon,\n  IconName,\n  Intent,\n  NonIdealState,\n  Position,\n  Spinner,\n  Text,\n  Tooltip\n} from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport { sortBy } from 'lodash';\nimport * as React from 'react';\nimport { RouteComponentProps } from 'react-router';\nimport { NavLink } from 'react-router-dom';\n\nimport defaultCoverImage from '../../assets/default_cover_image.jpg';\nimport { OwnProps as AssessmentWorkspaceOwnProps } from '../assessmentWorkspace/AssessmentWorkspace';\nimport AssessmentWorkspaceContainer from '../assessmentWorkspace/AssessmentWorkspaceContainer';\nimport ContentDisplay from '../ContentDisplay';\nimport controlButton from '../ControlButton';\nimport Markdown from '../Markdown';\nimport NotificationBadge from '../notificationBadge/NotificationBadgeContainer';\nimport { filterNotificationsByAssessment } from '../notificationBadge/NotificationBadgeHelper';\nimport { NotificationFilterFunction } from '../notificationBadge/NotificationBadgeTypes';\nimport Constants from '../utils/Constants';\nimport { beforeNow, getPrettyDate } from '../utils/DateHelper';\nimport { assessmentCategoryLink, stringParamToInt } from '../utils/ParamParseHelper';\nimport {\n  AssessmentCategory,\n  AssessmentOverview,\n  AssessmentStatuses,\n  AssessmentWorkspaceParams,\n  GradingStatuses\n} from './AssessmentTypes';\n\nexport type AssessmentProps = DispatchProps &\n  OwnProps &\n  RouteComponentProps<AssessmentWorkspaceParams> &\n  StateProps;\n\nexport type DispatchProps = {\n  handleAcknowledgeNotifications: (withFilter?: NotificationFilterFunction) => void;\n  handleAssessmentOverviewFetch: () => void;\n  handleSubmitAssessment: (id: number) => void;\n};\n\nexport type OwnProps = {\n  assessmentCategory: AssessmentCategory;\n};\n\nexport type StateProps = {\n  assessmentOverviews?: AssessmentOverview[];\n  isStudent: boolean;\n};\n\ntype State = {\n  betchaAssessment: AssessmentOverview | null;\n  showClosedAssessments: boolean;\n  showOpenedAssessments: boolean;\n  showUpcomingAssessments: boolean;\n};\n\nclass Assessment extends React.Component<AssessmentProps, State> {\n  public constructor(props: AssessmentProps) {\n    super(props);\n    this.state = {\n      betchaAssessment: null,\n      showClosedAssessments: false,\n      showOpenedAssessments: true,\n      showUpcomingAssessments: true\n    };\n  }\n\n  public render() {\n    const { assessmentOverviews, isStudent } = this.props;\n    const assessmentId: number | null = stringParamToInt(this.props.match.params.assessmentId);\n    const questionId: number =\n      stringParamToInt(this.props.match.params.questionId) || Constants.defaultQuestionId;\n\n    // If there is an assessment to render, create a workspace. The assessment\n    // overviews must still be loaded for this, to send the due date.\n    if (assessmentId !== null && assessmentOverviews !== undefined) {\n      const overview = assessmentOverviews.filter(a => a.id === assessmentId)[0];\n      const assessmentWorkspaceProps: AssessmentWorkspaceOwnProps = {\n        assessmentId,\n        questionId,\n        notAttempted: overview.status === AssessmentStatuses.not_attempted,\n        closeDate: overview.closeAt\n      };\n      return <AssessmentWorkspaceContainer {...assessmentWorkspaceProps} />;\n    }\n\n    // Otherwise, render a list of assOwnProps\n    let display: JSX.Element;\n    if (assessmentOverviews === undefined) {\n      display = <NonIdealState description=\"Fetching assessment...\" icon={<Spinner />} />;\n    } else if (assessmentOverviews.length === 0) {\n      display = <NonIdealState title=\"There are no assessments.\" icon={IconNames.FLAME} />;\n    } else {\n      /** Upcoming assessments, that are not released yet. */\n      const isOverviewUpcoming = (overview: AssessmentOverview) =>\n        !beforeNow(overview.closeAt) && !beforeNow(overview.openAt);\n\n      const upcomingCards = this.sortAssessments(\n        assessmentOverviews.filter(isOverviewUpcoming)\n      ).map((overview, index) => this.makeOverviewCard(overview, index, !isStudent, false));\n\n      /** Opened assessments, that are released and can be attempted. */\n      const isOverviewOpened = (overview: AssessmentOverview) =>\n        !beforeNow(overview.closeAt) &&\n        beforeNow(overview.openAt) &&\n        overview.status !== AssessmentStatuses.submitted;\n      const openedCards = this.sortAssessments(\n        assessmentOverviews.filter(overview => isOverviewOpened(overview))\n      ).map((overview, index) => this.makeOverviewCard(overview, index, true, false));\n\n      /** Closed assessments, that are past the due date or cannot be attempted further. */\n      const closedCards = this.sortAssessments(\n        assessmentOverviews.filter(\n          overview => !isOverviewOpened(overview) && !isOverviewUpcoming(overview)\n        )\n      ).map((overview, index) => this.makeOverviewCard(overview, index, true, true));\n\n      /** Render cards */\n      const upcomingCardsCollapsible = (\n        <>\n          {collapseButton(\n            'Upcoming',\n            this.state.showUpcomingAssessments,\n            this.toggleUpcomingAssessments\n          )}\n          <Collapse isOpen={this.state.showUpcomingAssessments}>{upcomingCards}</Collapse>\n        </>\n      );\n\n      const openedCardsCollapsible = (\n        <>\n          {collapseButton('Open', this.state.showOpenedAssessments, this.toggleOpenAssessments)}\n          <Collapse isOpen={this.state.showOpenedAssessments}>{openedCards}</Collapse>\n        </>\n      );\n\n      const closedCardsCollapsible = (\n        <>\n          {collapseButton('Closed', this.state.showClosedAssessments, this.toggleClosedAssessments)}\n          <Collapse isOpen={this.state.showClosedAssessments}>{closedCards}</Collapse>\n        </>\n      );\n\n      display = (\n        <>\n          {upcomingCards.length > 0 ? upcomingCardsCollapsible : null}\n          {openedCards.length > 0 ? openedCardsCollapsible : null}\n          {closedCards.length > 0 ? closedCardsCollapsible : null}\n        </>\n      );\n    }\n\n    // Define the betcha dialog (in each card's menu)\n    const submissionText = this.state.betchaAssessment ? (\n      <p>\n        You are about to finalise your submission for the{' '}\n        {this.state.betchaAssessment.category.toLowerCase()}{' '}\n        <i>&quot;{this.state.betchaAssessment.title}&quot;</i>.\n      </p>\n    ) : (\n      <p>You are about to finalise your submission.</p>\n    );\n    const betchaText = (\n      <>\n        {submissionText}\n        <p>\n          Early submissions grant you additional XP, but{' '}\n          <span className=\"warning\">this action is irreversible.</span>\n        </p>\n      </>\n    );\n    const betchaDialog = (\n      <Dialog\n        className=\"betcha-dialog\"\n        icon={IconNames.ERROR}\n        isCloseButtonShown={true}\n        isOpen={this.state.betchaAssessment !== null}\n        onClose={this.setBetchaAssessmentNull}\n        title=\"Betcha: Early Submission\"\n      >\n        <div className={Classes.DIALOG_BODY}>\n          <Text>{betchaText}</Text>\n        </div>\n        <div className={Classes.DIALOG_FOOTER}>\n          <ButtonGroup>\n            {controlButton('Cancel', null, this.setBetchaAssessmentNull, { minimal: false })}\n            {controlButton('Finalise Submission', null, this.submitAssessment, {\n              minimal: false,\n              intent: Intent.DANGER\n            })}\n          </ButtonGroup>\n        </div>\n      </Dialog>\n    );\n\n    // Finally, render the ContentDisplay.\n    return (\n      <div className=\"Assessment\">\n        <ContentDisplay\n          display={display}\n          loadContentDispatch={this.props.handleAssessmentOverviewFetch}\n        />\n        {betchaDialog}\n      </div>\n    );\n  }\n\n  private toggleClosedAssessments = () =>\n    this.setState({\n      ...this.state,\n      showClosedAssessments: !this.state.showClosedAssessments\n    });\n\n  private toggleOpenAssessments = () =>\n    this.setState({\n      ...this.state,\n      showOpenedAssessments: !this.state.showOpenedAssessments\n    });\n\n  private toggleUpcomingAssessments = () =>\n    this.setState({\n      ...this.state,\n      showUpcomingAssessments: !this.state.showUpcomingAssessments\n    });\n\n  private setBetchaAssessment = (assessment: AssessmentOverview | null) =>\n    this.setState({\n      ...this.state,\n      betchaAssessment: assessment\n    });\n\n  private setBetchaAssessmentNull = () => this.setBetchaAssessment(null);\n\n  private submitAssessment = () => {\n    if (this.state.betchaAssessment) {\n      this.props.handleSubmitAssessment(this.state.betchaAssessment.id);\n      this.setBetchaAssessmentNull();\n    }\n  };\n\n  private sortAssessments = (assessments: AssessmentOverview[]) =>\n    sortBy(assessments, [a => -a.id]);\n\n  private makeSubmissionButton = (overview: AssessmentOverview, index: number) => (\n    <Button\n      disabled={overview.status !== AssessmentStatuses.attempted}\n      icon={IconNames.CONFIRM}\n      intent={overview.status === AssessmentStatuses.attempted ? Intent.DANGER : Intent.NONE}\n      minimal={true}\n      // intentional: each listing renders its own version of onClick\n      // tslint:disable-next-line:jsx-no-lambda\n      onClick={() => this.setBetchaAssessment(overview)}\n    >\n      <span className=\"custom-hidden-xxxs\">Finalize</span>\n      <span className=\"custom-hidden-xxs\"> Submission</span>\n    </Button>\n  );\n\n  private makeAssessmentInteractButton = (overview: AssessmentOverview) => {\n    let icon: IconName;\n    let label: string;\n    let optionalLabel: string = '';\n\n    switch (overview.status) {\n      case AssessmentStatuses.not_attempted:\n        icon = IconNames.PLAY;\n        label = 'Attempt';\n        break;\n      case AssessmentStatuses.attempting:\n        icon = IconNames.PLAY;\n        label = 'Continue';\n        optionalLabel = ' Attempt';\n        break;\n      case AssessmentStatuses.attempted:\n        icon = IconNames.EDIT;\n        label = 'Review';\n        optionalLabel = ' Attempt';\n        break;\n      case AssessmentStatuses.submitted:\n        icon = IconNames.EYE_OPEN;\n        label = 'Review';\n        optionalLabel = ' Submission';\n        break;\n      default:\n        // If we reach this case, backend data did not fit IAssessmentOverview\n        icon = IconNames.PLAY;\n        label = 'Review';\n        break;\n    }\n    return (\n      <NavLink\n        to={`/academy/${assessmentCategoryLink(overview.category)}/${overview.id.toString()}/${\n          Constants.defaultQuestionId\n        }`}\n      >\n        <Button\n          icon={icon}\n          minimal={true}\n          // intentional: each listing renders its own version of onClick\n          // tslint:disable-next-line:jsx-no-lambda\n          onClick={() =>\n            this.props.handleAcknowledgeNotifications(filterNotificationsByAssessment(overview.id))\n          }\n        >\n          <span className=\"custom-hidden-xxxs\">{label}</span>\n          <span className=\"custom-hidden-xxs\">{optionalLabel}</span>\n        </Button>\n      </NavLink>\n    );\n  };\n\n  /**\n   * Create a series of cards to display IAssessmentOverviews.\n   * @param {AssessmentOverview} overview the assessment overview to display\n   * @param {number} index a unique number for this card (required for sequential rendering).\n   *   See {@link https://reactjs.org/docs/lists-and-keys.html#keys}\n   * @param renderAttemptButton will only render the attempt button if true, regardless\n   *   of attempt status.\n   * @param notifications the notifications to be passed in.\n   */\n  private makeOverviewCard = (\n    overview: AssessmentOverview,\n    index: number,\n    renderAttemptButton: boolean,\n    renderGradingStatus: boolean\n  ) => (\n    <div key={index}>\n      <Card className=\"row listing\" elevation={Elevation.ONE}>\n        <div className=\"col-xs-3 listing-picture\">\n          <NotificationBadge\n            className=\"badge\"\n            notificationFilter={filterNotificationsByAssessment(overview.id)}\n            large={true}\n          />\n          <img\n            alt=\"Assessment\"\n            className={`cover-image-${overview.status}`}\n            src={overview.coverImage ? overview.coverImage : defaultCoverImage}\n          />\n        </div>\n        <div className=\"col-xs-9 listing-text\">\n          {this.makeOverviewCardTitle(overview, index, renderGradingStatus)}\n          <div className=\"listing-grade\">\n            <H6>\n              {beforeNow(overview.openAt)\n                ? `Grade: ${overview.grade} / ${overview.maxGrade}`\n                : `Max Grade: ${overview.maxGrade}`}\n            </H6>\n          </div>\n          <div className=\"listing-xp\">\n            <H6>\n              {beforeNow(overview.openAt)\n                ? `XP: ${overview.xp} / ${overview.maxXp}`\n                : `Max XP: ${overview.maxXp}`}\n            </H6>\n          </div>\n          <div className=\"listing-description\">\n            <Markdown content={overview.shortSummary} />\n          </div>\n          <div className=\"listing-footer\">\n            <Text className=\"listing-due-date\">\n              <Icon className=\"listing-due-icon\" iconSize={12} icon={IconNames.TIME} />\n              {beforeNow(overview.openAt)\n                ? `Due: ${getPrettyDate(overview.closeAt)}`\n                : `Opens at: ${getPrettyDate(overview.openAt)}`}\n            </Text>\n            <div className=\"listing-button\">\n              {renderAttemptButton ? this.makeAssessmentInteractButton(overview) : null}\n            </div>\n          </div>\n        </div>\n      </Card>\n    </div>\n  );\n\n  private makeOverviewCardTitle = (\n    overview: AssessmentOverview,\n    index: number,\n    renderGradingStatus: boolean\n  ) => (\n    <div className=\"listing-header\">\n      <Text ellipsize={true}>\n        <H4 className=\"listing-title\">\n          {overview.title}\n          {overview.private ? (\n            <Tooltip\n              className=\"listing-title-tooltip\"\n              content=\"This assessment is password-protected.\"\n            >\n              <Icon icon=\"lock\" />\n            </Tooltip>\n          ) : null}\n          {renderGradingStatus ? makeGradingStatus(overview.gradingStatus) : null}\n        </H4>\n      </Text>\n      <div className=\"listing-button\">{this.makeSubmissionButton(overview, index)}</div>\n    </div>\n  );\n}\n\nconst makeGradingStatus = (gradingStatus: string) => {\n  let iconName: IconName;\n  let intent: Intent;\n  let tooltip: string;\n\n  switch (gradingStatus) {\n    case GradingStatuses.graded:\n      iconName = IconNames.TICK;\n      intent = Intent.SUCCESS;\n      tooltip = 'Fully graded';\n      break;\n    case GradingStatuses.grading:\n      iconName = IconNames.TIME;\n      intent = Intent.WARNING;\n      tooltip = 'Grading in progress';\n      break;\n    case GradingStatuses.none:\n      iconName = IconNames.CROSS;\n      intent = Intent.DANGER;\n      tooltip = 'Not graded yet';\n      break;\n    default:\n      // Shows default icon if this assessment is ungraded\n      iconName = IconNames.DISABLE;\n      intent = Intent.PRIMARY;\n      tooltip = `Not applicable`;\n      break;\n  }\n\n  return (\n    <Tooltip className=\"listing-title-tooltip\" content={tooltip} position={Position.RIGHT}>\n      <Icon icon={iconName} intent={intent} />\n    </Tooltip>\n  );\n};\n\nconst collapseButton = (label: string, isOpen: boolean, toggleFunc: () => void) =>\n  controlButton(label, isOpen ? IconNames.CARET_DOWN : IconNames.CARET_RIGHT, toggleFunc, {\n    minimal: true,\n    className: 'collapse-button'\n  });\n\nexport default Assessment;\n","import { connect, MapDispatchToProps, MapStateToProps } from 'react-redux';\nimport { withRouter } from 'react-router';\nimport { bindActionCreators, Dispatch } from 'redux';\n\nimport {\n  acknowledgeNotifications,\n  fetchAssessmentOverviews,\n  submitAssessment\n} from '../application/actions/SessionActions';\nimport { OverallState, Role } from '../application/ApplicationTypes';\nimport Assessment, { DispatchProps, OwnProps, StateProps } from './Assessment';\nimport { AssessmentOverview } from './AssessmentTypes';\n\nconst mapStateToProps: MapStateToProps<StateProps, OwnProps, OverallState> = (state, props) => {\n  const categoryFilter = (overview: AssessmentOverview) =>\n    overview.category === props.assessmentCategory;\n  const stateProps: StateProps = {\n    assessmentOverviews: state.session.assessmentOverviews\n      ? state.session.assessmentOverviews.filter(categoryFilter)\n      : undefined,\n    isStudent: state.session.role ? state.session.role === Role.Student : true\n  };\n  return stateProps;\n};\n\nconst mapDispatchToProps: MapDispatchToProps<DispatchProps, {}> = (dispatch: Dispatch) =>\n  bindActionCreators(\n    {\n      handleAcknowledgeNotifications: acknowledgeNotifications,\n      handleAssessmentOverviewFetch: fetchAssessmentOverviews,\n      handleSubmitAssessment: submitAssessment\n    },\n    dispatch\n  );\n\nconst AssessmentContainer = withRouter(connect(mapStateToProps, mapDispatchToProps)(Assessment));\n\nexport default AssessmentContainer;\n","export const SAVE_CANVAS = 'SAVE_CANVAS';\n\nexport const assessmentRegExp = ':assessmentId(\\\\d+)?/:questionId(\\\\d+)?';\nexport const gradingRegExp = ':submissionId(\\\\d+)?/:questionId(\\\\d+)?';\n\nexport type AcademyState = {\n  readonly gameCanvas?: HTMLCanvasElement;\n};\n","import { action } from 'typesafe-actions';\n\nimport {\n  FETCH_GROUP_GRADING_SUMMARY,\n  GradingSummary,\n  UPDATE_GROUP_GRADING_SUMMARY\n} from './DashboardTypes';\n\nexport const fetchGroupGradingSummary = () => action(FETCH_GROUP_GRADING_SUMMARY);\n\nexport const updateGroupGradingSummary = (gradingSummary: GradingSummary) =>\n  action(UPDATE_GROUP_GRADING_SUMMARY, gradingSummary);\n","export const FETCH_GROUP_GRADING_SUMMARY = 'FETCH_GROUP_GRADING_SUMMARY';\nexport const UPDATE_GROUP_GRADING_SUMMARY = 'UPDATE_GROUP_GRADING_SUMMARY';\n\nexport type DashboardState = {\n  gradingSummary: GradingSummary;\n};\n\nexport type GradingSummaryEntry = {\n  groupName: string;\n  leaderName: string;\n  ungradedMissions: number;\n  submittedMissions: number;\n  ungradedSidequests: number;\n  submittedSidequests: number;\n};\n\nexport type GradingSummary = GradingSummaryEntry[];\n","import 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-balham.css';\n\nimport { ColDef, GridApi, GridReadyEvent } from 'ag-grid-community';\nimport { AgGridReact } from 'ag-grid-react';\nimport * as React from 'react';\n\nimport ContentDisplay from '../../../commons/ContentDisplay';\nimport { GradingSummary } from '../../../features/dashboard/DashboardTypes';\n\ntype DashboardProps = DispatchProps & StateProps;\n\nexport type DispatchProps = {\n  handleFetchGradingSummary: () => void;\n};\n\nexport type StateProps = {\n  gradingSummary: GradingSummary;\n};\n\nclass Dashboard extends React.Component<DashboardProps> {\n  private columnDefs: ColDef[];\n  private defaultColumnDefs: ColDef;\n  private gridApi?: GridApi;\n\n  public constructor(props: DashboardProps) {\n    super(props);\n\n    this.columnDefs = [\n      {\n        headerName: 'Group',\n        field: 'groupName',\n        width: 80,\n        sort: 'asc'\n      },\n      {\n        headerName: 'Avenger',\n        field: 'leaderName'\n      },\n      {\n        headerName: 'Ungraded Missions',\n        field: 'ungradedMissions'\n      },\n      {\n        headerName: 'Submitted Missions',\n        field: 'submittedMissions'\n      },\n      {\n        headerName: 'Ungraded Quests',\n        field: 'ungradedSidequests'\n      },\n      {\n        headerName: 'Submitted Quests',\n        field: 'submittedSidequests'\n      }\n    ];\n\n    this.defaultColumnDefs = {\n      filter: true,\n      resizable: true,\n      sortable: true\n    };\n  }\n\n  public componentDidUpdate(prevProps: DashboardProps) {\n    if (this.gridApi && this.props.gradingSummary.length !== prevProps.gradingSummary.length) {\n      this.gridApi.setRowData(this.props.gradingSummary);\n    }\n  }\n\n  public handleFetchGradingSummary = () => {\n    this.props.handleFetchGradingSummary();\n  };\n\n  public render() {\n    const grid = (\n      <div className=\"GradingContainer\">\n        <div className=\"Grading ag-grid-parent ag-theme-balham\">\n          <AgGridReact\n            domLayout={'autoHeight'}\n            columnDefs={this.columnDefs}\n            defaultColDef={this.defaultColumnDefs}\n            onGridReady={this.onGridReady}\n            onFirstDataRendered={this.resizeGrid}\n            onGridSizeChanged={this.resizeGrid}\n            rowData={this.props.gradingSummary}\n            rowHeight={30}\n            suppressMovableColumns={true}\n          />\n        </div>\n      </div>\n    );\n\n    return (\n      <div>\n        <ContentDisplay display={grid} loadContentDispatch={this.handleFetchGradingSummary} />\n      </div>\n    );\n  }\n\n  private onGridReady = (params: GridReadyEvent) => {\n    this.gridApi = params.api;\n  };\n\n  private resizeGrid = () => {\n    if (this.gridApi) {\n      this.gridApi.sizeColumnsToFit();\n    }\n  };\n}\n\nexport default Dashboard;\n","import { connect, MapDispatchToProps, MapStateToProps } from 'react-redux';\nimport { bindActionCreators, Dispatch } from 'redux';\n\nimport { OverallState } from '../../../commons/application/ApplicationTypes';\nimport { fetchGroupGradingSummary } from '../../../features/dashboard/DashboardActions';\nimport Dashboard, { DispatchProps, StateProps } from './Dashboard';\n\nconst mapStateToProps: MapStateToProps<StateProps, {}, OverallState> = state => ({\n  gradingSummary: state.dashboard.gradingSummary\n});\n\nconst mapDispatchToProps: MapDispatchToProps<DispatchProps, {}> = (dispatch: Dispatch) =>\n  bindActionCreators(\n    {\n      handleFetchGradingSummary: fetchGroupGradingSummary\n    },\n    dispatch\n  );\n\nconst DashboardContainer = connect(mapStateToProps, mapDispatchToProps)(Dashboard);\n\nexport default DashboardContainer;\n","import { AssetMap, FontAsset } from './AssetsTypes';\n\nconst FontAssets: AssetMap<FontAsset> = {\n  zektonFont: {\n    key: 'zekton',\n    pngPath: '../assets/zekton.png',\n    fntPath: '../assets/zekton.fnt'\n  },\n  alienCowsFont: {\n    key: 'alienAndCows',\n    pngPath: '../assets/alien_and_cows.png',\n    fntPath: '../assets/alien_and_cows.fnt'\n  },\n  alienLeagueFont: {\n    key: 'alienLeague',\n    pngPath: '../assets/alien_league.png',\n    fntPath: '../assets/alien_league.fnt'\n  },\n  educatedDeersFont: {\n    key: 'educatedDeers',\n    pngPath: '../assets/educated_deers.png',\n    fntPath: '../assets/educated_deers.fnt'\n  },\n  pixelFont: {\n    key: 'pixel',\n    pngPath: '../assets/pixel.png',\n    fntPath: '../assets/pixel.fnt'\n  }\n};\n\nexport default FontAssets;\n","import * as _ from 'lodash';\n\nimport { screenSize } from '../commons/CommonConstants';\n\nexport const Color = {\n  navy: '#03092c',\n  lightBlue: '#ece1fb',\n  offWhite: '#bbc1c9',\n  white: '#ffffff',\n  darkGrey: '#333333',\n  lightGrey: '#555555',\n  blue: '#1133ff',\n  darkBlue: '#0d2440',\n  orange: '#ff9933',\n  yellow: '#ffee33',\n  red: '0#ff0000',\n  maroon: '#142B2E',\n  black: '#000000',\n  purple: '#dd33dd',\n  paleYellow: '#f6ffbd'\n};\n\nconst hex = (str: string) => parseInt(str.slice(1), 16);\nexport const HexColor = _.mapValues(Color, hex);\n\ntype TableFormatPosConfig = {\n  direction?: Direction;\n  numOfItems: number;\n  maxXSpace?: number;\n  maxYSpace?: number;\n  numItemLimit?: number;\n  redistributeLast?: boolean;\n};\n\nexport enum Direction {\n  Row = 'Row',\n  Column = 'Column'\n}\n\n/**\n * Calculate x,y positions using a table format: mimic table-like\n * positions, with rows and columns.\n *\n * The positions will be ordered from LEFT to RIGHT before\n * moving to the next row i.e. row-wise.\n *\n * @param numOfItems total number of items\n * @param maxXSpace maximum X space to be used, optional\n * @param maxYSpace maximum Y space to be used, optional\n * @param numItemLimit maximum number of item at a given row, optional\n * @param redistributeLast if true, items at the last row will have their location\n *                         calculated based on the number of items at the last row, optional\n * @returns {Array<[number, number]>} array of positions, in the format of\n *                                 [[xPos0, yPos0], [xPos1, yPos1]...]\n */\nexport function calcTableFormatPos({\n  direction = Direction.Row,\n  numOfItems,\n  maxXSpace = screenSize.x,\n  maxYSpace = screenSize.y,\n  numItemLimit = 0,\n  redistributeLast = true\n}: TableFormatPosConfig): Array<[number, number]> {\n  let itemsPerList = numItemLimit || numOfItems;\n  const numOfLists = Math.ceil(numOfItems / itemsPerList);\n\n  return _.times(numOfItems, itemNumber => {\n    const itemIndexInList = itemNumber % itemsPerList;\n    const listIndex = Math.floor(itemNumber / itemsPerList);\n\n    if (redistributeLast && listIndex === numOfLists - 1) {\n      itemsPerList = numOfItems % numOfLists || itemsPerList;\n    }\n\n    return direction === Direction.Row\n      ? [\n          indexToCoordinate(screenSize.x, maxXSpace, itemIndexInList, itemsPerList),\n          indexToCoordinate(screenSize.y, maxYSpace, listIndex, numOfLists)\n        ]\n      : [\n          indexToCoordinate(screenSize.x, maxXSpace, listIndex, numOfLists),\n          indexToCoordinate(screenSize.y, maxYSpace, itemIndexInList, itemsPerList)\n        ];\n  });\n}\n\nfunction indexToCoordinate(\n  screenSpace: number,\n  listSpace: number,\n  index: number,\n  maxItems: number\n) {\n  const partitionSpace = listSpace / maxItems;\n  return (screenSpace - listSpace + partitionSpace) / 2 + partitionSpace * index;\n}\n\ntype ListFormatPos = {\n  numOfItems: number;\n  xSpacing: number;\n  ySpacing: number;\n};\n\n/**\n * Calculate x,y positions using a list format: mimic list-like\n * positions, ordered sequentially.\n *\n * Each item will be offset by xSpaing and ySpacing.\n *\n * The first item will start at [0, 0] (top left) position.\n *\n * @param numOfItems total number of items\n * @param xSpacing horizontal spacing between items\n * @param ySpacing vertical spacing between items\n * @returns {Array<[number, number]>} array of positions, in the format of\n *                                 [[xPos0, yPos0], [xPos1, yPos1]...]\n */\nexport function calcListFormatPos({ numOfItems, xSpacing = 30, ySpacing = 30 }: ListFormatPos) {\n  const pos = new Array<[number, number]>();\n\n  for (let i = 0; i < numOfItems; i++) {\n    pos.push([i * xSpacing, i * ySpacing]);\n  }\n\n  return pos;\n}\n","import FontAssets from '../assets/FontAssets';\nimport { HexColor } from '../utils/StyleUtils';\n\nexport const Constants = {\n  repoAssetsFolder: '../assets',\n  assetsFolder: 'https://s3-ap-southeast-1.amazonaws.com/source-academy-assets',\n  fadeDuration: 600,\n  nullFunction: () => {},\n  nullInteractionId: '',\n  nullSequenceNumber: -1,\n  popupDuration: 1000,\n  defaultAssetPath: '/UI/wristDeviceButton.png',\n  defaultFontStyle: {\n    key: FontAssets.zektonFont.key,\n    size: 30,\n    fill: HexColor.lightBlue,\n    align: Phaser.GameObjects.BitmapText.ALIGN_CENTER\n  }\n};\n\nexport const screenSize = {\n  x: 1920,\n  y: 1080\n};\n\nexport const screenCenter = {\n  x: screenSize.x / 2,\n  y: screenSize.y / 2\n};\n","export enum Layer {\n  Effects,\n  Background,\n  Character,\n  Speaker,\n  PopUp,\n  Dialogue,\n  SpeakerBox,\n  UI,\n  Objects,\n  BBox,\n  Escape,\n  Selector,\n  Collectibles\n}\n\n// Back to Front\nexport const defaultLayerSequence = [\n  Layer.Background,\n  Layer.Selector,\n  Layer.Collectibles,\n  Layer.Objects,\n  Layer.BBox,\n  Layer.Character,\n  Layer.Speaker,\n  Layer.PopUp,\n  Layer.Dialogue,\n  Layer.SpeakerBox,\n  Layer.UI,\n  Layer.Effects,\n  Layer.Escape\n];\n","export const bgMusicFadeDuration = 1000;\n\nexport const musicFadeOutTween = {\n  volume: 0,\n  ease: 'Power2'\n};\n\nexport enum GameSoundType {\n  SFX,\n  BGM\n}\n","import { GameSoundType } from '../sound/GameSoundTypes';\nimport { AssetMap, SoundAsset } from './AssetsTypes';\n\nconst SoundAssets: AssetMap<SoundAsset> = {\n  // SFX\n  buttonHover: {\n    key: 'btn-hover',\n    path: '/sfx/buttonHover.mp3',\n    config: { volume: 0.2 },\n    soundType: GameSoundType.SFX\n  },\n  buttonClick: {\n    key: 'btn-click',\n    path: '/sfx/buttonClick.mp3',\n    config: { volume: 0.2 },\n    soundType: GameSoundType.SFX\n  },\n  radioButtonClick: {\n    key: 'radio-btn-click',\n    path: '/sfx/radioButtonClick.mp3',\n    config: { volume: 0.3 },\n    soundType: GameSoundType.SFX\n  },\n  dialogueAdvance: {\n    key: 'dialogue-advance',\n    path: '/sfx/dialogueAdvance.mp3',\n    config: { volume: 0.6 },\n    soundType: GameSoundType.SFX\n  },\n  popUpEnter: {\n    key: 'pop-up-enter',\n    path: '/sfx/popUpEnter.mp3',\n    config: { volume: 0.7 },\n    soundType: GameSoundType.SFX\n  },\n  popUpExit: {\n    key: 'pop-up-exit',\n    path: '/sfx/popUpExit.mp3',\n    config: { volume: 0.7 },\n    soundType: GameSoundType.SFX\n  },\n  menuEnter: {\n    key: 'menu-enter',\n    path: '/sfx/menuEnter.mp3',\n    config: { volume: 1.0 },\n    soundType: GameSoundType.SFX\n  },\n  menuExit: {\n    key: 'menu-exit',\n    path: '/sfx/menuExit.mp3',\n    config: { volume: 1.0 },\n    soundType: GameSoundType.SFX\n  },\n  modeEnter: {\n    key: 'mode-enter',\n    path: '/sfx/modeEnter.mp3',\n    config: { volume: 0.2 },\n    soundType: GameSoundType.SFX\n  },\n  notifEnter: {\n    key: 'notif-enter',\n    path: '/sfx/notifEnter.mp3',\n    config: { volume: 0.5 },\n    soundType: GameSoundType.SFX\n  },\n  notifExit: {\n    key: 'notif-exit',\n    path: '/sfx/notifExit.mp3',\n    config: { volume: 0.5 },\n    soundType: GameSoundType.SFX\n  },\n\n  // BGM\n  galacticHarmony: {\n    key: 'galactic-harmony',\n    path: '/bgm/GalacticHarmony.mp3',\n    config: { volume: 0.5, loop: true },\n    soundType: GameSoundType.BGM\n  }\n};\n\nexport default SoundAssets;\n","import FontAssets from '../assets/FontAssets';\nimport { screenSize } from '../commons/CommonConstants';\nimport { BitmapFontStyle } from '../commons/CommonTypes';\nimport { Color, HexColor } from '../utils/StyleUtils';\n\nconst dialogueRectMargin = 10;\n\nconst DialogueConstants = {\n  promptSize: {\n    x: 30,\n    y: 60\n  },\n  promptPadding: {\n    x: 30,\n    y: 10\n  },\n  rect: {\n    x: dialogueRectMargin,\n    y: 760,\n    width: screenSize.x - dialogueRectMargin * 2,\n    height: 320\n  },\n  textPadding: {\n    x: 100,\n    y: 70\n  },\n  speakerTextConfig: { x: 320, y: 745, oriX: 0.5, oriY: 0.5 }\n};\n\nexport const textTypeWriterStyle = {\n  fontFamily: 'Verdana',\n  fontSize: '30px',\n  fill: Color.lightBlue,\n  align: 'left',\n  lineSpacing: 10,\n  wordWrap: {\n    width:\n      DialogueConstants.rect.width - DialogueConstants.textPadding.x * 2 - dialogueRectMargin * 2\n  }\n};\n\nexport const speakerTextStyle: BitmapFontStyle = {\n  key: FontAssets.zektonFont.key,\n  size: 36,\n  fill: HexColor.lightBlue,\n  align: Phaser.GameObjects.BitmapText.ALIGN_CENTER\n};\n\nexport default DialogueConstants;\n","import { AssetMap, ImageAsset } from './AssetsTypes';\n\nconst ImageAssets: AssetMap<ImageAsset> = {\n  // Commons Asset\n  shortButton: { key: 'short-button', path: '/ui/shortButton.png' },\n  mediumButton: { key: 'med-button', path: '/ui/mediumButton.png' },\n  longButton: { key: 'long-button', path: '/ui/longButton.png' },\n  topButton: { key: 'top-button', path: '/ui/topButton.png' },\n  speechBox: { key: 'speechBox', path: '/ui/speechbox.png' },\n  speakerBox: { key: 'speakerBox', path: '/ui/speakerBox.png' },\n  defaultLocationImg: { key: 'loc-default', path: '/ui/defaultLocation.jpg' },\n  locationPreviewFrame: { key: 'loc-preview-frame', path: '/ui/locationPreviewFrame.png' },\n  locationPreviewFill: { key: 'loc-preview-fill', path: '/ui/locationPreviewFill.png' },\n  talkOptButton: { key: 'talk-opt-button', path: '/ui/talkOptButton.png' },\n  talkOptCheck: { key: 'talk-opt-check', path: '/ui/talkOptCheck.png' },\n  modeMenuBanner: { key: 'mode-banner', path: '/ui/modeMenuBanner.png' },\n  popUpFrame: { key: 'pop-up-frame', path: '/ui/popUpFrame.png' },\n  mediumBox: { key: 'medium-box', path: '/ui/mediumBox.png' },\n  diamond: { key: 'diamond', path: '/ui/zircon.png' },\n  arrow: { key: 'arrow', path: '/ui/arrow.png' },\n  cookies: { key: 'cookies', path: '/images/cookies.png' },\n  scrollFrame: { key: 'scroll-frame', path: '/ui/scrollFrame.png' },\n\n  // Escape Menu\n  escapeMenuBackground: { key: 'escape-bg', path: '/ui/escapeMenu.png' },\n\n  // Awards Menu\n  awardsMenu: { key: 'award-bg', path: '/ui/collectiblesBg.png' },\n  awardsBanner: { key: 'award-banner', path: '/ui/collectiblesBanner.png' },\n  awardsPageChosen: {\n    key: 'award-pg-chosen',\n    path: '/ui/collectiblesPageOptChosen.png'\n  },\n  awardsPage: { key: 'award-pg-opt', path: '/ui/collectiblesPageOpt.png' },\n\n  // Awards Hall\n  awardsBackground: { key: 'award-hall-bg', path: '/ui/awardsHall.png' },\n\n  // Chapter Select\n  chapterSelectBackground: { key: 'chapter-select-bg', path: '/locations/yourRoom-dim/normal.png' },\n  chapterRepeatButton: { key: 'chapter-repeat', path: '/ui/chapterRepeat.png' },\n  chapterContinueButton: { key: 'chapter-continue', path: '/ui/chapterContinue.png' },\n  chapterSelectFrame: { key: 'chapter-select-frame', path: '/ui/chapterSelectionFrame.png' },\n  chapterSelectBorder: { key: 'chapter-select-border', path: '/ui/chapterSelectionBorder.png' },\n  chapterSelectArrow: { key: 'chapter-select-arrow', path: '/ui/chapSelectArrow.png' },\n\n  // Main Menu\n  mainMenuBackground: { key: 'main-menu-bg', path: '/locations/yourRoom-dim/normal.png' },\n  mainMenuOptBanner: { key: 'menu-option', path: '/ui/menuOption.png' },\n\n  // Settings\n  settingBackground: { key: 'setting-bg', path: '/locations/yourRoom-dim/normal.png' },\n  settingBanner: { key: 'settings-bg', path: '/ui/settingsBg.png' },\n  settingOption: { key: 'settings-opt', path: '/ui/settingsOption.png' },\n\n  // Room Preview\n  verifiedFrame: { key: 'verified-frame', path: '/ui/verifiedFrame.png' },\n\n  // Bindings\n  bindingsBackground: { key: 'setting-bg', path: '/locations/yourRoom-dim/normal.png' },\n  squareKeyboardIcon: { key: 'keyboard-key-square', path: '/ui/keyboardKeyIcon.png' },\n  medKeyboardIcon: { key: 'keyboard-key-medium', path: '/ui/TabIcon.png' }\n};\n\nexport default ImageAssets;\n","import { Constants } from '../commons/CommonConstants';\n\n/**\n * When called with await in an async function,\n * e.g. \"await sleep(5000)\", this line delays\n * the next line by that number of milliseconds.\n *\n * @param ms number of milliseconds to delay next line.\n * @returns {Promise} promise which resolves in ms milliseconds.\n */\nexport function sleep(ms: number) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n/**\n * Creates a Map with the same keys, but the values\n * are mapped using a specified function\n *\n * Example:\n * mapValues(Map([[\"a\", 1], [\"b\", 2], [\"c\", 3]]), (value, key) => 2 * value + key)\n * returns Map([[\"a\", \"2a\"], [\"b\", \"4b\"], [\"c\", \"6c\"]])\n *\n * @param map the Map that you'd like to iterate over\n * @param fn the binary function that produces the new\n *           value of the map using (value, key) as input\n * @returns {Map<K, R>} new Map with mapped values\n */\nexport function mapValues<K, V, R>(map: Map<K, V>, fn: (value: V, key?: K) => R): Map<K, R> {\n  const newMap = new Map<K, R>();\n  map.forEach((value: V, key: K) => {\n    const result: R = fn(value, key);\n    newMap.set(key, result);\n  });\n  return newMap;\n}\n\n/**\n * Caps a number to min and max boundary inclusive.\n *\n * @param value the number's value\n * @param min the minimum value of the number\n * @param max the maximum value of the number\n *\n * @returns {number} number which is capped based on boundaries\n */\nexport function limitNumber(value: number, min: number, max: number) {\n  return Math.min(Math.max(value, min), max);\n}\n\n/**\n * Appends the s3 file path to a short path name\n *\n * @param filename the short path of a filename\n * @returns {string} new path to file including full s3 link\n */\nexport function toS3Path(fileName: string) {\n  return Constants.assetsFolder + fileName;\n}\n\n/**\n * Throws an error when the property is not found.\n *\n * @param object the property that you would like to get\n * @returns {object} the object if it is found.\n * @throws {Error} if object is undefined\n */\nexport function mandatory<T>(object: T, errorMsg?: string) {\n  if (object === undefined) {\n    throw new Error(errorMsg || 'Object not found');\n  }\n  return (object as T)!;\n}\n\n/**\n * Returns the last element in the array\n *\n * @param array array you want to access\n * @returns the final element of the array\n */\nexport function lastElement<T>(array: T[]): T {\n  if (array.length === 0) {\n    throw new Error('Array is empty');\n  }\n  return array[array.length - 1];\n}\n","import { Constants, screenCenter, screenSize } from '../commons/CommonConstants';\nimport { IBaseScene } from '../commons/CommonTypes';\nimport { Layer } from '../layer/GameLayerTypes';\nimport { sleep } from '../utils/GameUtils';\nimport { HexColor } from '../utils/StyleUtils';\n\n/**\n * Generates a tween configuration for making objects fade out of scene.\n *\n * @param targets - an array of game objects that you want to fade out\n * @param duration - the duration of the fade animation\n * @returns {Phaser.Types.Tweens.TweenDataConfig} - the tween config for the fadeout animation\n */\nexport const fadeOut = (\n  targets: Phaser.GameObjects.GameObject[],\n  duration = Constants.fadeDuration\n) => ({\n  alpha: 0,\n  targets,\n  duration,\n  ease: 'Power2'\n});\n\n/**\n * Generates a tween configuration for making objects fade into scene.\n * Make sure the alpha of object is set to zero first.\n *\n * @param targets - an array of game objects that you want to fade in\n * @param duration - the duration of the fade animation\n * @returns {Phaser.Types.Tweens.TweenDataConfig} - the tween config for the fadein animation\n */\nexport const fadeIn = (\n  targets: Phaser.GameObjects.GameObject[],\n  duration = Constants.fadeDuration\n) => ({\n  alpha: 1,\n  targets,\n  duration,\n  ease: 'Power2'\n});\n\n/**\n * @typedef {FadeProps} - props to specify additional properties/configuration for a fade animation\n * @prop fadeDuration - how long to fade in and out\n */\ntype FadeProps = {\n  fadeDuration?: number;\n};\n\n/**\n * Function that makes a game object fade out, and after the animation,\n * removes the game object from the scene.\n *\n * @param scene - scene where this should happen\n * @param object - the game object that should fade out and be destroyed\n * @param fadeProps - additional properties/configuration describing the fade animation\n */\nexport function fadeAndDestroy(\n  scene: Phaser.Scene,\n  object: Phaser.GameObjects.GameObject | null,\n  { fadeDuration }: FadeProps = {}\n) {\n  if (!object) return;\n  scene.add.tween(fadeOut([object], fadeDuration || Constants.fadeDuration));\n  setTimeout(() => object.destroy(), fadeDuration || Constants.fadeDuration);\n}\n\n/**\n * A black screen that can be used in fade effects\n *\n * @param scene - the scene to add this screen to\n */\nexport function blackScreen(scene: Phaser.Scene) {\n  return new Phaser.GameObjects.Rectangle(\n    scene,\n    screenCenter.x,\n    screenCenter.y,\n    screenSize.x,\n    screenSize.y,\n    0\n  );\n}\n\n/**\n * A white screen that can be used in fade effects\n *\n * @param scene - the scene to add this screen to\n */\nexport function whiteScreen(scene: Phaser.Scene) {\n  return new Phaser.GameObjects.Rectangle(\n    scene,\n    screenCenter.x,\n    screenCenter.y,\n    screenSize.x,\n    screenSize.y,\n    HexColor.white\n  );\n}\n\n/**\n * Transitions two scenes using a black screen\n *\n * @param scene - the scene to add this screen to\n * @param fadeDuration - how long is the fading in and out of the scenes\n * @param delay - how long does the black screen remains on screen\n * @param callback - the function that is called during the transition\n */\nexport const blackFade = async (\n  scene: IBaseScene,\n  fadeDuration: number,\n  delay: number,\n  callback: any\n) => {\n  const fadeBlack = blackScreen(scene);\n  scene.layerManager.addToLayer(Layer.Effects, fadeBlack);\n\n  fadeBlack.setAlpha(0);\n  scene.tweens.add(fadeIn([fadeBlack], fadeDuration));\n  await sleep(fadeDuration);\n\n  await callback();\n  await sleep(delay);\n\n  fadeBlack.setAlpha(1);\n  scene.tweens.add(fadeOut([fadeBlack], fadeDuration));\n  await sleep(fadeDuration);\n\n  fadeBlack.destroy();\n};\n\n/**\n * Makes a game object object blink through fade ins and fade outs\n *\n * @param scene - the scene where you want to add this object to\n * @param gameObject - the gameObject which you want to add blinking effect on\n * @returns {() => void} - clearBlink is a function. When called, it stops the blinking.\n */\nexport function blink(\n  scene: Phaser.Scene,\n  gameObject: Phaser.GameObjects.Image | Phaser.GameObjects.Container\n) {\n  let i = 0;\n  const blink = setInterval(() => {\n    if (i % 2 !== 0) {\n      gameObject.setAlpha(0);\n      scene.tweens.add(fadeIn([gameObject], 250));\n    } else {\n      gameObject.setAlpha(1);\n      scene.tweens.add(fadeOut([gameObject], 250));\n    }\n    i++;\n  }, 500);\n  function clearBlink() {\n    i = 0;\n    clearInterval(blink);\n  }\n  return clearBlink;\n}\n","/**\n * @typedef {TypewriterProps} - properties describing a typewriter\n *\n * @prop {number} x - x coordinate of the left edge of the typewriter\n * @prop {number} y - y coordinate of the top edge of the typewriter\n * @prop {Phaser.Types.GameObjects.Text.TextStyle} textStyle\n *       the text config to specify the text propertoes of the typewriter text\n * @prop {number} typeWriterInterval - how long is the interval between\n *                                     each letter's appearance\n */\ntype TypewriterProps = {\n  x?: number;\n  y?: number;\n  textStyle?: Phaser.Types.GameObjects.Text.TextStyle;\n  typeWriterInterval?: number;\n};\n\n/**\n * Text sprite manager to produce typewriter effect\n *\n * @param scene - scene to add the typewriter sprite\n * @param typeWriterProps - properties to describe the appearance and animation of the typewriter\n */\nexport function Typewriter(\n  scene: Phaser.Scene,\n  { x = 0, y = 0, textStyle = {}, typeWriterInterval = 1 }: TypewriterProps\n) {\n  const textSprite = new Phaser.GameObjects.Text(scene, x, y, '', textStyle);\n\n  let line = '';\n  let charPointer = 0;\n  let typeWriting: NodeJS.Timeout;\n\n  /* Reset line and type out */\n  const changeLine = (message: string) => {\n    if (!message) return;\n    line = message;\n\n    textSprite.text = '';\n    charPointer = 0;\n\n    typeWriting && clearInterval(typeWriting);\n    typeWriting = setInterval(() => {\n      textSprite.text += line[charPointer++];\n      if (charPointer === line.length) {\n        clearInterval(typeWriting);\n      }\n    }, typeWriterInterval);\n  };\n\n  return { container: textSprite, changeLine };\n}\n\nexport default Typewriter;\n","import ImageAssets from '../assets/ImageAssets';\nimport { screenSize } from '../commons/CommonConstants';\nimport { blink, fadeAndDestroy } from '../effects/FadeEffect';\nimport GameGlobalAPI from '../scenes/gameManager/GameGlobalAPI';\nimport dialogueConstants from './GameDialogueConstants';\nimport { createDialogueBox, createTypewriter } from './GameDialogueHelper';\n\n/**\n * Class that manages the appearance of the dialogue box, which includes\n * the box itself, the text animations as well as the blinking diamond click prompt\n */\nclass DialogueRenderer {\n  private typewriter: any;\n  private dialogueBox: Phaser.GameObjects.Image;\n  private blinkingDiamond: any;\n\n  /**\n   * @param typewriterStyle the style of the typewriter you want to use\n   */\n  constructor(typewriterStyle: Phaser.Types.GameObjects.Text.TextStyle) {\n    const gameManager = GameGlobalAPI.getInstance().getGameManager();\n    this.dialogueBox = createDialogueBox(gameManager).setInteractive({\n      useHandCursor: true,\n      pixelPerfect: true\n    });\n    this.typewriter = createTypewriter(gameManager, typewriterStyle);\n    this.blinkingDiamond = this.drawDiamond(gameManager);\n  }\n\n  /**\n   * @returns {Phaser.GameObjects.Container} returns the entire dialogueBox container\n   * which can be added to the scene\n   */\n  public getDialogueContainer() {\n    const gameManager = GameGlobalAPI.getInstance().getGameManager();\n    const container = new Phaser.GameObjects.Container(gameManager, 0, 0);\n    container.add([this.dialogueBox, this.blinkingDiamond.container, this.typewriter.container]);\n    return container;\n  }\n\n  private drawDiamond(scene: Phaser.Scene) {\n    const diamondSprite = new Phaser.GameObjects.Image(\n      scene,\n      screenSize.x - dialogueConstants.promptSize.x - dialogueConstants.promptPadding.x,\n      screenSize.y - dialogueConstants.promptSize.y - dialogueConstants.promptPadding.y,\n      ImageAssets.diamond.key\n    ).setDisplaySize(dialogueConstants.promptSize.x, dialogueConstants.promptSize.y);\n\n    return { container: diamondSprite, clearBlink: blink(scene, diamondSprite) };\n  }\n\n  /**\n   * Obtains the green dialogue box\n   */\n  public getDialogueBox() {\n    return this.dialogueBox;\n  }\n\n  /**\n   * Destroyer for the dialogue box elements and interactivity\n   */\n  public destroy() {\n    const gameManager = GameGlobalAPI.getInstance().getGameManager();\n    this.blinkingDiamond.clearBlink();\n    this.getDialogueBox().off(Phaser.Input.Events.GAMEOBJECT_POINTER_UP);\n    fadeAndDestroy(gameManager, this.getDialogueContainer());\n  }\n\n  /**\n   * Change the text written in the box\n   */\n  public changeText(message: string) {\n    this.typewriter.changeLine(message);\n  }\n}\n\nexport default DialogueRenderer;\n","import ImageAssets from '../assets/ImageAssets';\nimport { screenCenter } from '../commons/CommonConstants';\nimport Typewriter from '../effects/Typewriter';\nimport dialogueConstants from './GameDialogueConstants';\n\n/**\n * Helper function to render the green box shown in every dialogue/ notification popup\n */\nexport function createDialogueBox(scene: Phaser.Scene) {\n  const dialogueBox = new Phaser.GameObjects.Image(\n    scene,\n    screenCenter.x,\n    screenCenter.y,\n    ImageAssets.speechBox.key\n  ).setAlpha(0.9);\n  return dialogueBox;\n}\n\n/**\n * Helper function to to generate the typewriter effect used by the dialogue renderer\n * @param scene the scene on which to place the typewriter effect\n * @param style the style of the typewriter\n */\nexport function createTypewriter(\n  scene: Phaser.Scene,\n  style: Phaser.Types.GameObjects.Text.TextStyle\n) {\n  const typewriter = Typewriter(scene, {\n    x: dialogueConstants.rect.x + dialogueConstants.textPadding.x,\n    y: dialogueConstants.rect.y + dialogueConstants.textPadding.y,\n    textStyle: style\n  });\n  return typewriter;\n}\n","import { BitmapFontStyle, TextConfig } from '../commons/CommonTypes';\n\n/**\n * Create bitmap text with the given style.\n *\n * @param scene scene to be attached to\n * @param text message to be shon\n * @param x x coordinate in worldspace\n * @param y y coordinate in worldspace\n * @param style style to be applied to the bitmap text\n * @returns {Phaser.GameObjects.BitmapText}\n */\nexport const createBitmapText = (\n  scene: Phaser.Scene,\n  text: string,\n  { x, y, oriX, oriY }: TextConfig,\n  style: BitmapFontStyle\n) => {\n  return new Phaser.GameObjects.BitmapText(scene, x, y, style.key, text, style.size, style.align)\n    .setTintFill(style.fill)\n    .setOrigin(oriX, oriY);\n};\n","import { Layer } from 'src/features/game/layer/GameLayerTypes';\n\nimport FontAssets from '../assets/FontAssets';\nimport SoundAssets from '../assets/SoundAssets';\nimport { Constants, screenCenter } from '../commons/CommonConstants';\nimport { BitmapFontStyle } from '../commons/CommonTypes';\nimport dialogueConstants from '../dialogue/GameDialogueConstants';\nimport DialogueRenderer from '../dialogue/GameDialogueRenderer';\nimport GameGlobalAPI from '../scenes/gameManager/GameGlobalAPI';\nimport SourceAcademyGame from '../SourceAcademyGame';\nimport { sleep } from '../utils/GameUtils';\nimport { HexColor } from '../utils/StyleUtils';\nimport { createBitmapText } from '../utils/TextUtils';\nimport { fadeAndDestroy, fadeIn } from './FadeEffect';\n\nconst notifStyle: BitmapFontStyle = {\n  key: FontAssets.alienLeagueFont.key,\n  size: 100,\n  fill: HexColor.paleYellow,\n  align: Phaser.GameObjects.BitmapText.ALIGN_CENTER\n};\n\nconst notifTextConfig = {\n  x: screenCenter.x,\n  y: dialogueConstants.rect.y + notifStyle.size * 2,\n  oriX: 0.5,\n  oriY: 0.9\n};\n\n/**\n * A function to display a notifications such as location-change notification\n *\n * @param message - the string you want to display\n * @returns {Promise} - a promise that resolves when notification is clicked\n */\nexport async function displayNotification(message: string): Promise<void> {\n  const gameManager = GameGlobalAPI.getInstance().getGameManager();\n  const dialogueRenderer = new DialogueRenderer({});\n  const container = dialogueRenderer.getDialogueContainer();\n\n  GameGlobalAPI.getInstance().addContainerToLayer(Layer.Effects, container);\n  GameGlobalAPI.getInstance().fadeInLayer(Layer.Effects);\n\n  const notifText = createBitmapText(gameManager, message, notifTextConfig, notifStyle).setAlpha(0);\n  container.add(notifText);\n\n  SourceAcademyGame.getInstance().getSoundManager().playSound(SoundAssets.notifEnter.key);\n  gameManager.add.tween(fadeIn([notifText], Constants.fadeDuration * 2));\n\n  // Wait for fade in to finish\n  await sleep(Constants.fadeDuration * 2);\n\n  const showNotification = new Promise(resolve => {\n    dialogueRenderer.getDialogueBox().on(Phaser.Input.Events.GAMEOBJECT_POINTER_UP, () => {\n      SourceAcademyGame.getInstance().getSoundManager().playSound(SoundAssets.notifExit.key);\n      fadeAndDestroy(gameManager, notifText, { fadeDuration: Constants.fadeDuration / 4 });\n      dialogueRenderer.destroy();\n      resolve();\n    });\n  });\n\n  await showNotification;\n}\n","export enum GamePhaseType {\n  Move = 'Move',\n  Explore = 'Explore',\n  Talk = 'Talk',\n  Menu = 'Menu',\n  EscapeMenu = 'EscapeMenu',\n  None = 'None',\n  Sequence = 'Sequence',\n  AwardMenu = 'AwardMenu'\n}\n","import { LocationId } from '../location/GameMapTypes';\n\nexport enum GameStateStorage {\n  UserState = 'UserState',\n  ChecklistState = 'ChecklistState'\n}\n\n/**\n * Type of user state list.\n */\nexport enum UserStateTypes {\n  collectibles = 'collectibles',\n  assessments = 'assessments',\n  achievements = 'achievements'\n}\n\n/**\n * Encapsulate all user state lists.\n */\nexport type UserState = {\n  [K in UserStateTypes]?: string[];\n};\n\n/**\n * Represent the changes done to the state.\n */\nexport enum StateChangeType {\n  Add,\n  Mutate,\n  Delete\n}\n\n/**\n * Observer pattern, the observer side.\n */\nexport type StateObserver = {\n  observerId: string;\n  notify: (changeType: StateChangeType, locationId: LocationId, id?: string) => void;\n};\n\n/**\n * Observer pattern, the subject side.\n */\nexport type StateSubject = {\n  subscribers: Array<StateObserver>;\n  update: (changeType: StateChangeType, locationId: LocationId, id?: string) => void;\n  subscribe: (observer: StateObserver) => void;\n  unsubscribe: (observer: StateObserver) => void;\n};\n","import { Layer } from 'src/features/game/layer/GameLayerTypes';\nimport { GameMode } from 'src/features/game/mode/GameModeTypes';\n\nimport { SoundAsset } from '../../assets/AssetsTypes';\nimport { BBoxProperty } from '../../boundingBoxes/GameBoundingBoxTypes';\nimport { GamePosition, ItemId } from '../../commons/CommonTypes';\nimport { AssetKey } from '../../commons/CommonTypes';\nimport { displayNotification } from '../../effects/Notification';\nimport { GameLocation, GameLocationAttr, LocationId } from '../../location/GameMapTypes';\nimport { ObjectProperty } from '../../objects/GameObjectTypes';\nimport { GamePhaseType } from '../../phase/GamePhaseTypes';\nimport { SettingsJson } from '../../save/GameSaveTypes';\nimport SourceAcademyGame from '../../SourceAcademyGame';\nimport { StateObserver, UserStateTypes } from '../../state/GameStateTypes';\nimport { mandatory } from '../../utils/GameUtils';\nimport GameManager from './GameManager';\n\n/**\n * This class exposes all the public API's of managers\n * in the Game Manager scene.\n *\n * It allows managers to access services globally\n * through GameGlobalAPI.getInstance().function() without\n * having to keep a reference to the gameManager.\n */\nclass GameGlobalAPI {\n  private gameManager: GameManager | undefined;\n\n  static instance: GameGlobalAPI;\n\n  private constructor() {\n    this.gameManager = undefined;\n  }\n\n  static getInstance() {\n    if (!GameGlobalAPI.instance) {\n      GameGlobalAPI.instance = new GameGlobalAPI();\n    }\n    return GameGlobalAPI.instance;\n  }\n\n  /////////////////////\n  //   Game Manager  //\n  /////////////////////\n\n  public getGameManager = () => mandatory(this.gameManager);\n\n  public setGameManager(gameManagerRef: GameManager): void {\n    this.gameManager = gameManagerRef;\n  }\n\n  public getCurrLocId(): LocationId {\n    return this.getGameManager().currentLocationId;\n  }\n\n  public getLocationAtId(locationId: LocationId): GameLocation {\n    return this.getGameManager().getCurrentCheckpoint().map.getLocationAtId(locationId);\n  }\n\n  /////////////////////\n  //    Game Mode    //\n  /////////////////////\n\n  public getModesByLocId(locationId: LocationId): GameMode[] {\n    return this.getGameManager().stateManager.getLocationMode(locationId);\n  }\n\n  public addLocationMode(locationId: LocationId, mode: GameMode): void {\n    this.getGameManager().stateManager.addLocationMode(locationId, mode);\n  }\n\n  public removeLocationMode(locationId: LocationId, mode: GameMode): void {\n    this.getGameManager().stateManager.removeLocationMode(locationId, mode);\n  }\n\n  /////////////////////\n  //  Game Locations //\n  /////////////////////\n\n  public hasLocationUpdateAttr(\n    locationId: LocationId,\n    attr?: GameLocationAttr\n  ): boolean | undefined {\n    return this.getGameManager().stateManager.hasLocationUpdateAttr(locationId, attr);\n  }\n\n  public hasLocationUpdateMode(locationId: LocationId, mode?: GameMode): boolean | undefined {\n    return this.getGameManager().stateManager.hasLocationUpdateMode(locationId, mode);\n  }\n\n  public async changeLocationTo(locationName: string) {\n    await this.getGameManager().changeLocationTo(locationName);\n  }\n\n  /////////////////////\n  //   Interaction   //\n  /////////////////////\n\n  public hasTriggeredInteraction(id: string): boolean | undefined {\n    return this.getGameManager().stateManager.hasTriggeredInteraction(id);\n  }\n\n  public triggerInteraction(id: string): void {\n    this.getGameManager().stateManager.triggerInteraction(id);\n  }\n\n  /////////////////////\n  //    Game Attr    //\n  /////////////////////\n\n  public consumedLocationUpdate(locationId: LocationId, attr: GameLocationAttr) {\n    return this.getGameManager().stateManager.consumedLocationUpdate(locationId, attr);\n  }\n\n  public getLocationAttr(attr: GameLocationAttr, locationId: LocationId): ItemId[] {\n    return this.getGameManager().stateManager.getLocationAttr(attr, locationId);\n  }\n\n  public addLocationAttr(attr: GameLocationAttr, locationId: LocationId, attrElem: string): void {\n    this.getGameManager().stateManager.addLocationAttr(attr, locationId, attrElem);\n  }\n\n  public removeLocationAttr(\n    attr: GameLocationAttr,\n    locationId: LocationId,\n    attrElem: string\n  ): void {\n    return this.getGameManager().stateManager.removeLocationAttr(attr, locationId, attrElem);\n  }\n\n  public subscribeState(observer: StateObserver) {\n    this.getGameManager().stateManager.subscribe(observer);\n  }\n\n  public unsubscribeState(observer: StateObserver) {\n    this.getGameManager().stateManager.unsubscribe(observer);\n  }\n\n  /////////////////////\n  //  Game Objects   //\n  /////////////////////\n\n  public makeObjectGlow(objectId: ItemId, turnOn: boolean) {\n    this.getGameManager().objectManager.makeObjectGlow(objectId, turnOn);\n  }\n\n  public makeObjectBlink(objectId: ItemId, turnOn: boolean) {\n    this.getGameManager().objectManager.makeObjectBlink(objectId, turnOn);\n  }\n\n  public getObjPropertyMap() {\n    return this.getGameManager().stateManager.getObjPropertyMap();\n  }\n\n  public setObjProperty(id: ItemId, newObjProp: ObjectProperty) {\n    this.getGameManager().stateManager.setObjProperty(id, newObjProp);\n  }\n\n  public enableObjectAction(callbacks: any) {\n    this.getGameManager().objectManager.enableObjectAction(callbacks);\n  }\n\n  public disableObjectAction() {\n    this.getGameManager().objectManager.disableObjectAction();\n  }\n\n  /////////////////////\n  //    Game BBox    //\n  /////////////////////\n\n  public getBBoxPropertyMap() {\n    return this.getGameManager().stateManager.getBBoxPropertyMap();\n  }\n\n  public setBBoxProperty(id: ItemId, newBBoxProp: BBoxProperty) {\n    this.getGameManager().stateManager.setBBoxProperty(id, newBBoxProp);\n  }\n\n  public enableBBoxAction(callbacks: any) {\n    this.getGameManager().boundingBoxManager.enableBBoxAction(callbacks);\n  }\n\n  public disableBBoxAction() {\n    this.getGameManager().boundingBoxManager.disableBBoxAction();\n  }\n\n  /////////////////////\n  //  Game Objective //\n  /////////////////////\n\n  public isAllComplete(): boolean {\n    return this.getGameManager().stateManager.isAllComplete();\n  }\n\n  public isObjectiveComplete(key: string): boolean {\n    return this.getGameManager().stateManager.isObjectiveComplete(key);\n  }\n\n  public areObjectivesComplete(keys: string[]): boolean {\n    return this.getGameManager().stateManager.areObjectivesComplete(keys);\n  }\n\n  public completeObjective(key: string): void {\n    this.getGameManager().stateManager.completeObjective(key);\n  }\n\n  /////////////////////\n  //   User State    //\n  /////////////////////\n\n  public addToUserStateList(listName: UserStateTypes, id: string): void {\n    this.getGameManager().userStateManager.addToList(listName, id);\n  }\n\n  public async existsInUserStateList(listName: UserStateTypes, id: string): Promise<boolean> {\n    return await this.getGameManager().userStateManager.doesIdExistInList(listName, id);\n  }\n\n  /////////////////////\n  //   Game Layer    //\n  /////////////////////\n\n  public clearSeveralLayers(layerTypes: Layer[]) {\n    this.getGameManager().layerManager.clearSeveralLayers(layerTypes);\n  }\n\n  public addContainerToLayer(layer: Layer, gameObj: Phaser.GameObjects.GameObject) {\n    this.getGameManager().layerManager.addToLayer(layer, gameObj);\n  }\n\n  public fadeInLayer(layer: Layer, fadeDuration?: number) {\n    this.getGameManager().layerManager.fadeInLayer(layer, fadeDuration);\n  }\n\n  public fadeOutLayer(layer: Layer, fadeDuration?: number) {\n    this.getGameManager().layerManager.fadeOutLayer(layer, fadeDuration);\n  }\n  /////////////////////\n  //  Location Notif //\n  /////////////////////\n\n  public async bringUpUpdateNotif(message: string) {\n    this.getGameManager();\n    await displayNotification(message);\n  }\n\n  /////////////////////\n  //   Story Action  //\n  /////////////////////\n\n  public async processGameActions(actionIds: ItemId[] | undefined) {\n    await this.getGameManager().phaseManager.pushPhase(GamePhaseType.Sequence);\n    await this.getGameManager().actionManager.processGameActions(actionIds);\n    await this.getGameManager().phaseManager.popPhase();\n  }\n\n  public async processGameActionsInSamePhase(actionIds: ItemId[] | undefined) {\n    await this.getGameManager().actionManager.processGameActions(actionIds);\n  }\n\n  /////////////////////\n  //   Dialogue      //\n  /////////////////////\n\n  public async showDialogue(dialogueId: ItemId) {\n    await this.getGameManager().phaseManager.pushPhase(GamePhaseType.Sequence);\n    await this.getGameManager().dialogueManager.showDialogue(dialogueId);\n    await this.getGameManager().phaseManager.popPhase();\n  }\n\n  public async showDialogueInSamePhase(dialogueId: ItemId) {\n    await this.getGameManager().dialogueManager.showDialogue(dialogueId);\n  }\n\n  public getDialogue(dialogueId: ItemId) {\n    return this.getGameManager().getCurrentCheckpoint().map.getDialogues().get(dialogueId);\n  }\n\n  /////////////////////\n  //   Collectible   //\n  /////////////////////\n\n  public async obtainCollectible(collectibleId: string) {\n    this.getGameManager().userStateManager.addToList(UserStateTypes.collectibles, collectibleId);\n  }\n\n  /////////////////////\n  //     Pop Up      //\n  /////////////////////\n\n  public displayPopUp(itemId: ItemId, position: GamePosition, duration?: number) {\n    this.getGameManager().popUpManager.displayPopUp(itemId, position, duration);\n  }\n\n  public destroyAllPopUps() {\n    this.getGameManager().popUpManager.destroyAllPopUps();\n  }\n\n  public async destroyPopUp(position: GamePosition) {\n    this.getGameManager().popUpManager.destroyPopUp(position);\n  }\n\n  /////////////////////\n  //    Save Game    //\n  /////////////////////\n\n  public async saveGame() {\n    await this.getGameManager().getSaveManager().saveGame();\n  }\n\n  public async saveSettings(settingsJson: SettingsJson) {\n    await this.getGameManager().getSaveManager().saveSettings(settingsJson);\n  }\n\n  public getLoadedUserState() {\n    return this.getGameManager().getSaveManager().getLoadedUserState();\n  }\n\n  /////////////////////\n  //      Sound      //\n  /////////////////////\n\n  public getSoundManager() {\n    return SourceAcademyGame.getInstance().getSoundManager();\n  }\n\n  public playSound(soundKey: AssetKey) {\n    SourceAcademyGame.getInstance().getSoundManager().playSound(soundKey);\n  }\n\n  public playBgMusic(soundKey: AssetKey) {\n    SourceAcademyGame.getInstance().getSoundManager().playBgMusic(soundKey);\n  }\n\n  public async stopAllSound() {\n    SourceAcademyGame.getInstance().getSoundManager().stopAllSound();\n  }\n\n  public pauseCurrBgMusic() {\n    SourceAcademyGame.getInstance().getSoundManager().pauseCurrBgMusic();\n  }\n\n  public continueCurrBgMusic() {\n    SourceAcademyGame.getInstance().getSoundManager().continueCurrBgMusic();\n  }\n\n  public applySoundSettings(userSettings: SettingsJson) {\n    SourceAcademyGame.getInstance().getSoundManager().applyUserSettings(userSettings);\n  }\n\n  public loadSounds(soundAssets: SoundAsset[]) {\n    SourceAcademyGame.getInstance().getSoundManager().loadSounds(soundAssets);\n  }\n\n  /////////////////////\n  //      Input      //\n  /////////////////////\n\n  public enableKeyboardInput(active: boolean) {\n    this.getGameManager().inputManager.enableKeyboardInput(active);\n  }\n\n  public enableMouseInput(active: boolean) {\n    this.getGameManager().inputManager.enableMouseInput(active);\n  }\n\n  /////////////////////\n  //      Phases     //\n  /////////////////////\n\n  public async popPhase() {\n    await this.getGameManager().phaseManager.popPhase();\n  }\n\n  public async pushPhase(gamePhaseType: GamePhaseType) {\n    await this.getGameManager().phaseManager.pushPhase(gamePhaseType);\n  }\n\n  public async swapPhase(gamePhaseType: GamePhaseType) {\n    await this.getGameManager().phaseManager.swapPhase(gamePhaseType);\n  }\n\n  public isCurrentPhase(gamePhaseType: GamePhaseType) {\n    return this.getGameManager().phaseManager.isCurrentPhase(gamePhaseType);\n  }\n\n  /////////////////////\n  //   Background    //\n  /////////////////////\n\n  public renderBackgroundLayerContainer(locationId: LocationId) {\n    this.getGameManager().backgroundManager.renderBackgroundLayerContainer(locationId);\n  }\n\n  /////////////////////\n  //   Characters    //\n  /////////////////////\n\n  public hideCharacterFromMap(characterId: ItemId) {\n    this.getGameManager().characterManager.hideCharacterFromMap(characterId);\n  }\n\n  public showCharacterOnMap(characterId: ItemId) {\n    this.getGameManager().characterManager.showCharacterOnMap(characterId);\n  }\n\n  public createCharacterSprite(\n    characterId: ItemId,\n    overrideExpression?: string,\n    overridePosition?: GamePosition\n  ) {\n    return this.getGameManager().characterManager.createCharacterSprite(\n      characterId,\n      overrideExpression,\n      overridePosition\n    );\n  }\n\n  public getCharacterById(characterId: ItemId) {\n    return this.getGameManager().characterManager.getCharacterById(characterId);\n  }\n}\n\nexport default GameGlobalAPI;\n","import { ItemId, TrackInteraction } from '../commons/CommonTypes';\nimport { GameStateStorage } from '../state/GameStateTypes';\n\nexport enum GameActionType {\n  MoveCharacter = 'MoveCharacter',\n  UpdateCharacter = 'UpdateCharacter',\n  ObtainCollectible = 'ObtainCollectible',\n  CompleteObjective = 'CompleteObjective',\n  LocationChange = 'LocationChange',\n  AddItem = 'AddItem',\n  RemoveItem = 'RemoveItem',\n  BringUpDialogue = 'BringUpDialogue',\n  ChangeBackground = 'ChangeBackground',\n  RemoveLocationMode = 'RemoveLocationMode',\n  AddLocationMode = 'AddLocationMode',\n  AddPopup = 'AddPopup',\n  MakeObjectBlink = 'MakeObjectBlink',\n  MakeObjectGlow = 'MakeObjectGlow',\n  PlayBGM = 'PlayBGM',\n  PlaySFX = 'PlaySFX'\n}\n\nexport interface IGameActionable {\n  actionIds?: ItemId[];\n}\n\nexport type ActionCondition = {\n  state: GameStateStorage;\n  conditionParams: any;\n  boolean: boolean;\n};\n\nexport type GameAction = TrackInteraction & {\n  actionType: GameActionType;\n  actionParams: any;\n  actionConditions: ActionCondition[];\n  isRepeatable: boolean;\n};\n","import { IGameActionable } from '../action/GameActionTypes';\nimport { AssetKey, ItemId } from '../commons/CommonTypes';\nimport { GameMode } from '../mode/GameModeTypes';\n\n/**\n * @typedef {string} LocationId - id that identifies a location\n */\nexport type LocationId = string;\n\n/**\n * @typedef {GameLocation} - encapsulates data about a location in a GameMap\n * @prop {ItemId[]} actionIds - ids of all actions that play when that location is visited\n * @prop {LocationId} id - the id to indentify that location\n * @prop {string} name - the name of the location as shown in the Move Menu\n * @prop {AssetKey} assetKey - the asset key for the background image of the location\n * @prop {Set<GameMode>} modes - the game modes that are available in the location\n * @prop {Set<ItemId>} talkTopics - the dialogue id of topics that players can talk about in Talk menu of that location\n * @prop {Set<ItemId>} objects - the object id of objects rendered in the location\n * @prop {Set<ItemId>} boundingBoxes - the id of the bounding boxes (invisible rectangles) in that location\n * @prop {AssetKey} bgmKey - the asset key of background music being played in that location\n */\nexport type GameLocation = IGameActionable & {\n  id: LocationId;\n  name: string;\n  assetKey: AssetKey;\n  modes: Set<GameMode>;\n  navigation: Set<LocationId>;\n  talkTopics: Set<ItemId>;\n  objects: Set<ItemId>;\n  boundingBoxes: Set<ItemId>;\n  bgmKey: AssetKey;\n  characters: Set<ItemId>;\n};\n\nexport enum GameLocationAttr {\n  navigation = 'navigation',\n  talkTopics = 'talkTopics',\n  objects = 'objects',\n  boundingBoxes = 'boundingBoxes',\n  characters = 'characters',\n  actions = 'actions',\n  bgmKey = 'bgmKey',\n  collectibles = 'collectibles'\n}\n","import { ItemId } from '../commons/CommonTypes';\nimport GameGlobalAPI from '../scenes/gameManager/GameGlobalAPI';\nimport GameManager from '../scenes/gameManager/GameManager';\nimport { mandatory } from '../utils/GameUtils';\nimport ActionConditionChecker from './GameActionConditionChecker';\nimport GameActionExecuter from './GameActionExecuter';\nimport { ActionCondition, GameAction } from './GameActionTypes';\n\n/**\n * This class manages all game actions, and is called whenever\n * entities need to perform actions.\n */\nexport default class GameActionManager {\n  private actionMap: Map<ItemId, GameAction>;\n\n  constructor() {\n    this.actionMap = new Map<ItemId, GameAction>();\n  }\n\n  public initialise(gameManager: GameManager) {\n    this.actionMap = gameManager.getCurrentCheckpoint().map.getActions();\n  }\n\n  /**\n   * Process an array of actions, denoted by their IDs.\n   *\n   * NOTE: Saves the game after all the actions are executed.\n   *\n   * @param actionIds ids of the actions\n   */\n  public async processGameActions(actionIds?: ItemId[]): Promise<void> {\n    if (!actionIds) return;\n    for (const actionId of actionIds) {\n      await this.processGameAction(actionId);\n    }\n    await GameGlobalAPI.getInstance().saveGame();\n  }\n\n  /**\n   * Process an action, denoted by its ID.\n   *\n   * @param actionId id of the action\n   */\n  public async processGameAction(actionId: ItemId) {\n    const {\n      actionType,\n      actionParams,\n      actionConditions,\n      isRepeatable,\n      interactionId\n    } = this.getActionFromId(actionId);\n    if (await this.checkCanPlayAction(isRepeatable, interactionId, actionConditions)) {\n      await GameActionExecuter.executeGameAction(actionType, actionParams);\n      GameGlobalAPI.getInstance().triggerInteraction(actionId);\n    }\n  }\n\n  /**\n   * Check whether an action is playable.\n   *\n   * An action is playable if:\n   *  - Has not been triggered & has all of its condition fulfilled\n   *  - Has been triggered, but repeatable & & has all of its condition fulfilled\n   *\n   * @param isRepeatable whether the action is repeatable\n   * @param interactionId id of the interaction\n   * @param actionConditions condition to be fulfilled to play the action\n   */\n  private async checkCanPlayAction(\n    isRepeatable: boolean,\n    interactionId: string,\n    actionConditions: ActionCondition[]\n  ) {\n    return (\n      (isRepeatable || !GameGlobalAPI.getInstance().hasTriggeredInteraction(interactionId)) &&\n      (await ActionConditionChecker.checkAllConditionsSatisfied(actionConditions))\n    );\n  }\n\n  private getActionFromId = (actionId: ItemId) => mandatory(this.actionMap.get(actionId));\n}\n","import GameGlobalAPI from '../scenes/gameManager/GameGlobalAPI';\nimport SourceAcademyGame from '../SourceAcademyGame';\nimport { GameActionType } from './GameActionTypes';\n\n/**\n * This class executes game actions by calling the right functions\n * from global API\n */\nexport default class GameActionExecuter {\n  /**\n   * Executes the game action based on given type and parameters\n   * @actionType the type of action that will be executed\n   * @actionParams an object containing all the parameters\n   */\n  public static async executeGameAction(actionType: GameActionType, actionParams: any) {\n    const globalAPI = GameGlobalAPI.getInstance();\n\n    switch (actionType) {\n      case GameActionType.LocationChange:\n        await globalAPI.changeLocationTo(actionParams.id);\n        return;\n      case GameActionType.ChangeBackground:\n        globalAPI.renderBackgroundLayerContainer(actionParams.id);\n        return;\n      case GameActionType.ObtainCollectible:\n        globalAPI.obtainCollectible(actionParams.id);\n        return;\n      case GameActionType.CompleteObjective:\n        globalAPI.completeObjective(actionParams.id);\n        return;\n      case GameActionType.AddItem:\n        globalAPI.addLocationAttr(actionParams.attr, actionParams.locationId, actionParams.id);\n        return;\n      case GameActionType.RemoveItem:\n        globalAPI.removeLocationAttr(actionParams.attr, actionParams.locationId, actionParams.id);\n        return;\n      case GameActionType.AddLocationMode:\n        globalAPI.addLocationMode(actionParams.locationId, actionParams.mode);\n        return;\n      case GameActionType.RemoveLocationMode:\n        globalAPI.removeLocationMode(actionParams.locationId, actionParams.mode);\n        return;\n      case GameActionType.BringUpDialogue:\n        await globalAPI.showDialogueInSamePhase(actionParams.id);\n        return;\n      case GameActionType.AddPopup:\n        await globalAPI.displayPopUp(actionParams.id, actionParams.position, actionParams.duration);\n        return;\n      case GameActionType.MakeObjectBlink:\n        await globalAPI.makeObjectBlink(actionParams.id, actionParams.turnOn);\n        return;\n      case GameActionType.MakeObjectGlow:\n        await globalAPI.makeObjectGlow(actionParams.id, actionParams.turnOn);\n        return;\n      case GameActionType.PlayBGM:\n        SourceAcademyGame.getInstance().getSoundManager().playBgMusic(actionParams.id);\n        return;\n      case GameActionType.PlaySFX:\n        await SourceAcademyGame.getInstance().getSoundManager().playSound(actionParams.id);\n        return;\n      default:\n        return;\n    }\n  }\n}\n","import GameGlobalAPI from '../scenes/gameManager/GameGlobalAPI';\nimport { GameStateStorage } from '../state/GameStateTypes';\nimport { ActionCondition } from './GameActionTypes';\n\n/**\n * This class checks for whether if-conditions are satisfied,\n * to determine whether or not game actions will be played out.\n */\nexport default class ActionConditionChecker {\n  /**\n   * Checks whether all action conditions are met\n   * @param actionConditions Array of action conditions\n   * @returns {Promise<boolean>} True if all conditions are met\n   */\n  public static async checkAllConditionsSatisfied(actionConditions: ActionCondition[]) {\n    const allConditions = await Promise.all(\n      actionConditions.map(\n        async actionCondition => await this.checkConditionSatisfied(actionCondition)\n      )\n    );\n    return allConditions.every(condition => condition === true);\n  }\n\n  /**\n   * Checks whether one action conditions is met\n   * @param conditional The action condition\n   * @returns {Promise<boolean>} True if condition is met\n   */\n  private static async checkConditionSatisfied(conditional: ActionCondition) {\n    const { state, conditionParams, boolean } = conditional;\n    switch (state) {\n      case GameStateStorage.UserState:\n        return (\n          (await GameGlobalAPI.getInstance().existsInUserStateList(\n            conditionParams.listName,\n            conditionParams.id\n          )) === boolean\n        );\n      case GameStateStorage.ChecklistState:\n        return GameGlobalAPI.getInstance().isObjectiveComplete(conditionParams.id) === boolean;\n      default:\n        return true;\n    }\n  }\n}\n","import { Layer } from 'src/features/game/layer/GameLayerTypes';\nimport GameGlobalAPI from 'src/features/game/scenes/gameManager/GameGlobalAPI';\nimport GameManager from 'src/features/game/scenes/gameManager/GameManager';\n\nimport { Constants } from '../commons/CommonConstants';\nimport { ItemId } from '../commons/CommonTypes';\nimport { GameLocationAttr, LocationId } from '../location/GameMapTypes';\nimport { ActivatableSprite } from '../objects/GameObjectTypes';\nimport { StateChangeType, StateObserver } from '../state/GameStateTypes';\nimport { mandatory } from '../utils/GameUtils';\nimport { BBoxProperty } from './GameBoundingBoxTypes';\n\n/**\n * Manager for rendering interactive bounding boxes in the location.\n */\nclass GameBoundingBoxManager implements StateObserver {\n  public observerId: string;\n  private bboxes: Map<ItemId, ActivatableSprite>;\n\n  constructor() {\n    this.observerId = 'GameBoundingBoxManager';\n    this.bboxes = new Map<ItemId, ActivatableSprite>();\n  }\n\n  public initialise() {\n    GameGlobalAPI.getInstance().subscribeState(this);\n  }\n\n  /**\n   * Part of observer pattern. Receives notification from GameStateManager.\n   *\n   * On notify, will rerender all the bounding boxes on the location to reflect\n   * the update to the state if applicable.\n   *\n   * @param changeType type of change\n   * @param locationId id of the location being updated\n   * @param id id of item being updated\n   */\n  public notify(changeType: StateChangeType, locationId: LocationId, id?: string) {\n    const hasUpdate = GameGlobalAPI.getInstance().hasLocationUpdateAttr(\n      locationId,\n      GameLocationAttr.boundingBoxes\n    );\n    const currLocationId = GameGlobalAPI.getInstance().getCurrLocId();\n    if (hasUpdate && locationId === currLocationId) {\n      // Inform state manager that update has been consumed\n      GameGlobalAPI.getInstance().consumedLocationUpdate(\n        locationId,\n        GameLocationAttr.boundingBoxes\n      );\n\n      // If the update is on the current location, we rerender to reflect the update\n      if (id) {\n        // If Id is provided, we only need to address the specific bbox\n        this.handleBBoxChange(changeType, id);\n      } else {\n        // Else, rerender the whole layer\n        this.renderBBoxLayerContainer(locationId);\n      }\n    }\n  }\n\n  /**\n   * Clear the layers, and render all the bboxes available to the location.\n   * Will immediately be shown on the screen.\n   *\n   * @param locationId location in which to render bboxes at\n   */\n  public renderBBoxLayerContainer(locationId: LocationId): void {\n    GameGlobalAPI.getInstance().clearSeveralLayers([Layer.BBox]);\n    const bboxIdsToRender = GameGlobalAPI.getInstance().getLocationAttr(\n      GameLocationAttr.boundingBoxes,\n      locationId\n    );\n\n    // Refresh mapping\n    this.bboxes.clear();\n\n    // Add all the bbox\n    bboxIdsToRender.map(id => this.handleAdd(id));\n  }\n\n  /**\n   * Allow objects to be interacted with i.e. add listeners to the bboxes.\n   *\n   * There are three type of callbacks can be supplied:\n   *  - onClick: (ItemId) => void, to be executed when bboxes is clicked\n   *  - onHover: (ItemId) => void, to be executed when bboxes is hovered over\n   *  - onOut: (ItemId) => void, to be executed when bboxes is out of hover\n   *\n   * The three callbacks are optional; if it is not provided, a null function\n   * will be executed instead.\n   *\n   * The three callbacks will be added on top of the existing action\n   * attached to the callbacks.\n   *\n   * @param callbacks { onClick?: (id?: ItemId) => void,\n   *                    onHover?: (id?: ItemId) => void,\n   *                    onOut?: (id?: ItemId) => void\n   *                  }\n   */\n  public enableBBoxAction(callbacks: any): void {\n    this.bboxes.forEach(bbox => bbox.activate(callbacks));\n  }\n\n  /**\n   * Remove interactivity of the bboxes, i.e remove listeners from the bboxes.\n   */\n  public disableBBoxAction() {\n    this.bboxes.forEach(bbox => bbox.deactivate());\n  }\n\n  /**\n   * Create the bbox from the given bbox property.\n   * All bbox created with this function will have\n   * `.activate()` and `.deactivate()`; which is internally used\n   * by `.enableBBoxActions()` and `.disableBBoxActions()`.\n   *\n   * The method `.activate(callbacks)` receive a callbacks argument,\n   * which encapsulate three different callbacks.\n   *\n   * callbacks = { onClick?: (id?: ItemId) => void,\n   *               onHover?: (id?: ItemId) => void,\n   *               onOut?: (id?: ItemId) => void\n   *             }\n   *\n   * @param gameManager game manager\n   * @param objectProperty object property to be used\n   */\n  private createBBox(gameManager: GameManager, bboxProperty: BBoxProperty): ActivatableSprite {\n    const { x, y, width, height, actionIds, interactionId } = bboxProperty;\n    const bboxSprite = new Phaser.GameObjects.Rectangle(gameManager, x, y, width, height, 0, 0);\n    if (bboxProperty.isInteractive) {\n      bboxSprite.setInteractive();\n    }\n\n    function activate({\n      onClick = (id?: ItemId) => {},\n      onPointerout = (id?: ItemId) => {},\n      onHover = (id?: ItemId) => {}\n    }) {\n      bboxSprite.on('pointerup', async () => {\n        onClick(interactionId);\n        await GameGlobalAPI.getInstance().processGameActions(actionIds);\n      });\n      bboxSprite.on('pointerover', () => {\n        onHover(interactionId);\n      });\n      bboxSprite.on('pointerout', () => {\n        onPointerout(interactionId);\n      });\n    }\n\n    function deactivate() {\n      bboxSprite.off('pointerup');\n      bboxSprite.off('pointerover');\n      bboxSprite.off('pointerout');\n    }\n\n    return {\n      sprite: bboxSprite,\n      activate: actionIds ? activate : Constants.nullFunction,\n      deactivate\n    };\n  }\n\n  /**\n   * Handle change of a specific bbox ID.\n   *\n   * @param changeType type of change\n   * @param id id of affected bbox\n   */\n  private handleBBoxChange(changeType: StateChangeType, id: ItemId) {\n    switch (changeType) {\n      case StateChangeType.Add:\n        return this.handleAdd(id);\n      case StateChangeType.Mutate:\n        return this.handleMutate(id);\n      case StateChangeType.Delete:\n        return this.handleDelete(id);\n    }\n  }\n\n  /**\n   * Add the bbox, specified by the ID, into the scene\n   * and keep track of it within the mapping.\n   *\n   * Throws error if the bbox property is not available\n   * in the mapping.\n   *\n   * @param id id of bbox\n   */\n  private handleAdd(id: ItemId) {\n    const gameManager = GameGlobalAPI.getInstance().getGameManager();\n    const bboxPropMap = GameGlobalAPI.getInstance().getBBoxPropertyMap();\n\n    const bboxProp = mandatory(bboxPropMap.get(id));\n    const bbox = this.createBBox(gameManager, bboxProp);\n    GameGlobalAPI.getInstance().addContainerToLayer(\n      Layer.BBox,\n      bbox.sprite as Phaser.GameObjects.Rectangle\n    );\n    this.bboxes.set(id, bbox);\n\n    return bbox;\n  }\n\n  /**\n   * Mutate the bbox of the given id.\n   *\n   * Internally, will delete and re-add the bbox with\n   * the updated property.\n   *\n   * @param id id of bbox\n   */\n  private handleMutate(id: ItemId) {\n    this.handleDelete(id);\n    this.handleAdd(id);\n  }\n\n  /**\n   * Delete the bbox of the given id, if\n   * applicable.\n   *\n   * @param id id of the bbox\n   */\n  private handleDelete(id: ItemId) {\n    const bbox = this.bboxes.get(id);\n    if (bbox) (bbox.sprite as Phaser.GameObjects.Rectangle).destroy();\n  }\n}\n\nexport default GameBoundingBoxManager;\n","/**\n * Resize a displayed object to given width and height\n * if both dimensions are specified.\n *\n * If either one of width or height is zero/undefined,\n * then only the given dimension will be used to scale the image\n * proportionally according to aspect-ratio\n *\n * @param obj object to be resized\n * @param width desired width of object\n * @param height desired height of object\n */\nexport function resize(\n  obj: Phaser.GameObjects.Image | Phaser.GameObjects.Rectangle,\n  width: number,\n  height?: number\n) {\n  const ratio = obj.displayHeight / obj.displayWidth;\n  if (!width) {\n    obj.displayWidth = height! / ratio;\n    obj.displayHeight = height!;\n  } else {\n    obj.displayWidth = width;\n    obj.displayHeight = height || width * ratio;\n  }\n}\n\n/**\n * Resize the obj display size such that the shorter side fits\n * the width/height i.e. the other dimension will overflow.\n *\n * @param obj obj to be resized\n * @param width width\n * @param height height\n */\nexport function resizeOverflow(\n  obj: Phaser.GameObjects.Image | Phaser.GameObjects.Rectangle,\n  width: number,\n  height: number\n) {\n  if (obj.displayWidth > obj.displayHeight) {\n    resize(obj, 0, height);\n  } else {\n    resize(obj, width);\n  }\n}\n\n/**\n * Resize the obj display size such that the longer side fits\n * the width/height i.e. the other dimension will underflow.\n *\n * @param obj obj to be resized\n * @param width width\n * @param height height\n */\nexport function resizeUnderflow(\n  obj: Phaser.GameObjects.Image | Phaser.GameObjects.Rectangle,\n  width: number,\n  height: number\n) {\n  if (obj.displayWidth > obj.displayHeight) {\n    resize(obj, width);\n  } else {\n    resize(obj, 0, height);\n  }\n}\n\n/**\n * Multiplies sprite dimension by factor\n *\n * @param obj obj to be resized\n * @param factor number of times to multiply the object's width and height by.\n */\nexport function multiplyDimensions(\n  obj: Phaser.GameObjects.Image | Phaser.GameObjects.Rectangle,\n  factor: number\n) {\n  obj.displayWidth *= factor;\n  obj.displayHeight *= factor;\n}\n","import { screenCenter, screenSize } from '../commons/CommonConstants';\n\nconst charXOffset = 350;\n\nconst CharConstants = {\n  charWidth: 700,\n  charRect: {\n    x: { Left: charXOffset, Middle: screenCenter.x, Right: screenSize.x - charXOffset },\n    y: 800,\n    height: screenSize.y * 0.4\n  }\n};\n\nexport default CharConstants;\n","import GameGlobalAPI from 'src/features/game/scenes/gameManager/GameGlobalAPI';\n\nimport { screenSize } from '../commons/CommonConstants';\nimport { GamePosition, ItemId } from '../commons/CommonTypes';\nimport { fadeIn, fadeOut } from '../effects/FadeEffect';\nimport { Layer } from '../layer/GameLayerTypes';\nimport { GameLocationAttr, LocationId } from '../location/GameMapTypes';\nimport GameManager from '../scenes/gameManager/GameManager';\nimport { StateChangeType, StateObserver } from '../state/GameStateTypes';\nimport { mandatory } from '../utils/GameUtils';\nimport { resize } from '../utils/SpriteUtils';\nimport CharConstants from './GameCharacterConstants';\nimport { Character } from './GameCharacterTypes';\n\n/**\n * Manager for rendering characters in the location.\n */\nexport default class CharacterManager implements StateObserver {\n  public observerId: string;\n  private characterMap: Map<ItemId, Character>;\n  private characterSpriteMap: Map<ItemId, Phaser.GameObjects.Image>;\n\n  constructor() {\n    this.observerId = 'GameCharacterManager';\n    this.characterMap = new Map<ItemId, Character>();\n    this.characterSpriteMap = new Map<ItemId, Phaser.GameObjects.Image>();\n  }\n\n  public initialise(gameManager: GameManager) {\n    this.characterMap = gameManager.getCurrentCheckpoint().map.getCharacters();\n    GameGlobalAPI.getInstance().subscribeState(this);\n  }\n\n  /**\n   * Part of observer pattern. Receives notification from GameStateManager.\n   *\n   * On notify, will rerender all the characters on the location to reflect\n   * the update to the state if applicable.\n   *\n   * @param changeType type of change\n   * @param locationId id of the location being updated\n   * @param id id of item being updated\n   */\n  public notify(changeType: StateChangeType, locationId: LocationId, id?: string) {\n    const hasUpdate = GameGlobalAPI.getInstance().hasLocationUpdateAttr(\n      locationId,\n      GameLocationAttr.characters\n    );\n    const currLocationId = GameGlobalAPI.getInstance().getCurrLocId();\n    if (hasUpdate && locationId === currLocationId) {\n      // Inform state manager that update has been consumed\n      GameGlobalAPI.getInstance().consumedLocationUpdate(locationId, GameLocationAttr.characters);\n\n      // If the update is on the current location, we rerender to reflect the update\n      if (id) {\n        // If Id is provided, we only need to address the specific character\n        this.handleCharacterChange(changeType, id);\n      } else {\n        // Else, rerender the whole layer\n        this.renderCharacterLayerContainer(locationId);\n      }\n    }\n  }\n\n  /**\n   * Clear the layers, and render all the characters available to the location.\n   * Will immediately be shown on the screen.\n   *\n   * @param locationId location in which to render characters at\n   */\n  public renderCharacterLayerContainer(locationId: LocationId): void {\n    const idsToRender = GameGlobalAPI.getInstance().getLocationAttr(\n      GameLocationAttr.characters,\n      locationId\n    );\n\n    // Refresh mapping\n    this.characterSpriteMap.clear();\n\n    // Add all the characters\n    idsToRender.map(id => this.handleAdd(id));\n  }\n\n  /**\n   * Create the character sprite based on its ID,\n   * expression, and put it at the specified location.\n   *\n   * @param characterId id of the character\n   * @param overrideExpression expression of the shown character, optional\n   * @param overridePosition position to put the character at, optional\n   */\n  public createCharacterSprite(\n    characterId: ItemId,\n    overrideExpression?: string,\n    overridePosition?: GamePosition\n  ) {\n    const character = this.getCharacterById(characterId);\n    const { defaultPosition, defaultExpression, expressions } = character;\n    const characterXPosition = CharConstants.charRect.x[overridePosition || defaultPosition];\n    const assetKey = expressions.get(overrideExpression || defaultExpression)!;\n\n    const characterSprite = new Phaser.GameObjects.Image(\n      GameGlobalAPI.getInstance().getGameManager(),\n      characterXPosition,\n      screenSize.y,\n      assetKey\n    ).setOrigin(0.5, 1);\n\n    resize(characterSprite, CharConstants.charWidth);\n    return characterSprite;\n  }\n\n  /**\n   * Handle change of a specific character ID.\n   *\n   * @param changeType type of change\n   * @param id id of affected character\n   */\n  private handleCharacterChange(changeType: StateChangeType, id: ItemId) {\n    switch (changeType) {\n      case StateChangeType.Add:\n        return this.handleAdd(id);\n      case StateChangeType.Mutate:\n        return this.handleMutate(id);\n      case StateChangeType.Delete:\n        return this.handleDelete(id);\n    }\n  }\n\n  /**\n   * Add the character, specified by the ID, into the scene\n   * and keep track of it within the mapping.\n   *\n   * Throws error if the  character is not available\n   * in the mapping.\n   *\n   * @param id id of character\n   */\n  private handleAdd(id: ItemId) {\n    const characterSprite = this.createCharacterSprite(id);\n    GameGlobalAPI.getInstance().addContainerToLayer(Layer.Character, characterSprite);\n    this.characterSpriteMap.set(id, characterSprite);\n    return characterSprite;\n  }\n\n  /**\n   * Mutate the character of the given id.\n   *\n   * Internally, will delete and re-add the character with\n   * the updated property.\n   *\n   * @param id id of characer\n   */\n  private handleMutate(id: ItemId) {\n    this.handleDelete(id);\n    this.handleAdd(id);\n  }\n\n  /**\n   * Delete the character of the given id, if\n   * applicable.\n   *\n   * @param id id of the bbox\n   */\n  private handleDelete(id: ItemId) {\n    const char = this.characterSpriteMap.get(id);\n    if (char) char.destroy();\n  }\n\n  /**\n   * Show a character by fading in the character into the screen.\n   * Assumes that the character is already added to the scene.\n   *\n   * @param characterId\n   */\n  public showCharacterOnMap(characterId: ItemId) {\n    const characterSprite = this.characterSpriteMap.get(characterId);\n    if (characterSprite) {\n      GameGlobalAPI.getInstance()\n        .getGameManager()\n        .add.tween(fadeIn([characterSprite]));\n    }\n  }\n\n  /**\n   * Hide a character by fading out the character from the screen.\n   * Assumes that the character is already added to the scene.\n   * Does NOT remove the character from the scene.\n   *\n   * @param characterId\n   */\n  public hideCharacterFromMap(characterId: ItemId) {\n    const characterSprite = this.characterSpriteMap.get(characterId);\n    if (characterSprite) {\n      GameGlobalAPI.getInstance()\n        .getGameManager()\n        .add.tween(fadeOut([characterSprite]));\n    }\n  }\n\n  public getCharacterById = (charId: ItemId) => mandatory(this.characterMap.get(charId));\n}\n","import { DialogueLine, DialogueObject } from './GameDialogueTypes';\n\n/**\n * Class for keeping track of which line, action, and speaker has to be shown next\n */\nexport default class DialogueGenerator {\n  private currPart: string;\n  private currLineNum: number;\n  private dialogueContent: DialogueObject;\n\n  /**\n   * @param dialogueContent the dialogue to keep track of and to play\n   */\n  public constructor(dialogueContent: DialogueObject) {\n    this.dialogueContent = dialogueContent;\n    this.currPart = dialogueContent.keys().next().value;\n    this.currLineNum = 0;\n  }\n\n  /**\n   * @returns {DialogueLine} returns the dialgoueLine that is played next,\n   * based on what is dictated by the dialogueContent\n   */\n  public generateNextLine(): DialogueLine {\n    const dialogueLine = this.dialogueContent.get(this.currPart)![this.currLineNum];\n    if (!dialogueLine || !dialogueLine.line) {\n      return { line: '' };\n    }\n\n    if (dialogueLine.goto) {\n      if (this.dialogueContent.get(dialogueLine.goto)) {\n        this.currPart = dialogueLine.goto;\n        this.currLineNum = 0;\n      } else {\n        return { line: '' };\n      }\n    } else {\n      this.currLineNum++;\n    }\n    return dialogueLine;\n  }\n}\n","import GameInputManager from '../input/GameInputManager';\nimport GameLayerManager from '../layer/GameLayerManager';\n\n/**\n * Encapsulate style of bitmap text.\n *\n * @prop {string} key - key to the bitmap text\n * @prop {number} size - font size\n * @prop {number} fill = text color, in hex\n * @prop {number} align - text alignment, from Phaser.GameObjects.BitmapText.ALIGN_*\n */\nexport type BitmapFontStyle = {\n  key: string;\n  size: number;\n  fill: number;\n  align: number;\n};\n\n/**\n * @typedef {string} ItemId - id associated with an item.\n * Item can be any of the following:\n * (Dialogue | ObjectProperty | BboxProperty | Character | Action | CollectibleProperty)\n */\nexport type ItemId = string;\n\n/** @typedef {string} AssetKey - key associated with an asset */\nexport type AssetKey = string;\n\n/** @typedef {string} AssetPath - path associated with an asset */\nexport type AssetPath = string;\n\n/**\n * Encapsulate tracked interaction.\n *\n * @prop {boolean} isInteractive whether an object is interactive\n * @prop {string} interactionId id of interaction. Must be unique across all interactions.\n */\nexport type TrackInteraction = {\n  isInteractive: boolean;\n  interactionId: string;\n};\n\n/**\n * Interface for classes that represents a UI.\n * The UI must be able to be activated and deactivated.\n *\n * @interface\n */\nexport interface IGameUI {\n  activateUI: () => Promise<void> | void;\n  deactivateUI: () => Promise<void> | void;\n}\n\n/**\n * Enum for common game positions.\n * @readonly\n * @enum {string}\n */\nexport enum GamePosition {\n  Left = 'Left',\n  Middle = 'Middle',\n  Right = 'Right'\n}\n\n/**\n * Encapsulate text configuration.\n *\n * @prop {number} x x coordinate of the text\n * @prop {number} y y coordinate of the text\n * @prop {number} oriX originX of the text\n * @prop {number} oriY originY of the text\n */\nexport type TextConfig = { x: number; y: number; oriX: number; oriY: number };\n\n/**\n * Interface for basic scene, which incorporates input, sound, and layer manager.\n * Due to the three managers, the scene should also provide a way to clean up\n * the necessary managers.\n *\n * @interface\n */\nexport interface IBaseScene extends Phaser.Scene {\n  layerManager: GameLayerManager;\n  inputManager: GameInputManager;\n  cleanUp: () => void;\n}\n","import { Constants } from '../commons/CommonConstants';\n\nexport default class StringUtils {\n  /**\n   * Splits text into several paragraphs, each containing header\n   * string and body string array\n   *\n   * Example input:\n   * [\"objectives\",\n   * \"    talkToHartin\"\n   * \"    completeQuest\"]\n   *\n   * Example output:\n   * [ [\"objectives\"], [\"talkToHartin\", \"completeQuest\"] ]\n   *\n   * @param lines raw text strings\n   * @returns {Array<[string, string[]]>} several parargraphs that have\n   *                                      been split into head and body\n   */\n  public static splitToParagraph(lines: string[]) {\n    const paragraphHeaderAndBodyLines: [string, string[]][] = [];\n    lines.forEach((line: string) => {\n      if (line.startsWith('\\t') || line.startsWith('    ')) {\n        const content = line.startsWith('\\t') ? line.slice(1) : line.slice(4);\n        if (paragraphHeaderAndBodyLines.length === 0) {\n          console.error('Unexpected tabs');\n          return;\n        }\n        const bodyLines = paragraphHeaderAndBodyLines[paragraphHeaderAndBodyLines.length - 1][1];\n        bodyLines.push(content);\n        return;\n      }\n      paragraphHeaderAndBodyLines.push([line.trim(), []]);\n    });\n    return paragraphHeaderAndBodyLines;\n  }\n\n  /**\n   * Given an array of lines, returns a Map where the keys are the headings\n   * and the value are the lines below each heading.\n   *\n   * @param lines lines to be processed\n   * @param isHeaderFunction predicate that determines the header syntax. This\n   *                         will be ran against every line, so take into account if you want\n   *                         to detect header in the middle of line/in between lines.\n   * @returns {Map<string, string>}\n   */\n  public static mapByHeader(\n    lines: string[],\n    isHeaderFunction: (line: string) => boolean\n  ): Map<string, string[]> {\n    const map = new Map<string, string[]>();\n    if (!isHeaderFunction(lines[0])) {\n      map.set('0', lines);\n      return map;\n    }\n    let currHeader = '';\n    lines.forEach(line => {\n      if (isHeaderFunction(line)) {\n        currHeader = line;\n        map.set(line, []);\n        return;\n      }\n      map.get(currHeader)!.push(line);\n    });\n    return map;\n  }\n\n  /**\n   * Split using separator, but limit number of separators to split with.\n   * After splitting, trim each entry to get rid of whitespaces.\n   *\n   * Example input: splitByChar(\"whatHappened, What Happened, Scottie?\\n\", \",\", 1)\n   * Example output: [\"whatHappened\", \"What Happened, Scottie?\"]\n   * Explanation: This splits the string only using the first 1 comma then trims whitespaces\n   *\n   * @param line line to be split\n   * @param sep separator to be used\n   * @param limit the number of separators to split the string, undefined if use all separators\n   * @param {Array<string>}\n   */\n  public static splitByChar(line: string, sep: string, limit?: number): string[] {\n    let lines = [];\n    if (limit) {\n      let currWord = '';\n      for (let i = 0; i < line.length; i++) {\n        const letter = line[i];\n        if (letter === sep && lines.length < limit) {\n          lines.push(currWord);\n          currWord = '';\n        } else {\n          currWord += letter;\n        }\n      }\n      lines.push(currWord);\n    } else {\n      lines = line.split(sep);\n    }\n    return lines.map((phrase: string) => phrase.trim());\n  }\n\n  /**\n   * Splits text into string array and removes\n   * lines with only newlines.\n   *\n   * @param text text to split\n   * @returns {Array<string>}\n   */\n  public static splitToLines(text: string): string[] {\n    return text\n      .split('\\n')\n      .map(line => line.trimRight())\n      .filter(line => line !== '');\n  }\n\n  /**\n   * Capitalise first letter.\n   *\n   * @param word text to be capitalized\n   * @returns {string}\n   */\n  public static capitalize(word: string) {\n    return word.charAt(0).toUpperCase() + word.slice(1);\n  }\n\n  /**\n   * Turns snake case to capitalized case.\n   * Only accounts for letters, i.e. numbers and symbols will be discarded.\n   * e.g. snake_case_to_capitalized -> Snake Case To Capitalized\n   *\n   * @param name text to be capitalized\n   * @returns {string}\n   */\n  public static toCapitalizedWords(name: string) {\n    const words = name.match(/[A-Za-z][a-z]*/g) || [];\n\n    return words.map(StringUtils.capitalize).join(' ');\n  }\n\n  /**\n   * Converts the given number into string. The given number\n   * is rounded down.\n   *\n   * @param num number to be converted\n   */\n  public static toIntString(num: number) {\n    return Math.floor(num).toString();\n  }\n\n  /**\n   * Check whether given string is empty string.\n   *\n   * @param str string to check\n   */\n  public static isEmptyString(str: string) {\n    return str === Constants.nullInteractionId;\n  }\n}\n","import ImageAssets from '../assets/ImageAssets';\nimport { SpeakerDetail } from '../character/GameCharacterTypes';\nimport { screenCenter, screenSize } from '../commons/CommonConstants';\nimport { GamePosition, ItemId } from '../commons/CommonTypes';\nimport { Layer } from '../layer/GameLayerTypes';\nimport GameGlobalAPI from '../scenes/gameManager/GameGlobalAPI';\nimport StringUtils from '../utils/StringUtils';\nimport { createBitmapText } from '../utils/TextUtils';\nimport DialogueConstants, { speakerTextStyle } from './GameDialogueConstants';\n\n/**\n * Class that manages speakerbox portion of the dialgoue box\n * Rendering it in the right place and placing the right name\n *\n * This class also signals the character manager to render speaker sprites in front\n * And hide them from the map if they are the ones speaking\n */\nexport default class DialogueSpeakerRenderer {\n  private currentSpeakerId?: string;\n  private username: string;\n\n  constructor(username: string) {\n    this.username = username;\n  }\n\n  /**\n   * Changes the speaker shown in the speaker box and the speaker rendered on screen\n   *\n   * @param newSpeakerDetail the details about the new speaker,\n   * including his characaterId, expression and position.\n   *\n   * Undefined - if no speaker changes are involved in the dialogue line.\n   * Null - if there is no speaker for the line\n   */\n  public changeSpeakerTo(newSpeakerDetail?: SpeakerDetail | null) {\n    if (newSpeakerDetail === undefined) return;\n\n    this.hidePreviousSpeaker(this.currentSpeakerId);\n    this.showNewSpeaker(newSpeakerDetail);\n  }\n\n  private hidePreviousSpeaker(previousSpeakerId?: ItemId) {\n    if (previousSpeakerId) {\n      GameGlobalAPI.getInstance().clearSeveralLayers([Layer.Speaker, Layer.SpeakerBox]);\n      GameGlobalAPI.getInstance().showCharacterOnMap(previousSpeakerId);\n    }\n  }\n\n  private showNewSpeaker(newSpeakerDetail: SpeakerDetail | null) {\n    if (newSpeakerDetail) {\n      this.drawSpeakerSprite(newSpeakerDetail);\n      this.drawSpeakerBox(newSpeakerDetail.speakerId);\n    }\n  }\n\n  private drawSpeakerBox(speakerId: ItemId) {\n    const speakerContainer =\n      speakerId === 'you'\n        ? this.createSpeakerBox(this.username, GamePosition.Right)\n        : this.createSpeakerBox(\n            GameGlobalAPI.getInstance().getCharacterById(speakerId).name,\n            GamePosition.Left\n          );\n    GameGlobalAPI.getInstance().addContainerToLayer(Layer.SpeakerBox, speakerContainer);\n  }\n\n  private drawSpeakerSprite({ speakerId, speakerPosition, expression }: SpeakerDetail) {\n    if (speakerId === 'you' || speakerId === 'narrator') {\n      return;\n    }\n    GameGlobalAPI.getInstance().hideCharacterFromMap(speakerId);\n    const speakerSprite = GameGlobalAPI.getInstance().createCharacterSprite(\n      speakerId,\n      expression,\n      speakerPosition\n    );\n    GameGlobalAPI.getInstance().addContainerToLayer(Layer.Speaker, speakerSprite);\n    this.currentSpeakerId = speakerId;\n  }\n\n  private createSpeakerBox(text: string, position: GamePosition) {\n    const gameManager = GameGlobalAPI.getInstance().getGameManager();\n    const container = new Phaser.GameObjects.Container(gameManager, 0, 0);\n    const rectangle = new Phaser.GameObjects.Image(\n      gameManager,\n      screenCenter.x,\n      screenCenter.y,\n      ImageAssets.speakerBox.key\n    ).setAlpha(0.8);\n\n    const speakerText = createBitmapText(\n      gameManager,\n      '',\n      DialogueConstants.speakerTextConfig,\n      speakerTextStyle\n    );\n\n    if (position === GamePosition.Right) {\n      rectangle.displayWidth *= -1;\n      speakerText.x = screenSize.x - speakerText.x;\n    }\n\n    container.add([rectangle, speakerText]);\n    speakerText.text = StringUtils.capitalize(text);\n    return container;\n  }\n}\n","import SoundAssets from '../assets/SoundAssets';\nimport { ItemId } from '../commons/CommonTypes';\nimport { Layer } from '../layer/GameLayerTypes';\nimport GameGlobalAPI from '../scenes/gameManager/GameGlobalAPI';\nimport GameManager from '../scenes/gameManager/GameManager';\nimport SourceAcademyGame from '../SourceAcademyGame';\nimport { textTypeWriterStyle } from './GameDialogueConstants';\nimport DialogueGenerator from './GameDialogueGenerator';\nimport DialogueRenderer from './GameDialogueRenderer';\nimport DialogueSpeakerRenderer from './GameDialogueSpeakerRenderer';\nimport { Dialogue } from './GameDialogueTypes';\n\n/**\n * Given a dialogue Id, this manager renders the correct dialogue.\n * It displays the lines, speakers, and performs actions\n * whenever players click on the dialogue box\n */\nexport default class DialogueManager {\n  private dialogueMap: Map<ItemId, Dialogue>;\n  private username: string;\n\n  private speakerRenderer?: DialogueSpeakerRenderer;\n  private dialogueRenderer?: DialogueRenderer;\n  private dialogueGenerator?: DialogueGenerator;\n\n  constructor() {\n    this.dialogueMap = new Map<ItemId, Dialogue>();\n    this.username = '';\n  }\n\n  public initialise(gameManager: GameManager) {\n    this.username = SourceAcademyGame.getInstance().getAccountInfo().name;\n    this.dialogueMap = gameManager.getCurrentCheckpoint().map.getDialogues();\n  }\n\n  /**\n   * @param dialogueId the dialogue Id of the dialogue you want to play\n   *\n   * @returns {Promise} the promise that resolves when the entire dialogue has been played\n   */\n  public async showDialogue(dialogueId: ItemId): Promise<void> {\n    const dialogue = this.dialogueMap.get(dialogueId);\n    if (!dialogue) return;\n    this.dialogueRenderer = new DialogueRenderer(textTypeWriterStyle);\n    this.dialogueGenerator = new DialogueGenerator(dialogue.content);\n    this.speakerRenderer = new DialogueSpeakerRenderer(this.username);\n\n    GameGlobalAPI.getInstance().addContainerToLayer(\n      Layer.Dialogue,\n      this.dialogueRenderer.getDialogueContainer()\n    );\n    GameGlobalAPI.getInstance().fadeInLayer(Layer.Dialogue);\n    await new Promise(resolve => this.playWholeDialogue(resolve));\n  }\n\n  private async playWholeDialogue(resolve: () => void) {\n    await this.showNextLine(resolve);\n    this.getDialogueRenderer()\n      .getDialogueBox()\n      .on(Phaser.Input.Events.GAMEOBJECT_POINTER_UP, async () => {\n        GameGlobalAPI.getInstance().playSound(SoundAssets.dialogueAdvance.key);\n        await this.showNextLine(resolve);\n      });\n  }\n\n  private async showNextLine(resolve: () => void) {\n    const { line, speakerDetail, actionIds } = this.getDialogueGenerator().generateNextLine();\n    const lineWithName = line.replace('{name}', this.username);\n    this.getDialogueRenderer().changeText(lineWithName);\n    this.getSpeakerRenderer().changeSpeakerTo(speakerDetail);\n    await GameGlobalAPI.getInstance().processGameActionsInSamePhase(actionIds);\n    if (!line) {\n      resolve();\n      this.getDialogueRenderer().destroy();\n      this.getSpeakerRenderer().changeSpeakerTo(null);\n    }\n  }\n\n  private getDialogueGenerator = () => this.dialogueGenerator as DialogueGenerator;\n  private getDialogueRenderer = () => this.dialogueRenderer as DialogueRenderer;\n  private getSpeakerRenderer = () => this.speakerRenderer as DialogueSpeakerRenderer;\n}\n","import { screenCenter } from '../commons/CommonConstants';\n\nconst barWidth = 320;\nconst barHeight = 50;\nconst padding = 10;\n\nconst innerWidth = barWidth - padding * 2;\nconst innerHeight = barHeight - padding * 2;\nconst barX = screenCenter.x - barWidth / 2;\nconst barY = screenCenter.y;\nconst innerBarX = barX + padding;\nconst innerBarY = barY + padding;\n\n/**\n * A function to display a loading bar while a scene's preload is in progress\n *\n * @param scene - the scene in which to add a loading screen when preload is occuring\n */\nexport function addLoadingScreen(scene: Phaser.Scene) {\n  let progressBar: Phaser.GameObjects.Graphics;\n  let progressBox: Phaser.GameObjects.Graphics;\n\n  scene.load.on('start', () => {\n    progressBar = scene.add.graphics();\n    progressBox = scene.add.graphics();\n    progressBox.fillStyle(0x222222, 0.8);\n    progressBox.fillRect(barX, barY, barWidth, barHeight);\n  });\n\n  scene.load.on('progress', (value: number) => {\n    progressBar.clear();\n    progressBar.fillStyle(0xffffff, 1);\n    progressBar.fillRect(innerBarX, innerBarY, innerWidth * value, innerHeight);\n  });\n\n  scene.load.on('complete', function () {\n    progressBar.destroy();\n    progressBox.destroy();\n  });\n}\n","import GameGlobalAPI from 'src/features/game/scenes/gameManager/GameGlobalAPI';\n\nimport { Constants } from '../commons/CommonConstants';\nimport { fadeIn, fadeOut } from '../effects/FadeEffect';\nimport { sleep } from '../utils/GameUtils';\nimport { defaultLayerSequence, Layer } from './GameLayerTypes';\n\n/**\n * Manager in charge of placing ordering the layers\n * as specified in Game Layer types\n */\nclass GameLayerManager {\n  private mainLayer: Phaser.GameObjects.Container | undefined;\n  private layers: Map<Layer, Phaser.GameObjects.Container>;\n\n  constructor() {\n    this.mainLayer = undefined;\n    this.layers = new Map<Layer, Phaser.GameObjects.Container>();\n  }\n\n  public initialise(scene: Phaser.Scene) {\n    this.mainLayer = new Phaser.GameObjects.Container(scene, 0, 0);\n    scene.add.existing(this.mainLayer);\n    for (const layerType of defaultLayerSequence) {\n      const layerContainer = new Phaser.GameObjects.Container(scene, 0, 0);\n      this.layers.set(layerType, layerContainer);\n      this.mainLayer.add(layerContainer);\n    }\n  }\n\n  /**\n   * Return a specific layer's container.\n   *\n   * @param layerType layer type to return\n   */\n  public getLayer(layerType: Layer) {\n    return this.layers.get(layerType);\n  }\n\n  /**\n   * Hide a specific layer.\n   *\n   * @param layerType layer type to hide\n   */\n  public hideLayer(layerType: Layer) {\n    const layerToHide = this.layers.get(layerType);\n    layerToHide && layerToHide.setVisible(false) && layerToHide.setAlpha(0);\n  }\n\n  /**\n   * Show a specific layer.\n   *\n   * @param layerType layer to show\n   */\n  public showLayer(layerType: Layer) {\n    const layerToHide = this.layers.get(layerType);\n    layerToHide && layerToHide.setVisible(true) && layerToHide.setAlpha(1);\n  }\n\n  /**\n   * Fade in a specific layer.\n   *\n   * @param layerType layer to fade in\n   * @param fadeDuration duration of fade\n   */\n  public async fadeInLayer(layerType: Layer, fadeDuration = Constants.fadeDuration) {\n    const gameManager = GameGlobalAPI.getInstance().getGameManager();\n    const layerToFadeIn = this.layers.get(layerType)!;\n\n    layerToFadeIn.setAlpha(0);\n    gameManager.tweens.add(fadeIn([layerToFadeIn], fadeDuration));\n    sleep(fadeDuration);\n  }\n\n  /**\n   * Fade out a specific layer.\n   *\n   * @param layerType layer to fade out\n   * @param fadeDuration duration of fade\n   */\n  public async fadeOutLayer(layerType: Layer, fadeDuration = Constants.fadeDuration) {\n    const gameManager = GameGlobalAPI.getInstance().getGameManager();\n    const layerToFadeOut = this.layers.get(layerType)!;\n\n    layerToFadeOut.setAlpha(1);\n    gameManager.tweens.add(fadeOut([layerToFadeOut], fadeDuration));\n    sleep(fadeDuration);\n  }\n\n  /**\n   * Add a game object to the specified layer.\n   *\n   * @param layerType layer to be added to\n   * @param gameObject game object to add\n   */\n  public addToLayer(layerType: Layer, gameObject: Phaser.GameObjects.GameObject) {\n    const layerContainer = this.layers.get(layerType);\n    if (!layerContainer) {\n      return;\n    }\n    layerContainer.add(gameObject);\n  }\n\n  /**\n   * Clear, by destroying, the content of several layers.\n   *\n   * NOTE: This will cause any references to the content within the layers\n   * also point to a destroyed game object.\n   *\n   * @param layerTypes layers to clear from\n   */\n  public clearSeveralLayers(layerTypes: Layer[]) {\n    layerTypes.forEach(layerType => this.clearLayerContents(layerType));\n  }\n\n  /**\n   * Clear, by destroying, the content of all layers.\n   *\n   * NOTE: This will cause any references to the content within the layers\n   * also point to a destroyed game object.\n   */\n  public clearAllLayers() {\n    this.layers.forEach((_, layerType) => this.clearLayerContents(layerType));\n  }\n\n  /**\n   * Clear, by destroying, the content of a layer.\n   *\n   * NOTE: This will cause any references to the content within the layers\n   * also point to a destroyed game object.\n   *\n   * @param layerType layer to clear from\n   */\n  public clearLayerContents(layerType: Layer) {\n    const layerContainer = this.layers.get(layerType);\n    if (!layerContainer) {\n      return;\n    }\n    while (layerContainer.list.length) {\n      layerContainer.list[0].destroy();\n    }\n  }\n}\n\nexport default GameLayerManager;\n","import { resize } from '../utils/SpriteUtils';\nimport { HexColor } from '../utils/StyleUtils';\nimport { blink } from './FadeEffect';\n\n/**\n * Augments the Phaser.GameObjects.Image to enable glow effect\n * for an image. Glow effect enables an image to blink with a tint of yellow\n *\n * This is for the make_object_glow action\n */\nexport default class GlowingImage {\n  private scene: Phaser.Scene;\n  private container: Phaser.GameObjects.Container;\n  private imageGlow: Phaser.GameObjects.Image;\n  private clickArea: Phaser.GameObjects.Image;\n  private glowClearer?: () => void;\n  private blinkClearer?: () => void;\n\n  /**\n   * Constructor for a GlowingImage\n   *\n   * @param scene - the scene in which to add this object to\n   * @param x - the x coordinate of the center of the object\n   * @param y - the y coordinate of the center of the object\n   * @param assetKey - the asset key of the image to render this object\n   * @param width - optional display width of the object\n   * @param height - optional displayheight of the object\n   */\n  constructor(\n    scene: Phaser.Scene,\n    x: number,\n    y: number,\n    assetKey: string,\n    width?: number,\n    height?: number\n  ) {\n    this.scene = scene;\n    this.container = new Phaser.GameObjects.Container(scene, x, y);\n    const image = new Phaser.GameObjects.Image(scene, 0, 0, assetKey);\n    this.imageGlow = new Phaser.GameObjects.Image(scene, 0, 0, assetKey)\n      .setAlpha(0)\n      .setTint(HexColor.yellow);\n    this.clickArea = new Phaser.GameObjects.Image(scene, 0, 0, assetKey)\n      .setAlpha(0.01)\n      .setInteractive({ pixelPerfect: true });\n\n    if (width) {\n      resize(image, width, height);\n      resize(this.imageGlow, width, height);\n      resize(this.clickArea, width, height);\n    }\n\n    this.container.add([image, this.imageGlow, this.clickArea]);\n  }\n\n  public startGlow() {\n    this.glowClearer && this.glowClearer();\n    this.glowClearer = blink(this.scene, this.imageGlow);\n    this.imageGlow.setAlpha(1);\n  }\n\n  public clearGlow() {\n    this.glowClearer && this.glowClearer();\n    this.imageGlow.setAlpha(0);\n  }\n\n  public startBlink() {\n    this.blinkClearer = blink(this.scene, this.getContainer());\n  }\n\n  public clearBlink() {\n    this.getContainer().setAlpha(1);\n    this.blinkClearer && this.blinkClearer();\n  }\n\n  public getContainer() {\n    return this.container;\n  }\n\n  public getClickArea() {\n    return this.clickArea;\n  }\n}\n","import { Layer } from 'src/features/game/layer/GameLayerTypes';\nimport GameGlobalAPI from 'src/features/game/scenes/gameManager/GameGlobalAPI';\nimport GameManager from 'src/features/game/scenes/gameManager/GameManager';\n\nimport { Constants } from '../commons/CommonConstants';\nimport { ItemId } from '../commons/CommonTypes';\nimport GlowingImage from '../effects/GlowingObject';\nimport { GameLocationAttr, LocationId } from '../location/GameMapTypes';\nimport { StateChangeType, StateObserver } from '../state/GameStateTypes';\nimport { mandatory } from '../utils/GameUtils';\nimport { ActivatableSprite, ObjectProperty } from './GameObjectTypes';\n\n/**\n * Manager that renders objects in a location\n * and also attaches actions as onClick callbacks to objects\n *\n * It provides the activate/and deactivate interfaces\n * for Explore mode to call, as well as\n * provides API for make_object_glow and make_object_blink actions\n *\n * It is a subject/listener of GameStateManager.\n */\nclass GameObjectManager implements StateObserver {\n  public observerId: string;\n  private objects: Map<ItemId, ActivatableSprite>;\n\n  constructor() {\n    this.observerId = 'GameObjectManager';\n    this.objects = new Map<ItemId, ActivatableSprite>();\n  }\n\n  public initialise() {\n    GameGlobalAPI.getInstance().subscribeState(this);\n  }\n\n  /**\n   * Part of observer pattern. Receives notification from GameStateManager.\n   *\n   * On notify, will rerender objects on the location to reflect\n   * the update to the state if applicable.\n   *\n   * @param changeType type of change\n   * @param locationId id of the location being updated\n   * @param id id of item being updated\n   */\n  public notify(changeType: StateChangeType, locationId: LocationId, id?: string) {\n    const hasUpdate = GameGlobalAPI.getInstance().hasLocationUpdateAttr(\n      locationId,\n      GameLocationAttr.objects\n    );\n    const currLocationId = GameGlobalAPI.getInstance().getCurrLocId();\n    if (hasUpdate && locationId === currLocationId) {\n      // Inform state manager that update has been consumed\n      GameGlobalAPI.getInstance().consumedLocationUpdate(locationId, GameLocationAttr.objects);\n\n      // If the update is on the current location, we rerender to reflect the update\n      if (id) {\n        // If Id is provided, we only need to address the specific object\n        this.handleObjectChange(changeType, id);\n      } else {\n        // Else, rerender the whole layer\n        this.renderObjectsLayerContainer(locationId);\n      }\n    }\n  }\n\n  /**\n   * Clear the layers, and render all the objects available to the location.\n   * Will immediately be shown on the screen.\n   *\n   * @param locationId location in which to render objects at\n   */\n  public renderObjectsLayerContainer(locationId: LocationId): void {\n    GameGlobalAPI.getInstance().clearSeveralLayers([Layer.Objects]);\n    const objIdsToRender = GameGlobalAPI.getInstance().getLocationAttr(\n      GameLocationAttr.objects,\n      locationId\n    );\n\n    // Refresh mapping\n    this.objects.clear();\n\n    // Add all the objects\n    objIdsToRender.map(id => this.handleAdd(id));\n  }\n\n  /**\n   * Allow objects to be interacted with i.e. add listeners to the objects.\n   *\n   * There are three type of callbacks can be supplied:\n   *  - onClick: (ItemId) => void, to be executed when object is clicked\n   *  - onHover: (ItemId) => void, to be executed when object is hovered over\n   *  - onOut: (ItemId) => void, to be executed when object is out of hover\n   *\n   * The three callbacks are optional; if it is not provided, a null function\n   * will be executed instead.\n   *\n   * The three callbacks will be added on top of the existing action\n   * attached to the callbacks.\n   *\n   * @param callbacks { onClick?: (id?: ItemId) => void,\n   *                    onHover?: (id?: ItemId) => void,\n   *                    onOut?: (id?: ItemId) => void\n   *                  }\n   */\n  public enableObjectAction(callbacks: any): void {\n    this.objects.forEach(object => object.activate(callbacks));\n  }\n\n  /**\n   * Remove interactivity of the objects, i.e remove listeners from the objects.\n   */\n  public disableObjectAction() {\n    this.objects.forEach(object => object.deactivate());\n  }\n\n  /**\n   * Apply glowing effect around the object.\n   *\n   * @param objectId id of the object\n   */\n  public makeObjectGlow(objectId: ItemId, turnOn: boolean) {\n    const object = this.objects.get(objectId);\n    if (!object) {\n      return;\n    }\n    if (turnOn) {\n      (object.sprite as GlowingImage).startGlow();\n    } else {\n      (object.sprite as GlowingImage).clearGlow();\n    }\n  }\n\n  /**\n   * Apply blinking effect on the object.\n   *\n   * @param objectId id of the object\n   */\n  public makeObjectBlink(objectId: ItemId, turnOn: boolean) {\n    const object = this.objects.get(objectId);\n    if (!object) {\n      return;\n    }\n    if (turnOn) {\n      (object.sprite as GlowingImage).startBlink();\n    } else {\n      (object.sprite as GlowingImage).clearBlink();\n    }\n  }\n\n  /**\n   * Create the object from the given object property.\n   * All objects created with this function will have\n   * `.activate()` and `.deactivate()`; which is internally used\n   * by `.enableObjectActions()` and `.disableObjectActions()`.\n   *\n   * The method `.activate(callbacks)` receive a callbacks argument,\n   * which encapsulate three different callbacks.\n   *\n   * callbacks = { onClick?: (id?: ItemId) => void,\n   *               onHover?: (id?: ItemId) => void,\n   *               onOut?: (id?: ItemId) => void\n   *             }\n   *\n   * @param gameManager game manager\n   * @param objectProperty object property to be used\n   */\n  private createObject(\n    gameManager: GameManager,\n    objectProperty: ObjectProperty\n  ): ActivatableSprite {\n    const { assetKey, x, y, width, height, actionIds, interactionId } = objectProperty;\n    const object = new GlowingImage(gameManager, x, y, assetKey, width, height);\n\n    function activate({\n      onClick = (id?: ItemId) => {},\n      onPointerout = (id?: ItemId) => {},\n      onHover = (id?: ItemId) => {}\n    }) {\n      object.getClickArea().on('pointerup', async () => {\n        onClick(interactionId);\n        await GameGlobalAPI.getInstance().processGameActions(actionIds);\n      });\n      object.getClickArea().on('pointerover', () => {\n        onHover(interactionId);\n      });\n      object.getClickArea().on('pointerout', () => {\n        onPointerout(interactionId);\n      });\n    }\n\n    function deactivate() {\n      object.getClickArea().off('pointerup');\n      object.getClickArea().off('pointerover');\n      object.getClickArea().off('pointerout');\n    }\n\n    return {\n      sprite: object,\n      activate: actionIds ? activate : Constants.nullFunction,\n      deactivate\n    };\n  }\n\n  /**\n   * Handle change of a specific object ID.\n   *\n   * @param changeType type of change\n   * @param id id of affected object\n   */\n  private handleObjectChange(changeType: StateChangeType, id: ItemId) {\n    switch (changeType) {\n      case StateChangeType.Add:\n        return this.handleAdd(id);\n      case StateChangeType.Mutate:\n        return this.handleMutate(id);\n      case StateChangeType.Delete:\n        return this.handleDelete(id);\n    }\n  }\n\n  /**\n   * Add the object, specified by the ID, into the scene\n   * and keep track of it within the mapping.\n   *\n   * Throws error if the object property is not available\n   * in the mapping.\n   *\n   * @param id id of object\n   */\n  private handleAdd(id: ItemId) {\n    const gameManager = GameGlobalAPI.getInstance().getGameManager();\n    const objectPropMap = GameGlobalAPI.getInstance().getObjPropertyMap();\n\n    const objectProp = mandatory(objectPropMap.get(id));\n    const object = this.createObject(gameManager, objectProp);\n    GameGlobalAPI.getInstance().addContainerToLayer(\n      Layer.Objects,\n      (object.sprite as GlowingImage).getContainer()\n    );\n    this.objects.set(id, object);\n\n    return object;\n  }\n\n  /**\n   * Mutate the object of the given id.\n   *\n   * Internally, will delete and re-add the object with\n   * the updated property.\n   *\n   * @param id id of object\n   */\n  private handleMutate(id: ItemId) {\n    this.handleDelete(id);\n    this.handleAdd(id);\n  }\n\n  /**\n   * Delete the object of the given id, if\n   * applicable.\n   *\n   * @param id id of the object\n   */\n  private handleDelete(id: ItemId) {\n    const object = this.objects.get(id);\n    if (object) (object.sprite as GlowingImage).getContainer().destroy();\n  }\n}\n\nexport default GameObjectManager;\n","/**\n * Generates a tween configuration for making objects open like a scroll,\n * ie stretch open downwards from zero-height to full height.\n *\n * @param targets - an array of game objects that you want to enter via scroll effect\n * @param duration - the duration of the scroll animation\n * @returns {Phaser.Types.Tweens.TweenDataConfig} - the tween config for the scroll in animation\n */\nexport const scrollEntry = (targets: Phaser.GameObjects.GameObject[], duration = 500) => ({\n  scaleY: 1,\n  targets,\n  duration,\n  ease: 'Power1'\n});\n\n/**\n * Generates a tween configuration for making objects close like a scroll,\n * ie compress upwards from full height to zero height\n *\n * @param targets - an array of game objects that you want to exit via scroll effect\n * @param duration - the duration of the fascrollde animation\n * @returns {Phaser.Types.Tweens.TweenDataConfig} - the tween config for the scroll in animation\n */\nexport const scrollExit = (targets: Phaser.GameObjects.GameObject[], duration = 500) => ({\n  scaleY: 0,\n  targets,\n  duration,\n  ease: 'Power1'\n});\n","import { screenCenter, screenSize } from '../commons/CommonConstants';\n\nconst popUpXOffset = 350;\nconst popUpYPos = screenCenter.y / 2;\n\nconst popUpConstants = {\n  imgXOffset: 20,\n  imgYOffset: 20,\n  rect: {\n    x: { Left: popUpXOffset, Middle: screenCenter.x, Right: screenSize.x - popUpXOffset },\n    y: popUpYPos,\n    width: 280,\n    height: 280\n  },\n  tweenDuration: 300\n};\n\nexport default popUpConstants;\n","import ImageAssets from '../assets/ImageAssets';\nimport SoundAssets from '../assets/SoundAssets';\nimport { Constants } from '../commons/CommonConstants';\nimport { GamePosition, ItemId } from '../commons/CommonTypes';\nimport { scrollEntry, scrollExit } from '../effects/ScrollEffect';\nimport { Layer } from '../layer/GameLayerTypes';\nimport GameGlobalAPI from '../scenes/gameManager/GameGlobalAPI';\nimport { sleep } from '../utils/GameUtils';\nimport { resizeUnderflow } from '../utils/SpriteUtils';\nimport popUpConstants from './GamePopUpConstants';\n\n/**\n * Manager in charge of keeping track of the the popups in\n * a game\n */\nclass GamePopUpManager {\n  private currPopUp: Map<GamePosition, Phaser.GameObjects.Container>;\n\n  constructor() {\n    this.currPopUp = new Map<GamePosition, Phaser.GameObjects.Container>();\n  }\n\n  /**\n   * Display a popup image on the screen.\n   * The image is based the given ID, while its position\n   * is based on the given position.\n   *\n   * @param itemId item ID to be shown on the pop up\n   * @param position position of the pop up\n   * @param duration duration in which the pop up to be shown. Afterwards, the popup will\n   *                 be destroyed.\n   */\n  public async displayPopUp(\n    itemId: ItemId,\n    position: GamePosition,\n    duration = Constants.popupDuration\n  ) {\n    // Destroy previous pop up if any\n    this.destroyPopUp(position);\n\n    const gameManager = GameGlobalAPI.getInstance().getGameManager();\n    const container = new Phaser.GameObjects.Container(gameManager, 0, 0);\n\n    // Frame\n    const popUpFrameImg = new Phaser.GameObjects.Image(\n      gameManager,\n      popUpConstants.rect.x[position],\n      popUpConstants.rect.y,\n      ImageAssets.popUpFrame.key\n    );\n\n    // Get assetKey\n    const assetKey = this.getAssetKey(itemId);\n    if (!assetKey) return;\n\n    // Set up images\n    const popUpImage = new Phaser.GameObjects.Image(\n      gameManager,\n      popUpConstants.rect.x[position] + popUpConstants.imgXOffset,\n      popUpConstants.rect.y + popUpConstants.imgYOffset,\n      assetKey\n    );\n    resizeUnderflow(popUpImage, popUpConstants.rect.width, popUpConstants.rect.height);\n\n    container.add([popUpFrameImg, popUpImage]);\n    this.currPopUp.set(position, container);\n    GameGlobalAPI.getInstance().addContainerToLayer(Layer.PopUp, container);\n    GameGlobalAPI.getInstance().playSound(SoundAssets.popUpEnter.key);\n\n    container.setActive(true);\n    container.setVisible(true);\n    container.setScale(1.0, 0);\n\n    gameManager.tweens.add(scrollEntry([container], popUpConstants.tweenDuration));\n    await sleep(popUpConstants.tweenDuration);\n\n    setTimeout(() => this.destroyPopUp(position), duration);\n  }\n\n  /**\n   * Destroy all active pop ups at all positions.\n   */\n  public destroyAllPopUps() {\n    this.currPopUp.forEach((popUp, position, map) => {\n      this.destroyPopUp(position);\n    });\n  }\n\n  /**\n   * Destroy a pop up at the given position, if any.\n   *\n   * @param position position of thhe pop up to be destroyed\n   */\n  public async destroyPopUp(position: GamePosition) {\n    const atPosContainer = this.currPopUp.get(position);\n    if (!atPosContainer) return;\n\n    GameGlobalAPI.getInstance()\n      .getGameManager()\n      .tweens.add(scrollExit([atPosContainer], popUpConstants.tweenDuration));\n    await sleep(popUpConstants.tweenDuration);\n\n    atPosContainer.setVisible(false);\n    atPosContainer.setActive(false);\n    atPosContainer.destroy();\n\n    this.currPopUp.delete(position);\n    GameGlobalAPI.getInstance().playSound(SoundAssets.popUpExit.key);\n  }\n\n  /**\n   * Get the asset key of the item ID.\n   *\n   * @param itemId item ID\n   */\n  private getAssetKey(itemId: ItemId) {\n    const objectPropMap = GameGlobalAPI.getInstance()\n      .getGameManager()\n      .getCurrentCheckpoint()\n      .map.getObjects();\n    const objProp = objectPropMap.get(itemId);\n    if (objProp) {\n      return objProp.assetKey;\n    }\n    return undefined;\n  }\n}\n\nexport default GamePopUpManager;\n","import { GamePhaseType } from '../phase/GamePhaseTypes';\n\nexport enum GameMode {\n  Move = 'Move',\n  Explore = 'Explore',\n  Talk = 'Talk',\n  Menu = 'Menu'\n}\n\nexport const gameModeToPhase = {\n  Move: GamePhaseType.Move,\n  Explore: GamePhaseType.Explore,\n  Talk: GamePhaseType.Talk,\n  Menu: GamePhaseType.Menu\n};\n","/**\n * The class encapsulates data on all the objective ids\n * that players must complete and keeps track of which\n * objectives have already been completed.\n *\n * One of the components of game checkpoint.\n */\nclass GameObjective {\n  private objective: Map<string, boolean>;\n  private totalNumOfObjectives: number;\n  private numOfCompletedObjectives: number;\n\n  constructor() {\n    this.objective = new Map<string, boolean>();\n    this.totalNumOfObjectives = 0;\n    this.numOfCompletedObjectives = 0;\n  }\n\n  /**\n   * Set an objective to a boolean value.\n   *\n   * @param key key of the objective\n   * @param value boolean value to set to\n   */\n  public setObjective(key: string, value: boolean): void {\n    const prevState = this.objective.get(key);\n    this.objective.set(key, value);\n    // Handle repeated calls\n    if (prevState !== undefined && prevState !== value) {\n      this.numOfCompletedObjectives++;\n    }\n  }\n\n  /**\n   * Add an objective tied to the given string.\n   *\n   * @param key key of the objective\n   */\n  public addObjective(key: string): void {\n    this.objective.set(key, false);\n    this.totalNumOfObjectives++;\n  }\n\n  /**\n   * Add multiple objectives.\n   *\n   * @param keys objective keys\n   */\n  public addObjectives(keys: string[]): void {\n    keys.forEach(key => this.addObjective(key));\n  }\n\n  /**\n   * Check whether all the objectives are complete.\n   */\n  public isAllComplete(): boolean {\n    return this.numOfCompletedObjectives >= this.totalNumOfObjectives;\n  }\n\n  /**\n   * Check the state of a specific objective.\n   * If objective is not present, will return undefined instead.\n   *\n   * @param key key of the objective\n   */\n  public getObjectiveState(key: string): boolean | undefined {\n    return this.objective.get(key);\n  }\n\n  /**\n   * Returns all the objectives.\n   */\n  public getObjectives() {\n    return this.objective;\n  }\n\n  /**\n   * Set the objective to the given parameter directly.\n   *\n   * @param objective map of objective keys(string) to its value (boolean)\n   */\n  public setObjectives(objective: Map<string, boolean>) {\n    this.objective = objective;\n  }\n}\n\nexport default GameObjective;\n","import * as _ from 'lodash';\n\nimport { GameLocation, LocationId } from '../location/GameMapTypes';\nimport GameGlobalAPI from '../scenes/gameManager/GameGlobalAPI';\nimport { UserStateTypes } from '../state/GameStateTypes';\nimport { FullSaveState, GameSaveState, SettingsJson, UserSaveState } from './GameSaveTypes';\n\n/**\n * Function that saves game data as a 'snapshot' in FullSaveState\n * json format by collecting game data from game manager,\n * game state manager, user state manager, and phase manager\n *\n * @param prevGameState - the snapshot of the game the during the last save point\n * @param chapterNum - the chapterNumber of the game\n * @param checkpointNUm - the checkpoint of the game\n * @returns {FullSaveState} - the new 'snapshot' of the game\n */\nexport function gameStateToJson(\n  prevGameState: FullSaveState,\n  chapterNum: number,\n  checkpointNum: number\n): FullSaveState {\n  const gameManager = GameGlobalAPI.getInstance().getGameManager();\n  const gameStateManager = gameManager.stateManager;\n  const userStateManager = gameManager.userStateManager;\n  const phaseManager = gameManager.phaseManager;\n\n  const gameStoryState: GameSaveState = {\n    currentLocation: gameManager.currentLocationId,\n    currentPhase: phaseManager.getCurrentPhase(),\n    chapterObjective: mapToJsObject(gameStateManager.getCheckpointObjectives().getObjectives()),\n    locationStates: locationStatesToJson(gameStateManager.getLocationStates()),\n    objectPropertyMap: mapToJsObject(gameStateManager.getObjPropertyMap()),\n    bboxPropertyMap: mapToJsObject(gameStateManager.getBBoxPropertyMap()),\n    triggeredInteractions: mapToJsObject(gameStateManager.getTriggeredInteractions()),\n    lastCheckpointPlayed: checkpointNum\n  };\n\n  const userSaveState: UserSaveState = {\n    settings: { ...prevGameState.userSaveState.settings },\n    recentlyPlayedCheckpoint: [chapterNum, checkpointNum],\n    collectibles: userStateManager.getList(UserStateTypes.collectibles),\n    largestCompletedChapter: prevGameState.userSaveState.largestCompletedChapter\n  };\n\n  const newGameStoryStates = { ...prevGameState.gameSaveStates, [chapterNum]: gameStoryState };\n\n  const newGameState = {\n    gameSaveStates: newGameStoryStates,\n    userSaveState\n  };\n\n  return newGameState;\n}\n\n/**\n * Function that saves user settings into FullSaveState\n * by overwriting just the settings portion of the game\n *\n * @param prevGameState - the snapshot of the game the during the last save point\n * @param settingsJson - the settings to be saved\n * @returns {FullSaveState} - the new snapshot of the game\n */\nexport function userSettingsToJson(\n  prevGameState: FullSaveState,\n  settingsJson: SettingsJson\n): FullSaveState {\n  const newGameState = {\n    gameSaveStates: prevGameState.gameSaveStates,\n    userSaveState: { ...prevGameState.userSaveState, settings: settingsJson }\n  };\n\n  return newGameState;\n}\n\n/**\n * Converts a javascript Map into object format\n *\n * @param map - Javascript Map that you want to convert\n * @returns {object} - Map as an object format\n */\nfunction mapToJsObject<K, V>(map: Map<K, V>): any {\n  const jsObject = {};\n  map.forEach((value: V, key: K) => {\n    jsObject[(key as any) as string] = value;\n  });\n  return jsObject;\n}\n\n/**\n * Converts a an object into javascript Map format\n *\n * @param obj - Object that you want to convert\n * @returns {Map<string, any>} - Map as a json format\n */\nexport function jsObjectToMap(obj: any): Map<string, any> {\n  const map = new Map<string, any>();\n\n  if (Object.keys(obj).length) {\n    Object.keys(obj).forEach((key: string) => {\n      map.set(key, obj[key]);\n    });\n  }\n\n  return map;\n}\n\n/**\n * Converts the locationStates Map into a json object\n *\n * @param locationStates - location states map\n * @returns {object} - The location states map as an object\n */\nfunction locationStatesToJson(locationStates: Map<LocationId, GameLocation>): any {\n  const jsObject = {};\n  locationStates.forEach((location: GameLocation, locationId: LocationId) => {\n    const locationWithArrays = _.mapValues(location, locationProperty => {\n      if (locationProperty instanceof Set) {\n        return Array.from(locationProperty);\n      }\n      return locationProperty;\n    });\n    jsObject[locationId] = locationWithArrays;\n  });\n  return jsObject;\n}\n\n/**\n * Converts the locationStates from a saved json object to a map that can be played\n *\n * @param obj - location states map as a json object\n * @returns {Map<LocationId, GameLocation>} - The location states map as a json object\n */\nexport function jsonToLocationStates(obj: any): Map<LocationId, GameLocation> {\n  const map = new Map<LocationId, any>();\n\n  if (Object.keys(obj).length) {\n    Object.keys(obj).forEach((locationId: LocationId) => {\n      const locationWithSets = _.mapValues(obj[locationId], locationProperty => {\n        if (locationProperty instanceof Array) {\n          return new Set(locationProperty);\n        }\n        return locationProperty;\n      });\n\n      map.set(locationId, locationWithSets);\n    });\n  }\n\n  return map;\n}\n\n/**\n * Function to create an empty save state\n * Used for resetting game data of students\n *\n * @returns {FullSaveState} - an empty save state for starting players\n */\nexport const createEmptySaveState = (): FullSaveState => {\n  return {\n    gameSaveStates: {},\n    userSaveState: {\n      collectibles: [],\n      settings: { bgmVolume: 1, sfxVolume: 1 },\n      recentlyPlayedCheckpoint: [-1, -1],\n      largestCompletedChapter: -1\n    }\n  };\n};\n","import { BBoxProperty } from '../boundingBoxes/GameBoundingBoxTypes';\nimport { GameCheckpoint } from '../chapter/GameChapterTypes';\nimport { ItemId } from '../commons/CommonTypes';\nimport { GameLocation, GameLocationAttr, LocationId } from '../location/GameMapTypes';\nimport { GameMode } from '../mode/GameModeTypes';\nimport GameObjective from '../objective/GameObjective';\nimport { ObjectProperty } from '../objects/GameObjectTypes';\nimport { jsObjectToMap, jsonToLocationStates } from '../save/GameSaveHelper';\nimport { GameSaveState } from '../save/GameSaveTypes';\nimport GameGlobalAPI from '../scenes/gameManager/GameGlobalAPI';\nimport GameManager from '../scenes/gameManager/GameManager';\nimport { mandatory } from '../utils/GameUtils';\nimport { StateChangeType, StateObserver, StateSubject } from './GameStateTypes';\n\n/**\n * Manages all states related to story, chapter, or checkpoint;\n * e.g. checkpoint objectives, objects' property, bboxes' property.\n *\n * Other than this manager, all other manager should not need to\n * manage their own state.\n *\n * Employs observer pattern, and notifies its subjects on state update.\n */\nclass GameStateManager implements StateSubject {\n  // Subscribers\n  public subscribers: Array<StateObserver>;\n\n  // Game State\n  private checkpoint: GameCheckpoint;\n  private checkpointObjective: GameObjective;\n  private locationHasUpdate: Map<string, Map<GameLocationAttr, boolean>>;\n  private locationStates: Map<string, GameLocation>;\n  private objectPropertyMap: Map<ItemId, ObjectProperty>;\n  private bboxPropertyMap: Map<ItemId, BBoxProperty>;\n\n  // Triggered Interactions\n  private triggeredInteractions: Map<ItemId, boolean>;\n\n  constructor() {\n    this.subscribers = new Array<StateObserver>();\n\n    this.checkpoint = {} as GameCheckpoint;\n    this.checkpointObjective = new GameObjective();\n    this.locationHasUpdate = new Map<string, Map<GameLocationAttr, boolean>>();\n    this.locationStates = new Map<string, GameLocation>();\n    this.objectPropertyMap = new Map<ItemId, ObjectProperty>();\n    this.bboxPropertyMap = new Map<ItemId, BBoxProperty>();\n\n    this.triggeredInteractions = new Map<ItemId, boolean>();\n  }\n\n  ///////////////////////////////\n  //        Subscribers        //\n  ///////////////////////////////\n\n  /**\n   * Update all subscribers that there is an update at the location ID.\n   *\n   * @param changeType type of change\n   * @param locationId ID of location that has an update.\n   * @param id id of item related to the update\n   */\n  public update(changeType: StateChangeType, locationId: LocationId, id?: string) {\n    this.subscribers.forEach(observer => observer.notify(changeType, locationId, id));\n  }\n\n  /**\n   * Allow a StateObserver implementer to subscribe to change of states.\n   *\n   * @param observer the instance of the implementer\n   */\n  public subscribe(observer: StateObserver) {\n    this.subscribers.push(observer);\n  }\n\n  /**\n   * Allow a StateObserver implementer to unsubscribe to change of states.\n   *\n   * @param observer the instance of the implementer\n   */\n  public unsubscribe(observer: StateObserver) {\n    this.subscribers = this.subscribers.filter(obs => obs.observerId !== observer.observerId);\n  }\n\n  ///////////////////////////////\n  //          Helpers          //\n  ///////////////////////////////\n\n  /**\n   * Update a location ID's state based on its GameMode.\n   * Also notifies subjects.\n   *\n   * @param targetLocId the id of to be upDated location\n   * @param mode mode that has been updated\n   */\n  private updateLocationStateMode(\n    changeType: StateChangeType,\n    targetLocId: LocationId,\n    mode: GameMode\n  ): void {\n    switch (mode) {\n      case GameMode.Explore:\n        this.updateLocationStateAttr(changeType, targetLocId, GameLocationAttr.boundingBoxes);\n        this.updateLocationStateAttr(changeType, targetLocId, GameLocationAttr.objects);\n        return;\n      case GameMode.Move:\n        this.updateLocationStateAttr(changeType, targetLocId, GameLocationAttr.navigation);\n        return;\n      case GameMode.Talk:\n        this.updateLocationStateAttr(changeType, targetLocId, GameLocationAttr.talkTopics);\n        return;\n      default:\n        return;\n    }\n  }\n\n  /**\n   * Update a location ID's state based on its attribute.\n   * Also notifies subjects.\n   *\n   * @param changeType type of change\n   * @param targetLocId the id of to be upDated location\n   * @param attr attribute that has been updated\n   * @param attrId id of the attribute element being added\n   */\n  private updateLocationStateAttr(\n    changeType: StateChangeType,\n    targetLocId: LocationId,\n    attr: GameLocationAttr,\n    attrId?: string\n  ): void {\n    const currLocId = GameGlobalAPI.getInstance().getCurrLocId();\n\n    this.locationHasUpdate.get(targetLocId)!.set(attr, true);\n\n    // Only update if player is not already at the location\n    if (currLocId !== targetLocId) {\n      // Location has an update to its state, reset its interaction back to not triggered\n      this.triggeredInteractions.set(targetLocId, false);\n    }\n\n    // Notify subscribers\n    this.update(changeType, targetLocId, attrId);\n  }\n\n  /**\n   * Check whether an location ID exist.\n   * Throw error if it does not exist.\n   *\n   * @param locIds id to check\n   */\n  private checkLocationsExist(locIds: string[]): void {\n    locIds.forEach(locId => mandatory(this.locationStates.get(locId)));\n  }\n\n  /**\n   * Return a location based on its ID.\n   * @param locId id of the location\n   * @returns {GameLocation}\n   */\n  private getLocationById = (locId: LocationId) => mandatory(this.locationStates.get(locId));\n\n  ///////////////////////////////\n  //        Preprocess         //\n  ///////////////////////////////\n\n  public initialise(gameManager: GameManager): void {\n    this.checkpoint = gameManager.getCurrentCheckpoint();\n    const gameSaveState = gameManager.getSaveManager().getLoadedGameStoryState();\n    this.checkpointObjective = this.checkpoint.objectives;\n\n    if (gameSaveState) {\n      this.loadFromGameStoryState(gameSaveState);\n    } else {\n      this.loadNewGameStoryState();\n    }\n\n    // Register every attribute of each location under the chapter\n    this.locationStates.forEach((location, locationId) => {\n      this.locationHasUpdate.set(locationId, new Map<GameLocationAttr, boolean>());\n      Object.values(GameLocationAttr).forEach(value =>\n        this.locationHasUpdate.get(locationId)!.set(value, false)\n      );\n    });\n  }\n\n  /**\n   * Load GameSaveState and use it as the values of GameStateManager's attributes.\n   *\n   * @param gameSaveState state to load\n   */\n  private loadFromGameStoryState(gameSaveState: GameSaveState) {\n    this.checkpointObjective.setObjectives(jsObjectToMap(gameSaveState.chapterObjective));\n    this.locationStates = jsonToLocationStates(gameSaveState.locationStates);\n    this.objectPropertyMap = jsObjectToMap(gameSaveState.objectPropertyMap);\n    this.bboxPropertyMap = jsObjectToMap(gameSaveState.bboxPropertyMap);\n    this.triggeredInteractions = jsObjectToMap(gameSaveState.triggeredInteractions);\n  }\n\n  /**\n   * Initialise GameStateManager's attributes with fresh states.\n   */\n  private loadNewGameStoryState() {\n    this.checkpointObjective = this.checkpoint.objectives;\n    this.locationStates = this.checkpoint.map.getLocations();\n    this.objectPropertyMap = this.checkpoint.map.getObjects();\n    this.bboxPropertyMap = this.checkpoint.map.getBBoxes();\n    this.triggeredInteractions.clear();\n  }\n\n  ///////////////////////////////\n  //        Interaction        //\n  ///////////////////////////////\n\n  /**\n   * Record that an interaction has been triggered.\n   *\n   * @param id id of interaction\n   */\n  public triggerInteraction(id: string): void {\n    this.triggeredInteractions.set(id, true);\n  }\n\n  /**\n   * Checks whether an interaction ID has been triggered or not.\n   *\n   * @param id id of interaction\n   * @returns {boolean}\n   */\n  public hasTriggeredInteraction(id: string): boolean | undefined {\n    return this.triggeredInteractions.get(id);\n  }\n\n  ///////////////////////////////\n  //       State Check         //\n  ///////////////////////////////\n\n  /**\n   * Checks whether a location has any update based on the modes.\n   * A location has an update if any of its mode has been updated since\n   * last user interaction.\n   *\n   * If the mode parameter is specified, only that specific mode is checked.\n   * If the mode parameter is not specified, update to any mode will return true.\n   *\n   * @param locationId location ID\n   * @param mode mode to check\n   * @returns {boolean}\n   */\n  public hasLocationUpdateMode(locationId: LocationId, mode?: GameMode): boolean | undefined {\n    if (mode) {\n      switch (mode) {\n        case GameMode.Explore:\n          this.hasLocationUpdateAttr(locationId, GameLocationAttr.boundingBoxes);\n          this.hasLocationUpdateAttr(locationId, GameLocationAttr.objects);\n          return;\n        case GameMode.Move:\n          this.hasLocationUpdateAttr(locationId, GameLocationAttr.navigation);\n          return;\n        case GameMode.Talk:\n          this.hasLocationUpdateAttr(locationId, GameLocationAttr.talkTopics);\n          return;\n        default:\n          return;\n      }\n    }\n    return this.hasLocationUpdateAttr(locationId);\n  }\n\n  /**\n   * Checks whether a location has any update based on the attributes.\n   * A location has an update if any of its attributes has been updated since\n   * last user interaction.\n   *\n   * If the mode parameter is specified, only that specific mode is checked.\n   * If the mode parameter is not specified, update to any mode will return true.\n   *\n   * @param locationId location ID\n   * @param mode mode to check\n   * @returns {boolean}\n   */\n  public hasLocationUpdateAttr(\n    locationId: LocationId,\n    attr?: GameLocationAttr\n  ): boolean | undefined {\n    this.checkLocationsExist([locationId]);\n    if (attr) {\n      return this.locationHasUpdate.get(locationId)!.get(attr);\n    }\n\n    // If no attr is specified, update to any attr will return true\n    let result = false;\n    const locationModeState = this.locationHasUpdate.get(locationId);\n    locationModeState!.forEach((hasUpdate, attr, map) => (result = result || hasUpdate));\n    return result;\n  }\n\n  /**\n   * Inform state manager that an attribute's update has been noted of.\n   *\n   * @param locationId location ID\n   * @param attr attribute which update has been consumed\n   */\n  public consumedLocationUpdate(locationId: LocationId, attr: GameLocationAttr) {\n    this.checkLocationsExist([locationId]);\n    this.locationHasUpdate.get(locationId)!.set(attr, false);\n  }\n\n  ///////////////////////////////\n  //    Location Mode State    //\n  ///////////////////////////////\n\n  /**\n   * Get modes available to a location based on the location ID.\n   *\n   * @param locationId location ID\n   * @returns {GameMode[]} game modes\n   */\n  public getLocationMode(locationId: LocationId): GameMode[] {\n    return Array.from(this.checkpoint.map.getLocationAtId(locationId).modes) || [];\n  }\n\n  /**\n   * Add a mode to a location.\n   *\n   * @param locationId location ID\n   * @param mode game mode to add\n   */\n  public addLocationMode(locationId: LocationId, mode: GameMode) {\n    const location = this.getLocationById(locationId);\n    location.modes!.add(mode);\n    this.locationStates.get(locationId)!.modes!.add(mode);\n    this.updateLocationStateMode(StateChangeType.Add, locationId, GameMode.Menu);\n  }\n\n  /**\n   * Remove a mode from a location.\n   * If the mode is not present at the location, nothing\n   * will be executed.\n   *\n   * @param locationId location ID\n   * @param mode game mode to remove\n   */\n  public removeLocationMode(locationId: LocationId, mode: GameMode) {\n    const location = this.getLocationById(locationId);\n    if (!location.modes) return;\n    location.modes.delete(mode);\n    this.updateLocationStateMode(StateChangeType.Delete, locationId, GameMode.Menu);\n  }\n\n  ///////////////////////////////\n  //    Location Attr State    //\n  ///////////////////////////////\n\n  /**\n   * Get an IDs of an attribute of a location.\n   *\n   * @param attr location attribute\n   * @param locationId id of location\n   * @param {ItemId[]}\n   */\n  public getLocationAttr(attr: GameLocationAttr, locationId: LocationId): ItemId[] {\n    const location = this.getLocationById(locationId);\n    return Array.from(location[attr]) || [];\n  }\n\n  /**\n   * Add an item ID to an attribute of the location.\n   *\n   * @param attr attribute to add to\n   * @param locationId id of location\n   * @param attrElem item ID to be added\n   */\n  public addLocationAttr(attr: GameLocationAttr, locationId: LocationId, attrElem: string) {\n    const location = this.getLocationById(locationId);\n    if (!location[attr]) location[attr] = new Set([]);\n    location[attr].add(attrElem);\n    this.updateLocationStateAttr(StateChangeType.Add, locationId, attr, attrElem);\n  }\n\n  /**\n   * Remove an item ID from an attribute of the location.\n   * If ID is not found within the attribute, nothing will be executed.\n   *\n   * @param attr attribute to remove from\n   * @param locationId id of location\n   * @param attrElem item ID to be removed\n   */\n  public removeLocationAttr(attr: GameLocationAttr, locationId: LocationId, attrElem: string) {\n    const location = this.getLocationById(locationId);\n    if (!location[attr]) return;\n    location[attr] = location[attr].filter((oldAttr: string) => oldAttr !== attrElem);\n    this.updateLocationStateAttr(StateChangeType.Delete, locationId, attr, attrElem);\n  }\n\n  ///////////////////////////////\n  //    Chapter Objectives     //\n  ///////////////////////////////\n\n  /**\n   * Checks whether all the checkpoint objectives has been completed.\n   * @returns {boolean}\n   */\n  public isAllComplete(): boolean {\n    return this.checkpointObjective.isAllComplete();\n  }\n\n  /**\n   * Checks whether a specific objective has been completed.\n   * If the objective does not exist, this method still return true.\n   *\n   * @param key objective name\n   * @returns {boolean}\n   */\n  public isObjectiveComplete(key: string): boolean {\n    const isComplete = this.checkpointObjective.getObjectiveState(key);\n    if (isComplete === undefined || isComplete) {\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Check whether the objectives are complete or not.\n   * All specified objectives must be complete for this method\n   * to return true.\n   *\n   * @param keys objective names\n   * @returns {boolean}\n   */\n  public areObjectivesComplete(keys: string[]): boolean {\n    let result = true;\n    keys.forEach(key => (result = result && this.isObjectiveComplete(key)));\n    return result;\n  }\n\n  /**\n   * Record that an objective has been completed.\n   *\n   * @param key objective name\n   */\n  public completeObjective(key: string): void {\n    this.checkpointObjective.setObjective(key, true);\n  }\n\n  ///////////////////////////////\n  //       Obj Property        //\n  ///////////////////////////////\n\n  /**\n   * Get object property map.\n   *\n   * @returns {Map<ItemId, ObjectProperty>}\n   */\n  public getObjPropertyMap() {\n    return this.objectPropertyMap;\n  }\n\n  /**\n   * Replace an object property of the given ID with the new object\n   * property. Commonly used to update a specific object property.\n   *\n   * @param id id of object to change\n   * @param newObjProp new object property to replace the old one\n   */\n  public setObjProperty(id: ItemId, newObjProp: ObjectProperty) {\n    this.objectPropertyMap.set(id, newObjProp);\n\n    // Update every location that uses it\n    this.locationStates.forEach((location, locationId) => {\n      if (location.objects && location.objects.has(id)) {\n        this.updateLocationStateAttr(\n          StateChangeType.Mutate,\n          locationId,\n          GameLocationAttr.objects,\n          id\n        );\n      }\n    });\n  }\n\n  ///////////////////////////////\n  //       BBox Property       //\n  ///////////////////////////////\n\n  /**\n   * Get bbox property map.\n   *\n   * @returns {Map<ItemId, BBoxProperty>}\n   */\n  public getBBoxPropertyMap() {\n    return this.bboxPropertyMap;\n  }\n\n  /**\n   * Replace a bbox property of the given ID with the new bbox\n   * property. Commonly used to update a specific bbox property.\n   *\n   * @param id id of object to change\n   * @param newBBoxProp new object property to replace the old one\n   */\n  public setBBoxProperty(id: ItemId, newBBoxProp: BBoxProperty) {\n    this.bboxPropertyMap.set(id, newBBoxProp);\n\n    // Update every location that uses it\n    this.locationStates.forEach((location, locationId) => {\n      if (location.boundingBoxes && location.boundingBoxes.delete(id)) {\n        this.updateLocationStateAttr(\n          StateChangeType.Mutate,\n          locationId,\n          GameLocationAttr.boundingBoxes,\n          id\n        );\n      }\n    });\n  }\n\n  ///////////////////////////////\n  //          Saving           //\n  ///////////////////////////////\n\n  /**\n   * Return a map of game locations; with its location ID as key.\n   *\n   * @returns {Map<LocationId, GameLocation>}\n   */\n  public getLocationStates() {\n    return this.locationStates;\n  }\n\n  /**\n   * Get the current checkpoint objectives.\n   *\n   * @returns {GameObjective}\n   */\n  public getCheckpointObjectives() {\n    return this.checkpointObjective;\n  }\n\n  /**\n   * Return a map of interactions and whether they has been triggered\n   * or not.\n   *\n   * @returns {Map<string, boolean>}\n   */\n  public getTriggeredInteractions() {\n    return this.triggeredInteractions;\n  }\n}\n\nexport default GameStateManager;\n","import { Reducer } from 'redux';\n\nimport { defaultAcademy } from '../../commons/application/ApplicationTypes';\nimport { LOG_OUT } from '../../commons/application/types/CommonsTypes';\nimport { SourceActionType } from '../../commons/utils/ActionsHelper';\nimport { AcademyState, SAVE_CANVAS } from './AcademyTypes';\n\nexport const AcademyReducer: Reducer<AcademyState> = (\n  state = defaultAcademy,\n  action: SourceActionType\n) => {\n  switch (action.type) {\n    case LOG_OUT:\n      return defaultAcademy;\n    case SAVE_CANVAS:\n      return {\n        ...state,\n        gameCanvas: action.payload\n      };\n    default:\n      return state;\n  }\n};\n","import { Reducer } from 'redux';\n\nimport { defaultDashboard } from '../../commons/application/ApplicationTypes';\nimport { SourceActionType } from '../../commons/utils/ActionsHelper';\nimport { DashboardState, UPDATE_GROUP_GRADING_SUMMARY } from './DashboardTypes';\n\nexport const DashboardReducer: Reducer<DashboardState> = (\n  state = defaultDashboard,\n  action: SourceActionType\n) => {\n  switch (action.type) {\n    case UPDATE_GROUP_GRADING_SUMMARY:\n      return {\n        ...state,\n        gradingSummary: action.payload\n      };\n    default:\n      return state;\n  }\n};\n","import { Reducer } from 'redux';\n\nimport { defaultPlayground } from '../../commons/application/ApplicationTypes';\nimport { SourceActionType } from '../../commons/utils/ActionsHelper';\nimport {\n  CHANGE_QUERY_STRING,\n  PLAYGROUND_UPDATE_PERSISTENCE_FILE,\n  PlaygroundState,\n  TOGGLE_USING_SUBST,\n  UPDATE_SHORT_URL\n} from './PlaygroundTypes';\n\nexport const PlaygroundReducer: Reducer<PlaygroundState> = (\n  state = defaultPlayground,\n  action: SourceActionType\n) => {\n  switch (action.type) {\n    case CHANGE_QUERY_STRING:\n      return {\n        ...state,\n        queryString: action.payload\n      };\n    case TOGGLE_USING_SUBST:\n      return {\n        ...state,\n        usingSubst: action.payload\n      };\n    case UPDATE_SHORT_URL:\n      return {\n        ...state,\n        shortURL: action.payload\n      };\n    case PLAYGROUND_UPDATE_PERSISTENCE_FILE:\n      return {\n        ...state,\n        persistenceFile: action.payload\n      };\n    default:\n      return state;\n  }\n};\n","import { PersistenceFile } from '../persistence/PersistenceTypes';\n\nexport const CHANGE_QUERY_STRING = 'CHANGE_QUERY_STRING';\nexport const GENERATE_LZ_STRING = 'GENERATE_LZ_STRING';\nexport const TOGGLE_USING_SUBST = 'TOGGLE_USING_SUBST';\nexport const SHORTEN_URL = 'SHORTEN_URL';\nexport const UPDATE_SHORT_URL = 'UPDATE_SHORT_URL';\nexport const PLAYGROUND_UPDATE_PERSISTENCE_FILE = 'PLAYGROUND_UPDATE_PERSISTENCE_FILE';\n\nexport type PlaygroundState = {\n  readonly queryString?: string;\n  readonly shortURL?: string;\n  readonly usingSubst: boolean;\n  readonly persistenceFile?: PersistenceFile;\n};\n","import { Reducer } from 'redux';\n\nimport { SourcecastReducer } from '../../features/sourceRecorder/sourcecast/SourcecastReducer';\nimport { SET_EDITOR_READONLY } from '../../features/sourceRecorder/sourcecast/SourcecastTypes';\nimport { SourcereelReducer } from '../../features/sourceRecorder/sourcereel/SourcereelReducer';\nimport {\n  CodeOutput,\n  createDefaultWorkspace,\n  defaultWorkspaceManager,\n  ErrorOutput,\n  InterpreterOutput,\n  ResultOutput\n} from '../application/ApplicationTypes';\nimport { LOG_OUT } from '../application/types/CommonsTypes';\nimport {\n  DEBUG_RESET,\n  DEBUG_RESUME,\n  END_DEBUG_PAUSE,\n  END_INTERRUPT_EXECUTION,\n  EVAL_INTERPRETER_ERROR,\n  EVAL_INTERPRETER_SUCCESS,\n  EVAL_TESTCASE_FAILURE,\n  EVAL_TESTCASE_SUCCESS,\n  HANDLE_CONSOLE_LOG,\n  HIGHLIGHT_LINE\n} from '../application/types/InterpreterTypes';\nimport { Testcase } from '../assessment/AssessmentTypes';\nimport {\n  FINISH_INVITE,\n  INIT_INVITE,\n  SET_EDITOR_SESSION_ID,\n  SET_WEBSOCKET_STATUS\n} from '../collabEditing/CollabEditingTypes';\nimport { NOTIFY_PROGRAM_EVALUATED } from '../sideContent/SideContentTypes';\nimport { SourceActionType } from '../utils/ActionsHelper';\nimport Constants from '../utils/Constants';\nimport { createContext } from '../utils/JsSlangHelper';\nimport {\n  BROWSE_REPL_HISTORY_DOWN,\n  BROWSE_REPL_HISTORY_UP,\n  CHANGE_EDITOR_HEIGHT,\n  CHANGE_EDITOR_WIDTH,\n  CHANGE_EXEC_TIME,\n  CHANGE_EXTERNAL_LIBRARY,\n  CHANGE_SIDE_CONTENT_HEIGHT,\n  CLEAR_REPL_INPUT,\n  CLEAR_REPL_OUTPUT,\n  CLEAR_REPL_OUTPUT_LAST,\n  END_CLEAR_CONTEXT,\n  EVAL_EDITOR,\n  EVAL_REPL,\n  MOVE_CURSOR,\n  RESET_TESTCASE,\n  RESET_WORKSPACE,\n  SEND_REPL_INPUT_TO_OUTPUT,\n  TOGGLE_EDITOR_AUTORUN,\n  UPDATE_ACTIVE_TAB,\n  UPDATE_CHAPTER,\n  UPDATE_CURRENT_ASSESSMENT_ID,\n  UPDATE_CURRENT_SUBMISSION_ID,\n  UPDATE_EDITOR_VALUE,\n  UPDATE_HAS_UNSAVED_CHANGES,\n  UPDATE_REPL_VALUE,\n  UPDATE_WORKSPACE,\n  WorkspaceLocation,\n  WorkspaceManagerState\n} from '../workspace/WorkspaceTypes';\n\n/**\n * Takes in a IWorkspaceManagerState and maps it to a new state. The\n * pre-conditions are that\n *   - There exists an IWorkspaceState in the IWorkspaceManagerState of the key\n *     `location`.\n *   - `location` is defined (and exists) as a property 'workspaceLocation' in\n *     the action's payload.\n */\nexport const WorkspaceReducer: Reducer<WorkspaceManagerState> = (\n  state = defaultWorkspaceManager,\n  action: SourceActionType\n) => {\n  const workspaceLocation: WorkspaceLocation = (action as any).payload\n    ? (action as any).payload.workspaceLocation\n    : 'assessment';\n  let newOutput: InterpreterOutput[];\n  let lastOutput: InterpreterOutput;\n\n  switch (workspaceLocation) {\n    case 'sourcecast':\n      const sourcecastState = SourcecastReducer(state.sourcecast, action);\n      if (sourcecastState === state.sourcecast) {\n        break;\n      }\n      return {\n        ...state,\n        sourcecast: sourcecastState\n      };\n    case 'sourcereel':\n      const sourcereelState = SourcereelReducer(state.sourcereel, action);\n      if (sourcereelState === state.sourcereel) {\n        break;\n      }\n      return {\n        ...state,\n        sourcereel: sourcereelState\n      };\n    default:\n      break;\n  }\n\n  switch (action.type) {\n    case BROWSE_REPL_HISTORY_DOWN:\n      if (state[workspaceLocation].replHistory.browseIndex === null) {\n        // Not yet started browsing history, nothing to do\n        return state;\n      } else if (state[workspaceLocation].replHistory.browseIndex !== 0) {\n        // Browsing history, and still have earlier records to show\n        const newIndex = state[workspaceLocation].replHistory.browseIndex! - 1;\n        const newReplValue = state[workspaceLocation].replHistory.records[newIndex];\n        return {\n          ...state,\n          [workspaceLocation]: {\n            ...state[workspaceLocation],\n            replValue: newReplValue,\n            replHistory: {\n              ...state[workspaceLocation].replHistory,\n              browseIndex: newIndex\n            }\n          }\n        };\n      } else {\n        // Browsing history, no earlier records to show; return replValue to\n        // the last value when user started browsing\n        const newIndex = null;\n        const newReplValue = state[workspaceLocation].replHistory.originalValue;\n        const newRecords = state[workspaceLocation].replHistory.records.slice();\n        return {\n          ...state,\n          [workspaceLocation]: {\n            ...state[workspaceLocation],\n            replValue: newReplValue,\n            replHistory: {\n              browseIndex: newIndex,\n              records: newRecords,\n              originalValue: ''\n            }\n          }\n        };\n      }\n    case BROWSE_REPL_HISTORY_UP:\n      const lastRecords = state[workspaceLocation].replHistory.records;\n      const lastIndex = state[workspaceLocation].replHistory.browseIndex;\n      if (\n        lastRecords.length === 0 ||\n        (lastIndex !== null && lastRecords[lastIndex + 1] === undefined)\n      ) {\n        // There is no more later history to show\n        return state;\n      } else if (lastIndex === null) {\n        // Not yet started browsing, initialise the index & array\n        const newIndex = 0;\n        const newRecords = lastRecords.slice();\n        const originalValue = state[workspaceLocation].replValue;\n        const newReplValue = newRecords[newIndex];\n        return {\n          ...state,\n          [workspaceLocation]: {\n            ...state[workspaceLocation],\n            replValue: newReplValue,\n            replHistory: {\n              ...state[workspaceLocation].replHistory,\n              browseIndex: newIndex,\n              records: newRecords,\n              originalValue\n            }\n          }\n        };\n      } else {\n        // Browsing history, and still have later history to show\n        const newIndex = lastIndex + 1;\n        const newReplValue = lastRecords[newIndex];\n        return {\n          ...state,\n          [workspaceLocation]: {\n            ...state[workspaceLocation],\n            replValue: newReplValue,\n            replHistory: {\n              ...state[workspaceLocation].replHistory,\n              browseIndex: newIndex\n            }\n          }\n        };\n      }\n\n    case CHANGE_EDITOR_HEIGHT:\n      return {\n        ...state,\n        [workspaceLocation]: {\n          ...state[workspaceLocation],\n          editorHeight: action.payload.height\n        }\n      };\n    case CHANGE_EDITOR_WIDTH:\n      return {\n        ...state,\n        [workspaceLocation]: {\n          ...state[workspaceLocation],\n          editorWidth:\n            (\n              parseFloat(state[workspaceLocation].editorWidth.slice(0, -1)) +\n              parseFloat(action.payload.widthChange)\n            ).toString() + '%'\n        }\n      };\n    case CHANGE_EXEC_TIME:\n      return {\n        ...state,\n        [workspaceLocation]: {\n          ...state[workspaceLocation],\n          execTime: action.payload.execTime\n        }\n      };\n    case CHANGE_SIDE_CONTENT_HEIGHT:\n      return {\n        ...state,\n        [workspaceLocation]: {\n          ...state[workspaceLocation],\n          sideContentHeight: action.payload.height\n        }\n      };\n    case CLEAR_REPL_INPUT:\n      return {\n        ...state,\n        [workspaceLocation]: {\n          ...state[workspaceLocation],\n          replValue: ''\n        }\n      };\n    case CLEAR_REPL_OUTPUT_LAST:\n      return {\n        ...state,\n        [workspaceLocation]: {\n          ...state[workspaceLocation],\n          output: state[workspaceLocation].output.slice(0, -1)\n        }\n      };\n    case CLEAR_REPL_OUTPUT:\n      return {\n        ...state,\n        [workspaceLocation]: {\n          ...state[workspaceLocation],\n          output: []\n        }\n      };\n    case END_CLEAR_CONTEXT:\n      return {\n        ...state,\n        [workspaceLocation]: {\n          ...state[workspaceLocation],\n          context: createContext<WorkspaceLocation>(\n            action.payload.library.chapter,\n            action.payload.library.external.symbols,\n            workspaceLocation,\n            action.payload.library.variant,\n            action.payload.library.moduleParams\n          ),\n          globals: action.payload.library.globals\n        }\n      };\n    case SEND_REPL_INPUT_TO_OUTPUT:\n      // CodeOutput properties exist in parallel with workspaceLocation\n      newOutput = state[workspaceLocation].output.concat(action.payload as CodeOutput);\n      let newReplHistoryRecords: string[];\n      if (action.payload.value !== '') {\n        newReplHistoryRecords = [action.payload.value].concat(\n          state[workspaceLocation].replHistory.records\n        );\n      } else {\n        newReplHistoryRecords = state[workspaceLocation].replHistory.records;\n      }\n      if (newReplHistoryRecords.length > Constants.maxBrowseIndex) {\n        newReplHistoryRecords.pop();\n      }\n      return {\n        ...state,\n        [workspaceLocation]: {\n          ...state[workspaceLocation],\n          output: newOutput,\n          replHistory: {\n            ...state[workspaceLocation].replHistory,\n            records: newReplHistoryRecords\n          }\n        }\n      };\n    case CHANGE_EXTERNAL_LIBRARY:\n      return {\n        ...state,\n        [workspaceLocation]: {\n          ...state[workspaceLocation],\n          externalLibrary: action.payload.newExternal\n        }\n      };\n    case HANDLE_CONSOLE_LOG:\n      /* Possible cases:\n       * (1) state[workspaceLocation].output === [], i.e. state[workspaceLocation].output[-1] === undefined\n       * (2) state[workspaceLocation].output[-1] is not RunningOutput\n       * (3) state[workspaceLocation].output[-1] is RunningOutput */\n      lastOutput = state[workspaceLocation].output.slice(-1)[0];\n      if (lastOutput === undefined || lastOutput.type !== 'running') {\n        newOutput = state[workspaceLocation].output.concat({\n          type: 'running',\n          consoleLogs: [action.payload.logString]\n        });\n      } else {\n        const updatedLastOutput = {\n          type: lastOutput.type,\n          consoleLogs: lastOutput.consoleLogs.concat(action.payload.logString)\n        };\n        newOutput = state[workspaceLocation].output.slice(0, -1).concat(updatedLastOutput);\n      }\n      return {\n        ...state,\n        [workspaceLocation]: {\n          ...state[workspaceLocation],\n          output: newOutput\n        }\n      };\n    case LOG_OUT:\n      // Preserve the playground workspace even after log out\n      const playgroundWorkspace = state.playground;\n      return {\n        ...defaultWorkspaceManager,\n        playground: playgroundWorkspace\n      };\n    case EVAL_EDITOR:\n      return {\n        ...state,\n        [workspaceLocation]: {\n          ...state[workspaceLocation],\n          isRunning: true,\n          isDebugging: false\n        }\n      };\n    case EVAL_REPL:\n      return {\n        ...state,\n        [workspaceLocation]: {\n          ...state[workspaceLocation],\n          isRunning: true\n        }\n      };\n    case EVAL_INTERPRETER_SUCCESS:\n      lastOutput = state[workspaceLocation].output.slice(-1)[0];\n      if (lastOutput !== undefined && lastOutput.type === 'running') {\n        newOutput = state[workspaceLocation].output.slice(0, -1).concat({\n          type: action.payload.type,\n          value: action.payload.value,\n          consoleLogs: lastOutput.consoleLogs\n        } as ResultOutput);\n      } else {\n        newOutput = state[workspaceLocation].output.concat({\n          type: action.payload.type,\n          value: action.payload.value,\n          consoleLogs: []\n        } as ResultOutput);\n      }\n      return {\n        ...state,\n        [workspaceLocation]: {\n          ...state[workspaceLocation],\n          output: newOutput,\n          isRunning: false,\n          breakpoints: [],\n          highlightedLines: []\n        }\n      };\n    case EVAL_TESTCASE_SUCCESS:\n      return {\n        ...state,\n        [workspaceLocation]: {\n          ...state[workspaceLocation],\n          editorTestcases: state[workspaceLocation].editorTestcases.map(\n            (testcase: Testcase, i: any) => {\n              if (i === action.payload.index) {\n                return {\n                  ...testcase,\n                  result: action.payload.value,\n                  errors: undefined\n                };\n              } else {\n                return testcase;\n              }\n            }\n          ),\n          isRunning: false\n        }\n      };\n    case EVAL_TESTCASE_FAILURE:\n      return {\n        ...state,\n        [workspaceLocation]: {\n          ...state[workspaceLocation],\n          editorTestcases: state[workspaceLocation].editorTestcases.map(\n            (testcase: Testcase, i: number) => {\n              if (i === action.payload.index) {\n                return {\n                  ...testcase,\n                  result: undefined,\n                  errors: action.payload.value\n                };\n              }\n              return testcase;\n            }\n          )\n        }\n      };\n    case EVAL_INTERPRETER_ERROR:\n      lastOutput = state[workspaceLocation].output.slice(-1)[0];\n      if (lastOutput !== undefined && lastOutput.type === 'running') {\n        newOutput = state[workspaceLocation].output.slice(0, -1).concat({\n          type: action.payload.type,\n          errors: action.payload.errors,\n          consoleLogs: lastOutput.consoleLogs\n        } as ErrorOutput);\n      } else {\n        newOutput = state[workspaceLocation].output.concat({\n          type: action.payload.type,\n          errors: action.payload.errors,\n          consoleLogs: []\n        } as ErrorOutput);\n      }\n      return {\n        ...state,\n        [workspaceLocation]: {\n          ...state[workspaceLocation],\n          output: newOutput,\n          isRunning: false,\n          isDebugging: false\n        }\n      };\n    /**\n     * Called to signal the end of an interruption,\n     * i.e called after the interpreter is told to stop interruption,\n     * to cause UI changes.\n     */\n    case END_INTERRUPT_EXECUTION:\n      /**\n       * Set the isRunning property of the\n       * context to false, to ensure a re-render.\n       * Also in case the async js-slang interrupt()\n       * function does not finish interrupting before\n       * this action is called.\n       */\n      return {\n        ...state,\n        [workspaceLocation]: {\n          ...state[workspaceLocation],\n          isRunning: false,\n          isDebugging: false\n        }\n      };\n    case END_DEBUG_PAUSE:\n      return {\n        ...state,\n        [workspaceLocation]: {\n          ...state[workspaceLocation],\n          isRunning: false,\n          isDebugging: true\n        }\n      };\n    case DEBUG_RESUME:\n      return {\n        ...state,\n        [workspaceLocation]: {\n          ...state[workspaceLocation],\n          isRunning: true,\n          isDebugging: false\n        }\n      };\n    case DEBUG_RESET:\n      return {\n        ...state,\n        [workspaceLocation]: {\n          ...state[workspaceLocation],\n          isRunning: false,\n          isDebugging: false\n        }\n      };\n    case RESET_TESTCASE:\n      return {\n        ...state,\n        [workspaceLocation]: {\n          ...state[workspaceLocation],\n          editorTestcases: state[workspaceLocation].editorTestcases.map(\n            (testcase: Testcase, i: any) => {\n              if (i === action.payload.index) {\n                return {\n                  ...testcase,\n                  result: undefined,\n                  errors: undefined\n                };\n              } else {\n                return testcase;\n              }\n            }\n          )\n        }\n      };\n\n    /**\n     * Resets the workspace to default settings,\n     * including the js-slang Context. Apply\n     * any specified settings (workspaceOptions)\n     */\n    case RESET_WORKSPACE:\n      return {\n        ...state,\n        [workspaceLocation]: {\n          ...state[workspaceLocation],\n          ...createDefaultWorkspace(workspaceLocation),\n          ...action.payload.workspaceOptions\n        }\n      };\n    case INIT_INVITE:\n      return {\n        ...state,\n        [workspaceLocation]: {\n          ...state[workspaceLocation],\n          sharedbAceInitValue: action.payload.editorValue,\n          sharedbAceIsInviting: true\n        }\n      };\n    case FINISH_INVITE:\n      return {\n        ...state,\n        [workspaceLocation]: {\n          ...state[workspaceLocation],\n          sharedbAceIsInviting: false\n        }\n      };\n    /**\n     * Updates workspace without changing anything\n     * which has not been specified\n     */\n    case UPDATE_WORKSPACE:\n      return {\n        ...state,\n        [workspaceLocation]: {\n          ...state[workspaceLocation],\n          ...action.payload.workspaceOptions\n        }\n      };\n    case SET_EDITOR_SESSION_ID:\n      return {\n        ...state,\n        [workspaceLocation]: {\n          ...state[workspaceLocation],\n          editorSessionId: action.payload.editorSessionId\n        }\n      };\n\n    case SET_EDITOR_READONLY:\n      return {\n        ...state,\n        [workspaceLocation]: {\n          ...state[workspaceLocation],\n          editorReadonly: action.payload.editorReadonly\n        }\n      };\n    case SET_WEBSOCKET_STATUS:\n      return {\n        ...state,\n        [workspaceLocation]: {\n          ...state[workspaceLocation],\n          websocketStatus: action.payload.websocketStatus\n        }\n      };\n    case TOGGLE_EDITOR_AUTORUN:\n      return {\n        ...state,\n        [workspaceLocation]: {\n          ...state[workspaceLocation],\n          isEditorAutorun: !state[workspaceLocation].isEditorAutorun\n        }\n      };\n    case UPDATE_ACTIVE_TAB:\n      return {\n        ...state,\n        [workspaceLocation]: {\n          ...state[workspaceLocation],\n          sideContentActiveTab: action.payload.activeTab\n        }\n      };\n    case UPDATE_CURRENT_ASSESSMENT_ID:\n      return {\n        ...state,\n        assessment: {\n          ...state.assessment,\n          currentAssessment: action.payload.assessmentId,\n          currentQuestion: action.payload.questionId\n        }\n      };\n    case UPDATE_CURRENT_SUBMISSION_ID:\n      return {\n        ...state,\n        grading: {\n          ...state.grading,\n          currentSubmission: action.payload.submissionId,\n          currentQuestion: action.payload.questionId\n        }\n      };\n    case UPDATE_EDITOR_VALUE:\n      return {\n        ...state,\n        [workspaceLocation]: {\n          ...state[workspaceLocation],\n          editorValue: action.payload.newEditorValue\n        }\n      };\n    case HIGHLIGHT_LINE:\n      return {\n        ...state,\n        [workspaceLocation]: {\n          ...state[workspaceLocation],\n          highlightedLines: action.payload.highlightedLines\n        }\n      };\n    case MOVE_CURSOR:\n      return {\n        ...state,\n        [workspaceLocation]: {\n          ...state[workspaceLocation],\n          newCursorPosition: action.payload.cursorPosition\n        }\n      };\n    case UPDATE_REPL_VALUE:\n      return {\n        ...state,\n        [workspaceLocation]: {\n          ...state[workspaceLocation],\n          replValue: action.payload.newReplValue\n        }\n      };\n    case UPDATE_HAS_UNSAVED_CHANGES:\n      return {\n        ...state,\n        [workspaceLocation]: {\n          ...state[workspaceLocation],\n          hasUnsavedChanges: action.payload.hasUnsavedChanges\n        }\n      };\n    case UPDATE_CHAPTER:\n      return {\n        ...state,\n        playground: {\n          ...state.playground,\n          context: {\n            ...state.playground.context,\n            chapter: action.payload.chapter,\n            variant: action.payload.variant\n          }\n        }\n      };\n    case NOTIFY_PROGRAM_EVALUATED:\n      return {\n        ...state,\n        [workspaceLocation]: {\n          ...state[workspaceLocation],\n          debuggerContext: {\n            ...state[workspaceLocation].debuggerContext,\n            result: action.payload.result,\n            lastDebuggerResult: action.payload.lastDebuggerResult,\n            code: action.payload.code,\n            context: action.payload.context,\n            workspaceLocation: action.payload.workspaceLocation\n          }\n        }\n      };\n    default:\n      return state;\n  }\n};\n","import { SourceActionType } from '../../../commons/utils/ActionsHelper';\nimport {\n  SAVE_SOURCECAST_DATA,\n  SET_CODE_DELTAS_TO_APPLY,\n  SET_CURRENT_PLAYER_TIME,\n  SET_INPUT_TO_APPLY,\n  SET_SOURCECAST_DATA,\n  SET_SOURCECAST_PLAYBACK_DURATION,\n  SET_SOURCECAST_PLAYBACK_STATUS\n} from '../SourceRecorderTypes';\nimport { SourcecastWorkspaceState, UPDATE_SOURCECAST_INDEX } from './SourcecastTypes';\n\nexport const SourcecastReducer = (\n  state: SourcecastWorkspaceState,\n  action: SourceActionType\n): SourcecastWorkspaceState => {\n  switch (action.type) {\n    case SAVE_SOURCECAST_DATA:\n      return {\n        ...state,\n        title: action.payload.title,\n        description: action.payload.description,\n        audioUrl: action.payload.audioUrl,\n        playbackData: action.payload.playbackData\n      };\n    case SET_CURRENT_PLAYER_TIME:\n      return {\n        ...state,\n        currentPlayerTime: action.payload.playerTime\n      };\n    case SET_CODE_DELTAS_TO_APPLY:\n      return {\n        ...state,\n        codeDeltasToApply: action.payload.deltas\n      };\n    case SET_INPUT_TO_APPLY:\n      return {\n        ...state,\n        inputToApply: action.payload.inputToApply\n      };\n    case SET_SOURCECAST_DATA:\n      return {\n        ...state,\n        title: action.payload.title,\n        description: action.payload.description,\n        audioUrl: action.payload.audioUrl,\n        playbackData: action.payload.playbackData\n      };\n    case SET_SOURCECAST_PLAYBACK_DURATION:\n      return {\n        ...state,\n        playbackDuration: action.payload.duration\n      };\n    case SET_SOURCECAST_PLAYBACK_STATUS:\n      return {\n        ...state,\n        playbackStatus: action.payload.playbackStatus\n      };\n    case UPDATE_SOURCECAST_INDEX:\n      return {\n        ...state,\n        sourcecastIndex: action.payload.index\n      };\n    default:\n      return state;\n  }\n};\n","import { SourceActionType } from '../../../commons/utils/ActionsHelper';\nimport { RecordingStatus } from '../SourceRecorderTypes';\nimport {\n  RECORD_INIT,\n  RECORD_INPUT,\n  RESET_INPUTS,\n  SourcereelWorkspaceState,\n  TIMER_PAUSE,\n  TIMER_RESET,\n  TIMER_RESUME,\n  TIMER_START,\n  TIMER_STOP\n} from './SourcereelTypes';\n\nexport const SourcereelReducer = (state: SourcereelWorkspaceState, action: SourceActionType) => {\n  switch (action.type) {\n    case RECORD_INIT:\n      return {\n        ...state,\n        playbackData: {\n          init: action.payload.initData,\n          inputs: []\n        }\n      };\n    case RECORD_INPUT:\n      return {\n        ...state,\n        playbackData: {\n          ...state.playbackData,\n          inputs: [...state.playbackData.inputs, action.payload.input]\n        }\n      };\n    case RESET_INPUTS:\n      return {\n        ...state,\n        playbackData: {\n          ...state.playbackData,\n          inputs: action.payload.inputs\n        }\n      };\n    case TIMER_PAUSE:\n      return {\n        ...state,\n        recordingStatus: RecordingStatus.paused,\n        timeElapsedBeforePause:\n          state.timeElapsedBeforePause + action.payload.timeNow - state.timeResumed\n      };\n    case TIMER_RESET:\n      return {\n        ...state,\n        recordingStatus: RecordingStatus.notStarted,\n        timeElapsedBeforePause: 0,\n        timeResumed: 0\n      };\n    case TIMER_RESUME:\n      return {\n        ...state,\n        recordingStatus: RecordingStatus.recording,\n        timeElapsedBeforePause:\n          action.payload.timeBefore >= 0 ? action.payload.timeBefore : state.timeElapsedBeforePause,\n        timeResumed: action.payload.timeNow\n      };\n    case TIMER_START:\n      return {\n        ...state,\n        recordingStatus: RecordingStatus.recording,\n        timeElapsedBeforePause: 0,\n        timeResumed: action.payload.timeNow\n      };\n    case TIMER_STOP:\n      return {\n        ...state,\n        recordingStatus: RecordingStatus.finished,\n        timeElapsedBeforePause: 0,\n        timeResumed: 0\n      };\n    default:\n      return state;\n  }\n};\n","import { WorkspaceState } from '../../../commons/workspace/WorkspaceTypes';\nimport { PlaybackData, RecordingStatus } from '../SourceRecorderTypes';\n\nexport const DELETE_SOURCECAST_ENTRY = 'DELETE_SOURCECAST_ENTRY';\nexport const RECORD_INIT = 'RECORD_INIT';\nexport const RECORD_INPUT = 'RECORD_INPUT';\nexport const RESET_INPUTS = 'RESET_INPUTS';\nexport const TIMER_PAUSE = 'TIMER_PAUSE';\nexport const TIMER_RESET = 'TIMER_RESET';\nexport const TIMER_RESUME = 'TIMER_RESUME';\nexport const TIMER_START = 'TIMER_START';\nexport const TIMER_STOP = 'TIMER_STOP';\n\ntype SourcereelWorkspaceAttr = {\n  readonly playbackData: PlaybackData;\n  readonly recordingStatus: RecordingStatus;\n  readonly timeElapsedBeforePause: number;\n  readonly timeResumed: number;\n};\nexport type SourcereelWorkspaceState = SourcereelWorkspaceAttr & WorkspaceState;\n","import { Action, Reducer } from 'redux';\n\nimport { ApplicationState, defaultApplication } from './ApplicationTypes';\n\nexport const ApplicationReducer: Reducer<ApplicationState> = (\n  state = defaultApplication,\n  action: Action\n) => {\n  return state;\n};\n","import { connectRouter } from 'connected-react-router';\nimport { History } from 'history';\nimport { combineReducers } from 'redux';\n\nimport { AcademyReducer as academy } from '../../../features/academy/AcademyReducer';\nimport { DashboardReducer as dashboard } from '../../../features/dashboard/DashboardReducer';\nimport { PlaygroundReducer as playground } from '../../../features/playground/PlaygroundReducer';\nimport { WorkspaceReducer as workspaces } from '../../workspace/WorkspaceReducer';\nimport { ApplicationReducer as application } from '../ApplicationReducer';\nimport { SessionsReducer as session } from './SessionsReducer';\n\nconst createRootReducer = (history: History) =>\n  combineReducers({\n    router: connectRouter(history),\n    academy,\n    application,\n    dashboard,\n    playground,\n    session,\n    workspaces\n  });\n\nexport default createRootReducer;\n","import { action } from 'typesafe-actions'; // EDITING\n\nimport { WorkspaceLocation } from '../workspace/WorkspaceTypes';\nimport {\n  FINISH_INVITE,\n  INIT_INVITE,\n  INVALID_EDITOR_SESSION_ID,\n  SET_EDITOR_SESSION_ID,\n  SET_WEBSOCKET_STATUS\n} from './CollabEditingTypes';\n\nexport const finishInvite = (workspaceLocation: WorkspaceLocation) =>\n  action(FINISH_INVITE, { workspaceLocation });\n\nexport const initInvite = (editorValue: string, workspaceLocation: WorkspaceLocation) =>\n  action(INIT_INVITE, {\n    editorValue,\n    workspaceLocation\n  });\n\nexport const invalidEditorSessionId = () => action(INVALID_EDITOR_SESSION_ID);\n\nexport const setEditorSessionId = (workspaceLocation: WorkspaceLocation, editorSessionId: string) =>\n  action(SET_EDITOR_SESSION_ID, {\n    workspaceLocation,\n    editorSessionId\n  });\n\n/**\n * Sets sharedb websocket status.\n *\n * @param workspaceLocation the workspace to be reset\n * @param websocketStatus 0: CLOSED 1: OPEN\n */\nexport const setWebsocketStatus = (workspaceLocation: WorkspaceLocation, websocketStatus: number) =>\n  action(SET_WEBSOCKET_STATUS, {\n    workspaceLocation,\n    websocketStatus\n  });\n","import { action } from 'typesafe-actions';\n\nimport { SAVE_CANVAS } from './AcademyTypes';\n\nexport const saveCanvas = (canvas: HTMLCanvasElement) => action(SAVE_CANVAS, canvas);\n","import { action } from 'typesafe-actions';\n\nimport {\n  CHANGE_DATE_ASSESSMENT,\n  DELETE_ASSESSMENT,\n  PUBLISH_ASSESSMENT,\n  UPLOAD_ASSESSMENT\n} from './GroundControlTypes';\n\nexport const changeDateAssessment = (id: number, openAt: string, closeAt: string) =>\n  action(CHANGE_DATE_ASSESSMENT, { id, openAt, closeAt });\n\nexport const deleteAssessment = (id: number) => action(DELETE_ASSESSMENT, id);\n\nexport const publishAssessment = (togglePublishTo: boolean, id: number) =>\n  action(PUBLISH_ASSESSMENT, { id, togglePublishTo });\n\nexport const uploadAssessment = (file: File, forceUpdate: boolean) =>\n  action(UPLOAD_ASSESSMENT, { file, forceUpdate });\n","import { AssessmentOverview } from '../../commons/assessment/AssessmentTypes';\n\nexport const CHANGE_DATE_ASSESSMENT = 'CHANGE_DATE_ASSESSMENT';\nexport const DELETE_ASSESSMENT = 'DELETE_ASSESSMENT';\nexport const PUBLISH_ASSESSMENT = 'PUBLISH_ASSESSMENT';\nexport const UPLOAD_ASSESSMENT = 'UPLOAD_ASSESSMENT';\n\nexport interface IGroundControlAssessmentOverview extends AssessmentOverview {\n  prettyOpenAt: string;\n  prettyCloseAt: string;\n  formattedOpenAt: Date;\n  formattedCloseAt: Date;\n}\n","import { action } from 'typesafe-actions';\n\nimport {\n  PERSISTENCE_INITIALISE,\n  PERSISTENCE_OPEN_PICKER,\n  PERSISTENCE_SAVE_FILE,\n  PERSISTENCE_SAVE_FILE_AS,\n  PersistenceFile\n} from './PersistenceTypes';\n\nexport const persistenceOpenPicker = () => action(PERSISTENCE_OPEN_PICKER);\n\nexport const persistenceSaveFile = (file: PersistenceFile) => action(PERSISTENCE_SAVE_FILE, file);\n\nexport const persistenceSaveFileAs = () => action(PERSISTENCE_SAVE_FILE_AS);\n\nexport const persistenceInitialise = () => action(PERSISTENCE_INITIALISE);\n","export const PERSISTENCE_OPEN_PICKER = 'PERSISTENCE_OPEN_PICKER';\nexport const PERSISTENCE_SAVE_FILE_AS = 'PERSISTENCE_SAVE_FILE_AS';\nexport const PERSISTENCE_SAVE_FILE = 'PERSISTENCE_SAVE_FILE';\nexport const PERSISTENCE_INITIALISE = 'PERSISTENCE_INITIALISE';\n\nexport type PersistenceState = 'INACTIVE' | 'SAVED' | 'DIRTY';\n\nexport type PersistenceFile = {\n  id: string;\n  name: string;\n  lastSaved?: Date;\n};\n","import { action } from 'typesafe-actions';\n\nimport { PersistenceFile } from '../persistence/PersistenceTypes';\nimport {\n  CHANGE_QUERY_STRING,\n  GENERATE_LZ_STRING,\n  PLAYGROUND_UPDATE_PERSISTENCE_FILE,\n  SHORTEN_URL,\n  TOGGLE_USING_SUBST,\n  UPDATE_SHORT_URL\n} from './PlaygroundTypes';\n\nexport const generateLzString = () => action(GENERATE_LZ_STRING);\n\nexport const shortenURL = (keyword: string) => action(SHORTEN_URL, keyword);\n\nexport const updateShortURL = (shortURL: string) => action(UPDATE_SHORT_URL, shortURL);\n\nexport const toggleUsingSubst = (usingSubst: boolean) => action(TOGGLE_USING_SUBST, usingSubst);\n\nexport const changeQueryString = (queryString: string) => action(CHANGE_QUERY_STRING, queryString);\n\nexport const playgroundUpdatePersistenceFile = (file?: PersistenceFile) =>\n  action(PLAYGROUND_UPDATE_PERSISTENCE_FILE, file);\n","import { action } from 'typesafe-actions';\n\nimport { WorkspaceLocation } from '../../../commons/workspace/WorkspaceTypes';\nimport { SourcecastData } from '../SourceRecorderTypes';\nimport { FETCH_SOURCECAST_INDEX, UPDATE_SOURCECAST_INDEX } from './SourcecastTypes';\n\nexport const fetchSourcecastIndex = (workspaceLocation: WorkspaceLocation) =>\n  action(FETCH_SOURCECAST_INDEX, {\n    workspaceLocation\n  });\n\nexport const updateSourcecastIndex = (\n  index: SourcecastData[],\n  workspaceLocation: WorkspaceLocation\n) =>\n  action(UPDATE_SOURCECAST_INDEX, {\n    index,\n    workspaceLocation\n  });\n","import { action } from 'typesafe-actions';\n\nimport { WorkspaceLocation } from '../../commons/workspace/WorkspaceTypes';\nimport {\n  CodeDelta,\n  Input,\n  PlaybackData,\n  PlaybackStatus,\n  SAVE_SOURCECAST_DATA,\n  SET_CODE_DELTAS_TO_APPLY,\n  SET_CURRENT_PLAYER_TIME,\n  SET_INPUT_TO_APPLY,\n  SET_SOURCECAST_DATA,\n  SET_SOURCECAST_PLAYBACK_DURATION,\n  SET_SOURCECAST_PLAYBACK_STATUS\n} from './SourceRecorderTypes';\n\nexport const saveSourcecastData = (\n  title: string,\n  description: string,\n  audio: Blob,\n  playbackData: PlaybackData,\n  workspaceLocation: WorkspaceLocation\n) =>\n  action(SAVE_SOURCECAST_DATA, {\n    title,\n    description,\n    audio,\n    audioUrl: window.URL.createObjectURL(audio),\n    playbackData,\n    workspaceLocation\n  });\n\nexport const setCurrentPlayerTime = (playerTime: number, workspaceLocation: WorkspaceLocation) =>\n  action(SET_CURRENT_PLAYER_TIME, {\n    playerTime,\n    workspaceLocation\n  });\n\nexport const setCodeDeltasToApply = (deltas: CodeDelta[], workspaceLocation: WorkspaceLocation) =>\n  action(SET_CODE_DELTAS_TO_APPLY, {\n    deltas,\n    workspaceLocation\n  });\n\nexport const setInputToApply = (inputToApply: Input, workspaceLocation: WorkspaceLocation) =>\n  action(SET_INPUT_TO_APPLY, {\n    inputToApply,\n    workspaceLocation\n  });\n\nexport const setSourcecastData = (\n  title: string,\n  description: string,\n  audioUrl: string,\n  playbackData: PlaybackData,\n  workspaceLocation: WorkspaceLocation\n) =>\n  action(SET_SOURCECAST_DATA, {\n    title,\n    description,\n    audioUrl,\n    playbackData,\n    workspaceLocation\n  });\n\nexport const setSourcecastDuration = (duration: number, workspaceLocation: WorkspaceLocation) =>\n  action(SET_SOURCECAST_PLAYBACK_DURATION, {\n    duration,\n    workspaceLocation\n  });\n\nexport const setSourcecastStatus = (\n  playbackStatus: PlaybackStatus,\n  workspaceLocation: WorkspaceLocation\n) =>\n  action(SET_SOURCECAST_PLAYBACK_STATUS, {\n    playbackStatus,\n    workspaceLocation\n  });\n","import { action } from 'typesafe-actions';\n\nimport { WorkspaceLocation } from '../../../commons/workspace/WorkspaceTypes';\nimport { Input, PlaybackData } from '../SourceRecorderTypes';\nimport {\n  DELETE_SOURCECAST_ENTRY,\n  RECORD_INIT,\n  RECORD_INPUT,\n  RESET_INPUTS,\n  TIMER_PAUSE,\n  TIMER_RESET,\n  TIMER_RESUME,\n  TIMER_START,\n  TIMER_STOP\n} from './SourcereelTypes';\n\nexport const deleteSourcecastEntry = (id: number, workspaceLocation: WorkspaceLocation) =>\n  action(DELETE_SOURCECAST_ENTRY, {\n    id,\n    workspaceLocation\n  });\n\nexport const recordInit = (initData: PlaybackData['init'], workspaceLocation: WorkspaceLocation) =>\n  action(RECORD_INIT, {\n    initData,\n    workspaceLocation\n  });\n\nexport const recordInput = (input: Input, workspaceLocation: WorkspaceLocation) =>\n  action(RECORD_INPUT, {\n    input,\n    workspaceLocation\n  });\n\nexport const resetInputs = (inputs: Input[], workspaceLocation: WorkspaceLocation) =>\n  action(RESET_INPUTS, {\n    inputs,\n    workspaceLocation\n  });\n\nexport const timerPause = (workspaceLocation: WorkspaceLocation) =>\n  action(TIMER_PAUSE, {\n    timeNow: Date.now(),\n    workspaceLocation\n  });\n\nexport const timerReset = (workspaceLocation: WorkspaceLocation) =>\n  action(TIMER_RESET, {\n    workspaceLocation\n  });\n\nexport const timerResume = (timeBefore: number, workspaceLocation: WorkspaceLocation) =>\n  action(TIMER_RESUME, {\n    timeBefore,\n    timeNow: Date.now(),\n    workspaceLocation\n  });\n\nexport const timerStart = (workspaceLocation: WorkspaceLocation) =>\n  action(TIMER_START, {\n    timeNow: Date.now(),\n    workspaceLocation\n  });\n\nexport const timerStop = (workspaceLocation: WorkspaceLocation) =>\n  action(TIMER_STOP, {\n    timeNow: Date.now(),\n    workspaceLocation\n  });\n","import { ActionType } from 'typesafe-actions';\n\nimport * as CommonsActions from '../../commons/application/actions/CommonsActions';\nimport * as InterpreterActions from '../../commons/application/actions/InterpreterActions';\nimport * as SessionActions from '../../commons/application/actions/SessionActions';\nimport * as CollabEditingActions from '../../commons/collabEditing/CollabEditingActions';\nimport * as WorkspaceActions from '../../commons/workspace/WorkspaceActions';\nimport * as AcademyActions from '../../features/academy/AcademyActions';\nimport * as DashboardActions from '../../features/dashboard/DashboardActions';\nimport * as GroundControlActions from '../../features/groundControl/GroundControlActions';\nimport * as PersistenceActions from '../../features/persistence/PersistenceActions';\nimport * as PlaygroundActions from '../../features/playground/PlaygroundActions';\nimport * as SourcecastActions from '../../features/sourceRecorder/sourcecast/SourcecastActions';\nimport * as SourceRecorderActions from '../../features/sourceRecorder/SourceRecorderActions';\nimport * as SourcereelActions from '../../features/sourceRecorder/sourcereel/SourcereelActions';\n\nexport const actions = {\n  ...CommonsActions,\n  ...CollabEditingActions,\n  ...DashboardActions,\n  ...InterpreterActions,\n  ...PlaygroundActions,\n  ...SessionActions,\n  ...SourcecastActions,\n  ...SourceRecorderActions,\n  ...SourcereelActions,\n  ...WorkspaceActions,\n  ...GroundControlActions,\n  ...AcademyActions,\n  ...PersistenceActions\n};\n\nexport type SourceActionType = ActionType<typeof actions>;\n","import { externalLibraries, ExternalLibraryName } from '../application/types/ExternalTypes';\nimport {\n  Assessment,\n  AssessmentCategories,\n  AssessmentOverview,\n  AssessmentStatuses,\n  GradingStatuses,\n  IMCQQuestion,\n  IProgrammingQuestion,\n  Library,\n  TestcaseTypes\n} from '../assessment/AssessmentTypes';\n\nconst mockUnopenedAssessmentsOverviews: AssessmentOverview[] = [\n  {\n    category: AssessmentCategories.Mission,\n    closeAt: '2048-06-18T05:24:26.026Z',\n    coverImage: 'https://fakeimg.pl/300/',\n    grade: 1,\n    id: 1,\n    maxGrade: 3000,\n    maxXp: 1000,\n    openAt: '2038-06-18T05:24:26.026Z',\n    title: 'An Odessey to Runes (Duplicate)',\n    shortSummary:\n      'This is a test for the UI of the unopened assessment overview. It links to the mock Mission 0',\n    status: AssessmentStatuses.not_attempted,\n    story: 'mission-1',\n    xp: 0,\n    gradingStatus: GradingStatuses.none\n  }\n];\n\nconst mockOpenedAssessmentsOverviews: AssessmentOverview[] = [\n  {\n    category: AssessmentCategories.Mission,\n    closeAt: '2048-06-18T05:24:26.026Z',\n    coverImage: 'https://fakeimg.pl/300/',\n    grade: 2,\n    id: 1,\n    maxGrade: 3000,\n    maxXp: 1000,\n    openAt: '2018-06-18T05:24:26.026Z',\n    title: 'An Odessey to Runes',\n    shortSummary: `\n  *Lorem ipsum* dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor\n  incididunt ut labore et dolore magna aliqua.\n  \n  \\`\\`\\`\n  const a = 5;\n  \\`\\`\\`\n  \n  Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium\n  _doloremque laudantium_, totam rem aperiam, eaque ipsa quae ab illo inventore\n  [veritatis et quasi architecto](google.com) beatae vitae dicta sunt\n  \\`explicabo\\`.\n  \n  `,\n    status: AssessmentStatuses.attempted,\n    story: 'mission-1',\n    xp: 1,\n    gradingStatus: GradingStatuses.none\n  },\n  {\n    category: AssessmentCategories.Mission,\n    closeAt: '2048-06-18T05:24:26.026Z',\n    coverImage: 'https://fakeimg.pl/350x200/?text=World&font=lobster',\n    grade: 3,\n    id: 2,\n    maxGrade: 3000,\n    maxXp: 1000,\n    openAt: '2018-07-18T05:24:26.026Z',\n    title: 'The Secret to Streams',\n    shortSummary:\n      'Once upon a time, Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin nec vulputate sapien. Fusce vel lacus fermentum, efficitur ipsum.',\n    status: AssessmentStatuses.attempting,\n    story: 'mission-2',\n    xp: 2,\n    gradingStatus: GradingStatuses.none\n  },\n  {\n    category: AssessmentCategories.Sidequest,\n    closeAt: '2048-06-18T05:24:26.026Z',\n    coverImage: 'https://fakeimg.pl/350x200/?text=Hello',\n    grade: 4,\n    id: 3,\n    maxGrade: 3000,\n    maxXp: 1000,\n    openAt: '2018-07-18T05:24:26.026Z',\n    title: 'A sample Sidequest',\n    shortSummary:\n      'Once upon a time, Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin nec vulputate sapien. Fusce vel lacus fermentum, efficitur ipsum.',\n    status: AssessmentStatuses.not_attempted,\n    story: 'sidequest-2.1',\n    xp: 3,\n    gradingStatus: GradingStatuses.none\n  },\n  {\n    category: AssessmentCategories.Path,\n    closeAt: '2069-04-20T01:23:45.111Z',\n    coverImage: 'https://fakeimg.pl/700x400/417678,64/?text=%E3%83%91%E3%82%B9&font=noto',\n    grade: 0,\n    id: 6,\n    maxGrade: 0,\n    maxXp: 200,\n    openAt: '2018-01-01T00:00:00.000Z',\n    title: 'Basic logic gates',\n    shortSummary:\n      'This mock path serves as a demonstration of the support provided for mock programming path functionality.',\n    status: AssessmentStatuses.not_attempted,\n    story: null,\n    xp: 0,\n    gradingStatus: GradingStatuses.excluded\n  },\n  {\n    category: AssessmentCategories.Practical,\n    closeAt: '2048-06-18T05:24:26.026Z',\n    coverImage: 'https://fakeimg.pl/350x200/?text=Hello',\n    grade: 4,\n    id: 5,\n    maxGrade: 3000,\n    maxXp: 1000,\n    openAt: '2018-07-18T05:24:26.026Z',\n    title: 'A sample Practical',\n    shortSummary:\n      'Once upon a time, Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin nec vulputate sapien. Fusce vel lacus fermentum, efficitur ipsum.',\n    status: AssessmentStatuses.not_attempted,\n    story: 'sidequest-2.1',\n    xp: 3,\n    gradingStatus: GradingStatuses.none,\n    private: true\n  }\n];\n\nconst mockClosedAssessmentOverviews: AssessmentOverview[] = [\n  {\n    category: AssessmentCategories.Mission,\n    closeAt: '2008-06-18T05:24:26.026Z',\n    coverImage: 'https://fakeimg.pl/350x200/ff0000/000',\n    grade: 2700,\n    id: 4,\n    maxGrade: 3000,\n    maxXp: 1000,\n    openAt: '2007-07-18T05:24:26.026Z',\n    title: 'A closed Mission',\n    shortSummary:\n      'This is a test for the grading status tooltip when the assessment is partially graded (undergoing manual grading). It should render as an orange clock.',\n    status: AssessmentStatuses.submitted,\n    story: 'mission-3',\n    xp: 800,\n    gradingStatus: GradingStatuses.grading\n  },\n  {\n    category: AssessmentCategories.Sidequest,\n    closeAt: '2008-06-18T05:24:26.026Z',\n    coverImage: 'https://fakeimg.pl/350x200/ff0000,128/000,255',\n    grade: 1950,\n    id: 5,\n    maxGrade: 3000,\n    maxXp: 1000,\n    openAt: '2007-07-18T05:24:26.026Z',\n    title: 'Closed (not graded) Sidequest',\n    shortSummary:\n      'This is a test for the grading status tooltip when the assessment is not graded. It should render as a red cross.',\n    status: AssessmentStatuses.submitted,\n    story: null,\n    xp: 500,\n    gradingStatus: GradingStatuses.none\n  },\n  {\n    category: AssessmentCategories.Sidequest,\n    closeAt: '2008-06-18T05:24:26.026Z',\n    coverImage: 'https://fakeimg.pl/350x200/ff0000,128/000,255',\n    grade: 300,\n    id: 5,\n    maxGrade: 700,\n    maxXp: 500,\n    openAt: '2007-07-18T05:24:26.026Z',\n    title: 'Closed (fully graded) Sidequest',\n    shortSummary:\n      'This is a test for the grading status tooltip when the assessment is fully graded. It should render as a green tick. This sidequest links to the mock Sidequest 4.',\n    status: AssessmentStatuses.submitted,\n    story: null,\n    xp: 150,\n    gradingStatus: GradingStatuses.graded\n  },\n  {\n    category: AssessmentCategories.Sidequest,\n    closeAt: '2008-06-18T05:24:26.026Z',\n    coverImage: 'https://fakeimg.pl/350x200/ff0000/000',\n    grade: 0,\n    id: 5,\n    maxGrade: 0,\n    maxXp: 0,\n    openAt: '2007-07-18T05:24:26.026Z',\n    title: 'Ungraded assessment',\n    shortSummary:\n      'This is a test for the grading status tooltip when the assessment does not require manual grading (e.g. paths and contests). It should render as a blue disable sign. This sidequest links to the mock Sidequest 4.',\n    status: AssessmentStatuses.submitted,\n    story: null,\n    xp: 100,\n    gradingStatus: GradingStatuses.excluded\n  }\n];\n\nexport const mockAssessmentOverviews = [\n  ...mockUnopenedAssessmentsOverviews,\n  ...mockOpenedAssessmentsOverviews,\n  ...mockClosedAssessmentOverviews\n];\n\nconst mockGlobals: Array<[string, any]> = [\n  ['testNumber', 3.141592653589793],\n  ['testString', 'who dat boi'],\n  ['testBooleanTrue', true],\n  ['testBooleanFalse', false],\n  ['testBooleanUndefined', undefined],\n  ['testBooleanNull', null],\n  ['testObject', { a: 1, b: 2 }],\n  ['testArray', [1, 2, 'a', 'b']]\n];\n\nconst mockSoundLibrary: Library = {\n  chapter: 4,\n  external: {\n    name: ExternalLibraryName.SOUNDS,\n    symbols: externalLibraries.get(ExternalLibraryName.SOUNDS)!\n  },\n  globals: mockGlobals\n};\n\nexport const mockRuneLibrary: Library = {\n  chapter: 1,\n  external: {\n    name: ExternalLibraryName.RUNES,\n    symbols: externalLibraries.get(ExternalLibraryName.RUNES)!\n  },\n  globals: mockGlobals\n};\n\nconst mockCurveLibrary: Library = {\n  chapter: 4,\n  external: {\n    name: ExternalLibraryName.CURVES,\n    symbols: externalLibraries.get(ExternalLibraryName.CURVES)!\n  },\n  globals: mockGlobals\n};\n\nconst mockToneMatrixLibrary: Library = {\n  chapter: 4,\n  external: {\n    name: ExternalLibraryName.SOUNDS,\n    symbols: ['get_matrix']\n  },\n  globals: mockGlobals\n};\n\nexport const mockAssessmentQuestions: Array<IProgrammingQuestion | IMCQQuestion> = [\n  {\n    autogradingResults: [],\n    answer: null,\n    content: `\n  This question has an id of \\`0\\`.\n  \n  \\`\\`\\`\n  What's your favourite dinner food?\n  \\`\\`\\`\n  `,\n    roomId: null,\n    id: 0,\n    library: mockSoundLibrary,\n    prepend: `const pizza = \"pizza\";\n  const sushi = \"sushi\";\n  const chickenrice = \"chicken rice\";`,\n    postpend: \"// This is a mock Postpend! You shouldn't be able to see me!\",\n    testcases: [\n      {\n        type: TestcaseTypes.public,\n        program: `answer();`,\n        score: 1,\n        answer: `\"pizza\"`\n      },\n      {\n        type: TestcaseTypes.public,\n        program: `answer();`,\n        score: 1,\n        answer: `\"sushi\"`\n      },\n      {\n        type: TestcaseTypes.public,\n        program: `answer();`,\n        score: 1,\n        answer: `\"chicken rice\"`\n      }\n    ],\n    solutionTemplate: `function answer() {\n      // Write something here!\n  }\n  `,\n    type: 'programming',\n    xp: 0,\n    grade: 0,\n    maxGrade: 2,\n    maxXp: 2\n  },\n  {\n    autogradingResults: [],\n    answer: `function areaOfCircle(x) {\n      return square(x) * pi;\n  }\n  \n  function volumeOfSphere(x) {\n      return 4 / 3 * cube(x) * pi;\n  }`,\n    roomId: '19422043',\n    content: 'Hello and welcome to this assessment! This is the 1st question.',\n    id: 1,\n    library: mockRuneLibrary,\n    prepend: `const square = x => x * x;\n  const cube = x => x * x * x;\n  const pi = 3.1415928;`,\n    postpend: '',\n    testcases: [\n      {\n        type: TestcaseTypes.public,\n        program: `areaOfCircle(5);`,\n        score: 1,\n        answer: `78.53982`\n      },\n      {\n        type: TestcaseTypes.public,\n        program: `volumeOfSphere(5);`,\n        score: 1,\n        answer: `523.5988`\n      }\n    ],\n    solutionTemplate: `function areaOfCircle(x) {\n      // return area of circle\n  }\n  \n  function volumeOfSphere(x) {\n      // return volume of sphere\n  }`,\n    type: 'programming',\n    xp: 0,\n    grade: 0,\n    maxGrade: 2,\n    maxXp: 2\n  },\n  {\n    answer: 3,\n    roomId: '19422046',\n    content:\n      'This is the 3rd question. Oddly enough, it is an ungraded MCQ question that uses the curves library! Option C has a null hint!',\n    choices: [\n      {\n        content: '**Option** `A`',\n        hint: '_hint_ A is `here`'\n      },\n      {\n        content: '### B',\n        hint: 'hint B'\n      },\n      {\n        content: 'C',\n        hint: null\n      },\n      {\n        content: 'D',\n        hint: 'hint D'\n      }\n    ],\n    id: 2,\n    library: mockCurveLibrary,\n    type: 'mcq',\n    solution: 0,\n    xp: 0,\n    grade: 0,\n    maxGrade: 2,\n    maxXp: 2\n  },\n  {\n    answer: 3,\n    roomId: null,\n    content:\n      'This is the 4rth question. Oddly enough, it is a graded MCQ question that uses the curves library!',\n    choices: [\n      {\n        content: 'A',\n        hint: null\n      },\n      {\n        content: 'B',\n        hint: null\n      },\n      {\n        content: 'C',\n        hint: null\n      },\n      {\n        content: 'D',\n        hint: null\n      }\n    ],\n    id: 3,\n    library: mockCurveLibrary,\n    type: 'mcq',\n    solution: null,\n    xp: 0,\n    grade: 0,\n    maxGrade: 2,\n    maxXp: 2\n  },\n  {\n    autogradingResults: [],\n    answer: null,\n    roomId: '19422032',\n    content: 'You have reached the last question! Have some fun with the tone matrix...',\n    id: 4,\n    library: mockToneMatrixLibrary,\n    prepend: '',\n    postpend: '',\n    testcases: [],\n    solutionTemplate: '5th question mock solution template',\n    type: 'programming',\n    xp: 0,\n    grade: 0,\n    maxGrade: 2,\n    maxXp: 2\n  }\n];\n\nexport const mockClosedAssessmentQuestions: Array<IProgrammingQuestion | IMCQQuestion> = [\n  {\n    answer: `function fibonacci(n) {\n      if (n <= 2) {\n          return 1;\n      } else {\n          return fibonacci(n-1) + fibonacci(n-2);\n      }\n  }`,\n    roomId: '19422032',\n    content: 'You can see autograding results!!!',\n    id: 0,\n    library: mockCurveLibrary,\n    prepend: '',\n    postpend: \"// This is a mock Postpend! You shouldn't be able to see me!\",\n    testcases: [\n      {\n        type: TestcaseTypes.public,\n        program: `fibonacci(3);`,\n        score: 1,\n        answer: `2`\n      },\n      {\n        type: TestcaseTypes.public,\n        program: `fibonacci(4);`,\n        score: 1,\n        answer: `3`\n      },\n      {\n        type: TestcaseTypes.public,\n        program: `fibonacci(5);`,\n        score: 1,\n        answer: `5`\n      }\n    ],\n    solutionTemplate: `function fibonacci(n) {\n      // Your answer here\n  }`,\n    type: 'programming',\n    grader: {\n      name: 'avenger',\n      id: 1\n    },\n    gradedAt: '2038-06-18T05:24:26.026Z',\n    xp: 0,\n    grade: 0,\n    maxGrade: 2,\n    maxXp: 2,\n    comments: `Good job. You are awarded the full marks!\n  \n  ----\n  ## markdown test\n  \n  # header\n  \n  **bold**\n  \n  _italics_\n  \n  * list\n  \n  1. numbered list\n  \n  - [] checkboxes\n  \n  > quote\n  \n      code\n  \n  [link to Source Academy](https://sourceacademy.nus.edu.sg)  \n  \n  ![](image-url-goes-here)`,\n    autogradingResults: [\n      {\n        resultType: 'pass'\n      },\n      {\n        resultType: 'fail',\n        expected: '8',\n        actual: '5'\n      },\n      {\n        resultType: 'error',\n        errors: [\n          {\n            errorType: 'timeout'\n          },\n          {\n            errorType: 'syntax',\n            line: 1,\n            location: 'student',\n            errorLine: 'function fibonacci(n) {',\n            errorExplanation: 'Just kidding!'\n          }\n        ]\n      }\n    ]\n  },\n  {\n    answer: `function recurse(rune, n) {\n      return n <= 1 ? rune : make_cross(recurse(rune, n - 1));\n  }`,\n    roomId: '19422033',\n    content: 'This is a runes question - there are no testcases nor autograding results.',\n    id: 1,\n    library: mockRuneLibrary,\n    prepend: '',\n    postpend: '',\n    testcases: [],\n    solutionTemplate: `function recurse(rune, n) {\n      // Your answer here\n  }`,\n    type: 'programming',\n    grader: {\n      name: 'some avenger',\n      id: 1\n    },\n    gradedAt: '2038-06-18T05:24:26.026Z',\n    xp: 0,\n    grade: 0,\n    maxGrade: 2,\n    maxXp: 2,\n    comments: `You open the Report Card, not knowing what to expect...\n  \n      ## WOW!\n      Amazing grasp of runes. We can now move on to the next assignment.\n      \n      <br/>\n      \n      Robot Dog: \\`woof\\`\n      \n      You look at the display of the robot dog.\n      \n          FEED ME\n      1. Bread\n      2. Water\n      \n      <br/>\n      \n      * I am hungry.\n      * I am thirsty.\n      \n      <br/>\n      <br/>\n          \n      New message from **Avenger**!\n      \n      > _Cadet, please meet me at Level X-05, outside the pod bay doors. There is an important mission awaiting us._\n      \n      > _May the [Source](https://sourceacademy.nus.edu.sg) be with you._\n      \n      > Best regards, Avocado A. Avenger\n      \n      #### Upcoming Tasks\n      - [] Meet Avenger Avenger at Level X-05\n      - [] Open the Pod Bay Doors`,\n    autogradingResults: []\n  }\n];\n\nexport const mockPathQuestions: Array<IProgrammingQuestion | IMCQQuestion> = [\n  {\n    answer: null,\n    roomId: null,\n    content: 'As a recap: which of the following is not a valid logic gate?',\n    choices: [\n      {\n        content: 'XOR gate',\n        hint: 'This is the exclusive-OR gate!'\n      },\n      {\n        content: 'IF gate',\n        hint: 'Correct!'\n      },\n      {\n        content: 'AND gate',\n        hint: 'This logic gate exists!'\n      },\n      {\n        content: 'OR gate',\n        hint: 'This logic gate exists!'\n      }\n    ],\n    id: 0,\n    library: mockRuneLibrary,\n    type: 'mcq',\n    solution: 1,\n    xp: 0,\n    grade: 0,\n    maxGrade: 0,\n    maxXp: 0\n  },\n  {\n    autogradingResults: [],\n    answer: null,\n    roomId: null,\n    content: `An AND gate is a digital logic gate that implements logical conjunction on its inputs. It returns a single output that is HIGH (active) iff all the inputs to the AND gate are HIGH (active).\n  \n  In this question, let us model an AND gate as a function, and treat HIGH (active) inputs as the boolean value \\`true\\` and LOW (inactive) inputs as the boolean value \\`false\\`.\n  \n  As an AND gate is not restricted to exactly two inputs, our function shall be the same. Implement the function \\`AND(inputs)\\` which takes in the list \\`inputs\\` (a list of boolean values), and returns the output of the AND gate as a boolean. You may assume the list \\`inputs\\` is of minimum length 2.\n  \n  This question makes use of the sentinel function method to throw custom errors for each testcase.`,\n    id: 1,\n    library: mockRuneLibrary,\n    prepend: `const OR = (x, y) => x || y;`,\n    postpend: `\n  const __AND = (xs) => {\n    if (AND(list(true, true)) === undefined) {\n      error('Your function is empty!');\n    } else {}\n    \n    const result = AND(xs);\n  \n    if (!is_boolean(result)) {\n      error('Your function does not return a boolean!');\n    } else {}\n    \n    if (equal(xs, list(true, false)) && result) {\n      error('Check the truth table for an AND gate again!');\n    } else if (equal(xs, list(true, true, false)) && result) {\n      error('Are you using all inputs in the list?');\n    } else if (equal(xs, list(true, true, true)) && !result) {\n      error('Are you sure your base case is correct?');\n    } else if (AND(list(true, true)) === AND(list(false, false))) {\n      error('Oi! Do not hardcode values!');\n    } else {\n      return result;\n    }\n  };`,\n    testcases: [\n      {\n        type: TestcaseTypes.public,\n        program: `__AND(list(true, false));`,\n        score: 0,\n        answer: `false`\n      },\n      {\n        type: TestcaseTypes.public,\n        program: `__AND(list(true, true, false));`,\n        score: 0,\n        answer: `false`\n      },\n      {\n        type: TestcaseTypes.public,\n        program: `__AND(list(true, OR(true, false), OR(true, true)));`,\n        score: 0,\n        answer: `true`\n      },\n      {\n        type: TestcaseTypes.hidden,\n        program: `__AND(list(true, OR(false, true), AND(list(true, false)), false));`,\n        score: 0,\n        answer: `false`\n      },\n      {\n        type: TestcaseTypes.hidden,\n        program: `__AND(list(true, OR(true, false), OR(true, AND(list(false, true))), true));`,\n        score: 0,\n        answer: `true`\n      }\n    ],\n    solutionTemplate: `function AND(inputs) {\n      // Your answer here!\n  }`,\n    type: 'programming',\n    xp: 0,\n    grade: 0,\n    maxGrade: 0,\n    maxXp: 0\n  },\n  {\n    autogradingResults: [],\n    answer: null,\n    roomId: null,\n    content: `The XOR (exclusive-OR) gate is a digital logic gate that accepts two inputs and returns a single output that is HIGH (active) iff one of the inputs are HIGH (active), but not both.\n  \n  In this question, let us model the XOR gate as a function. Implement the function \\`XOR(x, y)\\` which takes two boolean inputs \\`x\\` and \\`y\\` and which returns the output of the XOR gate as a boolean.\n  \n  This question makes use of the wrapping container method to throw custom errors for each testcase.`,\n    id: 2,\n    library: mockRuneLibrary,\n    prepend: ``,\n    postpend: `\n  const __XOR = (x, y) => {\n    if (XOR(false, false) === undefined) {\n      error('Your function is empty!');\n    } else {}\n    \n    const result = XOR(x, y);\n  \n    if (!is_boolean(result)) {\n      error('Your function does not return a boolean!');\n    } else {}\n    \n    if (((x && !y) || (y && !x)) && !result) {\n      error('Check your truth tables!');\n    } else if (XOR(false, false) === XOR(false, true)) {\n      error('Oi! Do not hardcode values!');\n    } else {\n      return result;\n    }\n  };`,\n    testcases: [\n      {\n        type: TestcaseTypes.public,\n        program: `__XOR(true, false);`,\n        score: 0,\n        answer: `true`\n      },\n      {\n        type: TestcaseTypes.public,\n        program: `__XOR(false, true);`,\n        score: 0,\n        answer: `true`\n      },\n      {\n        type: TestcaseTypes.hidden,\n        program: `__XOR(true, XOR(true, false));`,\n        score: 0,\n        answer: `false`\n      }\n    ],\n    solutionTemplate: `function XOR(x, y) {\n      // Your answer here!\n  }`,\n    type: 'programming',\n    xp: 0,\n    grade: 0,\n    maxGrade: 0,\n    maxXp: 0\n  },\n  {\n    autogradingResults: [],\n    answer: null,\n    roomId: null,\n    content: `The NOR logic gate is special in that it is an _universal logic gate_, that is to say, they can be composed to form any other logic gate.\n  \n  Implement the AND logic gate **using ONLY the NOR logic gate**, as the \\`NOR_AND(x, y)\\` function that takes in two booleans as input.\n  \n  The \\`NOR\\` function modeled after a NOR gate is provided for you - it accepts two boolean values and returns \\`true\\` iff both inputs are \\`false\\`.`,\n    id: 3,\n    library: mockRuneLibrary,\n    prepend: `\n  let counter = 0;\n  const NOR = (x, y) => {\n    counter = counter + 1;\n    return !(x || y);\n  };`,\n    postpend: `\n  const __NOR_AND = (x, y) => {\n    if (NOR_AND(false, false) === undefined) {\n      error('Your function is empty!');\n    } else {}\n    \n    counter = 0;\n    const result = NOR_AND(x, y);\n  \n    if (!is_boolean(result)) {\n      error('Your function does not return a boolean!');\n    } else {}\n    \n    if (!x && y && result) {\n      error('Check your truth tables!');\n    } else if (x && y && !result && counter > 0) {\n      error('Nope! Try again :)');\n    } else if (x && y && !result) {\n      error('...You did not use NOR and still got it wrong!');\n    } else if (x && y && result && counter !== 3) {\n      error('Did you use NOR in your solution? >:(');\n    } else if (x && !y && counter !== 6) {\n      error('Incorrect number of calls.');\n    } else {\n      return result;\n    }\n  };`,\n    testcases: [\n      {\n        type: TestcaseTypes.public,\n        program: `__NOR_AND(false, true);`,\n        score: 0,\n        answer: `false`\n      },\n      {\n        type: TestcaseTypes.public,\n        program: `__NOR_AND(true, true);`,\n        score: 0,\n        answer: `true`\n      },\n      {\n        type: TestcaseTypes.hidden,\n        program: `__NOR_AND(true, NOR_AND(false, true));`,\n        score: 0,\n        answer: `false`\n      }\n    ],\n    solutionTemplate: `function NOR_AND(x, y) {\n      // Your answer here!\n  }`,\n    type: 'programming',\n    xp: 0,\n    grade: 0,\n    maxGrade: 0,\n    maxXp: 0\n  }\n];\n\n/*\n * A few Assessments to try out in workspaces.\n */\nexport const mockAssessments: Assessment[] = [\n  {\n    category: 'Mission',\n    id: 1,\n    longSummary:\n      'This is the mission briefing. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas viverra, sem scelerisque ultricies ullamcorper, sem nibh sollicitudin enim, at ultricies sem orci eget odio. Pellentesque varius et mauris quis vestibulum. Etiam in egestas dolor. Nunc consectetur, sapien sodales accumsan convallis, lectus mi tempus ipsum, vel ornare metus turpis sed justo. Vivamus at tellus sed ex convallis commodo at in lectus. Pellentesque pharetra pulvinar sapien pellentesque facilisis. Curabitur efficitur malesuada urna sed aliquam. Quisque massa metus, aliquam in sagittis non, cursus in sem. Morbi vel nunc at nunc pharetra lobortis. Aliquam feugiat ultricies ipsum vel sollicitudin. Vivamus nulla massa, hendrerit sit amet nibh quis, porttitor convallis nisi. ',\n    missionPDF: 'www.google.com',\n    questions: mockAssessmentQuestions,\n    title: 'An Odessey to Runes'\n  },\n  {\n    category: 'Mission',\n    id: 2,\n    longSummary:\n      'This is the mission briefing. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas viverra, sem scelerisque ultricies ullamcorper, sem nibh sollicitudin enim, at ultricies sem orci eget odio. Pellentesque varius et mauris quis vestibulum. Etiam in egestas dolor. Nunc consectetur, sapien sodales accumsan convallis, lectus mi tempus ipsum, vel ornare metus turpis sed justo. Vivamus at tellus sed ex convallis commodo at in lectus. Pellentesque pharetra pulvinar sapien pellentesque facilisis. Curabitur efficitur malesuada urna sed aliquam. Quisque massa metus, aliquam in sagittis non, cursus in sem. Morbi vel nunc at nunc pharetra lobortis. Aliquam feugiat ultricies ipsum vel sollicitudin. Vivamus nulla massa, hendrerit sit amet nibh quis, porttitor convallis nisi. ',\n    missionPDF: 'www.google.com',\n    questions: mockAssessmentQuestions,\n    title: 'The Secret to Streams'\n  },\n  {\n    category: AssessmentCategories.Sidequest,\n    id: 3,\n    longSummary: `###This is the sidequest briefing.\n  \n  *Lorem ipsum* dolor sit amet, consectetur adipiscing elit.\n  \n  > Maecenas viverra, sem scelerisque ultricies ullamcorper, sem nibh sollicitudin\n  enim, at ultricies sem orci eget odio. Pellentesque varius et mauris quis\n  vestibulum.\n  \n  - Etiam in egestas dolor.\n  - Nunc consectetur, sapien sodales accumsan convallis, lectus mi tempus ipsum,\n    vel ornare metus turpis sed justo.\n  - Vivamus at tellus sed ex convallis commodo at in lectus.\n  \n  \\`\\`\\`\n  Pellentesque\n  pharetra\n  pulvinar\n  sapien\n  \\`\\`\\``,\n    missionPDF: 'www.google.com',\n    questions: mockAssessmentQuestions,\n    title: 'A sample Sidequest'\n  },\n  {\n    category: AssessmentCategories.Mission,\n    id: 4,\n    longSummary:\n      'This is the closed mission briefing. The save button should not be there. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas viverra, sem scelerisque ultricies ullamcorper, sem nibh sollicitudin enim, at ultricies sem orci eget odio. Pellentesque varius et mauris quis vestibulum. Etiam in egestas dolor. Nunc consectetur, sapien sodales accumsan convallis, lectus mi tempus ipsum, vel ornare metus turpis sed justo. Vivamus at tellus sed ex convallis commodo at in lectus. Pellentesque pharetra pulvinar sapien pellentesque facilisis. Curabitur efficitur malesuada urna sed aliquam. Quisque massa metus, aliquam in sagittis non, cursus in sem. Morbi vel nunc at nunc pharetra lobortis. Aliquam feugiat ultricies ipsum vel sollicitudin. Vivamus nulla massa, hendrerit sit amet nibh quis, porttitor convallis nisi. ',\n    missionPDF: 'www.google.com',\n    questions: mockClosedAssessmentQuestions,\n    title: 'A Closed Mission'\n  },\n  {\n    category: AssessmentCategories.Sidequest,\n    id: 5,\n    longSummary:\n      'This is the closed sidequest briefing. The save button should not exist. This is a placeholder sidequest for testing rendering of grading statuses.',\n    missionPDF: 'www.google.com',\n    questions: mockClosedAssessmentQuestions,\n    title: 'A Closed Sidequest'\n  },\n  {\n    category: AssessmentCategories.Path,\n    id: 6,\n    longSummary: `### Basic logic gates\n  \n  This path is intended to demonstrate concepts from the lecture **Logic Circuits**. You are strongly encouraged to attempt this path to check your understanding, prior to the next Studio session. For this, you will be granted a small amount of XP!\n  \n  The path comprises 4 questions and is fully autograded and guided, and there are **no private test cases** - there will be no manual review by default. Please consult your Avenger if you require assistance!</TEXT>`,\n    missionPDF: 'www.google.com',\n    questions: mockPathQuestions,\n    title: 'A sample guided path'\n  }\n];\n","import { AssessmentCategories } from '../assessment/AssessmentTypes';\nimport { Notification, NotificationTypes } from '../notificationBadge/NotificationBadgeTypes';\n\n/**\n * Deprecated, check backend for roles\n */\nexport enum Roles {\n  student = 'student',\n  trainer = 'trainer',\n  admin = 'admin'\n}\nexport type Role = keyof typeof Roles;\n\n/**\n * Mock for fetching a role, given an access token. A null\n * value is returned for invalid tokens. Fetching a particular\n * role can be simluated using an optional paramter.\n *\n * @param accessToken a valid access token for the cadet backend.\n * @param mockRole a role to mock retrieval for.\n */\nexport const mockFetchRole = (accessToken: string, role: Role = Roles.trainer): Role | null => {\n  return role;\n};\n\n/**\n * Represents the information for a student.\n * TODO move this to a separate file once API specs are confirmed.\n */\nexport type StudentInfo = {\n  id: number;\n  totalXP: number;\n};\n\nconst mockStudentInfo = [\n  {\n    id: 0,\n    totalXP: 69\n  },\n  {\n    id: 1,\n    totalXP: 1000\n  }\n];\n\n/**\n * Mock for fetching a trainer/admin's student information. A null value\n * is returned for invalid token or role.\n *\n * @param accessToken a valid access token for the cadet backend.\n */\nexport const mockFetchStudentInfo = (accessToken: string): StudentInfo[] | null => {\n  // mocks backend role fetching\n  const permittedRoles: Role[] = [Roles.admin, Roles.trainer];\n  const role: Role | null = mockFetchRole(accessToken);\n  if (role === null || !permittedRoles.includes(role)) {\n    return null;\n  } else {\n    return mockStudentInfo;\n  }\n};\n\nexport const mockNotifications: Notification[] = [\n  {\n    id: 1,\n    type: NotificationTypes.deadline,\n    assessment_id: 3,\n    assessment_type: AssessmentCategories.Sidequest,\n    assessment_title: 'The Secret to Streams'\n  },\n  {\n    id: 2,\n    type: NotificationTypes.autograded,\n    assessment_id: 4,\n    assessment_type: AssessmentCategories.Mission,\n    assessment_title: 'A Closed Mission'\n  },\n  {\n    id: 3,\n    type: NotificationTypes.graded,\n    assessment_id: 4,\n    assessment_type: AssessmentCategories.Mission,\n    assessment_title: 'A Closed Mission'\n  },\n  {\n    id: 4,\n    type: NotificationTypes.new,\n    assessment_id: 6,\n    assessment_type: AssessmentCategories.Path,\n    assessment_title: 'Basic Logic'\n  },\n  {\n    id: 5,\n    type: NotificationTypes.new,\n    assessment_id: 7,\n    assessment_type: AssessmentCategories.Mission,\n    assessment_title: 'Symphony of the Winds'\n  },\n  {\n    id: 6,\n    type: NotificationTypes.submitted,\n    submission_id: 1,\n    assessment_type: AssessmentCategories.Mission,\n    assessment_title: 'Mission 0'\n  },\n  {\n    id: 7,\n    type: NotificationTypes.submitted,\n    submission_id: 2,\n    assessment_type: AssessmentCategories.Mission,\n    assessment_title: 'Mission 1'\n  },\n  {\n    id: 8,\n    type: NotificationTypes.submitted,\n    submission_id: 3,\n    assessment_type: AssessmentCategories.Mission,\n    assessment_title: 'Mission 0'\n  }\n];\n","import { GradingSummary } from '../../features/dashboard/DashboardTypes';\nimport { Grading, GradingOverview } from '../../features/grading/GradingTypes';\nimport { Testcase, TestcaseTypes } from '../assessment/AssessmentTypes';\nimport { mockRuneLibrary } from './AssessmentMocks';\nimport { mockFetchRole, Role, Roles } from './UserMocks';\n\nexport const mockGradingOverviews: GradingOverview[] = [\n  {\n    gradeAdjustment: 0,\n    xpAdjustment: 0,\n    assessmentCategory: 'Mission',\n    assessmentId: 0,\n    assessmentName: 'Mission 0 ',\n    currentGrade: 69,\n    currentXp: 69,\n    xpBonus: 10,\n    initialGrade: 69,\n    initialXp: 69,\n    maxGrade: 100,\n    maxXp: 100,\n    studentId: 0,\n    studentName: 'Al Gorithm',\n    submissionId: 1,\n    submissionStatus: 'submitted',\n    groupName: '1D',\n    gradingStatus: 'graded',\n    questionCount: 6,\n    gradedCount: 6\n  },\n  {\n    gradeAdjustment: -2,\n    xpAdjustment: -2,\n    assessmentCategory: 'Mission',\n    assessmentId: 1,\n    assessmentName: 'Mission 1',\n    currentGrade: -2,\n    currentXp: -2,\n    xpBonus: 12,\n    initialGrade: 0,\n    initialXp: 0,\n    maxGrade: 400,\n    maxXp: 400,\n    studentId: 0,\n    studentName: 'Dee Sign',\n    submissionId: 2,\n    submissionStatus: 'submitted',\n    groupName: '1F',\n    gradingStatus: 'grading',\n    questionCount: 6,\n    gradedCount: 2\n  },\n  {\n    gradeAdjustment: 4,\n    xpAdjustment: 4,\n    assessmentCategory: 'Mission',\n    assessmentId: 0,\n    assessmentName: 'Mission 0',\n    currentGrade: 1000,\n    currentXp: 1000,\n    xpBonus: 12,\n    initialGrade: 996,\n    initialXp: 996,\n    maxGrade: 1000,\n    maxXp: 1000,\n    studentId: 1,\n    studentName: 'May Trix',\n    submissionId: 3,\n    submissionStatus: 'submitted',\n    groupName: '1F',\n    gradingStatus: 'none',\n    questionCount: 6,\n    gradedCount: 0\n  }\n];\n\n/**\n * Mock for fetching a trainer/admin's student grading information.\n * A null value is returned for invalid token or role.\n *\n * @param accessToken a valid access token for the cadet backend.\n * @param group a boolean if true, only fetches submissions from the grader's group\n */\nexport const mockFetchGradingOverview = (\n  accessToken: string,\n  group: boolean\n): GradingOverview[] | null => {\n  // mocks backend role fetching\n  const permittedRoles: Role[] = [Roles.admin, Roles.trainer];\n  const role: Role | null = mockFetchRole(accessToken);\n  if (role === null || !permittedRoles.includes(role)) {\n    return null;\n  } else {\n    return group\n      ? [mockGradingOverviews[0]]\n      : mockGradingOverviews.sort((subX: GradingOverview, subY: GradingOverview) =>\n          subX.assessmentId !== subY.assessmentId\n            ? subY.assessmentId - subX.assessmentId\n            : subY.submissionId - subX.submissionId\n        );\n  }\n};\n\nexport const mockTestcases: Testcase[] = [\n  { type: TestcaseTypes.public, program: `remainder(12, 7);`, score: 1, answer: `5` },\n  { type: TestcaseTypes.public, program: `remainder(6, 1);`, score: 2, answer: `0` },\n  { type: TestcaseTypes.private, program: `remainder(-15, 6);`, score: 2, answer: `-3` },\n  { type: TestcaseTypes.private, program: `remainder(17, 23) === 17;`, score: 2, answer: `true` }\n];\n\nconst mockGrading: Grading = [\n  {\n    question: {\n      answer: `function remainder(n, d) {\n  return (n - d) < 0 ? n : remainder(n - d, d);\n}`,\n      content: `\nHello and welcome to this assessment! This is the *0th question*.\n\n\\`\\`\\`\n>>> import this\n\\`\\`\\`\n`,\n      prepend: '// THIS IS A PREPEND',\n      postpend: '// THIS IS A POSTPEND',\n      testcases: mockTestcases,\n      roomId: null,\n      id: 0,\n      library: mockRuneLibrary,\n      solutionTemplate: '0th question mock solution template',\n      solution: `This is how the 0th question is solved. [7 points]\n\nfunction remainder(n, d) {\n  return n % d;\n}`,\n      type: 'programming',\n      maxGrade: 1000,\n      maxXp: 1000,\n      grader: {\n        name: 'avenger',\n        id: 1\n      },\n      gradedAt: '2038-06-18T05:24:26.026Z',\n      xp: 1,\n      grade: 1,\n      autogradingResults: [\n        {\n          resultType: 'pass'\n        },\n        {\n          resultType: 'fail',\n          expected: '8',\n          actual: '5'\n        },\n        {\n          resultType: 'error',\n          errors: [\n            {\n              errorType: 'timeout'\n            },\n            {\n              errorType: 'syntax',\n              line: 1,\n              location: 'student',\n              errorLine: 'function fibonacci(n) {',\n              errorExplanation: 'Just kidding!'\n            }\n          ]\n        }\n      ]\n    },\n    grade: {\n      gradeAdjustment: 0,\n      xpAdjustment: 0,\n      grade: 0,\n      xp: 0,\n      roomId: '19422040',\n      comments: `Good job. You are awarded the full marks!\n\n----\n## markdown test\n\n# header\n\n**bold**\n\n_italics_\n\n* list\n\n1. numbered list\n\n- [] checkboxes\n\n> quote\n\n    code\n\n[link to Source Academy](https://sourceacademy.nus.edu.sg)\n\n![](image-url-goes-here)\n      `,\n      grader: {\n        name: 'HARTIN MENZ',\n        id: 100\n      },\n      gradedAt: '2019-08-16T13:26:32+00:00'\n    },\n    student: {\n      name: 'Al Gorithm',\n      id: 0\n    }\n  },\n  {\n    question: {\n      prepend: '',\n      postpend: '',\n      testcases: [],\n      answer: \"This student's answer to the 1st question\",\n      roomId: null,\n      content: 'Hello and welcome to this assessment! This is the 1st question.',\n      id: 1,\n      library: mockRuneLibrary,\n      solutionTemplate: '1st question mock solution template',\n      solution: null,\n      type: 'programming',\n      maxGrade: 200,\n      maxXp: 200,\n      grader: {\n        name: 'avenger',\n        id: 1\n      },\n      gradedAt: '2038-06-18T05:24:26.026Z',\n      xp: 1,\n      grade: 1,\n      autogradingResults: [\n        {\n          resultType: 'pass'\n        },\n        {\n          resultType: 'fail',\n          expected: '8',\n          actual: '5'\n        },\n        {\n          resultType: 'error',\n          errors: [\n            {\n              errorType: 'timeout'\n            },\n            {\n              errorType: 'syntax',\n              line: 1,\n              location: 'student',\n              errorLine: 'function fibonacci(n) {',\n              errorExplanation: 'Just kidding!'\n            }\n          ]\n        }\n      ]\n    },\n    grade: {\n      gradeAdjustment: 0,\n      xpAdjustment: 0,\n      grade: 100,\n      xp: 100,\n      roomId: '19422040',\n      comments: `You open the Report Card, not knowing what to expect...\n\n## WOW!\nAmazing grasp of runes. We can now move on to the next assignment.\n\n<br/>\n\nRobot Dog: \\`woof\\`\n\nYou look at the display of the robot dog.\n\n    FEED ME\n1. Bread\n2. Water\n\n<br/>\n\n* I am hungry.\n* I am thirsty.\n\n<br/>\n<br/>\n\nNew message from **Avenger**!\n\n> _Cadet, please meet me at Level X-05, outside the pod bay doors. There is an important mission awaiting us._\n\n> _May the [Source](https://sourceacademy.nus.edu.sg) be with you._\n\n> Best regards, Avocado A. Avenger\n\n#### Upcoming Tasks\n- [] Meet Avenger Avenger at Level X-05\n- [] Open the Pod Bay Doors\n      `\n    },\n    student: {\n      name: 'Al Gorithm',\n      id: 0\n    }\n  },\n  {\n    question: {\n      // C is the answer\n      prepend: '',\n      postpend: '',\n      testcases: [],\n      answer: 3,\n      roomId: null,\n      solution: 2,\n      content:\n        'Hello and welcome to this assessment! This is the 2nd question. Oddly enough, it is an MCQ question!',\n      choices: [\n        {\n          content: 'A',\n          hint: 'hint A'\n        },\n        {\n          content: 'B',\n          hint: 'hint B'\n        },\n        {\n          content: 'C',\n          hint: 'hint C'\n        },\n        {\n          content: 'D',\n          hint: 'hint D'\n        }\n      ],\n      id: 2,\n      library: mockRuneLibrary,\n      type: 'mcq',\n      maxGrade: 100,\n      maxXp: 100,\n      grader: {\n        name: 'avenger',\n        id: 1\n      },\n      gradedAt: '2038-06-18T05:24:26.026Z',\n      xp: 1,\n      grade: 1,\n      autogradingResults: [\n        {\n          resultType: 'pass'\n        },\n        {\n          resultType: 'fail',\n          expected: '8',\n          actual: '5'\n        },\n        {\n          resultType: 'error',\n          errors: [\n            {\n              errorType: 'timeout'\n            },\n            {\n              errorType: 'syntax',\n              line: 1,\n              location: 'student',\n              errorLine: 'function fibonacci(n) {',\n              errorExplanation: 'Just kidding!'\n            }\n          ]\n        }\n      ]\n    },\n    grade: {\n      gradeAdjustment: 0,\n      xpAdjustment: 0,\n      grade: 50,\n      xp: 50,\n      roomId: '19422030'\n    },\n    student: {\n      name: 'Al Gorithm',\n      id: 0\n    }\n  }\n];\n\n/**\n * Mock for fetching a trainer/admin's student grading information.\n * A null value is returned for invalid token or role.\n *\n * @param accessToken a valid access token for the cadet backend.\n */\nexport const mockFetchGrading = (accessToken: string, submissionId: number): Grading | null => {\n  // mocks backend role fetching\n  const permittedRoles: Role[] = [Roles.admin, Roles.trainer];\n  const role: Role | null = mockFetchRole(accessToken);\n  if (role === null || !permittedRoles.includes(role)) {\n    return null;\n  } else {\n    return mockGrading;\n  }\n};\n\nexport const mockGradingSummary: GradingSummary = [\n  {\n    leaderName: 'John',\n    groupName: 'Mock Group 1',\n    ungradedMissions: 123,\n    submittedMissions: 200,\n    ungradedSidequests: 100,\n    submittedSidequests: 117\n  },\n  {\n    leaderName: 'Molly',\n    groupName: 'Mock Group 2',\n    ungradedMissions: 1232,\n    submittedMissions: 205430,\n    ungradedSidequests: 345,\n    submittedSidequests: 11547\n  },\n  {\n    leaderName: 'Lenny',\n    groupName: 'Mock Group 3',\n    ungradedMissions: 1532,\n    submittedMissions: 22200,\n    ungradedSidequests: 134500,\n    submittedSidequests: 6777\n  }\n];\n","import { GradingSummary } from '../../features/dashboard/DashboardTypes';\n\nexport const mockGradingSummary: GradingSummary = [\n  {\n    leaderName: 'John',\n    groupName: 'Mock Group 1',\n    ungradedMissions: 123,\n    submittedMissions: 200,\n    ungradedSidequests: 100,\n    submittedSidequests: 117\n  },\n  {\n    leaderName: 'Molly',\n    groupName: 'Mock Group 2',\n    ungradedMissions: 1232,\n    submittedMissions: 205430,\n    ungradedSidequests: 345,\n    submittedSidequests: 11547\n  },\n  {\n    leaderName: 'Lenny',\n    groupName: 'Mock Group 3',\n    ungradedMissions: 1532,\n    submittedMissions: 22200,\n    ungradedSidequests: 134500,\n    submittedSidequests: 6777\n  }\n];\n","import { SagaIterator } from 'redux-saga';\nimport { call, put, select, takeEvery } from 'redux-saga/effects';\n\nimport { FETCH_GROUP_GRADING_SUMMARY } from '../../features/dashboard/DashboardTypes';\nimport { Grading, GradingOverview, GradingQuestion } from '../../features/grading/GradingTypes';\nimport { store } from '../../pages/createStore';\nimport { GameState, OverallState, Role } from '../application/ApplicationTypes';\nimport {\n  ACKNOWLEDGE_NOTIFICATIONS,\n  FETCH_ASSESSMENT,\n  FETCH_AUTH,\n  FETCH_GRADING,\n  FETCH_GRADING_OVERVIEWS,\n  FETCH_NOTIFICATIONS,\n  SUBMIT_ANSWER,\n  SUBMIT_GRADING,\n  SUBMIT_GRADING_AND_CONTINUE,\n  UNSUBMIT_SUBMISSION\n} from '../application/types/SessionTypes';\nimport { FETCH_ASSESSMENT_OVERVIEWS, Question } from '../assessment/AssessmentTypes';\nimport {\n  Notification,\n  NotificationFilterFunction\n} from '../notificationBadge/NotificationBadgeTypes';\nimport { actions } from '../utils/ActionsHelper';\nimport { history } from '../utils/HistoryHelper';\nimport { showSuccessMessage, showWarningMessage } from '../utils/NotificationsHelper';\nimport { WorkspaceLocation } from '../workspace/WorkspaceTypes';\nimport { mockAssessmentOverviews, mockAssessments } from './AssessmentMocks';\nimport { mockFetchGrading, mockFetchGradingOverview } from './GradingMocks';\nimport { mockGradingSummary } from './GroupMocks';\nimport { mockNotifications } from './UserMocks';\n\nexport function* mockBackendSaga(): SagaIterator {\n  yield takeEvery(FETCH_AUTH, function* (action: ReturnType<typeof actions.fetchAuth>) {\n    const tokens = {\n      accessToken: 'accessToken',\n      refreshToken: 'refreshToken'\n    };\n    const user = {\n      name: 'DevStaff',\n      role: 'staff' as Role,\n      group: '1F',\n      story: {\n        story: 'mission-1',\n        playStory: true\n      },\n      grade: 0,\n      gameState: {} as GameState\n    };\n    store.dispatch(actions.setTokens(tokens));\n    store.dispatch(actions.setUser(user));\n    yield history.push('/academy');\n  });\n\n  yield takeEvery(FETCH_ASSESSMENT_OVERVIEWS, function* () {\n    yield put(actions.updateAssessmentOverviews([...mockAssessmentOverviews]));\n  });\n\n  yield takeEvery(FETCH_ASSESSMENT, function* (action: ReturnType<typeof actions.fetchAssessment>) {\n    const id = action.payload;\n    const assessment = mockAssessments[id - 1];\n    yield put(actions.updateAssessment({ ...assessment }));\n  });\n\n  yield takeEvery(FETCH_GRADING_OVERVIEWS, function* (\n    action: ReturnType<typeof actions.fetchGradingOverviews>\n  ) {\n    const accessToken = yield select((state: OverallState) => state.session.accessToken);\n    const filterToGroup = action.payload;\n    const gradingOverviews = yield call(() => mockFetchGradingOverview(accessToken, filterToGroup));\n    if (gradingOverviews !== null) {\n      yield put(actions.updateGradingOverviews([...gradingOverviews]));\n    }\n  });\n\n  yield takeEvery(FETCH_GRADING, function* (action: ReturnType<typeof actions.fetchGrading>) {\n    const submissionId = action.payload;\n    const accessToken = yield select((state: OverallState) => state.session.accessToken);\n    const grading = yield call(() => mockFetchGrading(accessToken, submissionId));\n    if (grading !== null) {\n      yield put(actions.updateGrading(submissionId, [...grading]));\n    }\n  });\n\n  yield takeEvery(SUBMIT_ANSWER, function* (action: ReturnType<typeof actions.submitAnswer>) {\n    const questionId = action.payload.id;\n    const answer = action.payload.answer;\n    // Now, update the answer for the question in the assessment in the store\n    const assessmentId = yield select(\n      (state: OverallState) => state.workspaces.assessment.currentAssessment!\n    );\n    const assessment = yield select((state: OverallState) =>\n      state.session.assessments.get(assessmentId)\n    );\n    const newQuestions = assessment.questions.slice().map((question: Question) => {\n      if (question.id === questionId) {\n        question.answer = answer;\n      }\n      return question;\n    });\n    const newAssessment = {\n      ...assessment,\n      questions: newQuestions\n    };\n    yield put(actions.updateAssessment(newAssessment));\n    yield call(showSuccessMessage, 'Saved!', 1000);\n    return yield put(actions.updateHasUnsavedChanges('assessment' as WorkspaceLocation, false));\n  });\n\n  yield takeEvery(UNSUBMIT_SUBMISSION, function* (\n    action: ReturnType<typeof actions.unsubmitSubmission>\n  ) {\n    const { submissionId } = action.payload;\n    const overviews: GradingOverview[] = yield select(\n      (state: OverallState) => state.session.gradingOverviews || []\n    );\n    const index = overviews.findIndex(\n      overview =>\n        overview.submissionId === submissionId && overview.submissionStatus === 'submitted'\n    );\n    if (index === -1) {\n      yield call(showWarningMessage, '400: Bad Request');\n      return;\n    }\n    const newOverviews = (overviews as GradingOverview[]).map(overview => {\n      if (overview.submissionId === submissionId) {\n        return { ...overview, submissionStatus: 'attempted' };\n      }\n      return overview;\n    });\n    yield call(showSuccessMessage, 'Unsubmitted!', 1000);\n    yield put(actions.updateGradingOverviews(newOverviews));\n  });\n\n  const sendGrade = function* (\n    action: ReturnType<typeof actions.submitGrading | typeof actions.submitGradingAndContinue>\n  ) {\n    const { submissionId, questionId, gradeAdjustment, xpAdjustment, comments } = action.payload;\n    // Now, update the grade for the question in the Grading in the store\n    const grading: Grading = yield select((state: OverallState) =>\n      state.session.gradings.get(submissionId)\n    );\n    const newGrading = grading.slice().map((gradingQuestion: GradingQuestion) => {\n      if (gradingQuestion.question.id === questionId) {\n        gradingQuestion.grade = {\n          gradeAdjustment,\n          xpAdjustment,\n          roomId: gradingQuestion.grade.roomId,\n          grade: gradingQuestion.grade.grade,\n          xp: gradingQuestion.grade.xp,\n          comments\n        };\n      }\n      return gradingQuestion;\n    });\n    yield put(actions.updateGrading(submissionId, newGrading));\n    yield call(showSuccessMessage, 'Submitted!', 1000);\n  };\n\n  const sendGradeAndContinue = function* (\n    action: ReturnType<typeof actions.submitGradingAndContinue>\n  ) {\n    const { submissionId } = action.payload;\n    yield* sendGrade(action);\n\n    const currentQuestion = yield select(\n      (state: OverallState) => state.workspaces.grading.currentQuestion\n    );\n    /**\n     * Move to next question for grading: this only works because the\n     * SUBMIT_GRADING_AND_CONTINUE Redux action is currently only\n     * used in the Grading Workspace\n     *\n     * If the questionId is out of bounds, the componentDidUpdate callback of\n     * GradingWorkspace will cause a redirect back to '/academy/grading'\n     */\n    yield history.push(`/academy/grading/${submissionId}/${(currentQuestion || 0) + 1}`);\n  };\n\n  yield takeEvery(SUBMIT_GRADING, sendGrade);\n\n  yield takeEvery(SUBMIT_GRADING_AND_CONTINUE, sendGradeAndContinue);\n\n  yield takeEvery(ACKNOWLEDGE_NOTIFICATIONS, function* (\n    action: ReturnType<typeof actions.acknowledgeNotifications>\n  ) {\n    const notificationFilter: NotificationFilterFunction | undefined = action.payload.withFilter;\n\n    const notifications: Notification[] = yield select(\n      (state: OverallState) => state.session.notifications\n    );\n\n    let notificationsToAcknowledge = notifications;\n\n    if (notificationFilter) {\n      notificationsToAcknowledge = notificationFilter(notifications);\n    }\n\n    if (notificationsToAcknowledge.length === 0) {\n      return;\n    }\n\n    const ids = notificationsToAcknowledge.map(n => n.id);\n\n    const newNotifications: Notification[] = notifications.filter(\n      notification => !ids.includes(notification.id)\n    );\n\n    yield put(actions.updateNotifications(newNotifications));\n  });\n\n  yield takeEvery(FETCH_NOTIFICATIONS, function* (\n    action: ReturnType<typeof actions.fetchNotifications>\n  ) {\n    yield put(actions.updateNotifications(mockNotifications));\n  });\n\n  yield takeEvery(FETCH_GROUP_GRADING_SUMMARY, function* () {\n    yield put(actions.updateGroupGradingSummary([...mockGradingSummary]));\n  });\n}\n","import Constants from './Constants';\n\nexport function computeEndpointUrl(providerId: string): string | undefined {\n  const ep = Constants.authProviders.get(providerId);\n  if (!ep) {\n    return undefined;\n  }\n  try {\n    const epUrl = new URL(ep.endpoint);\n    epUrl.searchParams.set('redirect_uri', computeRedirectUri(providerId)!);\n    return epUrl.toString();\n  } catch (e) {\n    // in dev, sometimes the endpoint is a dummy; allow that\n    return ep.endpoint || '';\n  }\n}\n\nexport function computeRedirectUri(providerId: string): string | undefined {\n  const ep = Constants.authProviders.get(providerId);\n  if (!ep) {\n    return undefined;\n  }\n  const port = window.location.port === '' ? '' : `:${window.location.port}`;\n  const callback = `${window.location.protocol}//${window.location.hostname}${port}/login${\n    ep.isDefault ? '' : '?provider=' + encodeURIComponent(providerId)\n  }`;\n  return callback;\n}\n\nexport function getClientId(providerId: string): string | undefined {\n  const ep = Constants.authProviders.get(providerId);\n  if (!ep) {\n    return undefined;\n  }\n  try {\n    const epUrl = new URL(ep.endpoint);\n    return epUrl.searchParams.get('client_id') || undefined;\n  } catch (e) {\n    // in dev, sometimes the endpoint is a dummy; allow that\n    return ep.endpoint || undefined;\n  }\n}\n\nexport function getDefaultProvider():\n  | [string, NonNullable<ReturnType<typeof Constants.authProviders.get>>]\n  | undefined {\n  return [...Constants.authProviders.entries()].find(([_, { isDefault }]) => isDefault);\n}\n","/*eslint no-eval: \"error\"*/\n/*eslint-env browser*/\nimport { SagaIterator } from 'redux-saga';\nimport { call, put, select, takeEvery } from 'redux-saga/effects';\n\nimport { OverallState, Role } from '../../commons/application/ApplicationTypes';\nimport {\n  Assessment,\n  AssessmentOverview,\n  AssessmentStatuses,\n  FETCH_ASSESSMENT_OVERVIEWS,\n  Question,\n  SUBMIT_ASSESSMENT\n} from '../../commons/assessment/AssessmentTypes';\nimport {\n  Notification,\n  NotificationFilterFunction\n} from '../../commons/notificationBadge/NotificationBadgeTypes';\nimport { CHANGE_CHAPTER, WorkspaceLocation } from '../../commons/workspace/WorkspaceTypes';\nimport { FETCH_GROUP_GRADING_SUMMARY } from '../../features/dashboard/DashboardTypes';\nimport { Grading, GradingOverview, GradingQuestion } from '../../features/grading/GradingTypes';\nimport {\n  CHANGE_DATE_ASSESSMENT,\n  DELETE_ASSESSMENT,\n  PUBLISH_ASSESSMENT,\n  UPLOAD_ASSESSMENT\n} from '../../features/groundControl/GroundControlTypes';\nimport { FETCH_SOURCECAST_INDEX } from '../../features/sourceRecorder/sourcecast/SourcecastTypes';\nimport { SAVE_SOURCECAST_DATA } from '../../features/sourceRecorder/SourceRecorderTypes';\nimport { DELETE_SOURCECAST_ENTRY } from '../../features/sourceRecorder/sourcereel/SourcereelTypes';\nimport {\n  ACKNOWLEDGE_NOTIFICATIONS,\n  FETCH_ASSESSMENT,\n  FETCH_AUTH,\n  FETCH_GRADING,\n  FETCH_GRADING_OVERVIEWS,\n  FETCH_NOTIFICATIONS,\n  SUBMIT_ANSWER,\n  SUBMIT_GRADING,\n  SUBMIT_GRADING_AND_CONTINUE,\n  UNSUBMIT_SUBMISSION\n} from '../application/types/SessionTypes';\nimport { actions } from '../utils/ActionsHelper';\nimport { computeRedirectUri, getClientId, getDefaultProvider } from '../utils/AuthHelper';\nimport { history } from '../utils/HistoryHelper';\nimport { showSuccessMessage, showWarningMessage } from '../utils/NotificationsHelper';\nimport {\n  changeChapter,\n  changeDateAssessment,\n  deleteAssessment,\n  deleteSourcecastEntry,\n  getAssessment,\n  getAssessmentOverviews,\n  getGrading,\n  getGradingOverviews,\n  getGradingSummary,\n  getNotifications,\n  getSourcecastIndex,\n  getUser,\n  handleResponseError,\n  postAcknowledgeNotifications,\n  postAnswer,\n  postAssessment,\n  postAuth,\n  postGrading,\n  postSourcecast,\n  postUnsubmit,\n  publishAssessment,\n  uploadAssessment\n} from './RequestsSaga';\n\nfunction* BackendSaga(): SagaIterator {\n  yield takeEvery(FETCH_AUTH, function* (action: ReturnType<typeof actions.fetchAuth>) {\n    const { code, providerId: payloadProviderId } = action.payload;\n    const providerId = payloadProviderId || (getDefaultProvider() || [null])[0];\n    if (!providerId) {\n      yield call(\n        showWarningMessage,\n        'Could not log in; invalid provider or no providers configured.'\n      );\n      return yield history.push('/');\n    }\n    const clientId = getClientId(providerId);\n    const redirectUrl = computeRedirectUri(providerId);\n    const tokens = yield call(postAuth, code, providerId, clientId, redirectUrl);\n    if (!tokens) {\n      return yield history.push('/');\n    }\n\n    const user = yield call(getUser, tokens);\n    if (!user) {\n      return yield history.push('/');\n    }\n\n    // Old: Use dispatch instead of saga's put to guarantee the reducer has\n    // finished setting values in the state before /academy begins rendering\n    // New: Changed to yield put\n    yield put(actions.setTokens(tokens));\n    yield put(actions.setUser(user));\n    yield history.push('/academy');\n  });\n\n  yield takeEvery(FETCH_ASSESSMENT_OVERVIEWS, function* () {\n    const tokens = yield select((state: OverallState) => ({\n      accessToken: state.session.accessToken,\n      refreshToken: state.session.refreshToken\n    }));\n    const assessmentOverviews = yield call(getAssessmentOverviews, tokens);\n    if (assessmentOverviews) {\n      yield put(actions.updateAssessmentOverviews(assessmentOverviews));\n    }\n  });\n\n  yield takeEvery(FETCH_ASSESSMENT, function* (action: ReturnType<typeof actions.fetchAssessment>) {\n    const tokens = yield select((state: OverallState) => ({\n      accessToken: state.session.accessToken,\n      refreshToken: state.session.refreshToken\n    }));\n    const id = action.payload;\n    const assessment: Assessment = yield call(getAssessment, id, tokens);\n    if (assessment) {\n      yield put(actions.updateAssessment(assessment));\n    }\n  });\n\n  yield takeEvery(SUBMIT_ANSWER, function* (action: ReturnType<typeof actions.submitAnswer>) {\n    const role = yield select((state: OverallState) => state.session.role!);\n    if (role !== Role.Student) {\n      return yield call(showWarningMessage, 'Answer rejected - only students can submit answers.');\n    }\n\n    const tokens = yield select((state: OverallState) => ({\n      accessToken: state.session.accessToken,\n      refreshToken: state.session.refreshToken\n    }));\n    const questionId = action.payload.id;\n    const answer = action.payload.answer;\n    const resp = yield call(postAnswer, questionId, answer, tokens);\n\n    const codes: Map<number, string> = new Map([\n      [400, \"Answer rejected - can't save an empty answer.\"],\n      [403, 'Answer rejected - assessment not open or already finalised.']\n    ]);\n    if (!resp || !resp.ok) {\n      yield handleResponseError(resp, codes);\n      return;\n    }\n\n    yield call(showSuccessMessage, 'Saved!', 1000);\n    // Now, update the answer for the question in the assessment in the store\n    const assessmentId = yield select(\n      (state: OverallState) => state.workspaces.assessment.currentAssessment!\n    );\n    const assessment = yield select((state: OverallState) =>\n      state.session.assessments.get(assessmentId)\n    );\n    const newQuestions = assessment.questions.slice().map((question: Question) => {\n      if (question.id === questionId) {\n        return { ...question, answer };\n      }\n      return question;\n    });\n    const newAssessment = {\n      ...assessment,\n      questions: newQuestions\n    };\n    yield put(actions.updateAssessment(newAssessment));\n    return yield put(actions.updateHasUnsavedChanges('assessment' as WorkspaceLocation, false));\n  });\n\n  yield takeEvery(SUBMIT_ASSESSMENT, function* (\n    action: ReturnType<typeof actions.submitAssessment>\n  ) {\n    const role: Role = yield select((state: OverallState) => state.session.role);\n    if (role !== Role.Student) {\n      return yield call(\n        showWarningMessage,\n        'Submission rejected - only students can submit assessments.'\n      );\n    }\n\n    const tokens = yield select((state: OverallState) => ({\n      accessToken: state.session.accessToken,\n      refreshToken: state.session.refreshToken\n    }));\n    const assessmentId = action.payload;\n    const resp = yield call(postAssessment, assessmentId, tokens);\n\n    const codes: Map<number, string> = new Map([\n      [400, 'Not allowed to finalise - some questions are unattempted.'],\n      [403, 'Not allowed to finalise - assessment not open or already finalised.']\n    ]);\n    if (!resp || !resp.ok) {\n      yield handleResponseError(resp, codes);\n      return;\n    }\n\n    yield call(showSuccessMessage, 'Submitted!', 2000);\n    // Now, update the status of the assessment overview in the store\n    const overviews: AssessmentOverview[] = yield select(\n      (state: OverallState) => state.session.assessmentOverviews\n    );\n    const newOverviews = overviews.map(overview => {\n      if (overview.id === assessmentId) {\n        return { ...overview, status: AssessmentStatuses.submitted };\n      }\n      return overview;\n    });\n    return yield put(actions.updateAssessmentOverviews(newOverviews));\n  });\n\n  yield takeEvery(FETCH_GRADING_OVERVIEWS, function* (\n    action: ReturnType<typeof actions.fetchGradingOverviews>\n  ) {\n    const tokens = yield select((state: OverallState) => ({\n      accessToken: state.session.accessToken,\n      refreshToken: state.session.refreshToken\n    }));\n\n    const filterToGroup = action.payload;\n\n    const gradingOverviews = yield call(getGradingOverviews, tokens, filterToGroup);\n    if (gradingOverviews) {\n      yield put(actions.updateGradingOverviews(gradingOverviews));\n    }\n  });\n\n  yield takeEvery(FETCH_GRADING, function* (action: ReturnType<typeof actions.fetchGrading>) {\n    const tokens = yield select((state: OverallState) => ({\n      accessToken: state.session.accessToken,\n      refreshToken: state.session.refreshToken\n    }));\n    const id = action.payload;\n    const grading = yield call(getGrading, id, tokens);\n    if (grading) {\n      yield put(actions.updateGrading(id, grading));\n    }\n  });\n\n  /**\n   * Unsubmits the submission and updates the grading overviews of the new status.\n   */\n  yield takeEvery(UNSUBMIT_SUBMISSION, function* (\n    action: ReturnType<typeof actions.unsubmitSubmission>\n  ) {\n    const tokens = yield select((state: OverallState) => ({\n      accessToken: state.session.accessToken,\n      refreshToken: state.session.refreshToken\n    }));\n    const { submissionId } = action.payload;\n\n    const resp: Response = yield postUnsubmit(submissionId, tokens);\n\n    const codes: Map<number, string> = new Map([\n      [400, 'Not allowed to unsubmit - submission incomplete or not submitted.'],\n      [403, \"Not allowed to unsubmit - not this student's Avenger or an Admin.\"]\n    ]);\n    if (!resp || !resp.ok) {\n      yield handleResponseError(resp, codes);\n      return;\n    }\n\n    const overviews = yield select((state: OverallState) => state.session.gradingOverviews || []);\n    const newOverviews = (overviews as GradingOverview[]).map(overview => {\n      if (overview.submissionId === submissionId) {\n        return { ...overview, submissionStatus: 'attempted' };\n      }\n      return overview;\n    });\n    yield call(showSuccessMessage, 'Unsubmit successful', 1000);\n    yield put(actions.updateGradingOverviews(newOverviews));\n  });\n\n  const sendGrade = function* (\n    action:\n      | ReturnType<typeof actions.submitGrading>\n      | ReturnType<typeof actions.submitGradingAndContinue>\n  ) {\n    const role = yield select((state: OverallState) => state.session.role!);\n    if (role === Role.Student) {\n      return yield call(showWarningMessage, 'Only staff can submit answers.');\n    }\n    const { submissionId, questionId, gradeAdjustment, xpAdjustment, comments } = action.payload;\n    const tokens = yield select((state: OverallState) => ({\n      accessToken: state.session.accessToken,\n      refreshToken: state.session.refreshToken\n    }));\n    const resp = yield postGrading(\n      submissionId,\n      questionId,\n      gradeAdjustment,\n      xpAdjustment,\n      tokens,\n      comments\n    );\n\n    const codes: Map<number, string> = new Map([\n      [400, 'Grading rejected - missing permissions or invalid grade parameters.'],\n      [405, 'Not allowed to grade - submission incomplete or not submitted.']\n    ]);\n    if (!resp || !resp.ok) {\n      yield handleResponseError(resp, codes);\n      return;\n    }\n\n    yield call(showSuccessMessage, 'Submitted!', 1000);\n    // Now, update the grade for the question in the Grading in the store\n    const grading: Grading = yield select((state: OverallState) =>\n      state.session.gradings.get(submissionId)\n    );\n    const newGrading = grading.slice().map((gradingQuestion: GradingQuestion) => {\n      if (gradingQuestion.question.id === questionId) {\n        gradingQuestion.grade = {\n          gradeAdjustment,\n          xpAdjustment,\n          roomId: gradingQuestion.grade.roomId,\n          grade: gradingQuestion.grade.grade,\n          xp: gradingQuestion.grade.xp,\n          comments\n        };\n      }\n      return gradingQuestion;\n    });\n    yield put(actions.updateGrading(submissionId, newGrading));\n  };\n\n  const sendGradeAndContinue = function* (\n    action: ReturnType<typeof actions.submitGradingAndContinue>\n  ) {\n    const { submissionId } = action.payload;\n    yield* sendGrade(action);\n\n    const currentQuestion = yield select(\n      (state: OverallState) => state.workspaces.grading.currentQuestion\n    );\n    /**\n     * Move to next question for grading: this only works because the\n     * SUBMIT_GRADING_AND_CONTINUE Redux action is currently only\n     * used in the Grading Workspace\n     *\n     * If the questionId is out of bounds, the componentDidUpdate callback of\n     * GradingWorkspace will cause a redirect back to '/academy/grading'\n     */\n    yield history.push(`/academy/grading/${submissionId}/${(currentQuestion || 0) + 1}`);\n  };\n\n  yield takeEvery(SUBMIT_GRADING, sendGrade);\n\n  yield takeEvery(SUBMIT_GRADING_AND_CONTINUE, sendGradeAndContinue);\n\n  yield takeEvery(FETCH_NOTIFICATIONS, function* (\n    action: ReturnType<typeof actions.fetchNotifications>\n  ) {\n    const tokens = yield select((state: OverallState) => ({\n      accessToken: state.session.accessToken,\n      refreshToken: state.session.refreshToken\n    }));\n\n    const notifications = yield call(getNotifications, tokens);\n\n    yield put(actions.updateNotifications(notifications));\n  });\n\n  yield takeEvery(ACKNOWLEDGE_NOTIFICATIONS, function* (\n    action: ReturnType<typeof actions.acknowledgeNotifications>\n  ) {\n    const tokens = yield select((state: OverallState) => ({\n      accessToken: state.session.accessToken,\n      refreshToken: state.session.refreshToken\n    }));\n\n    const notificationFilter: NotificationFilterFunction | undefined = action.payload.withFilter;\n\n    const notifications: Notification[] = yield select(\n      (state: OverallState) => state.session.notifications\n    );\n\n    let notificationsToAcknowledge = notifications;\n\n    if (notificationFilter) {\n      notificationsToAcknowledge = notificationFilter(notifications);\n    }\n\n    if (notificationsToAcknowledge.length === 0) {\n      return;\n    }\n\n    const ids = notificationsToAcknowledge.map(n => n.id);\n\n    const newNotifications: Notification[] = notifications.filter(\n      notification => !ids.includes(notification.id)\n    );\n\n    yield put(actions.updateNotifications(newNotifications));\n\n    const resp: Response | null = yield call(postAcknowledgeNotifications, tokens, ids);\n\n    if (!resp || !resp.ok) {\n      yield handleResponseError(resp);\n      return;\n    }\n  });\n\n  yield takeEvery(DELETE_SOURCECAST_ENTRY, function* (\n    action: ReturnType<typeof actions.deleteSourcecastEntry>\n  ) {\n    const role: Role = yield select((state: OverallState) => state.session.role!);\n    if (role === Role.Student) {\n      return yield call(showWarningMessage, 'Only staff can delete sourcecasts.');\n    }\n\n    const tokens = yield select((state: OverallState) => ({\n      accessToken: state.session.accessToken,\n      refreshToken: state.session.refreshToken\n    }));\n    const { id } = action.payload;\n    const resp: Response = yield deleteSourcecastEntry(id, tokens);\n\n    if (!resp || !resp.ok) {\n      yield handleResponseError(resp);\n      return;\n    }\n\n    const sourcecastIndex = yield call(getSourcecastIndex, tokens);\n    if (sourcecastIndex) {\n      yield put(actions.updateSourcecastIndex(sourcecastIndex, action.payload.workspaceLocation));\n    }\n    yield call(showSuccessMessage, 'Deleted successfully!', 1000);\n  });\n\n  yield takeEvery(FETCH_SOURCECAST_INDEX, function* (\n    action: ReturnType<typeof actions.fetchSourcecastIndex>\n  ) {\n    const tokens = yield select((state: OverallState) => ({\n      accessToken: state.session.accessToken,\n      refreshToken: state.session.refreshToken\n    }));\n    const sourcecastIndex = yield call(getSourcecastIndex, tokens);\n    if (sourcecastIndex) {\n      yield put(actions.updateSourcecastIndex(sourcecastIndex, action.payload.workspaceLocation));\n    }\n  });\n\n  yield takeEvery(SAVE_SOURCECAST_DATA, function* (\n    action: ReturnType<typeof actions.saveSourcecastData>\n  ) {\n    const role = yield select((state: OverallState) => state.session.role!);\n    if (role === Role.Student) {\n      return yield call(showWarningMessage, 'Only staff can save sourcecast.');\n    }\n    const { title, description, audio, playbackData } = action.payload;\n    const tokens = yield select((state: OverallState) => ({\n      accessToken: state.session.accessToken,\n      refreshToken: state.session.refreshToken\n    }));\n    const resp = yield postSourcecast(title, description, audio, playbackData, tokens);\n\n    if (!resp || !resp.ok) {\n      yield handleResponseError(resp, new Map());\n      return;\n    }\n\n    yield call(showSuccessMessage, 'Saved successfully!', 1000);\n    yield history.push('/sourcecast');\n  });\n\n  yield takeEvery(CHANGE_CHAPTER, function* (action: ReturnType<typeof actions.changeChapter>) {\n    const tokens = yield select((state: OverallState) => ({\n      accessToken: state.session.accessToken,\n      refreshToken: state.session.refreshToken\n    }));\n\n    const chapter = action.payload;\n    const resp: Response = yield call(changeChapter, chapter.chapter, chapter.variant, tokens);\n\n    if (!resp || !resp.ok) {\n      yield handleResponseError(resp);\n      return;\n    }\n\n    yield put(actions.updateChapter(chapter.chapter, chapter.variant));\n    yield call(showSuccessMessage, 'Updated successfully!', 1000);\n  });\n\n  yield takeEvery(FETCH_GROUP_GRADING_SUMMARY, function* (\n    action: ReturnType<typeof actions.fetchGroupGradingSummary>\n  ) {\n    const tokens = yield select((state: OverallState) => ({\n      accessToken: state.session.accessToken,\n      refreshToken: state.session.refreshToken\n    }));\n    const groupOverviews = yield call(getGradingSummary, tokens);\n    if (groupOverviews) {\n      yield put(actions.updateGroupGradingSummary(groupOverviews));\n    }\n  });\n\n  yield takeEvery(CHANGE_DATE_ASSESSMENT, function* (\n    action: ReturnType<typeof actions.changeDateAssessment>\n  ) {\n    const tokens = yield select((state: OverallState) => ({\n      accessToken: state.session.accessToken,\n      refreshToken: state.session.refreshToken\n    }));\n    const id = action.payload.id;\n    const closeAt = action.payload.closeAt;\n    const openAt = action.payload.openAt;\n    const respMsg: string | null = yield changeDateAssessment(id, closeAt, openAt, tokens);\n    if (respMsg == null) {\n      yield handleResponseError(respMsg);\n      return;\n    } else if (respMsg !== 'OK') {\n      yield call(showWarningMessage, respMsg, 5000);\n      return;\n    }\n\n    yield put(actions.fetchAssessmentOverviews());\n    yield call(showSuccessMessage, 'Updated successfully!', 1000);\n  });\n\n  yield takeEvery(DELETE_ASSESSMENT, function* (\n    action: ReturnType<typeof actions.deleteAssessment>\n  ) {\n    const tokens = yield select((state: OverallState) => ({\n      accessToken: state.session.accessToken,\n      refreshToken: state.session.refreshToken\n    }));\n    const id = action.payload;\n    const resp: Response = yield deleteAssessment(id, tokens);\n\n    if (!resp || !resp.ok) {\n      yield handleResponseError(resp);\n      return;\n    }\n\n    yield put(actions.fetchAssessmentOverviews());\n    yield call(showSuccessMessage, 'Deleted successfully!', 1000);\n  });\n\n  yield takeEvery(PUBLISH_ASSESSMENT, function* (\n    action: ReturnType<typeof actions.publishAssessment>\n  ) {\n    const tokens = yield select((state: OverallState) => ({\n      accessToken: state.session.accessToken,\n      refreshToken: state.session.refreshToken\n    }));\n    const id = action.payload.id;\n    const togglePublishTo = action.payload.togglePublishTo;\n    const resp: Response = yield publishAssessment(id, togglePublishTo, tokens);\n\n    if (!resp || !resp.ok) {\n      yield handleResponseError(resp);\n      return;\n    }\n\n    yield put(actions.fetchAssessmentOverviews());\n\n    if (togglePublishTo) {\n      yield call(showSuccessMessage, 'Published successfully!', 1000);\n    } else {\n      yield call(showSuccessMessage, 'Unpublished successfully!', 1000);\n    }\n  });\n\n  yield takeEvery(UPLOAD_ASSESSMENT, function* (\n    action: ReturnType<typeof actions.uploadAssessment>\n  ) {\n    const tokens = yield select((state: OverallState) => ({\n      accessToken: state.session.accessToken,\n      refreshToken: state.session.refreshToken\n    }));\n    const file = action.payload.file;\n    const forceUpdate = action.payload.forceUpdate;\n    const respMsg = yield uploadAssessment(file, tokens, forceUpdate);\n    if (!respMsg) {\n      yield handleResponseError(respMsg);\n    } else if (respMsg === 'OK') {\n      yield call(showSuccessMessage, 'Uploaded successfully!', 2000);\n    } else if (respMsg === 'Force Update OK') {\n      yield call(showSuccessMessage, 'Assessment force updated successfully!', 2000);\n    } else {\n      yield call(showWarningMessage, respMsg, 10000);\n      return;\n    }\n    yield put(actions.fetchAssessmentOverviews());\n  });\n\n  /* yield takeEvery(actionTypes.FETCH_TEST_STORIES, function*(\n    action: ReturnType<typeof actions.fetchTestStories>\n  ) {\n    // TODO: implement when stories backend is implemented\n  }); */\n\n  // Related to game, disabled for now\n  /*\n  yield takeEvery(SAVE_USER_STATE, function*(action: ReturnType<typeof actions.saveUserData>) {\n    const tokens = yield select((state: OverallState) => ({\n      accessToken: state.session.accessToken,\n      refreshToken: state.session.refreshToken\n    }));\n    const gameState: GameState = action.payload;\n    const resp = yield putUserGameState(gameState, tokens);\n    if (!resp || !resp.ok) {\n      yield handleResponseError(resp);\n      return;\n    }\n    yield put(actions.setGameState(gameState));\n  });\n  */\n}\n\nexport default BackendSaga;\n","/*eslint no-eval: \"error\"*/\n/*eslint-env browser*/\nimport { call } from 'redux-saga/effects';\n\nimport { GameState } from '../../commons/application/ApplicationTypes';\nimport { ExternalLibraryName } from '../../commons/application/types/ExternalTypes';\nimport {\n  Assessment,\n  AssessmentCategory,\n  AssessmentOverview,\n  GradingStatus,\n  IProgrammingQuestion,\n  QuestionType,\n  QuestionTypes\n} from '../../commons/assessment/AssessmentTypes';\nimport { GradingSummary } from '../../features/dashboard/DashboardTypes';\nimport { Grading, GradingOverview, GradingQuestion } from '../../features/grading/GradingTypes';\nimport { PlaybackData, SourcecastData } from '../../features/sourceRecorder/SourceRecorderTypes';\nimport { store } from '../../pages/createStore';\nimport { Notification } from '../notificationBadge/NotificationBadgeTypes';\nimport { actions } from '../utils/ActionsHelper';\nimport { castLibrary } from '../utils/CastBackend';\nimport Constants from '../utils/Constants';\nimport { showWarningMessage } from '../utils/NotificationsHelper';\n\n/**\n * @property accessToken - backend access token\n * @property errorMessage - message to showWarningMessage on failure\n * @property body - request body, for HTTP POST\n * @property noContentType - set to true when sending multipart data\n * @property noHeaderAccept - if Accept: application/json should be omitted\n * @property refreshToken - backend refresh token\n * @property shouldRefresh - if should attempt to refresh access token\n *\n * If shouldRefresh, accessToken and refreshToken are required.\n */\ntype RequestOptions = {\n  accessToken?: string;\n  errorMessage?: string;\n  body?: object;\n  noContentType?: boolean;\n  noHeaderAccept?: boolean;\n  refreshToken?: string;\n  shouldAutoLogout?: boolean;\n  shouldRefresh?: boolean;\n};\n\ntype Tokens = {\n  accessToken: string;\n  refreshToken: string;\n};\n/**\n * POST /auth\n */\nexport async function postAuth(\n  code: string,\n  providerId: string,\n  clientId?: string,\n  redirectUri?: string\n): Promise<Tokens | null> {\n  const resp = await request('auth', 'POST', {\n    body: {\n      code,\n      provider: providerId,\n      ...(clientId ? { client_id: clientId } : {}),\n      ...(redirectUri ? { redirect_uri: redirectUri } : {})\n    },\n    errorMessage: 'Could not login. Please contact the module administrator.'\n  });\n  if (!resp) {\n    return null;\n  }\n  const tokens = await resp.json();\n  return {\n    accessToken: tokens.access_token,\n    refreshToken: tokens.refresh_token\n  };\n}\n\n/**\n * POST /auth/refresh\n */\nasync function postRefresh(refreshToken: string): Promise<Tokens | null> {\n  const resp = await request('auth/refresh', 'POST', {\n    body: { refresh_token: refreshToken }\n  });\n  if (!resp) {\n    return null;\n  }\n  const tokens = await resp.json();\n  return {\n    accessToken: tokens.access_token,\n    refreshToken: tokens.refresh_token\n  };\n}\n\n/**\n * GET /user\n */\nexport async function getUser(tokens: Tokens): Promise<object | null> {\n  const resp = await request('user', 'GET', {\n    accessToken: tokens.accessToken,\n    refreshToken: tokens.refreshToken,\n    shouldRefresh: true\n  });\n  if (!resp || !resp.ok) {\n    return null;\n  }\n  return await resp.json();\n}\n\n/**\n * PUT /user/game_states/\n */\nexport async function putUserGameState(\n  gameStates: GameState,\n  tokens: Tokens\n): Promise<Response | null> {\n  const resp = await request('user/game_states/save', 'PUT', {\n    accessToken: tokens.accessToken,\n    refreshToken: tokens.refreshToken,\n    body: {\n      gameStates: JSON.stringify(gameStates)\n    }\n  });\n  return resp;\n}\n\n/**\n * GET /assessments\n */\nexport async function getAssessmentOverviews(tokens: Tokens): Promise<AssessmentOverview[] | null> {\n  const resp = await request('assessments', 'GET', {\n    accessToken: tokens.accessToken,\n    refreshToken: tokens.refreshToken,\n    shouldRefresh: true\n  });\n  if (!resp || !resp.ok) {\n    return null; // invalid accessToken _and_ refreshToken\n  }\n  const assessmentOverviews = await resp.json();\n  return assessmentOverviews.map((overview: any) => {\n    /**\n     * backend has property ->     type: 'mission' | 'sidequest' | 'path' | 'contest'\n     *              we have -> category: 'Mission' | 'Sidequest' | 'Path' | 'Contest'\n     */\n    overview.category = capitalise(overview.type);\n    delete overview.type;\n\n    overview.gradingStatus = computeGradingStatus(\n      overview.category,\n      overview.status,\n      overview.gradedCount,\n      overview.questionCount\n    );\n    delete overview.gradedCount;\n    delete overview.questionCount;\n\n    return overview as AssessmentOverview;\n  });\n}\n\n/**\n * GET /assessments/${assessmentId}\n */\nexport async function getAssessment(id: number, tokens: Tokens): Promise<Assessment | null> {\n  let resp = await request(`assessments/${id}`, 'POST', {\n    accessToken: tokens.accessToken,\n    refreshToken: tokens.refreshToken,\n    shouldAutoLogout: false,\n    shouldRefresh: true\n  });\n\n  // Attempt to load password-protected assessment\n  while (resp && resp.status === 403) {\n    const input = window.prompt('Please enter password.', '');\n    if (!input) {\n      resp = null;\n      window.history.back();\n      return null;\n    }\n\n    resp = await request(`assessments/${id}`, 'POST', {\n      accessToken: tokens.accessToken,\n      refreshToken: tokens.refreshToken,\n      body: {\n        password: input\n      },\n      shouldAutoLogout: false,\n      shouldRefresh: true\n    });\n  }\n\n  if (!resp || !resp.ok) {\n    return null;\n  }\n\n  const assessment = (await resp.json()) as Assessment;\n  // backend has property ->     type: 'mission' | 'sidequest' | 'path' | 'contest'\n  //              we have -> category: 'Mission' | 'Sidequest' | 'Path' | 'Contest'\n  assessment.category = capitalise((assessment as any).type) as AssessmentCategory;\n  delete (assessment as any).type;\n  assessment.questions = assessment.questions.map(q => {\n    if (q.type === QuestionTypes.programming) {\n      const question = q as IProgrammingQuestion;\n      question.autogradingResults = question.autogradingResults || [];\n      question.prepend = question.prepend || '';\n      question.postpend = question.postpend || '';\n      question.testcases = question.testcases || [];\n      q = question;\n    }\n\n    // If the backend returns :nil (null) for grader, then the question is not graded\n    // Delete the grader and gradedAt attributes\n    if (q.grader === null) {\n      delete q.grader;\n      delete q.gradedAt;\n    }\n\n    // Make library.external.name uppercase\n    q.library.external.name = q.library.external.name.toUpperCase() as ExternalLibraryName;\n    // Make globals into an Array of (string, value)\n    q.library.globals = Object.entries(q.library.globals as object).map(entry => {\n      try {\n        entry[1] = (window as any).eval(entry[1]);\n      } catch (e) {}\n      return entry;\n    });\n    return q;\n  });\n  return assessment;\n}\n\n/**\n * POST /assessments/question/${questionId}/submit\n */\nexport async function postAnswer(\n  id: number,\n  answer: string | number,\n  tokens: Tokens\n): Promise<Response | null> {\n  const resp = await request(`assessments/question/${id}/submit`, 'POST', {\n    accessToken: tokens.accessToken,\n    body: { answer: `${answer}` },\n    noHeaderAccept: true,\n    refreshToken: tokens.refreshToken,\n    shouldAutoLogout: false,\n    shouldRefresh: true\n  });\n  return resp;\n}\n\n/**\n * POST /assessments/${assessmentId}/submit\n */\nexport async function postAssessment(id: number, tokens: Tokens): Promise<Response | null> {\n  const resp = await request(`assessments/${id}/submit`, 'POST', {\n    accessToken: tokens.accessToken,\n    noHeaderAccept: true,\n    refreshToken: tokens.refreshToken,\n    shouldAutoLogout: false, // 400 if some questions unattempted\n    shouldRefresh: true\n  });\n  return resp;\n}\n\n/*\n * GET /grading\n * @params group - a boolean if true gets the submissions from the grader's group\n * @returns {Array} GradingOverview[]\n */\nexport async function getGradingOverviews(\n  tokens: Tokens,\n  group: boolean\n): Promise<GradingOverview[] | null> {\n  const resp = await request(`grading?group=${group}`, 'GET', {\n    accessToken: tokens.accessToken,\n    refreshToken: tokens.refreshToken,\n    shouldRefresh: true\n  });\n  if (!resp) {\n    return null; // invalid accessToken _and_ refreshToken\n  }\n  const gradingOverviews = await resp.json();\n  return gradingOverviews\n    .map((overview: any) => {\n      const gradingOverview: GradingOverview = {\n        assessmentId: overview.assessment.id,\n        assessmentName: overview.assessment.title,\n        assessmentCategory: capitalise(overview.assessment.type) as AssessmentCategory,\n        studentId: overview.student.id,\n        studentName: overview.student.name,\n        submissionId: overview.id,\n        submissionStatus: overview.status,\n        groupName: overview.student.groupName,\n        // Grade\n        initialGrade: overview.grade,\n        gradeAdjustment: overview.adjustment,\n        currentGrade: overview.grade + overview.adjustment,\n        maxGrade: overview.assessment.maxGrade,\n        gradingStatus: 'none',\n        questionCount: overview.assessment.questionCount,\n        gradedCount: overview.gradedCount,\n        // XP\n        initialXp: overview.xp,\n        xpAdjustment: overview.xpAdjustment,\n        currentXp: overview.xp + overview.xpAdjustment,\n        maxXp: overview.assessment.maxXp,\n        xpBonus: overview.xpBonus\n      };\n      gradingOverview.gradingStatus = computeGradingStatus(\n        gradingOverview.assessmentCategory,\n        gradingOverview.submissionStatus,\n        gradingOverview.gradedCount,\n        gradingOverview.questionCount\n      );\n      return gradingOverview;\n    })\n    .sort((subX: GradingOverview, subY: GradingOverview) =>\n      subX.assessmentId !== subY.assessmentId\n        ? subY.assessmentId - subX.assessmentId\n        : subY.submissionId - subX.submissionId\n    );\n}\n\n/**\n * GET /grading/${submissionId}\n * @returns {Grading}\n */\nexport async function getGrading(submissionId: number, tokens: Tokens): Promise<Grading | null> {\n  const resp = await request(`grading/${submissionId}`, 'GET', {\n    accessToken: tokens.accessToken,\n    refreshToken: tokens.refreshToken,\n    shouldRefresh: true\n  });\n  if (!resp) {\n    return null;\n  }\n  const gradingResult = await resp.json();\n  const grading: Grading = gradingResult.map((gradingQuestion: any) => {\n    const { student, question, grade } = gradingQuestion;\n\n    const result = {\n      question: {\n        answer: question.answer,\n        autogradingResults: question.autogradingResults || [],\n        choices: question.choices,\n        content: question.content,\n        roomId: null,\n        id: question.id,\n        library: castLibrary(question.library),\n        solution: gradingQuestion.solution || question.solution || null,\n        solutionTemplate: question.solutionTemplate,\n        prepend: question.prepend || '',\n        postpend: question.postpend || '',\n        testcases: question.testcases || [],\n        type: question.type as QuestionType,\n        maxGrade: question.maxGrade,\n        maxXp: question.maxXp\n      },\n      student,\n      grade: {\n        grade: grade.grade,\n        xp: grade.xp,\n        roomId: grade.roomId || '',\n        gradeAdjustment: grade.adjustment,\n        xpAdjustment: grade.xpAdjustment,\n        comments: grade.comments\n      }\n    } as GradingQuestion;\n\n    if (gradingQuestion.grade.grader !== null) {\n      result.grade.grader = gradingQuestion.grade.grader;\n      result.grade.gradedAt = gradingQuestion.grade.gradedAt;\n    }\n\n    return result;\n  });\n  return grading;\n}\n\n/**\n * POST /grading/{submissionId}/{questionId}\n */\nexport const postGrading = async (\n  submissionId: number,\n  questionId: number,\n  gradeAdjustment: number,\n  xpAdjustment: number,\n  tokens: Tokens,\n  comments?: string\n) => {\n  const resp = await request(`grading/${submissionId}/${questionId}`, 'POST', {\n    accessToken: tokens.accessToken,\n    body: {\n      grading: {\n        adjustment: gradeAdjustment,\n        xpAdjustment,\n        comments\n      }\n    },\n    noHeaderAccept: true,\n    refreshToken: tokens.refreshToken,\n    shouldAutoLogout: false,\n    shouldRefresh: true\n  });\n  return resp;\n};\n\n/**\n * POST /grading/{submissionId}/unsubmit\n */\nexport async function postUnsubmit(submissionId: number, tokens: Tokens) {\n  const resp = await request(`grading/${submissionId}/unsubmit`, 'POST', {\n    accessToken: tokens.accessToken,\n    noHeaderAccept: true,\n    refreshToken: tokens.refreshToken,\n    shouldAutoLogout: false,\n    shouldRefresh: true\n  });\n  return resp;\n}\n\n/**\n * GET /notification\n */\nexport async function getNotifications(tokens: Tokens) {\n  const resp: Response | null = await request('notification', 'GET', {\n    accessToken: tokens.accessToken,\n    refreshToken: tokens.refreshToken,\n    shouldAutoLogout: false\n  });\n  let notifications: Notification[] = [];\n\n  if (!resp || !resp.ok) {\n    return notifications;\n  }\n\n  const result = await resp.json();\n  notifications = result.map((notification: any) => {\n    return {\n      id: notification.id,\n      type: notification.type,\n      assessment_id: notification.assessment_id || undefined,\n      assessment_type: notification.assessment\n        ? capitalise(notification.assessment.type)\n        : undefined,\n      assessment_title: notification.assessment ? notification.assessment.title : undefined,\n      submission_id: notification.submission_id || undefined\n    } as Notification;\n  });\n\n  return notifications;\n}\n\n/**\n * POST /notification/acknowledge\n */\nexport async function postAcknowledgeNotifications(tokens: Tokens, ids: number[]) {\n  const resp: Response | null = await request(`notification/acknowledge`, 'POST', {\n    accessToken: tokens.accessToken,\n    refreshToken: tokens.refreshToken,\n    body: { notificationIds: ids },\n    shouldAutoLogout: false\n  });\n\n  return resp;\n}\n\n/**\n * DELETE /sourcecast\n */\nexport async function deleteSourcecastEntry(id: number, tokens: Tokens) {\n  const resp = await request(`sourcecast/${id}`, 'DELETE', {\n    accessToken: tokens.accessToken,\n    noHeaderAccept: true,\n    refreshToken: tokens.refreshToken,\n    shouldAutoLogout: false,\n    shouldRefresh: true\n  });\n  return resp;\n}\n\n/**\n * GET /sourcecast\n */\nexport async function getSourcecastIndex(tokens: Tokens): Promise<SourcecastData[] | null> {\n  const resp = await request('sourcecast', 'GET', {\n    accessToken: tokens.accessToken,\n    refreshToken: tokens.refreshToken,\n    shouldAutoLogout: false,\n    shouldRefresh: true\n  });\n  if (!resp || !resp.ok) {\n    return null;\n  }\n  const index = await resp.json();\n  return index;\n}\n\n/**\n * POST /sourcecast\n */\nexport const postSourcecast = async (\n  title: string,\n  description: string,\n  audio: Blob,\n  playbackData: PlaybackData,\n  tokens: Tokens\n) => {\n  const formData = new FormData();\n  const filename = Date.now().toString() + '.wav';\n  formData.append('sourcecast[title]', title);\n  formData.append('sourcecast[description]', description);\n  formData.append('sourcecast[audio]', audio, filename);\n  formData.append('sourcecast[playbackData]', JSON.stringify(playbackData));\n  const resp = await request(`sourcecast`, 'POST', {\n    accessToken: tokens.accessToken,\n    body: formData,\n    noContentType: true,\n    noHeaderAccept: true,\n    refreshToken: tokens.refreshToken,\n    shouldAutoLogout: false,\n    shouldRefresh: true\n  });\n  return resp;\n};\n\nexport async function changeDateAssessment(\n  id: number,\n  closeAt: string,\n  openAt: string,\n  tokens: Tokens\n) {\n  const resp = await request(`assessments/update/${id}`, 'POST', {\n    accessToken: tokens.accessToken,\n    body: { closeAt, openAt },\n    noHeaderAccept: true,\n    refreshToken: tokens.refreshToken,\n    shouldAutoLogout: false,\n    shouldRefresh: true\n  });\n  return resp ? await resp.text() : null;\n}\n\nexport async function deleteAssessment(id: number, tokens: Tokens) {\n  const resp = await request(`assessments/${id}`, 'DELETE', {\n    accessToken: tokens.accessToken,\n    noHeaderAccept: true,\n    refreshToken: tokens.refreshToken,\n    shouldAutoLogout: false,\n    shouldRefresh: true\n  });\n  return resp;\n}\n\nexport async function publishAssessment(id: number, togglePublishTo: boolean, tokens: Tokens) {\n  const resp = await request(`assessments/publish/${id}`, 'POST', {\n    accessToken: tokens.accessToken,\n    body: { togglePublishTo },\n    noHeaderAccept: true,\n    refreshToken: tokens.refreshToken,\n    shouldAutoLogout: false,\n    shouldRefresh: true\n  });\n  return resp;\n}\n\nexport const uploadAssessment = async (file: File, tokens: Tokens, forceUpdate: boolean) => {\n  const formData = new FormData();\n  formData.append('assessment[file]', file);\n  formData.append('forceUpdate', String(forceUpdate));\n  const resp = await request(`assessments`, 'POST', {\n    accessToken: tokens.accessToken,\n    body: formData,\n    noContentType: true,\n    noHeaderAccept: true,\n    refreshToken: tokens.refreshToken,\n    shouldAutoLogout: false,\n    shouldRefresh: true\n  });\n  return resp ? await resp.text() : null;\n};\n\nexport async function getGradingSummary(tokens: Tokens): Promise<GradingSummary | null> {\n  const resp = await request('grading/summary', 'GET', {\n    accessToken: tokens.accessToken,\n    refreshToken: tokens.refreshToken,\n    shouldRefresh: true\n  });\n  if (!resp || !resp.ok) {\n    return null;\n  }\n\n  return await resp.json();\n}\n\n/**\n * GET /chapter\n */\nexport async function fetchChapter(): Promise<Response | null> {\n  const resp = await request('chapter', 'GET', {\n    noHeaderAccept: true,\n    shouldAutoLogout: false,\n    shouldRefresh: true\n  });\n\n  if (!resp || !resp.ok) {\n    return null;\n  }\n\n  return await resp.json();\n}\n\n/**\n * POST /chapter/update/1\n */\nexport async function changeChapter(chapterno: number, variant: string, tokens: Tokens) {\n  const resp = await request(`chapter/update/1`, 'POST', {\n    accessToken: tokens.accessToken,\n    body: { chapterno, variant },\n    noHeaderAccept: true,\n    refreshToken: tokens.refreshToken,\n    shouldAutoLogout: false,\n    shouldRefresh: true\n  });\n  return resp;\n}\n\n/**\n * @returns {(Response|null)} Response if successful, otherwise null.\n *\n * @see @type{RequestOptions} for options to this function.\n *\n * If opts.shouldRefresh, an initial response status of < 200 or > 299 will\n * cause this function to call postRefresh to attempt to setToken with fresh\n * tokens.\n *\n * If fetch throws an error, or final response has status code < 200 or > 299,\n * this function will cause the user to logout.\n */\nasync function request(\n  path: string,\n  method: string,\n  opts: RequestOptions\n): Promise<Response | null> {\n  const headers = new Headers();\n  if (!opts.noHeaderAccept) {\n    headers.append('Accept', 'application/json');\n  }\n  if (opts.accessToken) {\n    headers.append('Authorization', `Bearer ${opts.accessToken}`);\n  }\n  const fetchOpts: any = { method, headers };\n  if (opts.body) {\n    if (opts.noContentType) {\n      // Content Type is not needed for sending multipart data\n      fetchOpts.body = opts.body;\n    } else {\n      headers.append('Content-Type', 'application/json');\n      fetchOpts.body = JSON.stringify(opts.body);\n    }\n  }\n  try {\n    const resp = await fetch(`${Constants.backendUrl}/v1/${path}`, fetchOpts);\n    // response.ok is (200 <= response.status <= 299)\n    // response.status of > 299 does not raise error; so deal with in in the try clause\n    if (opts.shouldRefresh && resp && resp.status === 401) {\n      const newTokens = await postRefresh(opts.refreshToken!);\n      store.dispatch(actions.setTokens(newTokens!));\n      const newOpts = {\n        ...opts,\n        accessToken: newTokens!.accessToken,\n        shouldRefresh: false\n      };\n      return request(path, method, newOpts);\n    }\n    if (resp && !resp.ok && opts.shouldAutoLogout === false) {\n      // this clause is mostly for SUBMIT_ANSWER; show an error message instead\n      // and ask student to manually logout, so that they have a chance to save\n      // their answers\n      return resp;\n    }\n    if (!resp || !resp.ok) {\n      throw new Error('API call failed or got non-OK response');\n    }\n    return resp;\n  } catch (e) {\n    store.dispatch(actions.logOut());\n    showWarningMessage(opts.errorMessage ? opts.errorMessage : 'Please login again.');\n    return null;\n  }\n}\n\n/**\n * Handles display of warning notifications for failed HTTP requests, i.e. those with no response\n * or a HTTP error status code (not 2xx).\n *\n * @param   {(Response|null)}     resp    Result of the failed HTTP request\n * @param   {Map<number, string>} codes   Optional Map for status codes to custom warning messages\n */\nexport function* handleResponseError(resp: Response | null, codes?: Map<number, string>) {\n  // Default: check if the response is null\n  if (!resp) {\n    yield call(showWarningMessage, \"Couldn't reach our servers. Are you online?\");\n    return;\n  }\n\n  let errorMessage: string;\n\n  // Show a generic message if the failed response is missing a status code\n  if (!resp.status) {\n    errorMessage = 'Something went wrong (received response with no status code)';\n  } else if (codes && codes.has(resp.status)) {\n    // If the optional map was supplied, check the response against it with its status code\n    errorMessage = codes.get(resp.status)!;\n  } else {\n    // Otherwise match on the status code for common status codes\n    switch (resp.status) {\n      case 401:\n        errorMessage = 'Session expired. Please login again.';\n        break;\n      default:\n        errorMessage = `Something went wrong (got ${resp.status} response)`;\n        break;\n    }\n  }\n\n  yield call(showWarningMessage, errorMessage);\n}\n\nconst capitalise = (text: string) => text.charAt(0).toUpperCase() + text.slice(1);\n\nconst computeGradingStatus = (\n  category: AssessmentCategory,\n  submissionStatus: any,\n  numGraded: number,\n  numQuestions: number\n): GradingStatus =>\n  ['Mission', 'Sidequest', 'Practical'].includes(category) && submissionStatus === 'submitted'\n    ? numGraded === 0\n      ? 'none'\n      : numGraded === numQuestions\n      ? 'graded'\n      : 'grading'\n    : 'excluded';\n","import { SagaIterator } from 'redux-saga';\nimport { call, takeEvery } from 'redux-saga/effects';\n\nimport { LOGIN } from '../application/types/SessionTypes';\nimport { actions } from '../utils/ActionsHelper';\nimport { computeEndpointUrl } from '../utils/AuthHelper';\nimport { showWarningMessage } from '../utils/NotificationsHelper';\n\nexport default function* LoginSaga(): SagaIterator {\n  yield takeEvery(LOGIN, updateLoginHref);\n}\n\nfunction* updateLoginHref({ payload: providerId }: ReturnType<typeof actions.login>) {\n  const epUrl = computeEndpointUrl(providerId);\n  if (!epUrl) {\n    yield call(showWarningMessage, 'Could not log in; invalid provider name provided.');\n    return undefined;\n  }\n  window.location.href = epUrl;\n  return undefined;\n}\n","import { Button, Classes, Dialog, IButtonProps, IDialogProps, Intent } from '@blueprintjs/core';\nimport classNames from 'classnames';\nimport * as React from 'react';\n\nexport interface ConfirmDialogProps<T> {\n  title?: string;\n  contents?: React.ReactNode;\n  choices: Array<{ key: T; label: string; intent?: Intent; props?: IButtonProps }>;\n  largeButtons?: boolean;\n  escapeResponse?: T;\n  onResponse: (response: T) => void;\n  isOpen?: boolean;\n  props?: IDialogProps;\n}\n\nexport function ConfirmDialog<T>(\n  props: ConfirmDialogProps<T>\n): React.ReactElement<ConfirmDialogProps<T>> {\n  const buttons = props.choices.map((choice, i) => (\n    <Button\n      key={i}\n      onClick={() => props.onResponse && props.onResponse(choice.key)}\n      intent={choice.intent}\n      fill={props.largeButtons}\n      className={classNames(props.largeButtons && 'large-button')}\n      {...choice.props}\n    >\n      {choice.label}\n    </Button>\n  ));\n  const { escapeResponse } = props;\n  const escapeHandler =\n    typeof escapeResponse === 'undefined'\n      ? undefined\n      : () => props.onResponse && props.onResponse(escapeResponse);\n  return (\n    <Dialog\n      className={classNames(Classes.DARK, 'ConfirmDialog')}\n      title={props.title}\n      isCloseButtonShown={typeof props.title === 'undefined' ? undefined : false}\n      canEscapeKeyClose={!!escapeHandler}\n      onClose={escapeHandler}\n      isOpen={props.isOpen}\n      {...props.props}\n    >\n      <div className={Classes.DIALOG_BODY}>{props.contents}</div>\n      <div className={Classes.DIALOG_FOOTER}>\n        {props.largeButtons && buttons}\n        {!props.largeButtons && <div className={Classes.DIALOG_FOOTER_ACTIONS}>{buttons}</div>}\n      </div>\n    </Dialog>\n  );\n}\n","import { InputGroup, Intent } from '@blueprintjs/core';\nimport * as React from 'react';\n\nimport { ConfirmDialog, ConfirmDialogProps } from './ConfirmDialog';\n\nexport interface PromptDialogProps<T>\n  extends Omit<ConfirmDialogProps<T>, 'onResponse' | 'choices'> {\n  defaultValue?: string;\n  enterResponse?: T;\n  onResponse: (buttonResponse: T, value: string) => void;\n  validationFunction?: (value: string) => boolean;\n  choices: Array<ConfirmDialogProps<T>['choices'][0] & { disableOnInvalid?: boolean }>;\n}\n\nexport function PromptDialog<T>(\n  props: PromptDialogProps<T>\n): React.ReactElement<PromptDialogProps<T>> {\n  const { enterResponse, validationFunction } = props;\n  const inputRef = React.useRef<HTMLInputElement>(null);\n  const [isValid, setIsValid] = React.useState(\n    !validationFunction || validationFunction(props.defaultValue || '')\n  );\n  React.useEffect(() => {\n    if (!inputRef.current) {\n      return;\n    }\n\n    setIsValid(!validationFunction || validationFunction(inputRef.current.value));\n  }, [validationFunction]);\n\n  const returnResponse = (buttonResponse: T) => {\n    if (\n      buttonResponse === props.escapeResponse ||\n      !validationFunction ||\n      validationFunction(inputRef.current!.value)\n    ) {\n      props.onResponse(buttonResponse, inputRef.current?.value || '');\n    }\n  };\n\n  const choices: typeof props.choices = props.choices.map(choice => ({\n    ...choice,\n    props: {\n      ...choice.props,\n      disabled: choice.disableOnInvalid && !isValid\n    }\n  }));\n  const handleEnter = enterResponse\n    ? (e: React.KeyboardEvent<HTMLInputElement>) => {\n        if (e.keyCode === 13) {\n          returnResponse(enterResponse);\n        }\n      }\n    : undefined;\n  const handleValidate = validationFunction\n    ? (e: React.ChangeEvent<HTMLInputElement>) => {\n        if (validationFunction(e.target.value) !== isValid) {\n          setIsValid(!isValid);\n        }\n      }\n    : undefined;\n  return (\n    <ConfirmDialog\n      {...props}\n      onResponse={returnResponse}\n      choices={choices}\n      contents={\n        <>\n          {props.contents}\n          <InputGroup\n            autoFocus\n            defaultValue={props.defaultValue}\n            inputRef={inputRef}\n            onKeyDown={handleEnter}\n            onChange={handleValidate}\n            intent={isValid ? Intent.NONE : Intent.DANGER}\n          />\n        </>\n      }\n    />\n  );\n}\n","import { Intent } from '@blueprintjs/core';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n\nimport { ConfirmDialog, ConfirmDialogProps } from '../dialogs/ConfirmDialog';\nimport { PromptDialog, PromptDialogProps } from '../dialogs/PromptDialog';\n\n// The below is based off the Blueprint Toaster:\n// https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/toast/toaster.tsx\n\ninterface DialogHelperState {\n  dialog: ReturnType<typeof React.createElement> | null;\n  dialogOnClose: (() => void) | null;\n}\n\nclass DialogHelper extends React.PureComponent<{}, DialogHelperState> {\n  public state: DialogHelperState = {\n    dialog: null,\n    dialogOnClose: null\n  };\n\n  public static create(): DialogHelper {\n    const containerElement = document.createElement('div');\n    document.body.appendChild(containerElement);\n    const dialogHelper = ReactDOM.render<{}>(<DialogHelper />, containerElement) as DialogHelper;\n    if (dialogHelper == null) {\n      throw new Error('Could not create DialogHelper - are you in a React lifecycle method?');\n    }\n    return dialogHelper;\n  }\n\n  public show(dialog: DialogHelperState['dialog'], onClose?: () => void) {\n    this.setState(() => ({ dialog, dialogOnClose: onClose || null }));\n  }\n\n  public close() {\n    if (this.state.dialogOnClose) {\n      this.state.dialogOnClose();\n    }\n    this.setState(() => ({ dialog: null, dialogOnClose: null }));\n  }\n\n  public render() {\n    return this.state.dialog;\n  }\n}\n\nconst singleton = DialogHelper.create();\n\nexport function showDialog(dialog: DialogHelperState['dialog'], dialogOnClose?: () => void) {\n  singleton.show(dialog, dialogOnClose);\n}\n\nexport function closeDialog() {\n  singleton.close();\n}\n\nexport function promisifyDialog<P, R>(\n  DialogComponent: React.ComponentType<P>,\n  propFn: (resolve: (response: R) => void) => P\n): Promise<R> {\n  return new Promise<R>((resolve, reject) => {\n    showDialog(<DialogComponent {...propFn(resolve)} />, reject);\n  }).finally(closeDialog);\n}\n\nexport function showConfirmDialog<T>(\n  props: Omit<ConfirmDialogProps<T>, 'onResponse'> &\n    Partial<Pick<ConfirmDialogProps<T>, 'onResponse'>>\n): Promise<T> {\n  return promisifyDialog<ConfirmDialogProps<T>, T>(ConfirmDialog, resolve => ({\n    ...props,\n    onResponse: resolve,\n    isOpen: true\n  }));\n}\n\nexport function showSimpleConfirmDialog(props: {\n  title?: string;\n  contents?: React.ReactNode;\n  positiveLabel?: string;\n  negativeLabel?: string;\n  props?: Partial<ConfirmDialogProps<boolean>>;\n}): Promise<boolean> {\n  return showConfirmDialog<boolean>({\n    title: props.title,\n    contents: props.contents,\n    choices: [\n      { key: false, label: props.negativeLabel || 'No' },\n      {\n        key: true,\n        label: props.positiveLabel || 'Yes',\n        intent: Intent.SUCCESS,\n        props: { type: 'submit' }\n      }\n    ],\n    escapeResponse: false,\n    ...props.props\n  });\n}\n\nexport function showSimplePromptDialog(props: {\n  title?: string;\n  contents?: React.ReactNode;\n  positiveLabel?: string;\n  negativeLabel?: string;\n  props?: Partial<PromptDialogProps<boolean>>;\n}) {\n  return promisifyDialog<PromptDialogProps<boolean>, { buttonResponse: boolean; value: string }>(\n    PromptDialog,\n    resolve => ({\n      title: props.title,\n      contents: props.contents,\n      choices: [\n        { key: false, label: props.negativeLabel || 'Cancel' },\n        {\n          key: true,\n          label: props.positiveLabel || 'Accept',\n          intent: Intent.SUCCESS,\n          disableOnInvalid: true\n        }\n      ],\n      escapeResponse: false,\n      enterResponse: true,\n      onResponse: (buttonResponse, value) => resolve({ buttonResponse, value }),\n      isOpen: true,\n      ...props.props\n    })\n  );\n}\n","import { Intent } from '@blueprintjs/core';\nimport * as React from 'react';\nimport { SagaIterator } from 'redux-saga';\nimport { call, put, select, takeEvery, takeLatest } from 'redux-saga/effects';\nimport { playgroundUpdatePersistenceFile } from 'src/features/playground/PlaygroundActions';\n\nimport {\n  PERSISTENCE_INITIALISE,\n  PERSISTENCE_OPEN_PICKER,\n  PERSISTENCE_SAVE_FILE,\n  PERSISTENCE_SAVE_FILE_AS,\n  PersistenceFile\n} from '../../features/persistence/PersistenceTypes';\nimport { store } from '../../pages/createStore';\nimport { OverallState } from '../application/ApplicationTypes';\nimport { ExternalLibraryName } from '../application/types/ExternalTypes';\nimport { LOGOUT_GOOGLE } from '../application/types/SessionTypes';\nimport { actions } from '../utils/ActionsHelper';\nimport Constants from '../utils/Constants';\nimport { showSimpleConfirmDialog, showSimplePromptDialog } from '../utils/DialogHelper';\nimport {\n  dismiss,\n  showMessage,\n  showSuccessMessage,\n  showWarningMessage\n} from '../utils/NotificationsHelper';\nimport { AsyncReturnType } from '../utils/TypeHelper';\n\nconst DISCOVERY_DOCS = ['https://www.googleapis.com/discovery/v1/apis/drive/v3/rest'];\nconst SCOPES = 'profile https://www.googleapis.com/auth/drive.file';\nconst UPLOAD_PATH = 'https://www.googleapis.com/upload/drive/v3/files';\n\n// Special ID value for the Google Drive API.\nconst ROOT_ID = 'root';\n\nconst MIME_SOURCE = 'text/plain';\n// const MIME_FOLDER = 'application/vnd.google-apps.folder';\n\nexport function* persistenceSaga(): SagaIterator {\n  yield takeLatest(LOGOUT_GOOGLE, function* () {\n    yield put(playgroundUpdatePersistenceFile(undefined));\n    yield call(ensureInitialised);\n    yield call([gapi.auth2.getAuthInstance(), 'signOut']);\n  });\n\n  yield takeLatest(PERSISTENCE_OPEN_PICKER, function* () {\n    let toastKey: string | undefined;\n    try {\n      yield call(ensureInitialisedAndAuthorised);\n\n      const { id, name, picked } = yield call(pickFile, 'Pick a file to open');\n      if (!picked) {\n        return;\n      }\n      const confirmOpen: boolean = yield call(showSimpleConfirmDialog, {\n        title: 'Opening from Google Drive',\n        contents: (\n          <p>\n            Opening <strong>{name}</strong> will overwrite the current contents of your workspace.\n            Are you sure?\n          </p>\n        ),\n        positiveLabel: 'Open',\n        negativeLabel: 'Cancel'\n      });\n      if (!confirmOpen) {\n        return;\n      }\n\n      toastKey = yield call(showMessage, {\n        message: 'Opening file...',\n        timeout: 0,\n        intent: Intent.PRIMARY\n      });\n\n      const { result: meta } = yield call([gapi.client.drive.files, 'get'], {\n        fileId: id,\n        fields: 'appProperties'\n      });\n      const contents = yield call([gapi.client.drive.files, 'get'], { fileId: id, alt: 'media' });\n      yield put(actions.updateEditorValue(contents.body, 'playground'));\n      yield put(actions.playgroundUpdatePersistenceFile({ id, name, lastSaved: new Date() }));\n      if (meta && meta.appProperties) {\n        yield put(\n          actions.chapterSelect(\n            parseInt(meta.appProperties.chapter || '4', 10),\n            meta.appProperties.variant || 'default',\n            'playground'\n          )\n        );\n        yield put(\n          actions.externalLibrarySelect(\n            Object.values(ExternalLibraryName).find(v => v === meta.appProperties.external) ||\n              ExternalLibraryName.NONE,\n            'playground'\n          )\n        );\n      }\n\n      yield call(showSuccessMessage, `Loaded ${name}.`, 1000);\n    } catch (ex) {\n      console.error(ex);\n      yield call(showWarningMessage, `Error while opening file.`, 1000);\n    } finally {\n      if (toastKey) {\n        dismiss(toastKey);\n      }\n    }\n  });\n\n  yield takeLatest(PERSISTENCE_SAVE_FILE_AS, function* () {\n    let toastKey: string | undefined;\n    try {\n      yield call(ensureInitialisedAndAuthorised);\n\n      const [code, chapter, variant, external] = yield select((state: OverallState) => [\n        state.workspaces.playground.editorValue,\n        state.workspaces.playground.context.chapter,\n        state.workspaces.playground.context.variant,\n        state.workspaces.playground.externalLibrary\n      ]);\n\n      const pickedDir: PickFileResult = yield call(\n        pickFile,\n        'Pick a folder, or cancel to pick the root folder',\n        {\n          pickFolders: true,\n          showFolders: true,\n          showFiles: false\n        }\n      );\n\n      const saveToDir: PersistenceFile = pickedDir.picked\n        ? pickedDir\n        : { id: ROOT_ID, name: 'My Drive' };\n\n      const pickedFile: PickFileResult = yield call(\n        pickFile,\n        `Saving to ${saveToDir.name}; pick a file to overwrite, or cancel to save as a new file`,\n        {\n          pickFolders: false,\n          showFolders: false,\n          showFiles: true,\n          rootFolder: saveToDir.id\n        }\n      );\n\n      if (pickedFile.picked) {\n        const reallyOverwrite: boolean = yield call(showSimpleConfirmDialog, {\n          title: 'Saving to Google Drive',\n          contents: (\n            <span>\n              Really overwrite <strong>{pickedFile.name}</strong>?\n            </span>\n          )\n        });\n        if (!reallyOverwrite) {\n          return;\n        }\n        yield put(actions.playgroundUpdatePersistenceFile(pickedFile));\n        yield put(actions.persistenceSaveFile(pickedFile));\n      } else {\n        const response: AsyncReturnType<typeof showSimplePromptDialog> = yield call(\n          showSimplePromptDialog,\n          {\n            title: 'Saving to Google Drive',\n            contents: (\n              <>\n                <p>\n                  Saving to folder <strong>{saveToDir.name}</strong>.\n                </p>\n                <p>Save as name?</p>\n              </>\n            ),\n            positiveLabel: 'Save as new file',\n            negativeLabel: 'Cancel',\n            props: {\n              validationFunction: value => !!value\n            }\n          }\n        );\n\n        if (!response.buttonResponse) {\n          return;\n        }\n\n        const config: IPlaygroundConfig = {\n          chapter,\n          variant,\n          external\n        };\n\n        toastKey = yield call(showMessage, {\n          message: `Saving as ${response.value}...`,\n          timeout: 0,\n          intent: Intent.PRIMARY\n        });\n\n        const newFile = yield call(\n          createFile,\n          response.value,\n          saveToDir.id,\n          MIME_SOURCE,\n          code,\n          config\n        );\n\n        yield put(actions.playgroundUpdatePersistenceFile({ ...newFile, lastSaved: new Date() }));\n        yield call(\n          showSuccessMessage,\n          `${response.value} successfully saved to Google Drive.`,\n          1000\n        );\n      }\n    } catch (ex) {\n      console.error(ex);\n      yield call(showWarningMessage, `Error while saving file.`, 1000);\n    } finally {\n      if (toastKey) {\n        dismiss(toastKey);\n      }\n    }\n  });\n\n  yield takeEvery(PERSISTENCE_SAVE_FILE, function* ({\n    payload: { id, name }\n  }: ReturnType<typeof actions.persistenceSaveFile>) {\n    let toastKey: string | undefined;\n    try {\n      toastKey = yield call(showMessage, {\n        message: `Saving as ${name}...`,\n        timeout: 0,\n        intent: Intent.PRIMARY\n      });\n\n      yield call(ensureInitialisedAndAuthorised);\n\n      const [code, chapter, variant, external] = yield select((state: OverallState) => [\n        state.workspaces.playground.editorValue,\n        state.workspaces.playground.context.chapter,\n        state.workspaces.playground.context.variant,\n        state.workspaces.playground.externalLibrary\n      ]);\n\n      const config: IPlaygroundConfig = {\n        chapter,\n        variant,\n        external\n      };\n      yield call(updateFile, id, name, MIME_SOURCE, code, config);\n      yield put(actions.playgroundUpdatePersistenceFile({ id, name, lastSaved: new Date() }));\n      yield call(showSuccessMessage, `${name} successfully saved to Google Drive.`, 1000);\n    } catch (ex) {\n      console.error(ex);\n      yield call(showWarningMessage, `Error while saving file.`, 1000);\n    } finally {\n      if (toastKey) {\n        dismiss(toastKey);\n      }\n    }\n  });\n\n  yield takeEvery(PERSISTENCE_INITIALISE, ensureInitialised);\n}\n\ninterface IPlaygroundConfig {\n  chapter: string;\n  variant: string;\n  external: string;\n}\n\n// Reason for this: we don't want to initialise and load the gapi JS until\n// it is actually needed\n// Note the following properties of Promises:\n// - It is okay to call .then() multiple times on the same promise\n// - It is okay to call resolve() multiple times (the subsequent resolves have\n//   no effect\n// See ECMA 262: https://www.ecma-international.org/ecma-262/6.0/#sec-promise-resolve-functions\n// These two properties make a Promise a good way to have a lazy singleton\n// (in this case, the singleton is not an object but the initialisation of the\n// gapi library)\nlet startInitialisation: () => void;\nconst initialisationPromise: Promise<void> = new Promise(res => {\n  startInitialisation = res;\n}).then(initialise);\n\nfunction handleUserChanged(user: gapi.auth2.GoogleUser) {\n  store.dispatch(\n    actions.setGoogleUser(user.isSignedIn() ? user.getBasicProfile().getEmail() : undefined)\n  );\n}\n\nasync function initialise() {\n  await new Promise((resolve, reject) =>\n    gapi.load('client:auth2', { callback: resolve, onerror: reject })\n  );\n  await gapi.client.init({\n    apiKey: Constants.googleApiKey,\n    clientId: Constants.googleClientId,\n    discoveryDocs: DISCOVERY_DOCS,\n    scope: SCOPES\n  });\n  gapi.auth2.getAuthInstance().currentUser.listen(handleUserChanged);\n  handleUserChanged(gapi.auth2.getAuthInstance().currentUser.get());\n}\n\nfunction* ensureInitialised() {\n  startInitialisation();\n  yield initialisationPromise;\n}\n\nfunction* ensureInitialisedAndAuthorised() {\n  yield call(ensureInitialised);\n  if (!gapi.auth2.getAuthInstance().isSignedIn.get()) {\n    yield gapi.auth2.getAuthInstance().signIn();\n  }\n}\n\ntype PickFileResult =\n  | { id: string; name: string; mimeType: string; parentId: string; picked: true }\n  | { picked: false };\n\nfunction pickFile(\n  title: string,\n  options?: {\n    pickFolders?: boolean;\n    showFolders?: boolean;\n    showFiles?: boolean;\n    rootFolder?: string;\n  }\n): Promise<PickFileResult> {\n  const pickFolders = typeof options?.pickFolders === 'undefined' ? false : options?.pickFolders;\n  const showFolders = typeof options?.showFolders === 'undefined' ? true : options?.showFolders;\n  const showFiles = typeof options?.showFiles === 'undefined' ? true : options?.showFiles;\n  return new Promise(res => {\n    gapi.load('picker', () => {\n      const view = new google.picker.DocsView(\n        showFiles ? google.picker.ViewId.DOCS : google.picker.ViewId.FOLDERS\n      );\n      if (options?.rootFolder) {\n        view.setParent(options.rootFolder);\n      }\n      view.setOwnedByMe(true);\n      view.setIncludeFolders(showFolders);\n      view.setSelectFolderEnabled(pickFolders);\n      view.setMode(google.picker.DocsViewMode.LIST);\n\n      const picker = new google.picker.PickerBuilder()\n        .setTitle(title)\n        .enableFeature(google.picker.Feature.NAV_HIDDEN)\n        .addView(view)\n        .setOAuthToken(\n          gapi.auth2.getAuthInstance().currentUser.get().getAuthResponse().access_token\n        )\n        .setAppId(Constants.googleAppId!)\n        .setDeveloperKey(Constants.googleApiKey!)\n        .setCallback((data: any) => {\n          switch (data[google.picker.Response.ACTION]) {\n            case google.picker.Action.PICKED: {\n              const { id, name, mimeType, parentId } = data.docs[0];\n              res({ id, name, mimeType, parentId, picked: true });\n              break;\n            }\n            case google.picker.Action.CANCEL: {\n              res({ picked: false });\n              break;\n            }\n          }\n        })\n        .build();\n      picker.setVisible(true);\n    });\n  });\n}\n\nfunction createFile(\n  filename: string,\n  parent: string,\n  mimeType: string,\n  contents: string = '',\n  config: IPlaygroundConfig | {}\n): Promise<PersistenceFile> {\n  const name = filename;\n  const meta = {\n    name,\n    mimeType,\n    parents: [parent],\n    appProperties: {\n      source: true,\n      ...config\n    }\n  };\n\n  const { body, headers } = createMultipartBody(meta, contents, mimeType);\n\n  return gapi.client\n    .request({\n      path: UPLOAD_PATH,\n      method: 'POST',\n      params: {\n        uploadType: 'multipart'\n      },\n      headers,\n      body\n    })\n    .then(({ result }) => ({ id: result.id, name: result.name }));\n}\n\nfunction updateFile(\n  id: string,\n  name: string,\n  mimeType: string,\n  contents: string = '',\n  config: IPlaygroundConfig | {}\n): Promise<any> {\n  const meta = {\n    name,\n    mimeType,\n    appProperties: {\n      source: true,\n      ...config\n    }\n  };\n\n  const { body, headers } = createMultipartBody(meta, contents, mimeType);\n\n  return gapi.client.request({\n    path: UPLOAD_PATH + '/' + id,\n    method: 'PATCH',\n    params: {\n      uploadType: 'multipart'\n    },\n    headers,\n    body\n  });\n}\n\nfunction createMultipartBody(\n  meta: any,\n  contents: string,\n  contentsMime: string\n): { body: string; boundary: string; headers: { [name: string]: string } } {\n  const metaJson = JSON.stringify(meta);\n  let boundary: string;\n  do {\n    boundary = generateBoundary();\n  } while (metaJson.includes(boundary) || contents.includes(boundary));\n\n  const body = `--${boundary}\nContent-Type: application/json; charset=utf-8\n\n${JSON.stringify(meta)}\n--${boundary}\nContent-Type: ${contentsMime}\n\n${contents}\n--${boundary}--\n`;\n\n  return { body, boundary, headers: { 'Content-Type': `multipart/related; boundary=${boundary}` } };\n}\n\n// Adapted from\n// https://github.com/form-data/form-data/blob/master/lib/form_data.js\n\n// Copyright (c) 2012 Felix Geisendörfer (felix@debuggable.com) and contributors\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nfunction generateBoundary(): string {\n  // This generates a 50 character boundary similar to those used by Firefox.\n  // They are optimized for boyer-moore parsing.\n  let boundary = '--------------------------';\n  for (let i = 0; i < 24; i++) {\n    boundary += Math.floor(Math.random() * 10).toString(16);\n  }\n\n  return boundary;\n}\n\n// End adapted part\n\nexport default persistenceSaga;\n","import { Variant } from 'js-slang/dist/types';\nimport { compressToEncodedURIComponent } from 'lz-string';\nimport * as qs from 'query-string';\nimport { SagaIterator } from 'redux-saga';\nimport { call, delay, put, race, select, takeEvery } from 'redux-saga/effects';\n\nimport { ExternalLibraryName } from '../../commons/application/types/ExternalTypes';\nimport {\n  changeQueryString,\n  shortenURL,\n  updateShortURL\n} from '../../features/playground/PlaygroundActions';\nimport { GENERATE_LZ_STRING, SHORTEN_URL } from '../../features/playground/PlaygroundTypes';\nimport { defaultEditorValue, OverallState } from '../application/ApplicationTypes';\nimport Constants from '../utils/Constants';\nimport { showSuccessMessage, showWarningMessage } from '../utils/NotificationsHelper';\n\nexport default function* PlaygroundSaga(): SagaIterator {\n  yield takeEvery(GENERATE_LZ_STRING, updateQueryString);\n\n  yield takeEvery(SHORTEN_URL, function* (action: ReturnType<typeof shortenURL>) {\n    const queryString = yield select((state: OverallState) => state.playground.queryString);\n    const keyword = action.payload;\n    const errorMsg = 'ERROR';\n\n    let resp, timeout;\n\n    //we catch and move on if there are errors (plus have a timeout in case)\n    try {\n      const { result, hasTimedOut } = yield race({\n        result: call(shortenURLRequest, queryString, keyword),\n        hasTimedOut: delay(10000)\n      });\n\n      resp = result;\n      timeout = hasTimedOut;\n    } catch (_) {}\n\n    if (!resp || timeout) {\n      yield put(updateShortURL(errorMsg));\n      return yield call(showWarningMessage, 'Something went wrong trying to create the link.');\n    }\n\n    if (resp.status !== 'success' && !resp.shorturl) {\n      yield put(updateShortURL(errorMsg));\n      return yield call(showWarningMessage, resp.message);\n    }\n\n    if (resp.status !== 'success') {\n      yield call(showSuccessMessage, resp.message);\n    }\n    yield put(updateShortURL(resp.shorturl));\n  });\n}\n\nfunction* updateQueryString() {\n  const code: string | null = yield select(\n    (state: OverallState) => state.workspaces.playground.editorValue\n  );\n  if (!code || code === defaultEditorValue) {\n    yield put(changeQueryString(''));\n    return;\n  }\n  const codeString: string = code as string;\n  const chapter: number = yield select(\n    (state: OverallState) => state.workspaces.playground.context.chapter\n  );\n  const variant: Variant = yield select(\n    (state: OverallState) => state.workspaces.playground.context.variant\n  );\n  const external: ExternalLibraryName = yield select(\n    (state: OverallState) => state.workspaces.playground.externalLibrary\n  );\n  const execTime: number = yield select(\n    (state: OverallState) => state.workspaces.playground.execTime\n  );\n  const newQueryString: string = qs.stringify({\n    prgrm: compressToEncodedURIComponent(codeString),\n    chap: chapter,\n    variant,\n    ext: external,\n    exec: execTime\n  });\n  yield put(changeQueryString(newQueryString));\n}\n\n/**\n * Gets short url from microservice\n * @returns {(Response|null)} Response if successful, otherwise null.\n */\nexport async function shortenURLRequest(\n  queryString: string,\n  keyword: string\n): Promise<Response | null> {\n  let url = `${window.location.protocol}//${window.location.hostname}/playground#${queryString}`;\n  if (window.location.port !== '') {\n    url = `${window.location.protocol}//${window.location.hostname}:${window.location.port}/playground#${queryString}`;\n  }\n\n  const params = {\n    signature: Constants.urlShortenerSignature,\n    action: 'shorturl',\n    format: 'json',\n    keyword,\n    url\n  };\n  const fetchOpts: RequestInit = {\n    method: 'POST',\n    body: Object.entries(params).reduce((formData, [k, v]) => {\n      formData.append(k, v!);\n      return formData;\n    }, new FormData())\n  };\n\n  const resp = await fetch(Constants.urlShortener!, fetchOpts);\n  if (!resp || !resp.ok) {\n    return null;\n  }\n\n  const res = await resp.json();\n  return res;\n}\n","import {\n  Context,\n  findDeclaration,\n  getNames,\n  interrupt,\n  parseError,\n  Result,\n  resume,\n  runInContext\n} from 'js-slang';\nimport { TRY_AGAIN } from 'js-slang/dist/constants';\nimport { InterruptedError } from 'js-slang/dist/errors/errors';\nimport { parse } from 'js-slang/dist/parser/parser';\nimport { manualToggleDebugger } from 'js-slang/dist/stdlib/inspector';\nimport { typeCheck } from 'js-slang/dist/typeChecker/typeChecker';\nimport { Variant } from 'js-slang/dist/types';\nimport { validateAndAnnotate } from 'js-slang/dist/validator/validator';\nimport { random } from 'lodash';\nimport Phaser from 'phaser';\nimport { SagaIterator } from 'redux-saga';\nimport { call, delay, put, race, select, take, takeEvery } from 'redux-saga/effects';\nimport * as Sourceror from 'sourceror';\n\nimport { PlaygroundState } from '../../features/playground/PlaygroundTypes';\nimport { OverallState, styliseChapter } from '../application/ApplicationTypes';\nimport { externalLibraries, ExternalLibraryName } from '../application/types/ExternalTypes';\nimport {\n  BEGIN_DEBUG_PAUSE,\n  BEGIN_INTERRUPT_EXECUTION,\n  DEBUG_RESET,\n  DEBUG_RESUME,\n  EVAL_TESTCASE_FAILURE,\n  EVAL_TESTCASE_SUCCESS,\n  HIGHLIGHT_LINE\n} from '../application/types/InterpreterTypes';\nimport { Testcase, TestcaseType, TestcaseTypes } from '../assessment/AssessmentTypes';\nimport { INVALID_EDITOR_SESSION_ID } from '../collabEditing/CollabEditingTypes';\nimport { Documentation } from '../documentation/Documentation';\nimport { SideContentType } from '../sideContent/SideContentTypes';\nimport { actions } from '../utils/ActionsHelper';\nimport {\n  getBlockExtraMethodsString,\n  getDifferenceInMethods,\n  getRestoreExtraMethodsString,\n  getStoreExtraMethodsString,\n  highlightLine,\n  inspectorUpdate,\n  makeElevatedContext,\n  visualiseEnv\n} from '../utils/JsSlangHelper';\nimport { showSuccessMessage, showWarningMessage } from '../utils/NotificationsHelper';\nimport { notifyProgramEvaluated } from '../workspace/WorkspaceActions';\nimport {\n  BEGIN_CLEAR_CONTEXT,\n  CHAPTER_SELECT,\n  ENSURE_LIBRARIES_LOADED,\n  EVAL_EDITOR,\n  EVAL_REPL,\n  EVAL_SILENT,\n  EVAL_TESTCASE,\n  NAV_DECLARATION,\n  PLAYGROUND_EXTERNAL_SELECT,\n  PROMPT_AUTOCOMPLETE,\n  TOGGLE_EDITOR_AUTORUN,\n  UPDATE_EDITOR_BREAKPOINTS,\n  WorkspaceLocation\n} from '../workspace/WorkspaceTypes';\n\nlet breakpoints: string[] = [];\nexport default function* WorkspaceSaga(): SagaIterator {\n  let context: Context;\n\n  yield takeEvery(EVAL_EDITOR, function* (action: ReturnType<typeof actions.evalEditor>) {\n    const workspaceLocation = action.payload.workspaceLocation;\n    const code: string = yield select((state: OverallState) => {\n      const prependCode = state.workspaces[workspaceLocation].editorPrepend;\n      const editorCode = state.workspaces[workspaceLocation].editorValue!;\n      return [prependCode, editorCode] as [string, string];\n    });\n    const [prepend, tempvalue] = code;\n    const exploded = tempvalue.split('\\n');\n    for (const i in breakpoints) {\n      if (typeof i === 'string') {\n        const index: number = +i;\n        exploded[index] = 'debugger;' + exploded[index];\n      }\n    }\n    const value = exploded.join('\\n');\n    const chapter: number = yield select(\n      (state: OverallState) => state.workspaces[workspaceLocation].context.chapter\n    );\n    const execTime: number = yield select(\n      (state: OverallState) => state.workspaces[workspaceLocation].execTime\n    );\n    const symbols: string[] = yield select(\n      (state: OverallState) => state.workspaces[workspaceLocation].context.externalSymbols\n    );\n    const globals: Array<[string, any]> = yield select(\n      (state: OverallState) => state.workspaces[workspaceLocation].globals\n    );\n    const variant: Variant = yield select(\n      (state: OverallState) => state.workspaces[workspaceLocation].context.variant\n    );\n    const library = {\n      chapter,\n      variant,\n      external: {\n        name: ExternalLibraryName.NONE,\n        symbols\n      },\n      globals\n    };\n    // End any code that is running right now.\n    yield put(actions.beginInterruptExecution(workspaceLocation));\n    // Clear the context, with the same chapter and externalSymbols as before.\n    yield put(actions.beginClearContext(library, workspaceLocation));\n    yield put(actions.clearReplOutput(workspaceLocation));\n    context = yield select((state: OverallState) => state.workspaces[workspaceLocation].context);\n\n    // Evaluate the prepend silently with a privileged context, if it exists\n    if (prepend.length) {\n      const elevatedContext = makeElevatedContext(context);\n      yield call(evalCode, prepend, elevatedContext, execTime, workspaceLocation, EVAL_SILENT);\n      // Block use of methods from privileged context\n      yield* blockExtraMethods(elevatedContext, context, execTime, workspaceLocation);\n    }\n\n    yield call(evalCode, value, context, execTime, workspaceLocation, EVAL_EDITOR);\n  });\n\n  yield takeEvery(PROMPT_AUTOCOMPLETE, function* (\n    action: ReturnType<typeof actions.promptAutocomplete>\n  ) {\n    const workspaceLocation = action.payload.workspaceLocation;\n\n    context = yield select((state: OverallState) => state.workspaces[workspaceLocation].context);\n\n    const code: string = yield select((state: OverallState) => {\n      const prependCode = state.workspaces[workspaceLocation].editorPrepend;\n      const editorCode = state.workspaces[workspaceLocation].editorValue!;\n      return [prependCode, editorCode] as [string, string];\n    });\n    const [prepend, editorValue] = code;\n\n    // Deal with prepended code\n    let autocompleteCode;\n    let prependLength = 0;\n    if (!prepend) {\n      autocompleteCode = editorValue;\n    } else {\n      prependLength = prepend.split('\\n').length;\n      autocompleteCode = prepend + '\\n' + editorValue;\n    }\n\n    const [editorNames, displaySuggestions] = yield call(\n      getNames,\n      autocompleteCode,\n      action.payload.row + prependLength,\n      action.payload.column,\n      context\n    );\n\n    if (!displaySuggestions) {\n      yield call(action.payload.callback);\n      return;\n    }\n\n    const editorSuggestions = editorNames.map((name: any) => ({\n      caption: name.name,\n      value: name.name,\n      meta: name.meta,\n      score: name.score ? name.score + 1000 : 1000 // Prioritize suggestions from code\n    }));\n\n    let chapterName = context.chapter.toString();\n    if (context.variant !== 'default') {\n      chapterName += '_' + context.variant;\n    }\n\n    const builtinSuggestions = Documentation.builtins[chapterName] || [];\n\n    const extLib = yield select(\n      (state: OverallState) => state.workspaces[workspaceLocation].externalLibrary\n    );\n\n    const extLibSuggestions = Documentation.externalLibraries[extLib] || [];\n\n    yield call(\n      action.payload.callback,\n      null,\n      editorSuggestions.concat(builtinSuggestions, extLibSuggestions)\n    );\n  });\n\n  yield takeEvery(TOGGLE_EDITOR_AUTORUN, function* (\n    action: ReturnType<typeof actions.toggleEditorAutorun>\n  ) {\n    const workspaceLocation = action.payload.workspaceLocation;\n    const isEditorAutorun = yield select(\n      (state: OverallState) => state.workspaces[workspaceLocation].isEditorAutorun\n    );\n    yield call(showWarningMessage, 'Autorun ' + (isEditorAutorun ? 'Started' : 'Stopped'), 750);\n  });\n\n  yield takeEvery(INVALID_EDITOR_SESSION_ID, function* (\n    action: ReturnType<typeof actions.invalidEditorSessionId>\n  ) {\n    yield call(showWarningMessage, 'Invalid ID Input', 1000);\n  });\n\n  yield takeEvery(EVAL_REPL, function* (action: ReturnType<typeof actions.evalRepl>) {\n    const workspaceLocation = action.payload.workspaceLocation;\n    const code: string = yield select(\n      (state: OverallState) => state.workspaces[workspaceLocation].replValue\n    );\n    const execTime: number = yield select(\n      (state: OverallState) => state.workspaces[workspaceLocation].execTime\n    );\n    yield put(actions.beginInterruptExecution(workspaceLocation));\n    yield put(actions.clearReplInput(workspaceLocation));\n    yield put(actions.sendReplInputToOutput(code, workspaceLocation));\n    context = yield select((state: OverallState) => state.workspaces[workspaceLocation].context);\n    yield call(evalCode, code, context, execTime, workspaceLocation, EVAL_REPL);\n  });\n\n  yield takeEvery(DEBUG_RESUME, function* (action: ReturnType<typeof actions.debuggerResume>) {\n    const workspaceLocation = action.payload.workspaceLocation;\n    const code: string = yield select(\n      (state: OverallState) => state.workspaces[workspaceLocation].editorValue\n    );\n    const execTime: number = yield select(\n      (state: OverallState) => state.workspaces[workspaceLocation].execTime\n    );\n    yield put(actions.beginInterruptExecution(workspaceLocation));\n    /** Clear the context, with the same chapter and externalSymbols as before. */\n    yield put(actions.clearReplOutput(workspaceLocation));\n    context = yield select((state: OverallState) => state.workspaces[workspaceLocation].context);\n    yield put(actions.highlightEditorLine([], workspaceLocation));\n    yield call(evalCode, code, context, execTime, workspaceLocation, DEBUG_RESUME);\n  });\n\n  yield takeEvery(DEBUG_RESET, function* (action: ReturnType<typeof actions.debuggerReset>) {\n    const workspaceLocation = action.payload.workspaceLocation;\n    context = yield select((state: OverallState) => state.workspaces[workspaceLocation].context);\n    yield put(actions.clearReplOutput(workspaceLocation));\n    inspectorUpdate(undefined);\n    highlightLine(undefined);\n    yield put(actions.clearReplOutput(workspaceLocation));\n    context.runtime.break = false;\n    lastDebuggerResult = undefined;\n  });\n\n  yield takeEvery(HIGHLIGHT_LINE, function* (\n    action: ReturnType<typeof actions.highlightEditorLine>\n  ) {\n    const workspaceLocation = action.payload.highlightedLines;\n    highlightLine(workspaceLocation[0]);\n    yield;\n  });\n\n  yield takeEvery(UPDATE_EDITOR_BREAKPOINTS, function* (\n    action: ReturnType<typeof actions.setEditorBreakpoint>\n  ) {\n    breakpoints = action.payload.breakpoints;\n    yield;\n  });\n\n  yield takeEvery(EVAL_TESTCASE, function* (action: ReturnType<typeof actions.evalTestcase>) {\n    const workspaceLocation = action.payload.workspaceLocation;\n    const index = action.payload.testcaseId;\n    const code: string = yield select((state: OverallState) => {\n      // tslint:disable: no-shadowed-variable\n      const prepend = state.workspaces[workspaceLocation].editorPrepend;\n      const value = state.workspaces[workspaceLocation].editorValue!;\n      const postpend = state.workspaces[workspaceLocation].editorPostpend;\n      const testcase = state.workspaces[workspaceLocation].editorTestcases[index].program;\n      return [prepend, value, postpend, testcase] as [string, string, string, string];\n      // tslint:enable: no-shadowed-variable\n    });\n    const [prepend, value, postpend, testcase] = code;\n    const type: TestcaseType = yield select(\n      (state: OverallState) => state.workspaces[workspaceLocation].editorTestcases[index].type\n    );\n    const execTime: number = yield select(\n      (state: OverallState) => state.workspaces[workspaceLocation].execTime\n    );\n\n    // Do not interrupt execution of other testcases (potential race condition)\n    // No need to clear the context, since a shard context will be used for testcase execution\n    // Do NOT clear the REPL output!\n\n    /**\n     *  Shard a new privileged context elevated to use Source chapter 4 for testcases - enables\n     *  grader programs in postpend to run as expected without raising interpreter errors\n     *  But, do not persist this context to the workspace state - this prevent students from using\n     *  this elevated context to run dis-allowed code beyond the current chapter from the REPL\n     */\n    context = yield select((state: OverallState) => state.workspaces[workspaceLocation].context);\n\n    // Execute prepend silently in privileged context\n    const elevatedContext = makeElevatedContext(context);\n    yield call(evalCode, prepend, elevatedContext, execTime, workspaceLocation, EVAL_SILENT);\n\n    // Block use of methods from privileged context using a randomly generated blocking key\n    // Then execute student program silently in the original workspace context\n    const blockKey = String(random(1048576, 68719476736));\n    yield* blockExtraMethods(elevatedContext, context, execTime, workspaceLocation, blockKey);\n    yield call(evalCode, value, context, execTime, workspaceLocation, EVAL_SILENT);\n\n    // Halt execution if the student's code in the editor results in an error\n    if (context.errors.length) {\n      return;\n    }\n\n    // Execute postpend silently back in privileged context, if it exists\n    if (postpend) {\n      // TODO: consider doing a swap. If the user has modified any of the variables,\n      // i.e. reusing any of the \"reserved\" names, prevent it from being accessed in the REPL.\n      yield* restoreExtraMethods(elevatedContext, context, execTime, workspaceLocation, blockKey);\n      yield call(evalCode, postpend, elevatedContext, execTime, workspaceLocation, EVAL_SILENT);\n      yield* blockExtraMethods(elevatedContext, context, execTime, workspaceLocation, blockKey);\n    }\n    // Finally execute the testcase function call in the privileged context\n    yield* evalTestCode(testcase, elevatedContext, execTime, workspaceLocation, index, type);\n  });\n\n  yield takeEvery(CHAPTER_SELECT, function* (action: ReturnType<typeof actions.chapterSelect>) {\n    const workspaceLocation = action.payload.workspaceLocation;\n    const newChapter = action.payload.chapter;\n    const oldVariant = yield select(\n      (state: OverallState) => state.workspaces[workspaceLocation].context.variant\n    );\n    const newVariant = action.payload.variant;\n    const oldChapter = yield select(\n      (state: OverallState) => state.workspaces[workspaceLocation].context.chapter\n    );\n\n    const symbols: string[] = yield select(\n      (state: OverallState) => state.workspaces[workspaceLocation].context.externalSymbols\n    );\n    const globals: Array<[string, any]> = yield select(\n      (state: OverallState) => state.workspaces[workspaceLocation].globals\n    );\n    if (newChapter !== oldChapter || newVariant !== oldVariant) {\n      const library = {\n        chapter: newChapter,\n        variant: newVariant,\n        external: {\n          name: ExternalLibraryName.NONE,\n          symbols\n        },\n        globals\n      };\n      yield put(actions.beginClearContext(library, workspaceLocation));\n      yield put(actions.clearReplOutput(workspaceLocation));\n      yield put(actions.debuggerReset(workspaceLocation));\n      yield call(showSuccessMessage, `Switched to ${styliseChapter(newChapter, newVariant)}`, 1000);\n    }\n  });\n\n  /**\n   * Note that the PLAYGROUND_EXTERNAL_SELECT action is made to\n   * select the library for playground.\n   * This is because assessments do not have a chapter & library select, the question\n   * specifies the chapter and library to be used.\n   *\n   * To abstract this to assessments, the state structure must be manipulated to store\n   * the external library name in a WorkspaceState (as compared to IWorkspaceManagerState).\n   *\n   * @see IWorkspaceManagerState @see WorkspaceState\n   */\n  yield takeEvery(PLAYGROUND_EXTERNAL_SELECT, function* (\n    action: ReturnType<typeof actions.externalLibrarySelect>\n  ) {\n    const workspaceLocation = action.payload.workspaceLocation;\n    const chapter = yield select(\n      (state: OverallState) => state.workspaces[workspaceLocation].context.chapter\n    );\n    const globals: Array<[string, any]> = yield select(\n      (state: OverallState) => state.workspaces[workspaceLocation].globals\n    );\n    const newExternalLibraryName = action.payload.externalLibraryName;\n    const oldExternalLibraryName = yield select(\n      (state: OverallState) => state.workspaces[workspaceLocation].externalLibrary\n    );\n    const symbols = externalLibraries.get(newExternalLibraryName)!;\n    const library = {\n      chapter,\n      external: {\n        name: newExternalLibraryName,\n        symbols\n      },\n      globals\n    };\n    if (newExternalLibraryName !== oldExternalLibraryName) {\n      yield put(actions.changeExternalLibrary(newExternalLibraryName, workspaceLocation));\n      yield put(actions.beginClearContext(library, workspaceLocation));\n      yield put(actions.clearReplOutput(workspaceLocation));\n      yield call(showSuccessMessage, `Switched to ${newExternalLibraryName} library`, 1000);\n    }\n  });\n\n  /**\n   * Ensures that the external JS libraries have been loaded by waiting\n   * with a timeout. An error message will be shown\n   * if the libraries are not loaded. This is particularly useful\n   * when dealing with external library pre-conditions, e.g when the\n   * website has just loaded and there is a need to reset the js-slang context,\n   * but it cannot be determined if the global JS files are loaded yet.\n   *\n   * The presence of JS libraries are checked using the presence of a global\n   * function \"getReadyWebGLForCanvas\", that is used in CLEAR_CONTEXT to prepare\n   * the canvas for rendering in a specific mode.\n   *\n   * @see webGLgraphics.js under 'public/externalLibs/graphics' for information on\n   * the function.\n   *\n   * @returns true if the libraries are loaded before timeout\n   * @returns false if the loading of the libraries times out\n   */\n  function* checkWebGLAvailable() {\n    function* helper() {\n      while (true) {\n        if ((window as any).getReadyWebGLForCanvas !== undefined) {\n          break;\n        }\n        yield delay(250);\n      }\n      return true;\n    }\n    // Create a race condition between the js files being loaded and a timeout.\n    const { loadedScripts, timeout } = yield race({\n      loadedScripts: call(helper),\n      timeout: delay(4000)\n    });\n    if (timeout !== undefined && loadedScripts === undefined) {\n      yield call(showWarningMessage, 'Error loading libraries', 750);\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  /**\n   * Makes a call to checkWebGLAvailable to ensure that the Graphics libraries are loaded.\n   * To abstract this to other libraries, add a call to the all() effect.\n   */\n  yield takeEvery(ENSURE_LIBRARIES_LOADED, function* (\n    action: ReturnType<typeof actions.ensureLibrariesLoaded>\n  ) {\n    yield* checkWebGLAvailable();\n  });\n\n  /**\n   * Handles the side effect of resetting the WebGL context when context is reset.\n   *\n   * @see webGLgraphics.js under 'public/externalLibs/graphics' for information on\n   * the function.\n   */\n  yield takeEvery(BEGIN_CLEAR_CONTEXT, function* (\n    action: ReturnType<typeof actions.beginClearContext>\n  ) {\n    yield* checkWebGLAvailable();\n    const externalLibraryName = action.payload.library.external.name;\n    switch (externalLibraryName) {\n      case ExternalLibraryName.RUNES:\n        (window as any).loadLib('RUNES');\n        (window as any).getReadyWebGLForCanvas('3d');\n        break;\n      case ExternalLibraryName.CURVES:\n        (window as any).loadLib('CURVES');\n        (window as any).getReadyWebGLForCanvas('curve');\n        break;\n      case ExternalLibraryName.MACHINELEARNING:\n        (window as any).loadLib('MACHINELEARNING');\n        break;\n    }\n    const globals: Array<[string, any]> = action.payload.library.globals as Array<[string, any]>;\n    for (const [key, value] of globals) {\n      window[key] = value;\n    }\n    action.payload.library.moduleParams = {\n      runes: {},\n      phaser: Phaser\n    };\n    yield put(actions.endClearContext(action.payload.library, action.payload.workspaceLocation));\n    yield undefined;\n  });\n\n  yield takeEvery(NAV_DECLARATION, function* (\n    action: ReturnType<typeof actions.navigateToDeclaration>\n  ) {\n    const workspaceLocation = action.payload.workspaceLocation;\n    const code: string = yield select(\n      (state: OverallState) => state.workspaces[workspaceLocation].editorValue\n    );\n    context = yield select((state: OverallState) => state.workspaces[workspaceLocation].context);\n\n    const result = findDeclaration(code, context, {\n      line: action.payload.cursorPosition.row + 1,\n      column: action.payload.cursorPosition.column\n    });\n    if (result) {\n      yield put(\n        actions.moveCursor(action.payload.workspaceLocation, {\n          row: result.start.line - 1,\n          column: result.start.column\n        })\n      );\n    }\n  });\n}\n\nlet lastDebuggerResult: any;\nlet lastNonDetResult: Result;\nfunction* updateInspector(workspaceLocation: WorkspaceLocation): SagaIterator {\n  try {\n    const start = lastDebuggerResult.context.runtime.nodes[0].loc.start.line - 1;\n    const end = lastDebuggerResult.context.runtime.nodes[0].loc.end.line - 1;\n    yield put(actions.highlightEditorLine([start, end], workspaceLocation));\n    inspectorUpdate(lastDebuggerResult);\n    visualiseEnv(lastDebuggerResult);\n  } catch (e) {\n    yield put(actions.highlightEditorLine([], workspaceLocation));\n    // most likely harmless, we can pretty much ignore this.\n    // half of the time this comes from execution ending or a stack overflow and\n    // the context goes missing.\n  }\n}\n\nexport function* blockExtraMethods(\n  elevatedContext: Context,\n  context: Context,\n  execTime: number,\n  workspaceLocation: WorkspaceLocation,\n  unblockKey?: string\n) {\n  // Extract additional methods available in the elevated context relative to the context\n  const toBeBlocked = getDifferenceInMethods(elevatedContext, context);\n  if (unblockKey) {\n    const storeValues = getStoreExtraMethodsString(toBeBlocked, unblockKey);\n    yield call(evalCode, storeValues, elevatedContext, execTime, workspaceLocation, EVAL_SILENT);\n  }\n\n  const nullifier = getBlockExtraMethodsString(toBeBlocked);\n  yield call(evalCode, nullifier, elevatedContext, execTime, workspaceLocation, EVAL_SILENT);\n}\n\nexport function* restoreExtraMethods(\n  elevatedContext: Context,\n  context: Context,\n  execTime: number,\n  workspaceLocation: WorkspaceLocation,\n  unblockKey: string\n) {\n  const toUnblock = getDifferenceInMethods(elevatedContext, context);\n  const restorer = getRestoreExtraMethodsString(toUnblock, unblockKey);\n  yield call(evalCode, restorer, elevatedContext, execTime, workspaceLocation, EVAL_SILENT);\n}\n\nexport function* evalCode(\n  code: string,\n  context: Context,\n  execTime: number,\n  workspaceLocation: WorkspaceLocation,\n  actionType: string\n): SagaIterator {\n  context.runtime.debuggerOn =\n    (actionType === EVAL_EDITOR || actionType === DEBUG_RESUME) && context.chapter > 2;\n  if (!context.runtime.debuggerOn && context.chapter > 2 && actionType !== EVAL_SILENT) {\n    // Interface not guaranteed to exist, e.g. mission editor.\n    inspectorUpdate(undefined); // effectively resets the interface\n  }\n\n  // Logic for execution of substitution model visualiser\n  const substIsActive: boolean = yield select(\n    (state: OverallState) => (state.playground as PlaygroundState).usingSubst\n  );\n  const substActiveAndCorrectChapter =\n    context.chapter <= 2 && workspaceLocation === 'playground' && substIsActive;\n  if (substActiveAndCorrectChapter) {\n    context.executionMethod = 'interpreter';\n    // icon to blink\n    const icon = document.getElementById(SideContentType.substVisualizer + '-icon');\n    if (icon) {\n      icon.classList.add('side-content-tab-alert');\n    }\n  }\n\n  function call_variant(variant: Variant) {\n    if (variant === 'non-det') {\n      return code.trim() === TRY_AGAIN\n        ? call(resume, lastNonDetResult)\n        : call(runInContext, code, context, {\n            executionMethod: 'interpreter',\n            originalMaxExecTime: execTime,\n            useSubst: substActiveAndCorrectChapter\n          });\n    } else if (variant === 'lazy') {\n      return call(runInContext, code, context, {\n        scheduler: 'preemptive',\n        originalMaxExecTime: execTime,\n        useSubst: substActiveAndCorrectChapter\n      });\n    } else if (variant === 'wasm') {\n      return call(wasm_compile_and_run, code, context);\n    } else {\n      throw new Error('Unknown variant: ' + variant);\n    }\n  }\n  async function wasm_compile_and_run(wasmCode: string, wasmContext: Context): Promise<Result> {\n    return Sourceror.compile(wasmCode, wasmContext)\n      .then((wasmModule: WebAssembly.Module) => Sourceror.run(wasmModule, wasmContext))\n      .then(\n        (returnedValue: any) => ({ status: 'finished', context, value: returnedValue }),\n        _ => ({ status: 'error' })\n      );\n  }\n\n  const isNonDet: boolean = context.variant === 'non-det';\n  const isLazy: boolean = context.variant === 'lazy';\n  const isWasm: boolean = context.variant === 'wasm';\n  const { result, interrupted, paused } = yield race({\n    result:\n      actionType === DEBUG_RESUME\n        ? call(resume, lastDebuggerResult)\n        : isNonDet || isLazy || isWasm\n        ? call_variant(context.variant)\n        : call(runInContext, code, context, {\n            scheduler: 'preemptive',\n            originalMaxExecTime: execTime,\n            useSubst: substActiveAndCorrectChapter\n          }),\n\n    /**\n     * A BEGIN_INTERRUPT_EXECUTION signals the beginning of an interruption,\n     * i.e the trigger for the interpreter to interrupt execution.\n     */\n    interrupted: take(BEGIN_INTERRUPT_EXECUTION),\n    paused: take(BEGIN_DEBUG_PAUSE)\n  });\n\n  if (interrupted) {\n    interrupt(context);\n    /* Redundancy, added ensure that interruption results in an error. */\n    context.errors.push(new InterruptedError(context.runtime.nodes[0]));\n    yield put(actions.debuggerReset(workspaceLocation));\n    yield put(actions.endInterruptExecution(workspaceLocation));\n    yield call(showWarningMessage, 'Execution aborted', 750);\n    return;\n  }\n\n  if (paused) {\n    yield put(actions.endDebuggerPause(workspaceLocation));\n    lastDebuggerResult = manualToggleDebugger(context);\n    yield call(updateInspector, workspaceLocation);\n    yield call(showWarningMessage, 'Execution paused', 750);\n    return;\n  }\n\n  if (actionType === EVAL_EDITOR) {\n    lastDebuggerResult = result;\n  }\n  yield call(updateInspector, workspaceLocation);\n\n  if (\n    result.status !== 'suspended' &&\n    result.status !== 'finished' &&\n    result.status !== 'suspended-non-det'\n  ) {\n    yield put(actions.evalInterpreterError(context.errors, workspaceLocation));\n\n    // we need to parse again, but preserve the errors in context\n    const oldErrors = context.errors;\n    context.errors = [];\n    const parsed = parse(code, context);\n    const typeErrors = parsed && typeCheck(validateAndAnnotate(parsed!, context), context)[1];\n    context.errors = oldErrors;\n    if (typeErrors && typeErrors.length > 0) {\n      yield put(\n        actions.sendReplInputToOutput('Hints:\\n' + parseError(typeErrors), workspaceLocation)\n      );\n    }\n    return;\n  } else if (result.status === 'suspended') {\n    yield put(actions.endDebuggerPause(workspaceLocation));\n    yield put(actions.evalInterpreterSuccess('Breakpoint hit!', workspaceLocation));\n    return;\n  } else if (isNonDet) {\n    if (result.value === 'cut') {\n      result.value = undefined;\n    }\n    lastNonDetResult = result;\n  }\n\n  // Do not write interpreter output to REPL, if executing chunks (e.g. prepend/postpend blocks)\n  if (actionType !== EVAL_SILENT) {\n    yield put(actions.evalInterpreterSuccess(result.value, workspaceLocation));\n  }\n\n  // For EVAL_EDITOR and EVAL_REPL, we send notification to workspace that a program has been evaluated\n  if (actionType === EVAL_EDITOR || actionType === EVAL_REPL) {\n    yield put(notifyProgramEvaluated(result, lastDebuggerResult, code, context, workspaceLocation));\n  }\n\n  /** If successful, then continue to run all testcases IFF evalCode was triggered from\n   *    EVAL_EDITOR (Run button) instead of EVAL_REPL (Eval button)\n   *  Retrieve the index of the active side-content tab\n   */\n  if (actionType === EVAL_EDITOR) {\n    const activeTab: SideContentType = yield select(\n      (state: OverallState) => state.workspaces[workspaceLocation].sideContentActiveTab\n    );\n    /** If a student is attempting an assessment and has the autograder tab open OR\n     *    a grader is grading a submission and has the autograder tab open,\n     *    RUN all testcases of the current question through the interpreter\n     *  Each testcase runs in its own \"sandbox\" since the Context is cleared for each,\n     *    so side-effects from one testcase don't affect others\n     */\n    if (\n      activeTab === SideContentType.autograder &&\n      (workspaceLocation === 'assessment' || workspaceLocation === 'grading')\n    ) {\n      const testcases: Testcase[] = yield select(\n        (state: OverallState) => state.workspaces[workspaceLocation].editorTestcases\n      );\n      // Avoid displaying message if there are no testcases\n      if (testcases.length > 0) {\n        // Display a message to the user\n        yield call(showSuccessMessage, `Running all testcases!`, 750);\n        for (const idx of testcases.keys()) {\n          yield put(actions.evalTestcase(workspaceLocation, idx));\n          /** Run testcases synchronously - this blocks the generator until result of current\n           *  testcase is known and output to REPL; ensures that HANDLE_CONSOLE_LOG appends\n           *  consoleLogs(from display(...) calls) to the correct testcase result\n           */\n          const { success, error } = yield race({\n            success: take(EVAL_TESTCASE_SUCCESS),\n            error: take(EVAL_TESTCASE_FAILURE)\n          });\n          // Prematurely terminate if execution of current testcase returns an error\n          if (error || !success) {\n            return;\n          }\n        }\n      }\n    }\n  }\n}\n\nexport function* evalTestCode(\n  code: string,\n  context: Context,\n  execTime: number,\n  workspaceLocation: WorkspaceLocation,\n  index: number,\n  type: TestcaseType\n) {\n  yield put(actions.resetTestcase(workspaceLocation, index));\n\n  const { result, interrupted } = yield race({\n    result: call(runInContext, code, context, {\n      scheduler: 'preemptive',\n      originalMaxExecTime: execTime\n    }),\n    /**\n     * A BEGIN_INTERRUPT_EXECUTION signals the beginning of an interruption,\n     * i.e the trigger for the interpreter to interrupt execution.\n     */\n    interrupted: take(BEGIN_INTERRUPT_EXECUTION)\n  });\n\n  if (interrupted) {\n    interrupt(context);\n    // Redundancy, added ensure that interruption results in an error.\n    context.errors.push(new InterruptedError(context.runtime.nodes[0]));\n    yield put(actions.endInterruptExecution(workspaceLocation));\n    yield call(showWarningMessage, `Execution of testcase ${index} aborted`, 750);\n    return;\n  }\n\n  /** result.status here is either 'error' or 'finished'; 'suspended' is not possible\n   *  since debugger is presently disabled in assessment and grading environments\n   */\n  if (result.status === 'error') {\n    yield put(actions.evalInterpreterError(context.errors, workspaceLocation));\n    yield put(actions.evalTestcaseFailure(context.errors, workspaceLocation, index));\n  } else if (result.status === 'finished') {\n    // Execution of the testcase is successful, i.e. no errors were raised\n    yield put(actions.evalInterpreterSuccess(result.value, workspaceLocation));\n    yield put(actions.evalTestcaseSuccess(result.value, workspaceLocation, index));\n  }\n\n  // If a hidden testcase was executed, remove its output from the REPL\n  if (type === TestcaseTypes.hidden) {\n    yield put(actions.clearReplOutputLast(workspaceLocation));\n  }\n}\n","import { SagaIterator } from 'redux-saga';\nimport { fork } from 'redux-saga/effects';\n\nimport { mockBackendSaga } from '../mocks/BackendMocks';\nimport Constants from '../utils/Constants';\nimport BackendSaga from './BackendSaga';\nimport LoginSaga from './LoginSaga';\nimport PersistenceSaga from './PersistenceSaga';\nimport PlaygroundSaga from './PlaygroundSaga';\nimport WorkspaceSaga from './WorkspaceSaga';\n\nexport default function* MainSaga(): SagaIterator {\n  yield fork(Constants.useBackend ? BackendSaga : mockBackendSaga);\n  yield fork(WorkspaceSaga);\n  yield fork(LoginSaga);\n  yield fork(PlaygroundSaga);\n  yield fork(PersistenceSaga);\n}\n","import { Variant } from 'js-slang/dist/types';\nimport { compressToUTF16, decompressFromUTF16 } from 'lz-string';\n\nimport { OverallState } from '../commons/application/ApplicationTypes';\nimport { ExternalLibraryName } from '../commons/application/types/ExternalTypes';\nimport { SessionState } from '../commons/application/types/SessionTypes';\nimport { showWarningMessage } from '../commons/utils/NotificationsHelper';\n\nexport type SavedState = {\n  session: Partial<SessionState>;\n  playgroundEditorValue: string | null;\n  playgroundIsEditorAutorun: boolean;\n  playgroundSourceChapter: number;\n  playgroundSourceVariant: Variant;\n  playgroundExternalLibrary: ExternalLibraryName;\n};\n\nexport const loadStoredState = (): SavedState | undefined => {\n  try {\n    const serializedState = localStorage.getItem('storedState');\n    if (!serializedState) {\n      return undefined;\n    }\n    const decompressed = decompressFromUTF16(serializedState);\n    if (!decompressed) {\n      return undefined;\n    }\n    return JSON.parse(decompressed) as SavedState;\n  } catch (err) {\n    showWarningMessage('Error loading from local storage');\n    return undefined;\n  }\n};\n\nexport const saveState = (state: OverallState) => {\n  try {\n    const stateToBeSaved: SavedState = {\n      session: {\n        accessToken: state.session.accessToken,\n        refreshToken: state.session.refreshToken,\n        role: state.session.role,\n        name: state.session.name\n      },\n      playgroundEditorValue: state.workspaces.playground.editorValue,\n      playgroundIsEditorAutorun: state.workspaces.playground.isEditorAutorun,\n      playgroundSourceChapter: state.workspaces.playground.context.chapter,\n      playgroundSourceVariant: state.workspaces.playground.context.variant,\n      playgroundExternalLibrary: state.workspaces.playground.externalLibrary\n    };\n    const serialized = compressToUTF16(JSON.stringify(stateToBeSaved));\n    localStorage.setItem('storedState', serialized);\n  } catch (err) {\n    showWarningMessage('Error saving to local storage');\n  }\n};\n","import { routerMiddleware } from 'connected-react-router';\nimport { History } from 'history';\nimport { throttle } from 'lodash';\nimport { applyMiddleware, compose, createStore as _createStore } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\n\nimport { defaultState } from '../commons/application/ApplicationTypes';\nimport createRootReducer from '../commons/application/reducers/RootReducer';\nimport MainSaga from '../commons/sagas/MainSaga';\nimport { history as appHistory } from '../commons/utils/HistoryHelper';\nimport { loadStoredState, SavedState, saveState } from './localStorage';\n\nexport const store = createStore(appHistory);\n\nexport function createStore(history: History) {\n  const sagaMiddleware = createSagaMiddleware();\n  const middleware = [sagaMiddleware, routerMiddleware(history)];\n\n  const composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n    ? (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n        serialize: true,\n        maxAge: 300\n      }) || compose\n    : compose;\n\n  const initialStore = loadStore(loadStoredState()) || defaultState;\n\n  const enhancers = composeEnhancers(applyMiddleware(...middleware));\n\n  const createdStore = _createStore(createRootReducer(history), initialStore, enhancers);\n  sagaMiddleware.run(MainSaga);\n\n  createdStore.subscribe(\n    throttle(() => {\n      saveState(createdStore.getState());\n    }, 1000)\n  );\n\n  return createdStore;\n}\n\nfunction loadStore(loadedStore: SavedState | undefined) {\n  if (!loadedStore) {\n    return undefined;\n  }\n  return {\n    ...defaultState,\n    session: {\n      ...defaultState.session,\n      ...(loadedStore.session ? loadedStore.session : {})\n    },\n    workspaces: {\n      ...defaultState.workspaces,\n      playground: {\n        ...defaultState.workspaces.playground,\n        editorValue: loadedStore.playgroundEditorValue\n          ? loadedStore.playgroundEditorValue\n          : defaultState.workspaces.playground.editorValue,\n        isEditorAutorun: loadedStore.playgroundIsEditorAutorun\n          ? loadedStore.playgroundIsEditorAutorun\n          : defaultState.workspaces.playground.isEditorAutorun,\n        externalLibrary: loadedStore.playgroundExternalLibrary\n          ? loadedStore.playgroundExternalLibrary\n          : defaultState.workspaces.playground.externalLibrary,\n        context: {\n          ...defaultState.workspaces.playground.context,\n          chapter: loadedStore.playgroundSourceChapter\n            ? loadedStore.playgroundSourceChapter\n            : defaultState.workspaces.playground.context.chapter,\n          variant: loadedStore.playgroundSourceVariant\n            ? loadedStore.playgroundSourceVariant\n            : defaultState.workspaces.playground.context.variant\n        }\n      }\n    }\n  };\n}\n","import { ExternalLibraryName } from '../application/types/ExternalTypes';\nimport { Library } from '../assessment/AssessmentTypes';\n\n/**\n * Casts a library returned by an API call to a\n * Library used in the frontend.\n */\nexport const castLibrary = (lib: any): Library => ({\n  chapter: lib.chapter,\n  external: {\n    /** external names are lowercase for API results */\n    name: lib.external.name.toUpperCase() as ExternalLibraryName,\n    symbols: lib.external.symbols\n  },\n  /** globals are passed as an object, mapping symbol name -> value */\n  globals: Object.entries(lib.globals as object).map(entry => {\n    /** The value that is passed is evaluated into an actual JS value */\n    try {\n      entry[1] = (window as any).eval(entry[1]);\n    } catch (e) {}\n    return entry;\n  })\n});\n","import SoundAssets from '../assets/SoundAssets';\nimport { Constants } from '../commons/CommonConstants';\nimport { AssetKey, BitmapFontStyle, TextConfig } from '../commons/CommonTypes';\nimport SourceAcademyGame from '../SourceAcademyGame';\nimport { createBitmapText } from './TextUtils';\n\ntype ButtonConfig = {\n  assetKey: AssetKey;\n  message?: string;\n  textConfig?: TextConfig;\n  bitMapTextStyle?: BitmapFontStyle;\n  onDown?: () => void;\n  onUp?: () => void;\n  onHover?: () => void;\n  onOut?: () => void;\n  onPointerMove?: (pointer: Phaser.Input.Pointer, localX: number, localY: number) => void;\n  onHoverEffect?: boolean;\n  onClickSound?: AssetKey;\n  onHoverSound?: AssetKey;\n};\n\nconst onHoverAlpha = 1.0;\nconst offHoverAlpha = 0.9;\n\n/**\n * Create a button with basic functionalities.\n *\n * Functionalities include:\n * 1. Attached onDown, onUp, onHover, onOut listeners\n * 2. Text writing\n * 3. onHover and onOut alpha changes\n * 4. onClick and onHover sound effect\n *\n * @param scene scene to be attached to\n * @param assetKey asset key to be used as button image\n * @param message text to be written on the button, optional\n * @param textConfig config to apply to the text, optional\n * @param bitMapTextStyle bitMapText style to be used, optional\n * @param onDown callback to execute on onDown event, optional\n * @param onUp callback to execute on onUp event, optional\n * @param onHover callback to execute on onHover event, optional\n * @param onOut callback to execute on onOut event, optional\n * @param onPointerMove callback to execute on onPointerMove, optional\n * @param onHoverEffect if true, button will include onHover and onOut alpha changes, optional\n * @param onClickSound sound key to play when button is clicked, executed onUp, optional\n * @param onHoverSound sound key to play when button is hovered, optional\n * @param soundManager required for sound to be played, optional\n * @returns {Phaser.GameObjects.Container} button container\n */\nexport function createButton(\n  scene: Phaser.Scene,\n  {\n    assetKey,\n    message = '',\n    textConfig = { x: 0, y: 0, oriX: 0, oriY: 0 },\n    bitMapTextStyle = Constants.defaultFontStyle,\n    onDown = Constants.nullFunction,\n    onUp = Constants.nullFunction,\n    onHover = Constants.nullFunction,\n    onOut = Constants.nullFunction,\n    onPointerMove = Constants.nullFunction,\n    onHoverEffect = true,\n    onClickSound = SoundAssets.buttonClick.key,\n    onHoverSound = SoundAssets.buttonHover.key\n  }: ButtonConfig\n): Phaser.GameObjects.Container {\n  const container = new Phaser.GameObjects.Container(scene, 0, 0);\n\n  // Set up button functionality\n  const button = new Phaser.GameObjects.Sprite(scene, 0, 0, assetKey);\n  button.setInteractive({ pixelPerfect: true, useHandCursor: true });\n  button.addListener(Phaser.Input.Events.GAMEOBJECT_POINTER_UP, () => {\n    SourceAcademyGame.getInstance().getSoundManager().playSound(onClickSound);\n    onUp();\n  });\n  button.addListener(Phaser.Input.Events.GAMEOBJECT_POINTER_OVER, () => {\n    SourceAcademyGame.getInstance().getSoundManager().playSound(onHoverSound);\n    if (onHoverEffect) container.setAlpha(onHoverAlpha);\n    onHover();\n  });\n  button.addListener(Phaser.Input.Events.GAMEOBJECT_POINTER_OUT, () => {\n    if (onHoverEffect) container.setAlpha(offHoverAlpha);\n    onOut();\n  });\n  button.addListener(Phaser.Input.Events.GAMEOBJECT_POINTER_DOWN, () => {\n    onDown();\n  });\n  button.addListener(\n    Phaser.Input.Events.GAMEOBJECT_POINTER_MOVE,\n    (pointer: Phaser.Input.Pointer, localX: number, localY: number) => {\n      onPointerMove(pointer, localX, localY);\n    }\n  );\n\n  // Set up text\n  const text = createBitmapText(scene, message, textConfig, bitMapTextStyle);\n\n  container.add([button, text]);\n  if (onHoverEffect) container.setAlpha(offHoverAlpha);\n\n  return container;\n}\n","import FontAssets from '../assets/FontAssets';\nimport { BitmapFontStyle } from '../commons/CommonTypes';\nimport { HexColor } from '../utils/StyleUtils';\n\nexport const emptyUserState = {\n  collectibles: [],\n  assessments: []\n};\n\nexport const userStateStyle: BitmapFontStyle = {\n  key: FontAssets.zektonFont.key,\n  size: 35,\n  fill: HexColor.lightBlue,\n  align: Phaser.GameObjects.BitmapText.ALIGN_CENTER\n};\n","import { getAssessmentOverviews } from 'src/commons/sagas/RequestsSaga';\n\nimport ImageAssets from '../assets/ImageAssets';\nimport { screenCenter } from '../commons/CommonConstants';\nimport { Layer } from '../layer/GameLayerTypes';\nimport GameGlobalAPI from '../scenes/gameManager/GameGlobalAPI';\nimport SourceAcademyGame, { GameType } from '../SourceAcademyGame';\nimport { createButton } from '../utils/ButtonUtils';\nimport { mandatory } from '../utils/GameUtils';\nimport { userStateStyle } from './GameStateConstants';\nimport { UserState, UserStateTypes } from './GameStateTypes';\n\n/**\n * Manages all states related to user, but not related to the\n * particular story or chapter; e.g. collectibles, achievements, and assessments.\n */\nexport default class GameUserStateManager {\n  private userState: UserState;\n\n  constructor() {\n    this.userState = {};\n  }\n\n  public initialise() {\n    this.userState.collectibles = SourceAcademyGame.getInstance()\n      .getSaveManager()\n      .getLoadedUserState().collectibles;\n  }\n\n  /**\n   * Add an id to one of the user state list.\n   *\n   * @param listName name of list to be added\n   * @param id id of item\n   */\n  public addToList(listName: UserStateTypes, id: string): void {\n    if (!this.userState[listName]) this.userState[listName] = [];\n\n    this.userState[listName]!.push(id);\n  }\n\n  /**\n   * Return a user state list.\n   *\n   * @param listName name of list\n   */\n  public getList(listName: UserStateTypes): string[] {\n    if (!this.userState[listName]) this.userState[listName] = [];\n\n    return this.userState[listName]!;\n  }\n\n  /**\n   * Check whether the given ID exist within one of the user state list.\n   *\n   * @param listName list to be queried\n   * @param id id of the item\n   */\n  public async doesIdExistInList(listName: UserStateTypes, id: string): Promise<boolean> {\n    if (\n      listName === UserStateTypes.assessments &&\n      SourceAcademyGame.getInstance().isGameType(GameType.Simulator)\n    ) {\n      return this.askAssessmentComplete(id);\n    }\n    return this.getUserState()[listName as string].includes(id);\n  }\n\n  /**\n   * Display a UI that asks whether an assessment has been completed based\n   * on the assessment ID.\n   *\n   * This is to allow Story Simulator to test/by pass assessment requirement\n   * within a particular checkpoint.\n   *\n   * @param assessmentId assessment ID\n   */\n  public async askAssessmentComplete(assessmentId: string): Promise<boolean> {\n    const gameManager = GameGlobalAPI.getInstance().getGameManager();\n    const assessmentCheckContainer = new Phaser.GameObjects.Container(gameManager, 0, 0);\n    GameGlobalAPI.getInstance().addContainerToLayer(Layer.UI, assessmentCheckContainer);\n\n    const activateAssessmentContainer: Promise<boolean> = new Promise(resolve => {\n      assessmentCheckContainer.add(\n        createButton(gameManager, {\n          assetKey: ImageAssets.longButton.key,\n          message: `Assessment#${assessmentId} completed?`,\n          textConfig: { x: 0, y: 0, oriX: 0.5, oriY: 0.4 },\n          bitMapTextStyle: userStateStyle\n        }).setPosition(screenCenter.x, 100)\n      );\n      assessmentCheckContainer.add(\n        ['Yes', 'No'].map((response, index) =>\n          createButton(gameManager, {\n            assetKey: ImageAssets.shortButton.key,\n            message: response,\n            textConfig: { x: 0, y: 0, oriX: 0.5, oriY: 0.4 },\n            bitMapTextStyle: userStateStyle,\n            onUp: () => {\n              assessmentCheckContainer.destroy();\n              resolve(response === 'Yes');\n            }\n          }).setPosition(screenCenter.x, index * 200 + 400)\n        )\n      );\n    });\n    const response = await activateAssessmentContainer;\n    return response;\n  }\n\n  /**\n   * Fetches assessment overview of the student; based on\n   * the account information.\n   *\n   * Only returns submitted assessments' ids.\n   */\n  public async loadAssessments() {\n    if (SourceAcademyGame.getInstance().isGameType(GameType.Simulator)) {\n      return;\n    }\n    const assessments = await getAssessmentOverviews(\n      SourceAcademyGame.getInstance().getAccountInfo()\n    );\n    this.userState.assessments = assessments\n      ?.filter(assessment => assessment.status === 'submitted')\n      .map(assessment => assessment.id.toString());\n  }\n\n  /**\n   * Fetches achievements of the student; based on the account\n   * information.\n   *\n   * Only returns the awards ID that the student possess.\n   */\n  public async loadAchievements() {\n    // TODO: Fetch from backend\n    this.userState.achievements = ['301', '302'];\n    this.userState.collectibles = ['cookies', 'computer'];\n  }\n\n  public getUserState = () => mandatory(this.userState);\n}\n","import { screenSize } from '../commons/CommonConstants';\n\n/**\n * A tween config that makes the object fly in\n * from the top of screen into the middle of the screen\n */\nexport const entryTweenProps = {\n  y: 0,\n  duration: 300,\n  ease: 'Power2'\n};\n\n/**\n * Makes the object fly out from the middle of the screen\n * to the top of the screen\n */\nexport const exitTweenProps = {\n  y: -screenSize.y,\n  duration: 250,\n  ease: 'Power2'\n};\n","import FontAssets from '../assets/FontAssets';\nimport { screenSize } from '../commons/CommonConstants';\nimport { BitmapFontStyle } from '../commons/CommonTypes';\nimport { Color, HexColor } from '../utils/StyleUtils';\n\nexport const pageBannerTextStyle: BitmapFontStyle = {\n  key: FontAssets.alienLeagueFont.key,\n  size: 35,\n  fill: HexColor.lightBlue,\n  align: Phaser.GameObjects.BitmapText.ALIGN_LEFT\n};\n\nexport const listBannerTextStyle: BitmapFontStyle = {\n  key: FontAssets.zektonFont.key,\n  size: 25,\n  fill: HexColor.darkBlue,\n  align: Phaser.GameObjects.BitmapText.ALIGN_LEFT\n};\n\nexport const awardTitleStyle: BitmapFontStyle = {\n  key: FontAssets.alienLeagueFont.key,\n  size: 50,\n  fill: HexColor.lightBlue,\n  align: Phaser.GameObjects.BitmapText.ALIGN_CENTER\n};\n\nexport const awardKeyStyle: BitmapFontStyle = {\n  key: FontAssets.zektonFont.key,\n  size: 25,\n  fill: HexColor.offWhite,\n  align: Phaser.GameObjects.BitmapText.ALIGN_CENTER\n};\n\nexport const awardDescStyle = {\n  fontFamily: 'Verdana',\n  fontSize: '20px',\n  fill: Color.lightBlue,\n  align: 'center',\n  lineSpacing: 10,\n  wordWrap: { width: 500 }\n};\n\nconst previewXPos = -screenSize.x * 0.3;\nconst previewYPos = -screenSize.y * 0.05;\n\nconst AwardsConstants = {\n  backButtonYPos: screenSize.y * 0.3,\n  pageYStartPos: -screenSize.y * 0.3,\n  pageYSpacing: 150,\n  pageTextXPos: screenSize.x * 0.3,\n  listYStartPos: -screenSize.y * 0.31,\n  listYSpacing: 100,\n  listTextXPos: -screenSize.x * 0.09,\n  previewXPos: previewXPos,\n  previewYPos: previewYPos,\n  previewDim: 430,\n  previewTitleTextConfig: { x: previewXPos, y: previewYPos - 275, oriX: 0.3, oriY: 0.5 },\n  previewKeyTextConfig: { x: previewXPos, y: previewYPos + 275, oriX: 0.3, oriY: 0.5 },\n  previewDescTextYOffset: 310,\n  arrowDownYPos: screenSize.y * 0.34,\n  arrowXMidPos: screenSize.x * 0.08,\n  arrowXOffset: 80,\n  arrowXScale: 0.4,\n  arrowYScale: 0.3,\n  itemsPerPage: 7\n};\n\nexport default AwardsConstants;\n","import { ItemId } from '../commons/CommonTypes';\nimport SourceAcademyGame from '../SourceAcademyGame';\nimport { mandatory } from '../utils/GameUtils';\nimport { AwardProperty } from './GameAwardsTypes';\n\n/**\n * Get corresponding award properties of the given award keys\n * @param awardKeys award keys\n */\nexport const getAwardProps = (awardKeys: ItemId[]): AwardProperty[] => {\n  return awardKeys.map(key => getAwardProp(key));\n};\n\n/**\n * Get corresponding award property of the given award key\n * @param awardKey award key\n */\nexport const getAwardProp = (awardKey: ItemId): AwardProperty => {\n  const awardProp = SourceAcademyGame.getInstance().getAwardsMapping().get(awardKey);\n  return mandatory(awardProp);\n};\n","import { AssetKey, AssetPath, ItemId } from '../commons/CommonTypes';\nimport { UserStateTypes } from '../state/GameStateTypes';\n\nexport enum AwardPage {\n  Collectibles = 'Collectibles',\n  Achievements = 'Achievements'\n}\n\nexport type CollectibleProperty = {\n  assetKey: string;\n  x: number;\n  y: number;\n  width?: number;\n  height?: number;\n};\n\nexport type AwardProperty = {\n  id: ItemId;\n  assetKey: AssetKey;\n  assetPath: AssetPath;\n  title: string;\n  description: string;\n  awardType: UserStateTypes;\n};\n","import ImageAssets from '../assets/ImageAssets';\nimport SoundAssets from '../assets/SoundAssets';\nimport { screenCenter, screenSize } from '../commons/CommonConstants';\nimport { IBaseScene, IGameUI } from '../commons/CommonTypes';\nimport { fadeAndDestroy } from '../effects/FadeEffect';\nimport { entryTweenProps, exitTweenProps } from '../effects/FlyEffect';\nimport GameLayerManager from '../layer/GameLayerManager';\nimport { Layer } from '../layer/GameLayerTypes';\nimport GamePhaseManager from '../phase/GamePhaseManager';\nimport { GamePhaseType } from '../phase/GamePhaseTypes';\nimport SourceAcademyGame from '../SourceAcademyGame';\nimport { UserStateTypes } from '../state/GameStateTypes';\nimport GameUserStateManager from '../state/GameUserStateManager';\nimport { createButton } from '../utils/ButtonUtils';\nimport { limitNumber, mandatory, sleep } from '../utils/GameUtils';\nimport { resizeUnderflow } from '../utils/SpriteUtils';\nimport { calcListFormatPos } from '../utils/StyleUtils';\nimport { createBitmapText } from '../utils/TextUtils';\nimport awardsConstants, {\n  awardDescStyle,\n  awardKeyStyle,\n  awardTitleStyle,\n  listBannerTextStyle,\n  pageBannerTextStyle\n} from './GameAwardsConstants';\nimport { getAwardProps } from './GameAwardsHelper';\nimport { AwardPage, AwardProperty } from './GameAwardsTypes';\n\n/**\n * Manager for the 'Award Menu'.\n *\n * Here, achievements and collectibles are listed and\n * available for browsing.\n */\nclass GameAwardsManager implements IGameUI {\n  private scene: Phaser.Scene | undefined;\n  private layerManager: GameLayerManager | undefined;\n  private userStateManager: GameUserStateManager | undefined;\n  private phaseManager: GamePhaseManager | undefined;\n  private uiContainer: Phaser.GameObjects.Container | undefined;\n  private previewContainer: Phaser.GameObjects.Container | undefined;\n  private itemsContainer: Phaser.GameObjects.Container | undefined;\n  private pageChosenContainer: Phaser.GameObjects.Container | undefined;\n  private currActivePage: AwardPage;\n  private activePageNumber: Map<AwardPage, number>;\n\n  constructor() {\n    this.activePageNumber = new Map<AwardPage, number>();\n    this.currActivePage = AwardPage.Collectibles;\n  }\n\n  public initialise(\n    scene: IBaseScene,\n    userStateManager: GameUserStateManager,\n    phaseManager: GamePhaseManager\n  ) {\n    this.scene = scene;\n    this.layerManager = scene.layerManager;\n    this.userStateManager = userStateManager;\n    this.phaseManager = phaseManager;\n\n    // Set all initial pages number to zero\n    Object.keys(AwardPage).forEach((page, index) => {\n      const pageName = page as AwardPage;\n      this.activePageNumber.set(pageName, 0);\n    });\n  }\n\n  /**\n   * Change the current page in view to a new page.\n   *\n   * Internally, destroy and replace the containers to reflect\n   * the new page; also sets up the blue outline that denotes\n   * that the page is chosen.\n   *\n   * @param page new page\n   */\n  private setPage(page: AwardPage) {\n    if (this.uiContainer) {\n      if (this.itemsContainer) this.itemsContainer.destroy();\n      if (this.pageChosenContainer) this.pageChosenContainer.destroy();\n\n      // Update\n      this.currActivePage = page;\n      this.itemsContainer = this.createItemsContainer();\n      this.uiContainer.add(this.itemsContainer);\n\n      // Set chosen page banner\n      const bannerPos = this.getPageOptPositions();\n      const chosenIdx = Object.keys(AwardPage).findIndex(pg => pg === (page as string));\n      const bannerChosen = new Phaser.GameObjects.Sprite(\n        this.getScene(),\n        bannerPos[chosenIdx][0],\n        bannerPos[chosenIdx][1] + awardsConstants.pageYStartPos,\n        ImageAssets.awardsPageChosen.key\n      );\n      this.pageChosenContainer = new Phaser.GameObjects.Container(this.getScene(), 0, 0, [\n        bannerChosen\n      ]);\n      this.uiContainer.add(this.pageChosenContainer);\n\n      // Set default preview\n      this.setPreview();\n    }\n  }\n\n  /**\n   * Create the container that encapsulate the 'Award Menu' UI.\n   */\n  private createUIContainer() {\n    const awardContainer = new Phaser.GameObjects.Container(this.getScene(), 0, 0);\n\n    const blackUnderlay = new Phaser.GameObjects.Rectangle(\n      this.getScene(),\n      0,\n      0,\n      screenSize.x,\n      4 * screenSize.y,\n      0\n    )\n      .setAlpha(0.7)\n      .setInteractive();\n\n    const awardBg = new Phaser.GameObjects.Image(this.getScene(), 0, 0, ImageAssets.awardsMenu.key);\n    awardContainer.add([blackUnderlay, awardBg]);\n\n    // Add options\n    const pageOptButtons = Object.keys(AwardPage).map((page, index) => {\n      return {\n        text: page,\n        callback: () => this.setPage(page as AwardPage)\n      };\n    });\n    const pageOptButtonPositions = this.getPageOptPositions();\n    awardContainer.add(\n      pageOptButtons.map((button, index) =>\n        this.createPageOpt(\n          button.text,\n          pageOptButtonPositions[index][0],\n          pageOptButtonPositions[index][1] + awardsConstants.pageYStartPos,\n          button.callback\n        )\n      )\n    );\n\n    // Add back button\n    const backButton = this.createPageOpt('Back', 0, awardsConstants.backButtonYPos, async () => {\n      if (this.getPhaseManager().isCurrentPhase(GamePhaseType.AwardMenu)) {\n        await this.getPhaseManager().popPhase();\n      }\n    });\n    awardContainer.add(backButton);\n\n    // Add page arrows\n    const arrowLeft = createButton(this.getScene(), {\n      assetKey: ImageAssets.arrow.key,\n      onUp: () => this.nextPage(false)\n    })\n      .setScale(awardsConstants.arrowXScale, awardsConstants.arrowYScale)\n      .setRotation((-90 * Math.PI) / 180)\n      .setPosition(\n        awardsConstants.arrowXMidPos - awardsConstants.arrowXOffset,\n        awardsConstants.arrowDownYPos\n      );\n\n    const arrowRight = createButton(this.getScene(), {\n      assetKey: ImageAssets.arrow.key,\n      onUp: () => this.nextPage(true)\n    })\n      .setScale(awardsConstants.arrowXScale, awardsConstants.arrowYScale)\n      .setRotation((90 * Math.PI) / 180)\n      .setPosition(\n        awardsConstants.arrowXMidPos + awardsConstants.arrowXOffset,\n        awardsConstants.arrowDownYPos\n      );\n    awardContainer.add([arrowLeft, arrowRight]);\n\n    // Add preview frame\n    const frame = new Phaser.GameObjects.Sprite(\n      this.getScene(),\n      awardsConstants.previewXPos,\n      awardsConstants.previewYPos,\n      ImageAssets.popUpFrame.key\n    ).setScale(1.2);\n    awardContainer.add(frame);\n\n    return awardContainer;\n  }\n\n  /**\n   * Get positions of the page options.\n   */\n  private getPageOptPositions() {\n    return calcListFormatPos({\n      numOfItems: Object.keys(AwardPage).length,\n      xSpacing: 0,\n      ySpacing: awardsConstants.pageYSpacing\n    });\n  }\n\n  /**\n   * Set the preview of the award; shown on the left side of the menu.\n   *\n   * The preview include the title of achievement, object asset, asset key,\n   * as well as asset description.\n   *\n   * @param award award to preview\n   */\n  private setPreview(award?: AwardProperty) {\n    if (this.uiContainer) {\n      if (this.previewContainer) this.previewContainer.destroy();\n      this.previewContainer = new Phaser.GameObjects.Container(this.getScene(), 0, 0);\n\n      if (award) {\n        // Preview image\n        const previewSprite = new Phaser.GameObjects.Sprite(this.getScene(), 0, 0, award.assetKey);\n        resizeUnderflow(previewSprite, awardsConstants.previewDim, awardsConstants.previewDim);\n        previewSprite\n          .setPosition(awardsConstants.previewXPos, awardsConstants.previewYPos)\n          .setOrigin(0.428, 0.468);\n\n        // Preview title\n        const previewTitle = createBitmapText(\n          this.getScene(),\n          award.title,\n          awardsConstants.previewTitleTextConfig,\n          awardTitleStyle\n        );\n\n        // Preview asset key\n        const previewKey = createBitmapText(\n          this.getScene(),\n          award.assetKey,\n          awardsConstants.previewKeyTextConfig,\n          awardKeyStyle\n        );\n\n        // Preview description\n        const previewDesc = new Phaser.GameObjects.Text(\n          this.getScene(),\n          awardsConstants.previewXPos,\n          awardsConstants.previewYPos + awardsConstants.previewDescTextYOffset,\n          award.description,\n          awardDescStyle\n        ).setOrigin(0.4, 0.0);\n\n        this.previewContainer.add([previewSprite, previewTitle, previewKey, previewDesc]);\n      }\n\n      this.uiContainer.add(this.previewContainer);\n    }\n  }\n\n  /**\n   * Flip the page.\n   *\n   * The minimum page number is 0, which represent the\n   * start of the list.\n   *\n   * This method is only able to flip forward (increment the page number)\n   * if there is still items to be shown on the list after what is\n   * shown currently.\n   *\n   * @param next if next is set to true, page number will be incremented\n   *             by one; else it will be decremented by one.\n   */\n  private nextPage(next: boolean) {\n    const currPageNum = this.activePageNumber.get(this.currActivePage)!;\n    const newPageNum = limitNumber(\n      next ? currPageNum + 1 : currPageNum - 1,\n      0,\n      Number.MAX_SAFE_INTEGER\n    );\n    const itemLength = this.getItems(newPageNum).length;\n\n    if (itemLength > 0) {\n      this.activePageNumber.set(this.currActivePage, newPageNum);\n      this.setPage(this.currActivePage);\n    }\n  }\n\n  /**\n   * Format the button information to a UI container, complete with\n   * styling and functionality. This button represent the page option button,\n   * whether it is 'collectible' or 'achievement'.\n   *\n   * @param text text to be displayed on the button\n   * @param xPos x position of the button\n   * @param yPos y position of the button\n   * @param callback callback to be executed on click\n   */\n  private createPageOpt(text: string, xPos: number, yPos: number, callback: any) {\n    return createButton(this.getScene(), {\n      assetKey: ImageAssets.awardsPage.key,\n      message: text,\n      textConfig: { x: awardsConstants.pageTextXPos, y: 0, oriX: 0.1, oriY: 0.5 },\n      bitMapTextStyle: pageBannerTextStyle,\n      onUp: callback\n    }).setPosition(xPos, yPos);\n  }\n\n  /**\n   * Create a container that represent the list of objects\n   * to be selected on the screen.\n   */\n  private createItemsContainer() {\n    const itemsContainer = new Phaser.GameObjects.Container(this.getScene(), 0, 0);\n\n    // Use the previously active page number of the page\n    const items = this.getItems(this.activePageNumber.get(this.currActivePage)!);\n    const itemPositions = calcListFormatPos({\n      numOfItems: items.length,\n      xSpacing: 0,\n      ySpacing: awardsConstants.listYSpacing\n    });\n\n    // Populate container with all the item buttons\n    itemsContainer.add(\n      items.map((awardProp, index) =>\n        this.createItemButton(\n          awardProp.title,\n          itemPositions[index][0],\n          itemPositions[index][1] + awardsConstants.listYStartPos,\n          () => this.setPreview(awardProp)\n        )\n      )\n    );\n    return itemsContainer;\n  }\n\n  /**\n   * Format the button information to a UI container, complete with\n   * styling and functionality. This button represent the object selection\n   * button.\n   *\n   * @param obj name of object to be displayed on the button\n   * @param xPos x position of the button\n   * @param yPos y position of the button\n   * @param callback callback to be executed on click\n   */\n  private createItemButton(obj: string, xPos: number, yPos: number, callback: any) {\n    return createButton(this.getScene(), {\n      assetKey: ImageAssets.awardsBanner.key,\n      message: obj,\n      textConfig: { x: awardsConstants.listTextXPos, y: 0, oriX: 0.0, oriY: 0.55 },\n      bitMapTextStyle: listBannerTextStyle,\n      onUp: callback\n    }).setPosition(xPos, yPos);\n  }\n\n  /**\n   * Get the list of objects to be shown on the UI.\n   *\n   * List items is dependent on the active page;\n   * and is only limited to a number of items due to UI\n   * size. Hence, which section of list is taken is\n   * dependent on the parameter pageNum.\n   *\n   * @param pageNum page number\n   */\n  private getItems(pageNum: number) {\n    let keys: string[];\n    switch (this.currActivePage) {\n      case AwardPage.Achievements:\n        keys = this.getUserStateManager().getList(UserStateTypes.achievements);\n        break;\n      case AwardPage.Collectibles:\n        keys = this.getUserStateManager().getList(UserStateTypes.collectibles);\n        break;\n      default:\n        keys = [];\n    }\n\n    const itemList = getAwardProps(keys);\n    const itemStartIdx = pageNum * awardsConstants.itemsPerPage;\n    return itemList.slice(itemStartIdx, itemStartIdx + awardsConstants.itemsPerPage);\n  }\n\n  /**\n   * Activate the 'Award Menu' UI.\n   *\n   * Usually only called by the phase manager when 'Award' phase is\n   * pushed.\n   */\n  public async activateUI(): Promise<void> {\n    this.uiContainer = this.createUIContainer();\n    this.getLayerManager().addToLayer(Layer.UI, this.uiContainer);\n    this.getSoundManager().playSound(SoundAssets.menuEnter.key);\n\n    // Set initial page\n    this.setPage(this.currActivePage);\n\n    this.uiContainer.setPosition(screenCenter.x, -screenSize.y);\n\n    this.getScene().tweens.add({\n      targets: this.uiContainer,\n      ...entryTweenProps,\n      y: screenCenter.y\n    });\n  }\n\n  /**\n   * Deactivate the 'Award Menu' UI.\n   *\n   * Usually only called by the phase manager when 'Award' phase is\n   * transitioned out.\n   */\n  public async deactivateUI(): Promise<void> {\n    if (this.uiContainer) {\n      this.uiContainer.setPosition(this.uiContainer.x, this.uiContainer.y);\n      this.getSoundManager().playSound(SoundAssets.menuExit.key);\n\n      this.getScene().tweens.add({\n        targets: this.uiContainer,\n        ...exitTweenProps\n      });\n\n      await sleep(exitTweenProps.duration);\n      fadeAndDestroy(this.getScene(), this.uiContainer, { fadeDuration: 50 });\n    }\n  }\n\n  private getScene = () => mandatory(this.scene);\n  private getLayerManager = () => mandatory(this.layerManager);\n  private getPhaseManager = () => mandatory(this.phaseManager);\n  private getSoundManager = () => SourceAcademyGame.getInstance().getSoundManager();\n  private getUserStateManager = () => mandatory(this.userStateManager);\n}\n\nexport default GameAwardsManager;\n","import { screenCenter, screenSize } from '../commons/CommonConstants';\nimport { AssetKey } from '../commons/CommonTypes';\nimport { Layer } from '../layer/GameLayerTypes';\nimport { LocationId } from '../location/GameMapTypes';\nimport GameGlobalAPI from '../scenes/gameManager/GameGlobalAPI';\nimport { resizeOverflow } from '../utils/SpriteUtils';\n\n/**\n * Manager for game's background.\n * Loads the background for a location on navigate and change_location action.\n */\nexport default class GameBackgroundManager {\n  public observerId: string;\n\n  constructor() {\n    this.observerId = 'GameBackgroundManager';\n  }\n\n  /**\n   * Render the background with the asset attached to the location ID.\n   *\n   * @param locationId id of the location\n   */\n  public renderBackgroundLayerContainer(locationId: LocationId) {\n    const assetKey = GameGlobalAPI.getInstance().getLocationAtId(locationId).assetKey;\n\n    this.renderBackgroundImage(assetKey);\n  }\n\n  /**\n   * Render the background with the image associated with the asset key.\n   * The image will be resized (overflow) to fit the screen.\n   *\n   * @param assetKey key of the image\n   */\n  private renderBackgroundImage(assetKey: AssetKey) {\n    GameGlobalAPI.getInstance().clearSeveralLayers([Layer.Background]);\n\n    const backgroundAsset = new Phaser.GameObjects.Image(\n      GameGlobalAPI.getInstance().getGameManager(),\n      screenCenter.x,\n      screenCenter.y,\n      assetKey\n    );\n    resizeOverflow(backgroundAsset, screenSize.x, screenSize.y);\n\n    GameGlobalAPI.getInstance().addContainerToLayer(Layer.Background, backgroundAsset);\n    GameGlobalAPI.getInstance().fadeInLayer(Layer.Background);\n  }\n}\n","import SoundAssets from '../assets/SoundAssets';\nimport SourceAcademyGame from '../SourceAcademyGame';\nimport { calcTableFormatPos, HexColor } from '../utils/StyleUtils';\nimport { createBitmapText } from '../utils/TextUtils';\nimport { Constants, screenSize } from './CommonConstants';\nimport { AssetKey, BitmapFontStyle, TextConfig } from './CommonTypes';\n\ntype RadioButtonChoiceConfig = {\n  circleDim: number;\n  checkedDim: number;\n  outlineThickness: number;\n};\n\ntype RadioButtonConfig = {\n  choices: string[];\n  defaultChoiceIdx?: number;\n  maxXSpace?: number;\n  radioChoiceConfig?: RadioButtonChoiceConfig;\n  choiceTextConfig?: TextConfig;\n  bitmapTextStyle?: BitmapFontStyle;\n};\n\n/**\n * A container that is contains radio buttons.\n * Radio buttons only allows user to choose only one of the\n * predefined set of mutually exclusive options.\n *\n * The radio buttons will be arranged horizontally,\n * with even spacing.\n *\n * The radio button's choice will only be displayed when\n * the given radio button is selected so as to not clutter the display.\n */\nclass CommonRadioButton extends Phaser.GameObjects.Container {\n  private buttonClickSoundKey: AssetKey;\n\n  private activeChoice: Phaser.GameObjects.Container | undefined;\n  private activeChoiceIdx: number;\n  private choices: string[];\n  private buttonPositions: Array<[number, number]>;\n\n  private radioChoiceConfig: RadioButtonChoiceConfig;\n  private choiceTextConfig: TextConfig;\n  private bitmapTextStyle: BitmapFontStyle;\n\n  /**\n   * @param scene scene for the container to attach to\n   * @param choices displayed choices, in string, for the radio buttons.\n   * @param defaultChoiceIdx index of default choice, optional\n   * @param maxXSpace maximum horizontal space to be used by the radio buttons, optional\n   * @param circleDim diameter of the radio button, optional\n   * @param checkedDim diameter of the 'checked' radio button; commonly smaller than circleDim, optional\n   * @param outlineThickness if not 0, apply stroke effect on the radio button, optional\n   * @param choiceTextConfig text config to be applied to the displayed choice.\n   *                         The X, Y are relative to each individual radio button.\n   *                         Using this, we can specify where the choice should appear\n   *                         e.g. on top of the radio button, on the side of radio button, optional\n   * @param bitmapTextStyle style to be applied to the choices, optional\n   * @param x x coordinate of the container, optional\n   * @param y y coordinate of the container, optional\n   * @param soundManager if defined, the radio button will play sounds when clicked, optional\n   * @param buttonClickSoundKey require soundManager to be defined; Sound key to be played when\n   *                            button is clicked, optioanl\n   */\n  constructor(\n    scene: Phaser.Scene,\n    {\n      choices,\n      defaultChoiceIdx = 0,\n      maxXSpace = screenSize.x,\n      radioChoiceConfig = {\n        circleDim: 20,\n        checkedDim: 10,\n        outlineThickness: 5\n      },\n      choiceTextConfig = { x: 0, y: 0, oriX: 0.5, oriY: 0.5 },\n      bitmapTextStyle = Constants.defaultFontStyle\n    }: RadioButtonConfig,\n    x?: number,\n    y?: number,\n    buttonClickSoundKey: AssetKey = SoundAssets.radioButtonClick.key\n  ) {\n    super(scene, x, y);\n    this.activeChoiceIdx = defaultChoiceIdx;\n    this.choices = choices;\n    this.choiceTextConfig = choiceTextConfig;\n    this.bitmapTextStyle = bitmapTextStyle;\n    this.radioChoiceConfig = radioChoiceConfig;\n    this.buttonClickSoundKey = buttonClickSoundKey;\n\n    const buttons = this.getRadioButtons(choices);\n    this.buttonPositions = calcTableFormatPos({\n      numOfItems: buttons.length,\n      maxXSpace: maxXSpace\n    });\n\n    this.renderRadioButtons(buttons, this.buttonPositions, this.radioChoiceConfig);\n    this.activate(defaultChoiceIdx);\n  }\n\n  private getRadioButtons(choices: string[]) {\n    return choices.map((choice, index) => {\n      return {\n        text: choice,\n        callback: () => this.activate(index)\n      };\n    });\n  }\n\n  private renderRadioButtons(\n    buttons: { text: string; callback: any }[],\n    buttonPos: Array<[number, number]>,\n    radioChoiceConfig: RadioButtonChoiceConfig\n  ) {\n    this.add(\n      buttons.map((button, index) =>\n        this.createRadioButton(\n          buttonPos[index][0],\n          buttonPos[index][1],\n          button.callback,\n          radioChoiceConfig\n        )\n      )\n    );\n  }\n\n  private createRadioButton(\n    xPos: number,\n    yPos: number,\n    callback: any,\n    radioChoiceConfig: RadioButtonChoiceConfig\n  ) {\n    return new Phaser.GameObjects.Ellipse(\n      this.scene,\n      xPos,\n      yPos,\n      radioChoiceConfig.circleDim,\n      radioChoiceConfig.circleDim,\n      HexColor.lightBlue\n    )\n      .setStrokeStyle(radioChoiceConfig.outlineThickness, HexColor.darkBlue)\n      .setInteractive({ useHandCursor: true })\n      .addListener(Phaser.Input.Events.GAMEOBJECT_POINTER_UP, () => {\n        SourceAcademyGame.getInstance().getSoundManager().playSound(this.buttonClickSoundKey);\n        callback();\n      });\n  }\n\n  private activate(id: number): void {\n    this.activeChoiceIdx = id;\n\n    // Render checked option\n    if (this.activeChoice) this.activeChoice.destroy();\n\n    this.activeChoice = new Phaser.GameObjects.Container(\n      this.scene,\n      this.buttonPositions[id][0],\n      this.buttonPositions[id][1]\n    );\n    const choiceText = createBitmapText(\n      this.scene,\n      this.choices[id],\n      this.choiceTextConfig,\n      this.bitmapTextStyle\n    );\n    const optionChecked = new Phaser.GameObjects.Ellipse(\n      this.scene,\n      0,\n      0,\n      this.radioChoiceConfig.checkedDim,\n      this.radioChoiceConfig.checkedDim,\n      HexColor.darkBlue\n    );\n    this.activeChoice.add([choiceText, optionChecked]);\n\n    this.add(this.activeChoice);\n  }\n\n  public getValueIdx(): number {\n    return this.activeChoiceIdx;\n  }\n\n  public getChoices(): string[] {\n    return this.choices;\n  }\n\n  public getChosenChoice(): string {\n    if (this.activeChoiceIdx < this.choices.length) {\n      return this.choices[this.activeChoiceIdx];\n    }\n    return Constants.nullInteractionId;\n  }\n}\n\nexport default CommonRadioButton;\n","import FontAssets from '../../assets/FontAssets';\nimport { screenSize } from '../../commons/CommonConstants';\nimport { BitmapFontStyle } from '../../commons/CommonTypes';\nimport { HexColor } from '../../utils/StyleUtils';\n\nexport const optionTextStyle: BitmapFontStyle = {\n  key: FontAssets.zektonFont.key,\n  size: 25,\n  fill: HexColor.lightBlue,\n  align: Phaser.GameObjects.BitmapText.ALIGN_CENTER\n};\n\nexport const optionHeaderTextStyle: BitmapFontStyle = {\n  key: FontAssets.zektonFont.key,\n  size: 35,\n  fill: HexColor.lightBlue,\n  align: Phaser.GameObjects.BitmapText.ALIGN_CENTER\n};\n\nexport const applySettingsTextStyle: BitmapFontStyle = {\n  key: FontAssets.zektonFont.key,\n  size: 30,\n  fill: HexColor.lightBlue,\n  align: Phaser.GameObjects.BitmapText.ALIGN_CENTER\n};\n\nconst settingsConstants = {\n  optHeaderTextConfig: { x: screenSize.x * 0.25, y: 0, oriX: 0.5, oriY: 0.75 },\n  optXSpace: screenSize.x * 0.4,\n  optYSpace: screenSize.y * 0.7,\n  optXPos: 140,\n  volContainerOpts: ['0', '0.5', '1.0', '1.5', '2.0']\n};\n\nexport default settingsConstants;\n","import FontAssets from '../assets/FontAssets';\nimport { screenCenter, screenSize } from '../commons/CommonConstants';\nimport { BitmapFontStyle } from '../commons/CommonTypes';\nimport { HexColor } from '../utils/StyleUtils';\n\nexport const escapeOptButtonStyle: BitmapFontStyle = {\n  key: FontAssets.zektonFont.key,\n  size: 30,\n  fill: HexColor.lightBlue,\n  align: Phaser.GameObjects.BitmapText.ALIGN_CENTER\n};\n\nexport const volumeRadioOptTextStyle: BitmapFontStyle = {\n  key: FontAssets.zektonFont.key,\n  size: 20,\n  fill: HexColor.lightBlue,\n  align: Phaser.GameObjects.BitmapText.ALIGN_CENTER\n};\n\nexport const optTextStyle: BitmapFontStyle = {\n  key: FontAssets.zektonFont.key,\n  size: 30,\n  fill: HexColor.lightBlue,\n  align: Phaser.GameObjects.BitmapText.ALIGN_CENTER\n};\n\nconst escapeConstants = {\n  buttonYPos: screenSize.y * 0.15,\n  escapeOptTextConfig: { x: 0, y: 0, oriX: 0.37, oriY: 0.75 },\n\n  settingsTextConfig: { x: screenSize.x * 0.38, y: -screenCenter.y * 0.1, oriX: 0.0, oriY: 0.5 },\n  settingsYOffset: -screenCenter.y * 0.1,\n  settingsYSpace: screenSize.y * 0.3,\n\n  radioChoiceTextConfig: { x: 0, y: -45, oriX: 0.5, oriY: 0.25 },\n  radioButtonsXSpace: screenSize.x * 0.2,\n\n  volOptXPos: screenSize.x * 0.05,\n  volOptYPos: -screenSize.y * 0.1\n};\n\nexport default escapeConstants;\n","import ImageAssets from '../assets/ImageAssets';\nimport SoundAssets from '../assets/SoundAssets';\nimport { screenCenter, screenSize } from '../commons/CommonConstants';\nimport CommonRadioButton from '../commons/CommonRadioButton';\nimport { IBaseScene, IGameUI } from '../commons/CommonTypes';\nimport GameInputManager from '../input/GameInputManager';\nimport GameLayerManager from '../layer/GameLayerManager';\nimport { Layer } from '../layer/GameLayerTypes';\nimport GamePhaseManager from '../phase/GamePhaseManager';\nimport { GamePhaseType } from '../phase/GamePhaseTypes';\nimport settingsConstants from '../scenes/settings/SettingsConstants';\nimport SourceAcademyGame, { GameType } from '../SourceAcademyGame';\nimport { createButton } from '../utils/ButtonUtils';\nimport { mandatory } from '../utils/GameUtils';\nimport { calcTableFormatPos, Direction } from '../utils/StyleUtils';\nimport { createBitmapText } from '../utils/TextUtils';\nimport escapeConstants, {\n  escapeOptButtonStyle,\n  optTextStyle,\n  volumeRadioOptTextStyle\n} from './GameEscapeConstants';\n\n/**\n * Manager in charge of rendering and destroying the escape manager in a scene\n */\nclass GameEscapeManager implements IGameUI {\n  private bgmVolumeRadioButtons: CommonRadioButton | undefined;\n  private sfxVolumeRadioButtons: CommonRadioButton | undefined;\n  private scene: Phaser.Scene | undefined;\n  private layerManager: GameLayerManager | undefined;\n  private phaseManager: GamePhaseManager | undefined;\n  private inputManager: GameInputManager | undefined;\n\n  /**\n   * Initialises the escape manager UI\n   *\n   * @param scene - the scene to add escape manager\n   * @param phaseManager - the phase manager of the scene\n   * @param saveManager - the save manager of the scene\n   */\n  public initialise(scene: IBaseScene, phaseManager: GamePhaseManager) {\n    this.scene = scene;\n    this.layerManager = scene.layerManager;\n    this.inputManager = scene.inputManager;\n    this.phaseManager = phaseManager;\n  }\n\n  /**\n   * Create the container that encapsulate the 'Escape Menu' UI,\n   * i.e. the background, the buttons, and the options.\n   */\n  private createUIContainer() {\n    const escapeMenuContainer = new Phaser.GameObjects.Container(this.getScene(), 0, 0);\n\n    const escapeMenuBg = new Phaser.GameObjects.Image(\n      this.getScene(),\n      screenCenter.x,\n      screenCenter.y,\n      ImageAssets.escapeMenuBackground.key\n    )\n      .setDisplaySize(screenSize.x, screenSize.y)\n      .setInteractive({ pixelPerfect: true });\n    escapeMenuContainer.add(escapeMenuBg);\n\n    // Settings header\n    const settings = this.getSettings();\n    const settingsPos = calcTableFormatPos({\n      direction: Direction.Column,\n      numOfItems: settings.length,\n      maxYSpace: escapeConstants.settingsYSpace\n    });\n    escapeMenuContainer.add(\n      settings.map((setting, index) =>\n        createBitmapText(\n          this.getScene(),\n          setting,\n          {\n            ...escapeConstants.settingsTextConfig,\n            y: settingsPos[index][1] + escapeConstants.settingsTextConfig.y\n          },\n          optTextStyle\n        )\n      )\n    );\n\n    // Get user settings, to use as default choice in the radio buttons\n    const { bgmVolume, sfxVolume } = this.getSettingsSaveManager().getSettings();\n    const sfxVolIdx = settingsConstants.volContainerOpts.findIndex(\n      value => parseFloat(value) === sfxVolume\n    );\n    const bgmVolIdx = settingsConstants.volContainerOpts.findIndex(\n      value => parseFloat(value) === bgmVolume\n    );\n\n    // SFX Radio buttons\n    this.sfxVolumeRadioButtons = this.createSettingsRadioOptions(sfxVolIdx, settingsPos[0][1]);\n    // BGM Radio buttons\n    this.bgmVolumeRadioButtons = this.createSettingsRadioOptions(bgmVolIdx, settingsPos[1][1]);\n    escapeMenuContainer.add([this.sfxVolumeRadioButtons, this.bgmVolumeRadioButtons]);\n\n    // Get all the buttons\n    const buttons = this.getOptButtons();\n    const buttonPositions = calcTableFormatPos({\n      numOfItems: buttons.length\n    });\n\n    escapeMenuContainer.add(\n      buttons.map((button, index) =>\n        this.createEscapeOptButton(\n          button.text,\n          buttonPositions[index][0],\n          buttonPositions[index][1] + escapeConstants.buttonYPos,\n          button.callback\n        )\n      )\n    );\n\n    return escapeMenuContainer;\n  }\n\n  /**\n   * Returns all the option available in the escape menu.\n   *\n   * For SFX and BGM, these are pure headers as the options, interactivity, and functionality\n   * are handled separately (radio buttons)\n   */\n  private getSettings() {\n    return ['SFX', 'BGM'];\n  }\n\n  /**\n   * Create radio buttons matching the escape menu style.\n   *\n   * @param defaultChoiceIdx default option for the radio button\n   * @param yPos y position of the radio buttons\n   */\n  private createSettingsRadioOptions(defaultChoiceIdx: number, yPos: number) {\n    return new CommonRadioButton(\n      this.getScene(),\n      {\n        choices: settingsConstants.volContainerOpts,\n        defaultChoiceIdx: defaultChoiceIdx,\n        maxXSpace: escapeConstants.radioButtonsXSpace,\n        radioChoiceConfig: {\n          circleDim: 15,\n          checkedDim: 10,\n          outlineThickness: 3\n        },\n        choiceTextConfig: escapeConstants.radioChoiceTextConfig,\n        bitmapTextStyle: volumeRadioOptTextStyle\n      },\n      escapeConstants.volOptXPos,\n      -screenCenter.y + yPos + escapeConstants.settingsYOffset\n    );\n  }\n\n  /**\n   * Get the escape options buttons preset to be formatted later.\n   * The preset includes the text to be displayed on the button and\n   * its functionality.\n   */\n  private getOptButtons() {\n    return [\n      {\n        text: 'Main Menu',\n        callback: () => {\n          this.cleanUp();\n          if (SourceAcademyGame.getInstance().isGameType(GameType.Simulator)) {\n            this.getScene().scene.start('StorySimulatorMenu');\n          } else {\n            this.getScene().scene.start('MainMenu');\n          }\n        }\n      },\n      {\n        text: 'Continue',\n        callback: async () => {\n          if (this.getPhaseManager().isCurrentPhase(GamePhaseType.EscapeMenu)) {\n            await this.getPhaseManager().popPhase();\n          }\n        }\n      },\n      {\n        text: 'Apply Settings',\n        callback: () => this.applySettings()\n      }\n    ];\n  }\n\n  /**\n   * Format the button information to a UI container, complete with\n   * styling and functionality.\n   *\n   * @param text text to be displayed on the button\n   * @param xPos x position of the button\n   * @param yPos y position of the button\n   * @param callback callback to be executed on click\n   */\n  private createEscapeOptButton(text: string, xPos: number, yPos: number, callback: any) {\n    return createButton(this.getScene(), {\n      assetKey: ImageAssets.mediumButton.key,\n      message: text,\n      textConfig: escapeConstants.escapeOptTextConfig,\n      bitMapTextStyle: escapeOptButtonStyle,\n      onUp: callback\n    }).setPosition(xPos, yPos);\n  }\n\n  /**\n   * Process the current settings on escape menu, save, and apply the settings.\n   * Escape Menu is responsible in contacting various managers to apply the settings.\n   */\n  private async applySettings() {\n    const sfxVol = this.sfxVolumeRadioButtons\n      ? parseFloat(this.sfxVolumeRadioButtons.getChosenChoice())\n      : 1;\n    const bgmVol = this.bgmVolumeRadioButtons\n      ? parseFloat(this.bgmVolumeRadioButtons.getChosenChoice())\n      : 1;\n\n    // Save settings\n    await this.getSettingsSaveManager().saveSettings({ bgmVolume: bgmVol, sfxVolume: sfxVol });\n\n    // Apply settings\n    SourceAcademyGame.getInstance()\n      .getSoundManager()\n      .applyUserSettings(this.getSettingsSaveManager().getSettings());\n  }\n\n  /**\n   * Cleaning up of related managers.\n   */\n  private cleanUp() {\n    this.getInputManager().clearListeners();\n    this.getLayerManager().clearAllLayers();\n  }\n\n  /**\n   * Activate the 'Escape Menu' UI.\n   *\n   * Usually only called by the phase manager when 'Escape' phase is\n   * pushed.\n   */\n  public activateUI() {\n    const escapeMenuContainer = this.createUIContainer();\n    this.getSoundManager().playSound(SoundAssets.menuEnter.key);\n    this.getLayerManager().addToLayer(Layer.Escape, escapeMenuContainer);\n  }\n\n  /**\n   * Deactivate the 'Escape Menu' UI.\n   *\n   * Usually only called by the phase manager when 'Escape' phase is\n   * transitioned out.\n   */\n  public deactivateUI() {\n    this.getSoundManager().playSound(SoundAssets.menuExit.key);\n    this.getLayerManager().clearSeveralLayers([Layer.Escape]);\n  }\n\n  private getScene = () => mandatory(this.scene);\n  private getLayerManager = () => mandatory(this.layerManager);\n  private getSoundManager = () => SourceAcademyGame.getInstance().getSoundManager();\n  private getSettingsSaveManager = () => SourceAcademyGame.getInstance().getSaveManager();\n  private getPhaseManager = () => mandatory(this.phaseManager);\n  private getInputManager = () => mandatory(this.inputManager);\n}\n\nexport default GameEscapeManager;\n","import { mandatory } from '../utils/GameUtils';\n\n/**\n * Manager that keeps track of all the event listeners.\n * This manager allow clearing of all listeners at once,\n * making it easier to clean up during scene transition.\n *\n * Additionally, it can also block/allow mouse and keyboard input\n * if needed.\n */\nclass GameInputManager {\n  private scene: Phaser.Scene | undefined;\n  private keyboardListeners: Phaser.Input.Keyboard.Key[];\n  private eventListeners: Phaser.Input.InputPlugin[];\n\n  constructor() {\n    this.keyboardListeners = [];\n    this.eventListeners = [];\n  }\n\n  public initialise(scene: Phaser.Scene) {\n    this.scene = scene;\n  }\n\n  public getScene = () => mandatory(this.scene);\n\n  /**\n   * Enable/disable mouse input based on the parameter.\n   *\n   * @param active if true, mouse input is enabled. Else, mouse input is disabled.\n   */\n  public enableMouseInput(active: boolean) {\n    this.getScene().input.mouse.enabled = active;\n  }\n\n  /**\n   * Enable/disable keyboard input based on the parameter.\n   *\n   * @param active if true, keyboard input is enabled. Else, keyboard input is disabled.\n   */\n  public enableKeyboardInput(active: boolean) {\n    this.getScene().input.keyboard.enabled = active;\n  }\n\n  /**\n   * Register a keyboard listener into the input manager.\n   * The manager will keep track of this listener.\n   *\n   * @param key keyboard key the listener is attached to\n   * @param event event to be listened to\n   * @param callback callback to execute on event\n   */\n  public registerKeyboardListener(\n    key: string | number | Phaser.Input.Keyboard.Key,\n    event: string | symbol,\n    callback: Function\n  ) {\n    const keyObj = this.getScene().input.keyboard.addKey(key);\n    const keyboardListener = keyObj.addListener(event, callback);\n    this.keyboardListeners.push(keyboardListener);\n  }\n\n  /**\n   * Register an event listener into the input manager.\n   * The manager will keep track of this listener.\n   *\n   * @param event event to be listened to\n   * @param callback callback to execute on event\n   */\n  public registerEventListener(event: string | symbol, callback: Function) {\n    const eventListener = this.getScene().input.addListener(event, callback);\n    this.eventListeners.concat(eventListener);\n  }\n\n  /**\n   * Clear all listeners, keyboard and event listeners.\n   */\n  public clearListeners() {\n    this.keyboardListeners.forEach(keyboardListener => keyboardListener.removeAllListeners());\n    this.eventListeners.forEach(eventListener => eventListener.removeAllListeners());\n  }\n}\n\nexport default GameInputManager;\n","import { Constants } from '../commons/CommonConstants';\nimport { IGameUI } from '../commons/CommonTypes';\nimport GameInputManager from '../input/GameInputManager';\nimport { mandatory } from '../utils/GameUtils';\nimport { GamePhaseType } from './GamePhaseTypes';\n\n/**\n * State machine in charge of keeping track\n * of phases in the game, and is in charge of making phase\n * transitions from one phase to another.\n *\n * It keeps phases in a stack to keep track of states\n * that have been previously visited.\n *\n * For more, search for FSM (finite state machine).\n */\nexport default class GamePhaseManager {\n  public phaseMap: Map<GamePhaseType, IGameUI>;\n  private phaseStack: GamePhaseType[];\n  private inputManager: GameInputManager | undefined;\n  private phaseTransitionCallback: (newPhase: GamePhaseType) => Promise<boolean> | void;\n\n  constructor() {\n    this.phaseStack = [GamePhaseType.None];\n    this.phaseMap = new Map<GamePhaseType, IGameUI>();\n    this.phaseTransitionCallback = Constants.nullFunction;\n  }\n\n  public initialise(phaseMap: Map<GamePhaseType, IGameUI>, inputManager: GameInputManager) {\n    this.phaseMap = phaseMap;\n    this.inputManager = inputManager;\n  }\n\n  /**\n   * Set the callback of the phase manager. The callback will be executed\n   * before every phase transition. The function signature must accept a\n   * GamePhaseType and returns a boolean.\n   *\n   * @param fn callback\n   */\n  public setCallback(fn: (newPhase: GamePhaseType) => Promise<boolean>) {\n    this.phaseTransitionCallback = fn;\n  }\n\n  /**\n   * Pop the current phase, and revert to the previous phase.\n   * The current phase will no longer be saved on the phase stack.\n   */\n  public async popPhase(): Promise<void> {\n    const prevPhase = this.phaseStack.pop()!;\n    await this.executePhaseTransition(prevPhase, this.getCurrentPhase());\n  }\n\n  /**\n   * Push a new phase; will cause previous phase to transition out\n   * and transition in the new phase. Previous phase will be stored within\n   * the phase stack.\n   *\n   * @param newPhase phase to transition to\n   */\n  public async pushPhase(newPhase: GamePhaseType): Promise<void> {\n    const prevPhase = this.getCurrentPhase();\n    if (newPhase === prevPhase || this.isCurrentPhase(GamePhaseType.EscapeMenu)) return;\n    this.phaseStack.push(newPhase);\n    await this.executePhaseTransition(prevPhase, newPhase);\n  }\n\n  /**\n   * Swap the previous phase to another phase. Previous phase will no\n   * longer be saved on the phase stack.\n   *\n   * @param newPhase phase to swap to\n   */\n  public async swapPhase(newPhase: GamePhaseType): Promise<void> {\n    const prevPhase = this.getCurrentPhase();\n    if (newPhase === prevPhase || this.isCurrentPhase(GamePhaseType.EscapeMenu)) return;\n    this.phaseStack.pop();\n    this.phaseStack.push(newPhase);\n    await this.executePhaseTransition(prevPhase, newPhase);\n  }\n\n  /**\n   * Handles the transition from one phase to another,\n   * by deactivating the previous phase followed by activating the new phase.\n   *\n   * During transition, all inputs are disabled (mouse and keyboard) to prevent\n   * user input which may mutate the phase stack during the transition.\n   *\n   * Mutating the stack during the transition leads to phaseStack not matching\n   * with what is shown on user screen; which leads to undefined behaviour.\n   *\n   * @param prevPhase previous phase to deactivate\n   * @param newPhase new phase to activate\n   */\n  private async executePhaseTransition(prevPhase: GamePhaseType, newPhase: GamePhaseType) {\n    // Disable inputs to avoid user input mutating the stack\n    this.getInputManager().enableKeyboardInput(false);\n    this.getInputManager().enableMouseInput(false);\n    await this.phaseMap.get(prevPhase)!.deactivateUI();\n\n    // Execute phase transition callback.\n    // If executed, we no longer do transition to the new phase.\n    if (await this.phaseTransitionCallback(newPhase)) {\n      this.getInputManager().enableMouseInput(true);\n      this.getInputManager().enableKeyboardInput(true);\n      return;\n    }\n\n    // Transition to new phase\n    await this.phaseMap.get(newPhase)!.activateUI();\n    this.getInputManager().enableMouseInput(true);\n    this.getInputManager().enableKeyboardInput(true);\n  }\n\n  /**\n   * Checks whether the current phase is equal to the inquired phase\n   *\n   * @param phase phase to compare to\n   * @returns {boolean}\n   */\n  public isCurrentPhase(phase: GamePhaseType): boolean {\n    return this.getCurrentPhase() === phase;\n  }\n\n  /**\n   * Returns the current phase.\n   * If there is no phase, by default we return GamePhaseType.None.\n   *\n   * @return {GamePhaseType}\n   */\n  public getCurrentPhase(): GamePhaseType {\n    if (!this.phaseStack.length) {\n      this.phaseStack = [GamePhaseType.None];\n    }\n    return this.phaseStack[this.phaseStack.length - 1];\n  }\n\n  public getInputManager = () => mandatory(this.inputManager);\n}\n","import FontAssets from '../assets/FontAssets';\nimport ImageAssets from '../assets/ImageAssets';\nimport { createButton } from '../utils/ButtonUtils';\nimport { HexColor } from '../utils/StyleUtils';\nimport { screenCenter } from './CommonConstants';\nimport { BitmapFontStyle } from './CommonTypes';\n\nconst backText = 'Back';\nconst backTextYPos = -screenCenter.y * 0.975;\nconst backButtonStyle: BitmapFontStyle = {\n  key: FontAssets.zektonFont.key,\n  size: 25,\n  fill: HexColor.darkBlue,\n  align: Phaser.GameObjects.BitmapText.ALIGN_CENTER\n};\n\n/**\n * A container that is a back button that is located\n * at the top, center of the screen.\n *\n * The style and colours are fixed.\n * It is not recommended to change the position of the container.\n */\nclass CommonBackButton extends Phaser.GameObjects.Container {\n  /**\n   * @param scene scene for the button to be attached to\n   * @param callback callback to be executed on onClick\n   */\n  constructor(scene: Phaser.Scene, callback: any) {\n    super(scene, 0, 0);\n    this.renderBackButton(callback);\n  }\n\n  private renderBackButton(callback: any) {\n    const backButton = createButton(this.scene, {\n      assetKey: ImageAssets.topButton.key,\n      message: backText,\n      textConfig: { x: 0, y: backTextYPos, oriX: 0.5, oriY: 0.25 },\n      bitMapTextStyle: backButtonStyle,\n      onUp: callback\n    }).setPosition(screenCenter.x, screenCenter.y);\n    this.add(backButton);\n  }\n}\n\nexport default CommonBackButton;\n","import { Constants } from '../../commons/CommonConstants';\n\nexport const magnifyingGlass = `url(${Constants.assetsFolder}/ui/magnifying.png), pointer`;\nexport const magnifyingGlassHighlight = `url(${Constants.assetsFolder}/ui/magnifying_trigg.png), pointer`;\nexport const magnifyingGlassChecked = `url(${Constants.assetsFolder}/ui/magnifying_check.png), pointer`;\n","import GameGlobalAPI from 'src/features/game/scenes/gameManager/GameGlobalAPI';\n\nimport SoundAssets from '../../assets/SoundAssets';\nimport CommonBackButton from '../../commons/CommonBackButton';\nimport { screenSize } from '../../commons/CommonConstants';\nimport { IGameUI, ItemId } from '../../commons/CommonTypes';\nimport { fadeAndDestroy } from '../../effects/FadeEffect';\nimport { entryTweenProps, exitTweenProps } from '../../effects/FlyEffect';\nimport { Layer } from '../../layer/GameLayerTypes';\nimport { sleep } from '../../utils/GameUtils';\nimport {\n  magnifyingGlass,\n  magnifyingGlassChecked,\n  magnifyingGlassHighlight\n} from './GameModeExploreConstants';\n\n/**\n * The class in charge of showing \"Explore\" mode UI\n * which comprises back button, attaching magnifying glass cursor and\n * making objects and bounding boxes active during Explore mode\n */\nclass GameModeExplore implements IGameUI {\n  private uiContainer: Phaser.GameObjects.Container | undefined;\n\n  /**\n   * Create the container that encapsulate the 'Explore' mode UI,\n   * i.e. the back button.\n   */\n  public createUIContainer(): Phaser.GameObjects.Container {\n    const gameManager = GameGlobalAPI.getInstance().getGameManager();\n    const exploreMenuContainer = new Phaser.GameObjects.Container(gameManager, 0, 0);\n\n    const backButton = new CommonBackButton(gameManager, () => {\n      GameGlobalAPI.getInstance().popPhase();\n      GameGlobalAPI.getInstance().fadeInLayer(Layer.Character, 300);\n    });\n    exploreMenuContainer.add(backButton);\n    return exploreMenuContainer;\n  }\n\n  /**\n   * Activate the 'Explore' mode UI.\n   *\n   * Usually only called by the phase manager when 'Explore' phase is\n   * pushed.\n   */\n  public async activateUI(): Promise<void> {\n    const gameManager = GameGlobalAPI.getInstance().getGameManager();\n\n    this.uiContainer = this.createUIContainer();\n    GameGlobalAPI.getInstance().addContainerToLayer(Layer.UI, this.uiContainer);\n\n    this.uiContainer.setPosition(this.uiContainer.x, -screenSize.y);\n\n    gameManager.tweens.add({\n      targets: this.uiContainer,\n      ...entryTweenProps\n    });\n\n    // Activate objects action and make them interactable\n    GameGlobalAPI.getInstance().enableObjectAction({\n      onClick: this.explorePointerUp,\n      onHover: this.explorePointerOver,\n      onPointerout: this.explorePointerOut\n    });\n\n    // Activate bbox action and make them itneractable\n    GameGlobalAPI.getInstance().enableBBoxAction({\n      onClick: this.explorePointerUp,\n      onHover: this.explorePointerOver,\n      onPointerout: this.explorePointerOut\n    });\n\n    // Change default icon\n    gameManager.input.setDefaultCursor(magnifyingGlass);\n    GameGlobalAPI.getInstance().playSound(SoundAssets.modeEnter.key);\n  }\n\n  /**\n   * Deactivate the 'Explore' mode UI.\n   *\n   * Usually only called by the phase manager when 'Explore' phase is\n   * transitioned out.\n   */\n  public async deactivateUI(): Promise<void> {\n    const gameManager = GameGlobalAPI.getInstance().getGameManager();\n\n    // Reset the cursor\n    gameManager.input.setDefaultCursor('');\n\n    // Disable objects and bbox action, should not be interactable\n    // outside Explore mode\n    GameGlobalAPI.getInstance().disableBBoxAction();\n    GameGlobalAPI.getInstance().disableObjectAction();\n\n    if (this.uiContainer) {\n      this.uiContainer.setPosition(this.uiContainer.x, 0);\n\n      gameManager.tweens.add({\n        targets: this.uiContainer,\n        ...exitTweenProps\n      });\n\n      await sleep(500);\n      fadeAndDestroy(gameManager, this.uiContainer);\n    }\n  }\n\n  /**\n   * Function to be executed when user hover upon interactable object/bbox.\n   * It sets the cursor to different icons based on wheter user has ever\n   * interacted with it previously.\n   *\n   * @param id id of the object, to be used to check whether it has been\n   *           triggered before\n   */\n  private explorePointerOver(id: ItemId) {\n    const gameManager = GameGlobalAPI.getInstance().getGameManager();\n    const hasTriggered = GameGlobalAPI.getInstance().hasTriggeredInteraction(id);\n    if (hasTriggered) {\n      gameManager.input.setDefaultCursor(magnifyingGlassChecked);\n    } else {\n      gameManager.input.setDefaultCursor(magnifyingGlassHighlight);\n    }\n  }\n\n  /**\n   * Function to be executed when user off hover upon interactable object/bbox.\n   * It sets the cursor back to 'Explore' mode cursor.\n   */\n  private explorePointerOut() {\n    const gameManager = GameGlobalAPI.getInstance().getGameManager();\n    gameManager.input.setDefaultCursor(magnifyingGlass);\n  }\n\n  /**\n   * Function to be executed when user click on the interatable object/bbox.\n   *\n   * It will prompt GameStateManager to record that this interaction has\n   * been triggered.\n   *\n   * @param id id of the object, to be used to inform GameStateManager\n   */\n  private explorePointerUp(id: string) {\n    const gameManager = GameGlobalAPI.getInstance().getGameManager();\n    gameManager.input.setDefaultCursor('');\n    GameGlobalAPI.getInstance().triggerInteraction(id);\n    gameManager.input.setDefaultCursor(magnifyingGlass);\n  }\n}\n\nexport default GameModeExplore;\n","import FontAssets from '../../assets/FontAssets';\nimport { screenSize } from '../../commons/CommonConstants';\nimport { BitmapFontStyle } from '../../commons/CommonTypes';\nimport { HexColor } from '../../utils/StyleUtils';\n\nexport const modeButtonStyle: BitmapFontStyle = {\n  key: FontAssets.zektonFont.key,\n  size: 45,\n  fill: HexColor.lightBlue,\n  align: Phaser.GameObjects.BitmapText.ALIGN_CENTER\n};\n\nconst modeMenuConstants = {\n  buttonYPosOffset: screenSize.y * 0.3,\n  entryTweenProps: {\n    y: 0,\n    duration: 500,\n    ease: 'Power2'\n  },\n  exitTweenProps: {\n    y: screenSize.y * 0.4,\n    duration: 300,\n    ease: 'Power2'\n  }\n};\n\nexport default modeMenuConstants;\n","import GameGlobalAPI from 'src/features/game/scenes/gameManager/GameGlobalAPI';\n\nimport ImageAssets from '../../assets/ImageAssets';\nimport SoundAssets from '../../assets/SoundAssets';\nimport { screenCenter, screenSize } from '../../commons/CommonConstants';\nimport { IGameUI } from '../../commons/CommonTypes';\nimport { fadeAndDestroy } from '../../effects/FadeEffect';\nimport { Layer } from '../../layer/GameLayerTypes';\nimport { GameLocationAttr } from '../../location/GameMapTypes';\nimport { createButton } from '../../utils/ButtonUtils';\nimport { sleep } from '../../utils/GameUtils';\nimport { calcTableFormatPos } from '../../utils/StyleUtils';\nimport { GameMode, gameModeToPhase } from '../GameModeTypes';\nimport modeMenuConstants, { modeButtonStyle } from './GameModeMenuConstants';\n\n/**\n * The class in charge of showing the \"Menu\" mode UI\n * which displays the menu for players\n * to choose the game mode they want to play\n * in a location\n */\nclass GameModeMenu implements IGameUI {\n  private uiContainer: Phaser.GameObjects.Container | undefined;\n\n  /**\n   * Fetches the game modes of the current location id.\n   */\n  private getLatestLocationModes() {\n    const currLocId = GameGlobalAPI.getInstance().getCurrLocId();\n    let latestModesInLoc = GameGlobalAPI.getInstance().getModesByLocId(currLocId);\n    const talkTopics = GameGlobalAPI.getInstance().getLocationAttr(\n      GameLocationAttr.talkTopics,\n      currLocId\n    );\n\n    // Remove talk mode if there is no talk topics\n    if (talkTopics.length === 0) {\n      latestModesInLoc = latestModesInLoc.filter(mode => mode !== GameMode.Talk);\n    }\n\n    return latestModesInLoc;\n  }\n\n  /**\n   * Create the container that encapsulate the 'Menu' mode UI,\n   * i.e. the modes selection.\n   */\n  private createUIContainer() {\n    const gameManager = GameGlobalAPI.getInstance().getGameManager();\n    const modeMenuContainer = new Phaser.GameObjects.Container(gameManager, 0, 0);\n\n    const modeBanner = new Phaser.GameObjects.Image(\n      gameManager,\n      screenCenter.x,\n      screenCenter.y,\n      ImageAssets.modeMenuBanner.key\n    );\n    modeMenuContainer.add(modeBanner);\n\n    const modes = this.getLatestLocationModes();\n    const buttons = this.getModeButtons(modes);\n    const buttonPositions = calcTableFormatPos({\n      numOfItems: buttons.length\n    });\n\n    modeMenuContainer.add(\n      buttons.map((button, index) =>\n        this.createModeButton(\n          button.text,\n          buttonPositions[index][0],\n          buttonPositions[index][1] + modeMenuConstants.buttonYPosOffset,\n          button.callback\n        )\n      )\n    );\n    return modeMenuContainer;\n  }\n\n  /**\n   * Get the mode buttons preset to be formatted later.\n   * The preset includes the text to be displayed on the button and\n   * its functionality (phase change callback).\n   *\n   * @param modes modes to be shown\n   */\n  private getModeButtons(modes: GameMode[]) {\n    return modes.sort().map(mode => {\n      return {\n        text: mode,\n        callback: () => {\n          GameGlobalAPI.getInstance().pushPhase(gameModeToPhase[mode]);\n          if (mode !== GameMode.Talk) {\n            GameGlobalAPI.getInstance().fadeOutLayer(Layer.Character, 300);\n          }\n        }\n      };\n    });\n  }\n\n  /**\n   * Format the button information to a UI container, complete with\n   * styling and functionality.\n   *\n   * @param text text to be displayed on the button\n   * @param xPos x position of the button\n   * @param yPos y position of the button\n   * @param callback callback to be executed on click\n   */\n  private createModeButton(text: string, xPos: number, yPos: number, callback: any) {\n    const gameManager = GameGlobalAPI.getInstance().getGameManager();\n    return createButton(gameManager, {\n      assetKey: ImageAssets.shortButton.key,\n      message: text,\n      textConfig: { x: 0, y: 0, oriX: 0.5, oriY: 0.25 },\n      bitMapTextStyle: modeButtonStyle,\n      onUp: callback\n    }).setPosition(xPos, yPos);\n  }\n\n  /**\n   * Activate the 'Menu' mode UI.\n   *\n   * Usually only called by the phase manager when 'Menu' phase is\n   * pushed.\n   */\n  public async activateUI(): Promise<void> {\n    const gameManager = GameGlobalAPI.getInstance().getGameManager();\n    this.uiContainer = this.createUIContainer();\n    GameGlobalAPI.getInstance().addContainerToLayer(Layer.UI, this.uiContainer);\n\n    this.uiContainer.setPosition(this.uiContainer.x, screenSize.y);\n\n    gameManager.tweens.add({\n      targets: this.uiContainer,\n      ...modeMenuConstants.entryTweenProps\n    });\n    GameGlobalAPI.getInstance().playSound(SoundAssets.modeEnter.key);\n  }\n\n  /**\n   * Deactivate the 'Menu' mode UI.\n   *\n   * Usually only called by the phase manager when 'Menu' phase is\n   * transitioned out.\n   */\n  public async deactivateUI(): Promise<void> {\n    const gameManager = GameGlobalAPI.getInstance().getGameManager();\n\n    if (this.uiContainer) {\n      this.uiContainer.setPosition(this.uiContainer.x, 0);\n\n      gameManager.tweens.add({\n        targets: this.uiContainer,\n        ...modeMenuConstants.exitTweenProps\n      });\n\n      await sleep(500);\n      fadeAndDestroy(gameManager, this.uiContainer);\n    }\n  }\n}\n\nexport default GameModeMenu;\n","import FontAssets from '../../assets/FontAssets';\nimport { screenSize } from '../../commons/CommonConstants';\nimport { BitmapFontStyle } from '../../commons/CommonTypes';\nimport { HexColor } from '../../utils/StyleUtils';\n\nexport const moveButtonStyle: BitmapFontStyle = {\n  key: FontAssets.zektonFont.key,\n  size: 30,\n  fill: HexColor.lightBlue,\n  align: Phaser.GameObjects.BitmapText.ALIGN_CENTER\n};\n\nconst modeMoveConstants = {\n  buttonYSpace: screenSize.y * 0.8,\n  buttonXPosOffset: screenSize.x * 0.25,\n  previewFrameXPos: screenSize.x * 0.3,\n  previewWidth: screenSize.x * 0.473,\n  previewHeight: screenSize.y * 0.56,\n  previewXPos: screenSize.x * 0.3125,\n  previewYPos: screenSize.y * 0.515\n};\n\nexport default modeMoveConstants;\n","import ImageAssets from '../../assets/ImageAssets';\nimport SoundAssets from '../../assets/SoundAssets';\nimport CommonBackButton from '../../commons/CommonBackButton';\nimport { screenCenter, screenSize } from '../../commons/CommonConstants';\nimport { IGameUI } from '../../commons/CommonTypes';\nimport { fadeAndDestroy } from '../../effects/FadeEffect';\nimport { entryTweenProps, exitTweenProps } from '../../effects/FlyEffect';\nimport { Layer } from '../../layer/GameLayerTypes';\nimport { GameLocationAttr, LocationId } from '../../location/GameMapTypes';\nimport GameGlobalAPI from '../../scenes/gameManager/GameGlobalAPI';\nimport { createButton } from '../../utils/ButtonUtils';\nimport { sleep } from '../../utils/GameUtils';\nimport { resizeOverflow } from '../../utils/SpriteUtils';\nimport { calcTableFormatPos } from '../../utils/StyleUtils';\nimport modeMoveConstants, { moveButtonStyle } from './GameModeMoveConstants';\n\n/**\n * The class in charge of showing the \"Move\" UI\n * to show the images and titles of navigable\n * locations from one location\n */\nclass GameModeMove implements IGameUI {\n  private uiContainer: Phaser.GameObjects.Container | undefined;\n  private previewMask: Phaser.GameObjects.Graphics | undefined;\n\n  /**\n   * Set the location preview sprite to the given asset key.\n   *\n   * @param sprite sprite for which its texture will be replaced with the new preview\n   * @param assetKey asset key of the new preview\n   */\n  private setPreview(sprite: Phaser.GameObjects.Sprite, assetKey: string) {\n    sprite\n      .setTexture(assetKey)\n      .setPosition(modeMoveConstants.previewXPos, modeMoveConstants.previewYPos);\n    resizeOverflow(sprite, modeMoveConstants.previewWidth, modeMoveConstants.previewHeight);\n  }\n\n  /**\n   * Fetches the navigations of the current location id.\n   */\n  private getLatestNavigations() {\n    return GameGlobalAPI.getInstance().getLocationAttr(\n      GameLocationAttr.navigation,\n      GameGlobalAPI.getInstance().getCurrLocId()\n    );\n  }\n\n  /**\n   * Create the container that encapsulate the 'Move' mode UI,\n   * i.e. the navigation, the back button, as well the preview of\n   * the location.\n   */\n  private createUIContainer() {\n    const gameManager = GameGlobalAPI.getInstance().getGameManager();\n    const moveMenuContainer = new Phaser.GameObjects.Container(gameManager, 0, 0);\n\n    // Preview\n    const previewMask = new Phaser.GameObjects.Graphics(gameManager)\n      .fillRect(\n        modeMoveConstants.previewXPos - modeMoveConstants.previewWidth / 2,\n        modeMoveConstants.previewYPos - modeMoveConstants.previewHeight / 2,\n        modeMoveConstants.previewWidth,\n        modeMoveConstants.previewHeight\n      )\n      .setAlpha(0);\n    const previewFrame = new Phaser.GameObjects.Sprite(\n      gameManager,\n      modeMoveConstants.previewFrameXPos,\n      screenCenter.y,\n      ImageAssets.locationPreviewFrame.key\n    );\n    const previewFill = new Phaser.GameObjects.Sprite(\n      gameManager,\n      screenCenter.x,\n      screenCenter.y,\n      ImageAssets.locationPreviewFill.key\n    ).setMask(previewMask.createGeometryMask());\n    moveMenuContainer.add([previewFrame, previewFill]);\n\n    // Add all navigation buttons\n    const navigations = this.getLatestNavigations();\n    const buttons = this.getMoveButtons(navigations, previewFill);\n    const buttonPositions = calcTableFormatPos({\n      numOfItems: buttons.length,\n      numItemLimit: 1,\n      maxYSpace: modeMoveConstants.buttonYSpace\n    });\n\n    moveMenuContainer.add(\n      buttons.map((button, index) =>\n        this.createMoveButton(\n          button.text,\n          buttonPositions[index][0] + modeMoveConstants.buttonXPosOffset,\n          buttonPositions[index][1],\n          button.callback,\n          button.onHover,\n          button.onOut\n        )\n      )\n    );\n\n    const backButton = new CommonBackButton(gameManager, () => {\n      GameGlobalAPI.getInstance().popPhase();\n      GameGlobalAPI.getInstance().fadeInLayer(Layer.Character, 300);\n    });\n    moveMenuContainer.add(backButton);\n\n    // Initial setting\n    this.setPreview(previewFill, ImageAssets.defaultLocationImg.key);\n\n    // Keep reference to mask for tweening\n    this.previewMask = previewMask;\n\n    return moveMenuContainer;\n  }\n\n  /**\n   * Get the move buttons preset to be formatted later.\n   * The preset includes the text to be displayed on the button and\n   * its functionality (change location callback).\n   *\n   * @param navigations navigations from the current location\n   * @param previewSprite the sprite in which to show the location preview, to be included\n   *                      in the callback\n   */\n  private getMoveButtons(navigations: LocationId[], previewSprite: Phaser.GameObjects.Sprite) {\n    const previewLoc = (assetKey: string) => this.setPreview(previewSprite, assetKey);\n    const previewDefault = () => this.setPreview(previewSprite, ImageAssets.defaultLocationImg.key);\n\n    return navigations.map(nav => {\n      const location = GameGlobalAPI.getInstance().getLocationAtId(nav);\n      return {\n        text: location.name,\n        callback: async () => {\n          await GameGlobalAPI.getInstance().popPhase();\n          await GameGlobalAPI.getInstance().changeLocationTo(nav);\n        },\n        onHover: () => previewLoc(location.assetKey),\n        onOut: () => previewDefault()\n      };\n    });\n  }\n\n  /**\n   * Format the button information to a UI container, complete with\n   * styling and functionality.\n   *\n   * @param text text to be displayed on the button\n   * @param xPos x position of the button\n   * @param yPos y position of the button\n   * @param callback callback to be executed on click\n   * @param onHover callback to be executed on hover\n   * @param onOut callback to be executed on out hover\n   */\n  private createMoveButton(\n    text: string,\n    xPos: number,\n    yPos: number,\n    callback: any,\n    onHover: any,\n    onOut: any\n  ) {\n    const gameManager = GameGlobalAPI.getInstance().getGameManager();\n    return createButton(gameManager, {\n      assetKey: ImageAssets.longButton.key,\n      message: text,\n      textConfig: { x: 0, y: 0, oriX: 0.4, oriY: 0.15 },\n      bitMapTextStyle: moveButtonStyle,\n      onUp: callback,\n      onHover: onHover,\n      onOut: onOut\n    }).setPosition(xPos, yPos);\n  }\n\n  /**\n   * Activate the 'Move' mode UI.\n   *\n   * Usually only called by the phase manager when 'Move' phase is\n   * pushed.\n   */\n  public async activateUI(): Promise<void> {\n    const gameManager = GameGlobalAPI.getInstance().getGameManager();\n    this.uiContainer = this.createUIContainer();\n    GameGlobalAPI.getInstance().addContainerToLayer(Layer.UI, this.uiContainer);\n\n    this.uiContainer.setPosition(this.uiContainer.x, -screenSize.y);\n    this.previewMask!.setPosition(this.uiContainer.x, -screenSize.y);\n\n    gameManager.tweens.add({\n      targets: [this.uiContainer, this.previewMask],\n      ...entryTweenProps\n    });\n    GameGlobalAPI.getInstance().playSound(SoundAssets.modeEnter.key);\n  }\n\n  /**\n   * Deactivate the 'Move' mode UI.\n   *\n   * Usually only called by the phase manager when 'Move' phase is\n   * transitioned out.\n   */\n  public async deactivateUI(): Promise<void> {\n    const gameManager = GameGlobalAPI.getInstance().getGameManager();\n\n    if (this.uiContainer) {\n      this.uiContainer.setPosition(this.uiContainer.x, 0);\n      this.previewMask!.setPosition(this.uiContainer.x, 0);\n\n      gameManager.tweens.add({\n        targets: [this.uiContainer, this.previewMask],\n        ...exitTweenProps\n      });\n\n      await sleep(500);\n      fadeAndDestroy(gameManager, this.uiContainer);\n      this.previewMask!.destroy();\n    }\n  }\n}\n\nexport default GameModeMove;\n","import { IGameUI } from '../../commons/CommonTypes';\n\n/**\n * This is the phase that is active when none of\n * the mode UI's are being shown.\n *\n * It is used for dialogue/popups and notifications\n */\nclass GameModeSequence implements IGameUI {\n  public activateUI() {}\n  public deactivateUI() {}\n}\n\nexport default GameModeSequence;\n","import FontAssets from '../../assets/FontAssets';\nimport { screenSize } from '../../commons/CommonConstants';\nimport { BitmapFontStyle } from '../../commons/CommonTypes';\nimport { HexColor } from '../../utils/StyleUtils';\n\nexport const talkButtonYSpace = screenSize.y * 0.7;\n\nexport const talkButtonStyle: BitmapFontStyle = {\n  key: FontAssets.zektonFont.key,\n  size: 30,\n  fill: HexColor.lightBlue,\n  align: Phaser.GameObjects.BitmapText.ALIGN_CENTER\n};\n","import GameGlobalAPI from 'src/features/game/scenes/gameManager/GameGlobalAPI';\n\nimport ImageAssets from '../../assets/ImageAssets';\nimport SoundAssets from '../../assets/SoundAssets';\nimport CommonBackButton from '../../commons/CommonBackButton';\nimport { screenSize } from '../../commons/CommonConstants';\nimport { IGameUI, ItemId } from '../../commons/CommonTypes';\nimport { fadeAndDestroy } from '../../effects/FadeEffect';\nimport { entryTweenProps, exitTweenProps } from '../../effects/FlyEffect';\nimport { Layer } from '../../layer/GameLayerTypes';\nimport { GameLocationAttr } from '../../location/GameMapTypes';\nimport { createButton } from '../../utils/ButtonUtils';\nimport { mandatory, sleep } from '../../utils/GameUtils';\nimport { calcTableFormatPos } from '../../utils/StyleUtils';\nimport { talkButtonStyle, talkButtonYSpace } from './GameModeTalkConstants';\n\n/**\n * The class renders the \"Talk\" UI which displays\n * a selection of all the dialogues that players can\n * talk about in a location.\n */\nclass GameModeTalk implements IGameUI {\n  private uiContainer: Phaser.GameObjects.Container | undefined;\n\n  /**\n   * Fetches the talk topics of the current location id.\n   */\n  private getLatestTalkTopics() {\n    return GameGlobalAPI.getInstance().getLocationAttr(\n      GameLocationAttr.talkTopics,\n      GameGlobalAPI.getInstance().getCurrLocId()\n    );\n  }\n\n  /**\n   * Create the container that encapsulate the 'Talk' mode UI,\n   * i.e. the talk topics, the back button, as well the checked\n   * icon for triggered talk topics.\n   */\n  private createUIContainer() {\n    const gameManager = GameGlobalAPI.getInstance().getGameManager();\n    const talkMenuContainer = new Phaser.GameObjects.Container(gameManager, 0, 0);\n\n    // Add talk topics of the location\n    const talkTopics = this.getLatestTalkTopics();\n    const buttons = this.getTalkTopicButtons(talkTopics);\n    const buttonPositions = calcTableFormatPos({\n      numOfItems: buttons.length,\n      maxYSpace: talkButtonYSpace\n    });\n\n    talkMenuContainer.add(\n      buttons.map((button, index) =>\n        this.createTalkTopicButton(\n          button.text,\n          buttonPositions[index][0],\n          buttonPositions[index][1],\n          button.callback\n        )\n      )\n    );\n\n    // Add check for interacted talk topics\n    buttons.forEach((button, index) => {\n      const checkedSprite = new Phaser.GameObjects.Sprite(\n        gameManager,\n        buttonPositions[index][0],\n        buttonPositions[index][1],\n        ImageAssets.talkOptCheck.key\n      );\n\n      const isTriggeredTopic =\n        !!button.interactionId &&\n        GameGlobalAPI.getInstance().hasTriggeredInteraction(button.interactionId);\n\n      if (isTriggeredTopic) {\n        talkMenuContainer.add(checkedSprite);\n      }\n    });\n\n    const backButton = new CommonBackButton(gameManager, () =>\n      GameGlobalAPI.getInstance().popPhase()\n    );\n    talkMenuContainer.add(backButton);\n    return talkMenuContainer;\n  }\n\n  /**\n   * Get the talk topics button preset to be formatted later.\n   * The preset includes the text to be displayed on the button and\n   * its functionality (dialogue callback).\n   *\n   * @param dialogueIds dialogue IDs to create talk topics from\n   */\n  private getTalkTopicButtons(dialogueIds: ItemId[]) {\n    return dialogueIds.map(dialogueId => {\n      const dialogue = mandatory(GameGlobalAPI.getInstance().getDialogue(dialogueId));\n      return {\n        text: dialogue.title,\n        callback: async () => {\n          GameGlobalAPI.getInstance().triggerInteraction(dialogueId);\n          await GameGlobalAPI.getInstance().showDialogue(dialogueId);\n        },\n        interactionId: dialogueId\n      };\n    });\n  }\n\n  /**\n   * Format the button information to a UI container, complete with\n   * styling and functionality.\n   *\n   * @param text text to be displayed on the button\n   * @param xPos x position of the button\n   * @param yPos y position of the button\n   * @param callback callback to be executed on click\n   */\n  private createTalkTopicButton(text: string, xPos: number, yPos: number, callback: any) {\n    const gameManager = GameGlobalAPI.getInstance().getGameManager();\n    return createButton(gameManager, {\n      assetKey: ImageAssets.talkOptButton.key,\n      message: text,\n      textConfig: { x: 0, y: 0, oriX: 0.5, oriY: 0.2 },\n      bitMapTextStyle: talkButtonStyle,\n      onUp: callback\n    }).setPosition(xPos, yPos);\n  }\n\n  /**\n   * Activate the 'Talk' mode UI.\n   *\n   * Usually only called by the phase manager when 'Talk' phase is\n   * pushed.\n   */\n  public async activateUI(): Promise<void> {\n    const gameManager = GameGlobalAPI.getInstance().getGameManager();\n    this.uiContainer = this.createUIContainer();\n    GameGlobalAPI.getInstance().addContainerToLayer(Layer.UI, this.uiContainer);\n\n    this.uiContainer.setPosition(this.uiContainer.x, -screenSize.y);\n\n    gameManager.tweens.add({\n      targets: this.uiContainer,\n      ...entryTweenProps\n    });\n    GameGlobalAPI.getInstance().playSound(SoundAssets.modeEnter.key);\n  }\n\n  /**\n   * Deactivate the 'Talk' mode UI.\n   *\n   * Usually only called by the phase manager when 'Talk' phase is\n   * transitioned out.\n   */\n  public async deactivateUI(): Promise<void> {\n    const gameManager = GameGlobalAPI.getInstance().getGameManager();\n    if (this.uiContainer) {\n      this.uiContainer.setPosition(this.uiContainer.x, 0);\n\n      gameManager.tweens.add({\n        targets: this.uiContainer,\n        ...exitTweenProps\n      });\n\n      await sleep(500);\n      fadeAndDestroy(gameManager, this.uiContainer);\n    }\n  }\n}\n\nexport default GameModeTalk;\n","import GameActionManager from 'src/features/game/action/GameActionManager';\nimport GameBBoxManager from 'src/features/game/boundingBoxes/GameBoundingBoxManager';\nimport { GameCheckpoint } from 'src/features/game/chapter/GameChapterTypes';\nimport GameCharacterManager from 'src/features/game/character/GameCharacterManager';\nimport GameDialogueManager from 'src/features/game/dialogue/GameDialogueManager';\nimport { blackFade } from 'src/features/game/effects/FadeEffect';\nimport { addLoadingScreen } from 'src/features/game/effects/LoadingScreen';\nimport GameLayerManager from 'src/features/game/layer/GameLayerManager';\nimport { LocationId } from 'src/features/game/location/GameMapTypes';\nimport GameObjectManager from 'src/features/game/objects/GameObjectManager';\nimport GamePopUpManager from 'src/features/game/popUp/GamePopUpManager';\nimport SourceAcademyGame from 'src/features/game/SourceAcademyGame';\nimport GameStateManager from 'src/features/game/state/GameStateManager';\nimport GameUserStateManager from 'src/features/game/state/GameUserStateManager';\n\nimport GameAwardsManager from '../../awards/GameAwardsManager';\nimport GameBackgroundManager from '../../background/GameBackgroundManager';\nimport { Constants } from '../../commons/CommonConstants';\nimport GameEscapeManager from '../../escape/GameEscapeManager';\nimport GameInputManager from '../../input/GameInputManager';\nimport { Layer } from '../../layer/GameLayerTypes';\nimport GamePhaseManager from '../../phase/GamePhaseManager';\nimport { GamePhaseType } from '../../phase/GamePhaseTypes';\nimport GameSaveManager from '../../save/GameSaveManager';\nimport { mandatory, toS3Path } from '../../utils/GameUtils';\nimport GameGlobalAPI from './GameGlobalAPI';\nimport { createGamePhases } from './GameManagerHelper';\n\ntype GameManagerProps = {\n  continueGame: boolean;\n  chapterNum: number;\n  checkpointNum: number;\n  gameCheckpoint: GameCheckpoint;\n};\n\n/**\n * Main scene that plays the checkpoint.\n *\n * It processes checkpoint objects and loads\n * the chapter exclusive assets (location image, sounds).\n *\n * It also handles main gameplay loop, e.g. switching between modes,\n * activation of escape or collectible menu, location switching,\n * triggering actions, etc.\n */\nclass GameManager extends Phaser.Scene {\n  public currentLocationId: LocationId;\n  private currentCheckpoint: GameCheckpoint | undefined;\n\n  public layerManager: GameLayerManager;\n  public stateManager: GameStateManager;\n  public objectManager: GameObjectManager;\n  public characterManager: GameCharacterManager;\n  public dialogueManager: GameDialogueManager;\n  public actionManager: GameActionManager;\n  public userStateManager: GameUserStateManager;\n  public boundingBoxManager: GameBBoxManager;\n  public popUpManager: GamePopUpManager;\n  public saveManager?: GameSaveManager;\n  public escapeManager: GameEscapeManager;\n  public phaseManager: GamePhaseManager;\n  public backgroundManager: GameBackgroundManager;\n  public inputManager: GameInputManager;\n  public awardsManager: GameAwardsManager;\n\n  constructor() {\n    super('GameManager');\n    this.currentCheckpoint = undefined;\n    this.currentLocationId = Constants.nullInteractionId;\n\n    this.layerManager = new GameLayerManager();\n    this.stateManager = new GameStateManager();\n    this.characterManager = new GameCharacterManager();\n    this.objectManager = new GameObjectManager();\n    this.dialogueManager = new GameDialogueManager();\n    this.actionManager = new GameActionManager();\n    this.userStateManager = new GameUserStateManager();\n    this.boundingBoxManager = new GameBBoxManager();\n    this.popUpManager = new GamePopUpManager();\n    this.escapeManager = new GameEscapeManager();\n    this.phaseManager = new GamePhaseManager();\n    this.backgroundManager = new GameBackgroundManager();\n    this.inputManager = new GameInputManager();\n    this.awardsManager = new GameAwardsManager();\n  }\n\n  public init({ gameCheckpoint, continueGame, chapterNum, checkpointNum }: GameManagerProps) {\n    SourceAcademyGame.getInstance().setCurrentSceneRef(this);\n    SourceAcademyGame.getInstance()\n      .getSaveManager()\n      .registerGameInfo(chapterNum, checkpointNum, continueGame);\n    this.currentCheckpoint = gameCheckpoint;\n    this.layerManager = new GameLayerManager();\n    this.stateManager = new GameStateManager();\n    this.characterManager = new GameCharacterManager();\n    this.objectManager = new GameObjectManager();\n    this.dialogueManager = new GameDialogueManager();\n    this.actionManager = new GameActionManager();\n    this.userStateManager = new GameUserStateManager();\n    this.boundingBoxManager = new GameBBoxManager();\n    this.popUpManager = new GamePopUpManager();\n    this.escapeManager = new GameEscapeManager();\n    this.phaseManager = new GamePhaseManager();\n    this.backgroundManager = new GameBackgroundManager();\n    this.inputManager = new GameInputManager();\n    this.awardsManager = new GameAwardsManager();\n  }\n\n  //////////////////////\n  //    Preload       //\n  //////////////////////\n\n  public preload() {\n    GameGlobalAPI.getInstance().setGameManager(this);\n    addLoadingScreen(this);\n\n    this.currentLocationId =\n      this.getSaveManager().getLoadedLocation() || this.getCurrentCheckpoint().startingLoc;\n    this.stateManager.initialise(this);\n    this.userStateManager.initialise();\n    this.dialogueManager.initialise(this);\n    this.characterManager.initialise(this);\n    this.actionManager.initialise(this);\n    this.inputManager.initialise(this);\n    this.boundingBoxManager.initialise();\n    this.objectManager.initialise();\n    this.layerManager.initialise(this);\n    this.awardsManager.initialise(this, this.userStateManager, this.phaseManager);\n    this.phaseManager.initialise(\n      createGamePhases(this.escapeManager, this.awardsManager),\n      this.inputManager\n    );\n    this.escapeManager.initialise(this, this.phaseManager);\n\n    this.phaseManager.setCallback(\n      async (newPhase: GamePhaseType) => await this.checkpointTransition(newPhase)\n    );\n    this.preloadLocationsAssets(this.getCurrentCheckpoint());\n    this.bindKeyboardTriggers();\n  }\n\n  /**\n   * Preload all assets (image and sounds) exclusive to the checkpoint.\n   *\n   * @param checkpoint checkpoint to have its assets loaded\n   */\n  private preloadLocationsAssets(checkpoint: GameCheckpoint) {\n    GameGlobalAPI.getInstance().loadSounds(checkpoint.map.getSoundAssets());\n    checkpoint.map.getMapAssets().forEach((assetPath, assetKey) => {\n      this.load.image(assetKey, toS3Path(assetPath));\n    });\n  }\n\n  //////////////////////\n  // Location Helpers //\n  //////////////////////\n\n  public async create() {\n    await this.userStateManager.loadAssessments();\n    await this.userStateManager.loadAchievements();\n    await this.changeLocationTo(this.currentLocationId, true);\n    await GameGlobalAPI.getInstance().saveGame();\n  }\n\n  /**\n   * Render a location, the assets related to it (objects, character);\n   * before executing the following in order (if available):\n   *\n   * Start Action, Notification, Cutscene\n   *\n   * Start action is only played whe startAction argument is set to true;\n   * commonly only the first time user loads the checkpoint.\n   *\n   * @param locationId id of the location to render\n   * @param startAction if set to true, startAction will be executed\n   */\n  private async renderLocation(locationId: LocationId, startAction: boolean) {\n    const gameLocation = GameGlobalAPI.getInstance().getLocationAtId(locationId);\n\n    // Play the BGM attached to the location\n    await GameGlobalAPI.getInstance().playBgMusic(gameLocation.bgmKey);\n\n    // Render all assets related to the location\n    this.backgroundManager.renderBackgroundLayerContainer(locationId);\n    this.objectManager.renderObjectsLayerContainer(locationId);\n    this.boundingBoxManager.renderBBoxLayerContainer(locationId);\n    this.characterManager.renderCharacterLayerContainer(locationId);\n    this.layerManager.showLayer(Layer.Character);\n\n    await this.phaseManager.swapPhase(GamePhaseType.Sequence);\n\n    // Execute start actions, notif, then cutscene\n    if (startAction) {\n      await this.actionManager.processGameActions(\n        this.getCurrentCheckpoint().map.getStartActions()\n      );\n    }\n    if (!this.stateManager.hasTriggeredInteraction(locationId)) {\n      await GameGlobalAPI.getInstance().bringUpUpdateNotif(gameLocation.name);\n    }\n    await this.actionManager.processGameActions(gameLocation.actionIds);\n\n    await this.phaseManager.swapPhase(GamePhaseType.Menu);\n  }\n\n  /**\n   * Change the current location to another location, based on the ID.\n   * This will properly clean up the previous location. It is highly\n   * encouraged to only change location of the game using this method.\n   *\n   * @param locationId id of location to be changed into\n   * @param startAction if set to true, start action will be triggered\n   */\n  public async changeLocationTo(locationId: LocationId, startAction: boolean = false) {\n    this.currentLocationId = locationId;\n\n    // Transition to the new location\n    await blackFade(this, 300, 500, async () => {\n      await this.layerManager.clearAllLayers();\n      await this.renderLocation(locationId, startAction);\n    });\n\n    // Update state after location is fully rendered, location has been visited\n    this.stateManager.triggerInteraction(locationId);\n  }\n\n  /**\n   * Bind escape menu and awards menu to keyboard triggers.\n   */\n  private bindKeyboardTriggers() {\n    this.inputManager.registerKeyboardListener(\n      Phaser.Input.Keyboard.KeyCodes.ESC,\n      'up',\n      async () => {\n        if (this.phaseManager.isCurrentPhase(GamePhaseType.EscapeMenu)) {\n          await this.phaseManager.popPhase();\n        } else {\n          await this.phaseManager.pushPhase(GamePhaseType.EscapeMenu);\n        }\n      }\n    );\n    this.inputManager.registerKeyboardListener(\n      Phaser.Input.Keyboard.KeyCodes.TAB,\n      'up',\n      async () => {\n        if (this.phaseManager.isCurrentPhase(GamePhaseType.AwardMenu)) {\n          await this.phaseManager.popPhase();\n        } else {\n          await this.phaseManager.pushPhase(GamePhaseType.AwardMenu);\n        }\n      }\n    );\n  }\n\n  /**\n   * Clean up on related managers\n   */\n  public cleanUp() {\n    this.inputManager.clearListeners();\n    this.layerManager.clearAllLayers();\n  }\n\n  /**\n   * Checks whether game is able to transition to the next checkpoint.\n   * Game is only able to transition to the next checkpoint\n   * if all of the objectives of the current checkpoint has been cleared.\n   *\n   * Additionally, game will only transition if the newPhase is a Menu phase;\n   * in order to ensure that we don't transition to the next checkpoint\n   * during dialogue/cutscene.\n   *\n   * This method is passed to the phase manager, to be executed on\n   * every phase transition.\n   *\n   * @param newPhase new phase to transition to\n   */\n  public async checkpointTransition(newPhase: GamePhaseType) {\n    const transitionToNextCheckpoint =\n      newPhase === GamePhaseType.Menu && GameGlobalAPI.getInstance().isAllComplete();\n\n    // Transition to the next scene if possible\n    if (transitionToNextCheckpoint) {\n      await this.actionManager.processGameActions(this.getCurrentCheckpoint().map.getEndActions());\n      this.cleanUp();\n      this.scene.start('CheckpointTransition');\n    }\n    return transitionToNextCheckpoint;\n  }\n\n  public getCurrentCheckpoint = () => mandatory(this.currentCheckpoint);\n  public getSaveManager = () => SourceAcademyGame.getInstance().getSaveManager();\n}\n\nexport default GameManager;\n","import GameAwardsManager from '../../awards/GameAwardsManager';\nimport GameEscapeManager from '../../escape/GameEscapeManager';\nimport GameModeExplore from '../../mode/explore/GameModeExplore';\nimport GameModeMenu from '../../mode/menu/GameModeMenu';\nimport GameModeMove from '../../mode/move/GameModeMove';\nimport GameModeSequence from '../../mode/sequence/GameModeSequence';\nimport GameModeTalk from '../../mode/talk/GameModeTalk';\nimport { GamePhaseType } from '../../phase/GamePhaseTypes';\n\n/**\n * Game Manager phases, for the phase manager.\n *\n * @param escapeMenu escape menu tied to gameManager\n * @param awardMenu award menu tied to gameManager\n */\nexport const createGamePhases = (escapeMenu: GameEscapeManager, awardMenu: GameAwardsManager) => {\n  return new Map([\n    [GamePhaseType.Menu, new GameModeMenu()],\n    [GamePhaseType.Move, new GameModeMove()],\n    [GamePhaseType.Explore, new GameModeExplore()],\n    [GamePhaseType.Talk, new GameModeTalk()],\n    [GamePhaseType.Sequence, new GameModeSequence()],\n    [GamePhaseType.None, new GameModeSequence()],\n    [GamePhaseType.EscapeMenu, escapeMenu],\n    [GamePhaseType.AwardMenu, awardMenu]\n  ]);\n};\n","import GameManager from '../scenes/gameManager/GameManager';\nimport SourceAcademyGame, { GameType } from '../SourceAcademyGame';\nimport { mandatory } from '../utils/GameUtils';\nimport { createEmptySaveState, gameStateToJson, userSettingsToJson } from './GameSaveHelper';\nimport { loadData, saveData } from './GameSaveRequests';\nimport { FullSaveState, SettingsJson } from './GameSaveTypes';\n\n/**\n * The manager provides API for loading and saving data from the backend\n * and is in charge of keeping record of the last save point, so that\n * players can make new save data based on the last one.\n */\nexport default class GameSaveManager {\n  private fullSaveState: FullSaveState;\n\n  private chapterNum?: number;\n  private checkpointNum?: number;\n  private continueGame?: boolean;\n\n  constructor() {\n    this.fullSaveState = createEmptySaveState();\n  }\n\n  /**\n   * Fetches the FullSaveState of the student at the start of the game\n   * and stores this internally as full save state\n   */\n  public async loadLastSaveState() {\n    this.fullSaveState = await loadData();\n  }\n\n  /**\n   * Updates the save manager with chapter number and checkpoint number\n   * if player has chosen a chapter/checkpoint to play with.\n   *\n   * Chapter number and checkpoint number can be -1 if inside the Story Simulator,\n   *\n   * @param chapterNum chapter number\n   * @param checkpointNum checkpoint number\n   * @param continueGame whether user wants to continue or restart the chapter.\n   */\n  public registerGameInfo(chapterNum: number, checkpointNum: number, continueGame: boolean) {\n    this.chapterNum = chapterNum;\n    this.checkpointNum = checkpointNum;\n    this.continueGame = continueGame;\n  }\n\n  ///////////////////////////////\n  //          Saving          //\n  ///////////////////////////////\n\n  /**\n   * Save the current game state as a JSON 'snapshot' to the backend.\n   * Can only be called inside the GameManager scene because this function retrieves\n   * informtion from GameManager, GameStateManager, or other in-game managers,\n   * and converts them into JSON format to be saved to backend.\n   *\n   * Only called when playing the Game (not Story Simulator), because Story Simulator\n   * shouldn't save game state to backend.\n   */\n  public async saveGame() {\n    if (\n      SourceAcademyGame.getInstance().isGameType(GameType.Game) &&\n      SourceAcademyGame.getInstance().getCurrentSceneRef() instanceof GameManager\n    ) {\n      this.fullSaveState = gameStateToJson(\n        this.fullSaveState,\n        this.getChapterNum(),\n        this.getCheckpointNum()\n      );\n      await saveData(this.fullSaveState);\n    }\n  }\n\n  /**\n   * This function is called during CheckpointTransition to update\n   * and save that largest chapter that the player has completed\n   * so far.\n   *\n   * @param completedChapter the number of the completed chapter\n   */\n  public async saveChapterComplete(completedChapter: number) {\n    if (!SourceAcademyGame.getInstance().isGameType(GameType.Game)) {\n      return;\n    }\n    if (completedChapter > this.getLargestCompletedChapterNum()) {\n      this.fullSaveState.userSaveState.largestCompletedChapter = completedChapter;\n      await saveData(this.fullSaveState);\n    }\n  }\n\n  /**\n   * This function is called by the Escape Manager and Settings scene\n   * to store new user settings to the backend\n   *\n   * @param settingsJson the newest settings of the user\n   */\n  public async saveSettings(settingsJson: SettingsJson) {\n    this.fullSaveState = userSettingsToJson(this.fullSaveState, settingsJson);\n    await saveData(this.fullSaveState);\n  }\n\n  ///////////////////////////////\n  //         Getters           //\n  ///////////////////////////////\n\n  /**\n   * Obtains user settings from full save state\n   *\n   * @returns User settings\n   */\n  public getSettings(): SettingsJson {\n    return this.fullSaveState.userSaveState.settings;\n  }\n\n  /**\n   * Obtains user state from full save state\n   */\n  public getLoadedUserState() {\n    return this.fullSaveState.userSaveState;\n  }\n\n  /**\n   * Obtains the largest completed chapter number by the player\n   */\n  public getLargestCompletedChapterNum(): number {\n    return this.fullSaveState.userSaveState.largestCompletedChapter;\n  }\n\n  /**\n   * Gets user's gamestate for this chapter\n   */\n  public getLoadedGameStoryState() {\n    if (this.continueGame) {\n      return this.fullSaveState.gameSaveStates[this.getChapterNum()];\n    } else {\n      return undefined;\n    }\n  }\n\n  /**\n   * Gets user's location for this chapter\n   */\n  public getLoadedLocation() {\n    if (this.continueGame && this.fullSaveState.gameSaveStates[this.getChapterNum()]) {\n      return this.fullSaveState.gameSaveStates[this.getChapterNum()].currentLocation;\n    } else {\n      return;\n    }\n  }\n\n  /**\n   * Get user's phase (see GamePhaseManager for phase types) for this chapter\n   */\n  public getLoadedPhase() {\n    return this.fullSaveState.gameSaveStates[this.getChapterNum()].currentPhase;\n  }\n\n  public getChapterNum = () => mandatory(this.chapterNum);\n  public getCheckpointNum = () => mandatory(this.checkpointNum);\n  public getFullSaveState = () => mandatory(this.fullSaveState);\n}\n","import _ from 'lodash';\nimport Constants from 'src/commons/utils/Constants';\n\nimport SourceAcademyGame from '../SourceAcademyGame';\nimport { createEmptySaveState } from './GameSaveHelper';\nimport { FullSaveState } from './GameSaveTypes';\n\n/**\n * This function saves data to the backend.\n * Currently saves the entire game data in the \"collectibles\" field\n * just because that is the format accepted by the backend\n *\n * TODO: Change backend endpoint to accept fullSaveState\n *\n * @param fullSaveState - the entire game data that needs to be saved, including game state and userstate\n */\nexport async function saveData(fullSaveState: FullSaveState) {\n  const options = {\n    method: 'PUT',\n    headers: createHeaders(SourceAcademyGame.getInstance().getAccountInfo().accessToken),\n    body: JSON.stringify({\n      gameStates: {\n        collectibles: fullSaveState,\n        completed_quests: []\n      }\n    })\n  };\n\n  const resp = await fetch(`${Constants.backendUrl}/v1/user/game_states/save`, options);\n  if (resp && resp.ok) {\n    return resp;\n  }\n  return;\n}\n\n/**\n * This function fetches data from the backend.\n * Currently saves the loaded game data from the \"collectibles\" field\n * just because that is the format stored by the backend\n *\n * TODO: Change backend endpoint to store fullSaveState\n */\nexport async function loadData(): Promise<FullSaveState> {\n  const options = {\n    method: 'GET',\n    headers: createHeaders(SourceAcademyGame.getInstance().getAccountInfo().accessToken)\n  };\n\n  const resp = await fetch(`${Constants.backendUrl}/v1/user/`, options);\n  const message = await resp.text();\n  const json = JSON.parse(message);\n\n  const loadedData = json.gameStates.collectibles;\n  return _.isEmpty(loadedData) ? createEmptySaveState() : loadedData;\n}\n\n/**\n * This function clears the entire game object from the database\n */\nexport async function clearData() {\n  const options = {\n    method: 'PUT',\n    headers: createHeaders(SourceAcademyGame.getInstance().getAccountInfo().accessToken)\n  };\n\n  const resp = await fetch(`${Constants.backendUrl}/v1/user/game_states/clear`, options);\n\n  if (resp && resp.ok) {\n    alert('Game cleared!');\n    return;\n  }\n}\n\n/**\n * Format a header object.\n *\n * @param accessToken access token to be used\n */\nfunction createHeaders(accessToken: string): Headers {\n  const headers = new Headers();\n  headers.append('Accept', 'application/json');\n  headers.append('Authorization', `Bearer ${accessToken}`);\n  headers.append('Content-Type', 'application/json');\n  return headers;\n}\n","import FontAssets from '../../assets/FontAssets';\nimport { screenCenter, screenSize } from '../../commons/CommonConstants';\nimport { BitmapFontStyle } from '../../commons/CommonTypes';\nimport { Color, HexColor } from '../../utils/StyleUtils';\n\nexport const AwardsHallConstants = {\n  defaultScrollSpeed: 20,\n  itemPerCol: 4,\n  tileDim: 2048,\n  maxAwardsPerCol: 4,\n  awardsXSpacing: 300,\n  arrowXOffset: 875,\n  awardYStartPos: 300,\n  awardYSpace: screenCenter.y - 50,\n  awardDim: 200,\n  hoverWidth: 300,\n  bannerXOffset: -screenSize.x * 0.28,\n  bannerTextConfig: { x: 30, y: 0, oriX: 0.0, oriY: 0.5 }\n};\n\nexport const awardBannerTextStyle: BitmapFontStyle = {\n  key: FontAssets.alienLeagueFont.key,\n  size: 35,\n  fill: HexColor.lightBlue,\n  align: Phaser.GameObjects.BitmapText.ALIGN_LEFT\n};\n\nexport const awardHoverTitleStyle = {\n  fontFamily: 'Verdana',\n  fontSize: '20px',\n  fill: Color.lightBlue,\n  align: 'left',\n  wordWrap: { width: AwardsHallConstants.hoverWidth - 20 }\n};\n\nexport const awardHoverKeyStyle = {\n  fontFamily: 'Verdana',\n  fontSize: '15px',\n  fill: Color.offWhite,\n  align: 'left',\n  wordWrap: { width: AwardsHallConstants.hoverWidth - 20 }\n};\n\nexport const awardHoverDescStyle = {\n  fontFamily: 'Verdana',\n  fontSize: '15px',\n  fill: Color.lightBlue,\n  align: 'left',\n  wordWrap: { width: AwardsHallConstants.hoverWidth - 20 }\n};\n","import ImageAssets from '../../assets/ImageAssets';\nimport { getAwardProps } from '../../awards/GameAwardsHelper';\nimport { AwardProperty } from '../../awards/GameAwardsTypes';\nimport CommonBackButton from '../../commons/CommonBackButton';\nimport { screenCenter, screenSize } from '../../commons/CommonConstants';\nimport { addLoadingScreen } from '../../effects/LoadingScreen';\nimport GameInputManager from '../../input/GameInputManager';\nimport GameLayerManager from '../../layer/GameLayerManager';\nimport { Layer } from '../../layer/GameLayerTypes';\nimport SourceAcademyGame from '../../SourceAcademyGame';\nimport { UserStateTypes } from '../../state/GameStateTypes';\nimport GameUserStateManager from '../../state/GameUserStateManager';\nimport { createButton } from '../../utils/ButtonUtils';\nimport { limitNumber } from '../../utils/GameUtils';\nimport { resizeUnderflow } from '../../utils/SpriteUtils';\nimport { calcTableFormatPos, Direction } from '../../utils/StyleUtils';\nimport { createBitmapText } from '../../utils/TextUtils';\nimport { awardBannerTextStyle, AwardsHallConstants } from './AwardsHallConstants';\nimport { createAwardsHoverContainer } from './AwardsHelper';\n\n/**\n * This scenes display all students awards (collectibles and achievements).\n */\nclass AwardsHall extends Phaser.Scene {\n  public layerManager: GameLayerManager;\n  public inputManager: GameInputManager;\n  private userStateManager: GameUserStateManager;\n\n  private backgroundTile: Phaser.GameObjects.TileSprite | undefined;\n  private awardsContainer: Phaser.GameObjects.Container | undefined;\n\n  private isScrollLeft: boolean;\n  private isScrollRight: boolean;\n  private scrollLim: number;\n  private awardXSpace: number;\n\n  constructor() {\n    super('AwardsHall');\n    SourceAcademyGame.getInstance().setCurrentSceneRef(this);\n\n    this.layerManager = new GameLayerManager();\n    this.inputManager = new GameInputManager();\n    this.userStateManager = new GameUserStateManager();\n\n    this.isScrollLeft = false;\n    this.isScrollRight = false;\n    this.scrollLim = 0;\n    this.awardXSpace = 0;\n  }\n\n  public init() {\n    this.layerManager = new GameLayerManager();\n    this.inputManager = new GameInputManager();\n    this.userStateManager = new GameUserStateManager();\n  }\n\n  public preload() {\n    addLoadingScreen(this);\n    this.userStateManager.initialise();\n    this.layerManager.initialise(this);\n    this.inputManager.initialise(this);\n  }\n\n  public async create() {\n    await this.userStateManager.loadAchievements();\n\n    // Calculate the maximum horizontal space required based\n    // on maximum number of achievement/collectible\n    const achievementLength = this.userStateManager.getList(UserStateTypes.achievements).length;\n    const collectibleLength = this.userStateManager.getList(UserStateTypes.achievements).length;\n    this.awardXSpace =\n      Math.ceil(\n        Math.max(achievementLength, collectibleLength) / AwardsHallConstants.maxAwardsPerCol\n      ) * AwardsHallConstants.awardsXSpacing;\n\n    // Scroll limit is anything that exceed the screen size\n    this.scrollLim = this.awardXSpace < screenSize.x ? 0 : this.awardXSpace - screenSize.x;\n    this.renderBackground();\n    this.renderAwards();\n  }\n\n  public update() {\n    if (!this.backgroundTile || !this.awardsContainer) return;\n\n    // Scroll the awards hall if button is currently clicked/held down\n    let newXPos = this.awardsContainer.x;\n    if (this.isScrollRight) {\n      newXPos -= AwardsHallConstants.defaultScrollSpeed;\n    } else if (this.isScrollLeft) {\n      newXPos += AwardsHallConstants.defaultScrollSpeed;\n    }\n    newXPos = limitNumber(newXPos, -this.scrollLim, 0);\n\n    // To achieve seamless background, we need to scroll on .tilePosition for background\n    this.backgroundTile.tilePositionX = -newXPos;\n    this.awardsContainer.x = newXPos;\n  }\n\n  /**\n   * Render background of this scene, as well as its\n   * UI elements (arrows, backbutton, as well as the 'Collectible' and 'Achievement' banner).\n   */\n  private renderBackground() {\n    if (this.backgroundTile) this.backgroundTile.destroy();\n\n    this.backgroundTile = new Phaser.GameObjects.TileSprite(\n      this,\n      0,\n      0,\n      AwardsHallConstants.tileDim,\n      AwardsHallConstants.tileDim,\n      ImageAssets.awardsBackground.key\n    ).setOrigin(0, 0.25);\n    this.layerManager.addToLayer(Layer.Background, this.backgroundTile);\n\n    // Add banners\n    const banners = ['Achievements', 'Collectibles'];\n    const bannerPos = calcTableFormatPos({\n      direction: Direction.Column,\n      numOfItems: banners.length\n    });\n    banners.forEach((banner, index) => {\n      const bannerCont = this.createBanner(banner, bannerPos[index][1]);\n      this.layerManager.addToLayer(Layer.UI, bannerCont);\n    });\n\n    const leftArrow = createButton(this, {\n      assetKey: ImageAssets.chapterSelectArrow.key,\n      onDown: () => (this.isScrollLeft = true),\n      onUp: () => (this.isScrollLeft = false),\n      onOut: () => (this.isScrollLeft = false)\n    }).setPosition(screenCenter.x - AwardsHallConstants.arrowXOffset, screenCenter.y);\n\n    const rightArrow = createButton(this, {\n      assetKey: ImageAssets.chapterSelectArrow.key,\n      onDown: () => (this.isScrollRight = true),\n      onUp: () => (this.isScrollRight = false),\n      onOut: () => (this.isScrollRight = false)\n    })\n      .setPosition(screenCenter.x + AwardsHallConstants.arrowXOffset, screenCenter.y)\n      .setScale(-1, 1);\n\n    const backButton = new CommonBackButton(this, () => {\n      this.cleanUp();\n      this.scene.start('MainMenu');\n    });\n\n    this.layerManager.addToLayer(Layer.UI, leftArrow);\n    this.layerManager.addToLayer(Layer.UI, rightArrow);\n    this.layerManager.addToLayer(Layer.UI, backButton);\n  }\n\n  /**\n   * Render all the awards that student has.\n   */\n  private renderAwards() {\n    if (this.awardsContainer) this.awardsContainer.destroy();\n\n    this.awardsContainer = new Phaser.GameObjects.Container(this, 0, 0);\n\n    // Achievement\n    const achievements = this.getAwards(UserStateTypes.achievements);\n    const achievementsPos = calcTableFormatPos({\n      direction: Direction.Column,\n      numOfItems: achievements.length,\n      maxXSpace: this.awardXSpace,\n      maxYSpace: AwardsHallConstants.awardYSpace\n    });\n\n    // Achievement is positioned on the upper half of the screen\n    this.awardsContainer.add(\n      achievements.map((achievement, index) =>\n        this.createAward(\n          achievement,\n          achievementsPos[index][0],\n          achievementsPos[index][1] + AwardsHallConstants.awardYStartPos - screenCenter.y\n        )\n      )\n    );\n\n    // Collectible\n    const collectibles = this.getAwards(UserStateTypes.collectibles);\n    const collectiblesPos = calcTableFormatPos({\n      direction: Direction.Column,\n      numOfItems: collectibles.length,\n      maxXSpace: this.awardXSpace,\n      maxYSpace: AwardsHallConstants.awardYSpace\n    });\n\n    // Collectible is positioned on the lower half of the screen\n    this.awardsContainer.add(\n      collectibles.map((collectible, index) =>\n        this.createAward(\n          collectible,\n          collectiblesPos[index][0],\n          collectiblesPos[index][1] + AwardsHallConstants.awardYStartPos\n        )\n      )\n    );\n\n    this.layerManager.addToLayer(Layer.Objects, this.awardsContainer);\n  }\n\n  /**\n   * Fetch awardProps based on the type from the user state manager.\n   * @param type\n   */\n  private getAwards(type: UserStateTypes) {\n    const keys = this.userStateManager.getList(type);\n    const awardProps = getAwardProps(keys);\n    return awardProps;\n  }\n\n  /**\n   * Format the given award; giving it a pop up hover of its\n   * description, resize it to the correct size, and position it\n   * based on the given xPos and yPos.\n   *\n   * @param award awardProperty to be used\n   * @param xPos x position of the award\n   * @param yPos y position of the award\n   */\n  private createAward(award: AwardProperty, xPos: number, yPos: number) {\n    const awardCont = new Phaser.GameObjects.Container(this, xPos, yPos);\n    const image = new Phaser.GameObjects.Sprite(this, 0, 0, award.assetKey).setOrigin(0.5);\n    const hoverCont = createAwardsHoverContainer(this, award);\n\n    resizeUnderflow(image, AwardsHallConstants.awardDim, AwardsHallConstants.awardDim);\n\n    // Set up the pop up\n    image.setInteractive({ pixelPerfect: true, useHandCursor: true });\n    image.addListener(Phaser.Input.Events.GAMEOBJECT_POINTER_OVER, () =>\n      hoverCont.setVisible(true)\n    );\n    image.addListener(Phaser.Input.Events.GAMEOBJECT_POINTER_OUT, () =>\n      hoverCont.setVisible(false)\n    );\n    image.addListener(\n      Phaser.Input.Events.GAMEOBJECT_POINTER_MOVE,\n      (pointer: Phaser.Input.Pointer) => {\n        hoverCont.x = pointer.x + 10;\n        hoverCont.y = pointer.y - 10;\n      }\n    );\n\n    this.layerManager.addToLayer(Layer.UI, hoverCont);\n    awardCont.add(image);\n    return awardCont;\n  }\n\n  /**\n   * Clean up of related managers\n   */\n  private cleanUp() {\n    this.inputManager.clearListeners();\n    this.layerManager.clearAllLayers();\n  }\n\n  /**\n   * Format the given text with banner style.\n   *\n   * In-game, this is the achievement & collectible banner\n   * that is positioned on the left hand side.\n   *\n   * @param text text to be put on the banner\n   * @param yPos y position of the banner\n   */\n  private createBanner(text: string, yPos: number) {\n    const bannerContainer = new Phaser.GameObjects.Container(this, 0, yPos);\n    const bannerBg = new Phaser.GameObjects.Sprite(\n      this,\n      AwardsHallConstants.bannerXOffset,\n      0,\n      ImageAssets.awardsPage.key\n    );\n    const bannerText = createBitmapText(\n      this,\n      text,\n      AwardsHallConstants.bannerTextConfig,\n      awardBannerTextStyle\n    );\n    bannerContainer.add([bannerBg, bannerText]);\n    return bannerContainer;\n  }\n}\n\nexport default AwardsHall;\n","import ImageAssets from '../../assets/ImageAssets';\nimport { AwardProperty } from '../../awards/GameAwardsTypes';\nimport { HexColor } from '../../utils/StyleUtils';\nimport {\n  awardHoverDescStyle,\n  awardHoverKeyStyle,\n  awardHoverTitleStyle,\n  AwardsHallConstants\n} from './AwardsHallConstants';\n\n/**\n * Create a pop up text that appear when user hover over an award.\n * The hover container will display information based on the award property;\n * e.g. its title, its asset-key, as well as its description.\n *\n * @param scene scene for the hover to attach to\n * @param award awardProperty to be used\n * @returns {Phaser.GameObjects.Container}\n */\nexport const createAwardsHoverContainer = (scene: Phaser.Scene, award: AwardProperty) => {\n  const hoverContainer = new Phaser.GameObjects.Container(scene, 0, 0);\n\n  const awardTitle = new Phaser.GameObjects.Text(scene, 20, 20, award.title, awardHoverTitleStyle);\n  const awardAssetKey = new Phaser.GameObjects.Text(\n    scene,\n    20,\n    awardTitle.getBounds().bottom + 20,\n    award.assetKey,\n    awardHoverKeyStyle\n  );\n  const awardDesc = new Phaser.GameObjects.Text(\n    scene,\n    20,\n    awardAssetKey.getBounds().bottom + 20,\n    award.description,\n    awardHoverDescStyle\n  );\n\n  const hoverTextBg = new Phaser.GameObjects.Rectangle(\n    scene,\n    0,\n    0,\n    AwardsHallConstants.hoverWidth,\n    awardDesc.getBounds().bottom + 20,\n    HexColor.darkBlue\n  )\n    .setOrigin(0.0, 0.0)\n    .setAlpha(0.8);\n\n  const scrollFrameTop = new Phaser.GameObjects.Sprite(\n    scene,\n    AwardsHallConstants.hoverWidth / 2,\n    0,\n    ImageAssets.scrollFrame.key\n  );\n  const scrollFrameBot = new Phaser.GameObjects.Sprite(\n    scene,\n    AwardsHallConstants.hoverWidth / 2,\n    hoverTextBg.getBounds().bottom,\n    ImageAssets.scrollFrame.key\n  );\n\n  hoverContainer.add([\n    hoverTextBg,\n    awardTitle,\n    awardAssetKey,\n    awardDesc,\n    scrollFrameTop,\n    scrollFrameBot\n  ]);\n  hoverContainer.setVisible(false);\n  return hoverContainer;\n};\n","import FontAssets from '../../assets/FontAssets';\nimport { screenCenter } from '../../commons/CommonConstants';\nimport { BitmapFontStyle } from '../../commons/CommonTypes';\nimport { HexColor } from '../../utils/StyleUtils';\n\nexport const bindingConstants = {\n  keyTextConfig: { x: screenCenter.x - 100, y: 0, oriX: 0.5, oriY: 0.5 },\n  keyDescTextConfig: { x: screenCenter.x + 100, y: 0, oriX: 0.5, oriY: 0.5 },\n  keyIconXPos: screenCenter.x - 100,\n  keyStartYPos: screenCenter.y * 0.9,\n  keyYSpacing: 150\n};\n\nexport const keyStyle: BitmapFontStyle = {\n  key: FontAssets.zektonFont.key,\n  size: 30,\n  fill: HexColor.lightBlue,\n  align: Phaser.GameObjects.BitmapText.ALIGN_CENTER\n};\n\nexport const keyDescStyle: BitmapFontStyle = {\n  key: FontAssets.zektonFont.key,\n  size: 25,\n  fill: HexColor.lightBlue,\n  align: Phaser.GameObjects.BitmapText.ALIGN_CENTER\n};\n","import ImageAssets from '../../assets/ImageAssets';\nimport CommonBackButton from '../../commons/CommonBackButton';\nimport { screenCenter, screenSize } from '../../commons/CommonConstants';\nimport GameInputManager from '../../input/GameInputManager';\nimport GameLayerManager from '../../layer/GameLayerManager';\nimport { Layer } from '../../layer/GameLayerTypes';\nimport { calcListFormatPos } from '../../utils/StyleUtils';\nimport { createBitmapText } from '../../utils/TextUtils';\nimport { bindingConstants, keyDescStyle, keyStyle } from './BindingsConstants';\n\n/**\n * Displays various bindings of the game.\n * Static scene.\n */\nclass Bindings extends Phaser.Scene {\n  public layerManager: GameLayerManager;\n  public inputManager: GameInputManager;\n\n  constructor() {\n    super('Bindings');\n    this.layerManager = new GameLayerManager();\n    this.inputManager = new GameInputManager();\n  }\n\n  public preload() {\n    this.layerManager.initialise(this);\n    this.inputManager.initialise(this);\n  }\n\n  public create() {\n    this.renderBackground();\n    this.renderBindings();\n  }\n\n  /**\n   * Render the background of the scene\n   */\n  private renderBackground() {\n    const background = new Phaser.GameObjects.Image(\n      this,\n      screenCenter.x,\n      screenCenter.y,\n      ImageAssets.settingBackground.key\n    );\n    const blackOverlay = new Phaser.GameObjects.Rectangle(\n      this,\n      screenCenter.x,\n      screenCenter.y,\n      screenSize.x,\n      screenSize.y,\n      0\n    ).setAlpha(0.3);\n    this.layerManager.addToLayer(Layer.Background, background);\n    this.layerManager.addToLayer(Layer.Background, blackOverlay);\n  }\n\n  /**\n   * Render the various binding and add it to the scene.\n   */\n  private renderBindings() {\n    const bindingsContainer = new Phaser.GameObjects.Container(this, 0, 0);\n\n    const bindings = this.getBindings();\n    const bindingPositions = calcListFormatPos({\n      numOfItems: bindings.length,\n      xSpacing: 0,\n      ySpacing: bindingConstants.keyYSpacing\n    });\n\n    bindingsContainer.add(\n      bindings.map((binding, index) =>\n        this.createBinding(\n          binding.key,\n          binding.text,\n          bindingPositions[index][0],\n          bindingPositions[index][1] + bindingConstants.keyStartYPos\n        )\n      )\n    );\n    const backButton = new CommonBackButton(this, () => {\n      this.layerManager.clearAllLayers();\n      this.scene.start('MainMenu');\n    });\n\n    this.layerManager.addToLayer(Layer.UI, bindingsContainer);\n    this.layerManager.addToLayer(Layer.UI, backButton);\n  }\n\n  /**\n   * Encapsulate information of the available bindings within the game.\n   */\n  private getBindings() {\n    return [\n      {\n        key: 'Esc',\n        text: 'Escape Menu'\n      },\n      {\n        key: 'Tab',\n        text: 'Awards Menu'\n      }\n    ];\n  }\n\n  /**\n   * Formats the binding information and add it to the scene.\n   *\n   * @param key name of the keyboard key associated with the description\n   * @param desc description to be shown next to the binding\n   * @param xPos x position of the container\n   * @param yPos y position of the container\n   * @returns {Phaser.GameObjects.Container}\n   */\n  private createBinding(key: string, desc: string, xPos: number, yPos: number) {\n    const bindingContainer = new Phaser.GameObjects.Container(this, xPos, yPos);\n\n    // Different keys may use different key icon\n    const keyIcon = new Phaser.GameObjects.Sprite(\n      this,\n      bindingConstants.keyIconXPos,\n      0,\n      ImageAssets.squareKeyboardIcon.key\n    );\n    switch (key) {\n      case 'Tab':\n        keyIcon.setTexture(ImageAssets.medKeyboardIcon.key);\n        break;\n      default:\n        break;\n    }\n\n    const keyText = createBitmapText(this, key, bindingConstants.keyTextConfig, keyStyle);\n    const keyDesc = createBitmapText(this, desc, bindingConstants.keyDescTextConfig, keyDescStyle);\n\n    bindingContainer.add([keyIcon, keyText, keyDesc]);\n    return bindingContainer;\n  }\n}\n\nexport default Bindings;\n","import { AssetKey, AssetPath } from 'src/features/game/commons/CommonTypes';\n\n/**\n * The functions below loads assets, and and only resolves\n * once the assets are loaded.\n * If the assets have already been loaded previously,\n * then the promise is resolved instantly.\n *\n * To use these functions, call the line \"await loadImage(...)\"\n * inside an async function\n */\n\n/**\n * Waits for an image (with assetkey, assetpath) to load in scene\n *\n * @param scene scene where to load this asset\n * @param assetKey the key to be used\n * @param assetPath the path to the file\n * @returns {Promise} promise that resolves when image is loaded.\n */\nexport const loadImage = (scene: Phaser.Scene, assetKey: AssetKey, assetPath: AssetPath) =>\n  new Promise<AssetKey>(resolve => {\n    if (scene.textures.get(assetKey).key !== '__MISSING') {\n      resolve(assetKey);\n    } else {\n      scene.load.image(assetKey, assetPath);\n      scene.load.once(`filecomplete-image-${assetKey}`, resolve);\n      scene.load.once(`loaderror`, resolve);\n      scene.load.start();\n    }\n  });\n\n/**\n * Waits for a text (with assetkey, assetpath) to load in scene\n *\n * @param scene scene where to load this asset\n * @param assetKey the key to be used\n * @param assetPath the path to the file\n * @returns {Promise} promise that resolves when text is loaded.\n */\nexport const loadText = (scene: Phaser.Scene, assetKey: AssetKey, assetPath: AssetPath) =>\n  new Promise<AssetKey>(resolve => {\n    if (scene.cache.text.exists(assetKey)) {\n      resolve(assetKey);\n    } else {\n      scene.load.text(assetKey, assetPath);\n      scene.load.once(`filecomplete-text-${assetKey}`, resolve);\n      scene.load.start();\n    }\n  });\n\n/**\n * Waits for a sound (with assetkey, assetpath) to load in scene\n *\n * @param scene scene where to load this asset\n * @param assetKey the key to be used\n * @param assetPath the path to the file\n * @returns {Promise} promise that resolves when sound is loaded.\n */\nexport const loadSound = (scene: Phaser.Scene, assetKey: AssetKey, assetPath: AssetPath) =>\n  new Promise<AssetKey>(resolve => {\n    if (scene.sound.get(assetKey) !== null) {\n      resolve(assetKey);\n    } else {\n      scene.load.audio(assetKey, assetPath);\n      scene.load.once(`filecomplete-text-${assetKey}`, resolve);\n      scene.load.start();\n    }\n  });\n","import FontAssets from '../../assets/FontAssets';\nimport { screenCenter, screenSize } from '../../commons/CommonConstants';\nimport { BitmapFontStyle } from '../../commons/CommonTypes';\nimport { HexColor } from '../../utils/StyleUtils';\n\nexport const chapterIndexStyle: BitmapFontStyle = {\n  key: FontAssets.zektonFont.key,\n  size: 25,\n  fill: HexColor.offWhite,\n  align: Phaser.GameObjects.BitmapText.ALIGN_CENTER\n};\n\nexport const chapterTitleStyle: BitmapFontStyle = {\n  key: FontAssets.zektonFont.key,\n  size: 35,\n  fill: HexColor.lightBlue,\n  align: Phaser.GameObjects.BitmapText.ALIGN_CENTER\n};\n\nexport const chapterActionAltStyle: BitmapFontStyle = {\n  key: FontAssets.zektonFont.key,\n  size: 20,\n  fill: HexColor.lightBlue,\n  align: Phaser.GameObjects.BitmapText.ALIGN_LEFT\n};\n\nconst marginX = 0;\nconst marginY = 100;\nconst imageRectWidth = 500;\n\nconst chapConstants = {\n  defaultScrollSpeed: 20,\n  buttonsYOffset: 200,\n  buttonsXOffset: 100,\n  frameXOffset: 15,\n  frameYOffset: -10,\n  indexTextConfig: { x: 0, y: -160, oriX: 0.5, oriY: 0.5 },\n  titleTextConfig: { x: 0, y: -100, oriX: 0.5, oriY: 0.5 },\n  arrowXOffset: 875,\n  maskRect: {\n    x: -screenCenter.x + marginX,\n    y: -screenCenter.y + marginY,\n    width: screenSize.x - marginX * 2,\n    height: screenSize.y - marginY * 2\n  },\n  imageRect: {\n    width: imageRectWidth,\n    height: 700\n  },\n  imageDist: imageRectWidth + 150\n};\n\nexport default chapConstants;\n","import { HexColor } from '../utils/StyleUtils';\nimport { createBitmapText } from '../utils/TextUtils';\nimport { Constants } from './CommonConstants';\nimport { BitmapFontStyle } from './CommonTypes';\n\nconst textPad = 10;\n\n/**\n * A container that can be used as simple text hover.\n * Its visibility is set to false by default.\n * The container only consists of a simple rectangle with text on top.\n *\n * The container still needs to be attached to an object.\n * i.e. on GAMEOBJECT_POINTER_OVER => hoverContainer.setVisibility(true)\n *      on GAMEOBJECT_POINTER_OUT => hoverContainer.setVisibility(false)\n *      on GAMEOBJECT_POINTER_MOVE => hoverContainer.x = pointer.x;\n *                                    hoverContainer.y = pointer.y;\n */\nclass CommonTextHover extends Phaser.GameObjects.Container {\n  /**\n   * @param scene scene for the container to attach to\n   * @param x x position of the container\n   * @param y y position of the container\n   * @param text message to be displayed\n   * @param style style to be applied to the text\n   */\n  constructor(\n    scene: Phaser.Scene,\n    x: number,\n    y: number,\n    text: string,\n    style: BitmapFontStyle = Constants.defaultFontStyle\n  ) {\n    super(scene, x, y);\n    this.renderTextHover(text, style);\n  }\n\n  private renderTextHover(text: string, style: BitmapFontStyle) {\n    const hoverTextBg = new Phaser.GameObjects.Rectangle(\n      this.scene,\n      0,\n      0,\n      text.length * style.size * 0.7,\n      style.size * 2,\n      HexColor.darkBlue\n    )\n      .setOrigin(0.0, 0.5)\n      .setAlpha(0.8);\n    const hoverText = createBitmapText(\n      this.scene,\n      text,\n      { x: textPad, y: 0, oriX: 0.0, oriY: 0.5 },\n      style\n    );\n    this.add([hoverTextBg, hoverText]);\n    this.setVisible(false);\n  }\n}\n\nexport default CommonTextHover;\n","import { Constants } from '../commons/CommonConstants';\n\nexport const toTxtPath = (path: string) => `${Constants.assetsFolder}/stories/${path}`;\n\nconst TextAssets = {\n  defaultCheckpoint: { key: 'default-chap', path: toTxtPath('defaultCheckpoint.txt') },\n  awardsMapping: { key: 'awards-mapping', path: toTxtPath('awardsMapping.txt') }\n};\n\nexport const MockTextAssets = {\n  defaultCheckpoint: { key: 'default-chap', path: '../assets/mockDefaultCheckpoint.txt' },\n  awardsMapping: { key: 'awards-mapping', path: '../assets/mockAwardsMapping.txt' }\n};\n\nexport default TextAssets;\n","import { GameAction } from '../action/GameActionTypes';\nimport { SoundAsset } from '../assets/AssetsTypes';\nimport { BBoxProperty } from '../boundingBoxes/GameBoundingBoxTypes';\nimport { Character } from '../character/GameCharacterTypes';\nimport { AssetKey, AssetPath, ItemId } from '../commons/CommonTypes';\nimport { Dialogue } from '../dialogue/GameDialogueTypes';\nimport { GameLocation, GameLocationAttr, LocationId } from '../location/GameMapTypes';\nimport { GameMode } from '../mode/GameModeTypes';\nimport { ObjectProperty } from '../objects/GameObjectTypes';\nimport { mandatory } from '../utils/GameUtils';\n\n/**\n * Game map is the class that encapsulates data about\n * all the locations and items in the map in a checkpoint\n *\n * Mainly used by game checkpoint.\n *\n * All possible assets should be stored within the soundAssets\n * and mapAssets; while mapping from ItemId to other properties\n * are stored separately.\n *\n * Lastly, the GameLocation should only refer to the ItemIDs,\n * and not the actual property.\n *\n * GameManager, along other managers, will process this class\n * as when as its needed.\n */\nclass GameMap {\n  private soundAssets: SoundAsset[];\n  private mapAssets: Map<AssetKey, AssetPath>;\n\n  private locations: Map<LocationId, GameLocation>;\n  private talkTopics: Map<ItemId, Dialogue>;\n  private objects: Map<ItemId, ObjectProperty>;\n  private boundingBoxes: Map<ItemId, BBoxProperty>;\n  private characters: Map<ItemId, Character>;\n  private actions: Map<ItemId, GameAction>;\n  private gameStartActions: ItemId[];\n  private checkpointCompleteActions: ItemId[];\n\n  constructor() {\n    this.soundAssets = [];\n    this.mapAssets = new Map<AssetKey, AssetPath>();\n\n    this.locations = new Map<LocationId, GameLocation>();\n    this.talkTopics = new Map<ItemId, Dialogue>();\n    this.objects = new Map<ItemId, ObjectProperty>();\n    this.boundingBoxes = new Map<ItemId, BBoxProperty>();\n    this.characters = new Map<ItemId, Character>();\n    this.actions = new Map<ItemId, GameAction>();\n    this.gameStartActions = [];\n    this.checkpointCompleteActions = [];\n  }\n\n  public addSoundAsset(soundAsset: SoundAsset) {\n    this.soundAssets.push(soundAsset);\n  }\n\n  public addMapAsset(assetKey: AssetKey, assetPath: AssetPath) {\n    this.mapAssets.set(assetKey, assetPath);\n  }\n\n  public getMapAssets(): Map<AssetKey, AssetPath> {\n    return this.mapAssets;\n  }\n\n  public addLocation(locationId: LocationId, location: GameLocation): void {\n    this.locations.set(locationId, location);\n  }\n\n  public setModesAt(id: LocationId, modes: GameMode[]) {\n    this.getLocationAtId(id).modes = new Set(modes);\n  }\n\n  public setNavigationFrom(id: LocationId, navigation: string[]) {\n    this.getLocationAtId(id).navigation = new Set(navigation);\n  }\n\n  public getNavigationFrom(id: LocationId): Set<string> | undefined {\n    return this.getLocationAtId(id).navigation;\n  }\n\n  public setGameStartActions(actionIds: ItemId[]) {\n    this.gameStartActions = actionIds;\n  }\n\n  public setCheckpointCompleteActions(actionIds: ItemId[]) {\n    this.checkpointCompleteActions = actionIds;\n  }\n\n  public getStartActions() {\n    return this.gameStartActions;\n  }\n\n  public getEndActions() {\n    return this.checkpointCompleteActions;\n  }\n\n  public getLocations(): Map<LocationId, GameLocation> {\n    return this.locations;\n  }\n\n  public getObjects(): Map<ItemId, ObjectProperty> {\n    return this.objects;\n  }\n\n  public getBBoxes(): Map<ItemId, BBoxProperty> {\n    return this.boundingBoxes;\n  }\n\n  public getDialogues(): Map<ItemId, Dialogue> {\n    return this.talkTopics;\n  }\n\n  public getCharacters(): Map<ItemId, Character> {\n    return this.characters;\n  }\n\n  public getActions(): Map<ItemId, GameAction> {\n    return this.actions;\n  }\n\n  public getSoundAssets(): SoundAsset[] {\n    return this.soundAssets;\n  }\n\n  public addItemToMap<T>(listName: GameLocationAttr, itemId: string, item: T) {\n    this[listName].set(itemId, item);\n  }\n\n  public setItemAt<T>(locId: LocationId, listName: GameLocationAttr, itemId: string) {\n    const location = this.getLocationAtId(locId);\n    location[listName].add(itemId);\n  }\n\n  public setBGMusicAt(locId: LocationId, soundKey: AssetKey) {\n    const location = this.getLocationAtId(locId);\n    location.bgmKey = soundKey;\n  }\n\n  public getLocationAtId = (locId: LocationId) =>\n    mandatory(this.locations.get(locId), `Location ${locId} was not found!`);\n}\n\nexport default GameMap;\n","import { GameActionType } from '../action/GameActionTypes';\nimport { GamePosition } from '../commons/CommonTypes';\nimport { GameLocationAttr } from '../location/GameMapTypes';\nimport { GameMode } from '../mode/GameModeTypes';\nimport { GameStateStorage, UserStateTypes } from '../state/GameStateTypes';\n\nconst stringToPositionMap = {\n  left: GamePosition.Left,\n  middle: GamePosition.Middle,\n  right: GamePosition.Right\n};\n\nconst stringToGameModeMap = {\n  talk: GameMode.Talk,\n  explore: GameMode.Explore,\n  move: GameMode.Move,\n  menu: GameMode.Menu\n};\n\nconst stringToLocAttrMap = {\n  navigation: GameLocationAttr.navigation,\n  talkTopics: GameLocationAttr.talkTopics,\n  objects: GameLocationAttr.objects,\n  boundingBoxes: GameLocationAttr.boundingBoxes,\n  characters: GameLocationAttr.characters,\n  actions: GameLocationAttr.actions,\n  bgmKey: GameLocationAttr.bgmKey,\n  collectibles: GameLocationAttr.collectibles\n};\n\nconst stringToActionTypeMap = {\n  move_character: GameActionType.MoveCharacter,\n  update_character: GameActionType.UpdateCharacter,\n  obtain_collectible: GameActionType.ObtainCollectible,\n  complete_objective: GameActionType.CompleteObjective,\n  change_location: GameActionType.LocationChange,\n  add_item: GameActionType.AddItem,\n  remove_item: GameActionType.RemoveItem,\n  change_background: GameActionType.ChangeBackground,\n  show_dialogue: GameActionType.BringUpDialogue,\n  add_mode: GameActionType.AddLocationMode,\n  remove_mode: GameActionType.RemoveLocationMode,\n  add_popup: GameActionType.AddPopup,\n  make_object_glow: GameActionType.MakeObjectGlow,\n  make_object_blink: GameActionType.MakeObjectBlink,\n  play_bgm: GameActionType.PlayBGM,\n  play_sfx: GameActionType.PlaySFX\n};\n\nconst stringToGameStateStorageMap = {\n  checklist: GameStateStorage.ChecklistState,\n  userstate: GameStateStorage.UserState\n};\n\nconst stringToUserStateMap = {\n  achievements: UserStateTypes.achievements,\n  collectibles: UserStateTypes.collectibles\n};\n\n/**\n * This class is in charge of converting strings from\n * the txt into enums that can be stored in the Checkpoint\n * object, which can be read and played by the game engine.\n *\n * This also acts as a validity checker to ensure that\n * strings such as action types (eg 'show_dialogue') and\n * game modes (eg 'explore') are actually valid enums\n */\nexport default class ParserConverter {\n  public static stringToPosition(str: string) {\n    return stringToPositionMap[str] || GamePosition.Middle;\n  }\n\n  public static stringToGameMode(str: string) {\n    const result = stringToGameModeMap[str];\n    if (!result) {\n      throw new Error(`Invalid location mode, ${str}`);\n    }\n    return result;\n  }\n\n  public static stringToActionType(str: string) {\n    const result = stringToActionTypeMap[str];\n    if (!result) {\n      throw new Error(`Invalid action type, ${str}`);\n    }\n    return result;\n  }\n\n  public static stringToGameStateStorage(str: string) {\n    const result = stringToGameStateStorageMap[str];\n    if (!result) {\n      throw new Error(`Invalid condition type, ${str}`);\n    }\n    return result;\n  }\n\n  public static stringToLocAttr(str: string) {\n    const result = stringToLocAttrMap[str];\n    if (!result) {\n      throw new Error(`Invalid entity type, ${str}`);\n    }\n    return result;\n  }\n\n  public static stringToUserState(str: string) {\n    const result = stringToUserStateMap[str];\n    if (!result) {\n      throw new Error(`Invalid user state type, ${str}`);\n    }\n    return result;\n  }\n}\n","import { ItemId } from '../commons/CommonTypes';\nimport { GameLocationAttr } from '../location/GameMapTypes';\nimport { GameSoundType } from '../sound/GameSoundTypes';\nimport Parser from './Parser';\n\nexport enum GameAttr {\n  locations = 'locations',\n  objectives = 'objectives',\n  bgms = 'bgms',\n  sfxs = 'sfxs'\n}\n\ntype AssertionDetail = {\n  itemId: ItemId;\n  actionType?: string;\n};\n\n/**\n * This class acts as a validator to ensure that all the ids\n * that are used as arguments inside actions or in the txt are correct ids\n * that have been declared in other parts of the txt.\n *\n * e.g. this class ensures that if make_object_glow(door) is called,\n * \"door\" is an object id that as declared in 'objects' paragraph\n * somewhere in the txt.\n *\n * This helps story writers ensure the validity of their txt file\n * and also prevents game engine from running into id-not-found error\n *\n * How it works: Since the action \"make_object_glow(door)\" might be declared before the\n * object \"door\" is even declared, when the action is parsed, you can call this class\n * to store and remember the assertion that \"door\" must be a objectId,\n * Once the parser finishes parsing the entire txt,\n * you can run the verifyAssertions function of this class\n * to check all the assertions made is true.\n */\nexport default class ParserValidator {\n  private locAttrAssertions: Map<GameLocationAttr, AssertionDetail[]>;\n  private attrAssertions: Map<GameAttr, AssertionDetail[]>;\n\n  constructor() {\n    this.locAttrAssertions = new Map<GameLocationAttr, AssertionDetail[]>();\n    this.attrAssertions = new Map<GameAttr, AssertionDetail[]>();\n  }\n\n  /**\n   * This class stores an assertion that a certain ItemId is\n   * of a certain type, e.g. assertLocAttr('objects', 'door')\n   * ensures that 'door' is a valid object Id.\n   *\n   * @param locAttr The attribute that the itemId needs to be\n   * @param itemId the itemId that needs to be checked for validity\n   * @param actionType Action type e.g. make_object_glow if the assertion\n   *                   was made while parsing an action\n   */\n  public assertLocAttr(locAttr: GameLocationAttr, itemId: ItemId, actionType?: string) {\n    if (!this.locAttrAssertions.get(locAttr)) {\n      this.locAttrAssertions.set(locAttr, []);\n    }\n    this.locAttrAssertions.get(locAttr)!.push({ itemId, actionType });\n    return itemId;\n  }\n\n  /**\n   *\n   * @param gameAttr\n   * @param itemId\n   * @param actionType\n   */\n  public assertAttr(gameAttr: GameAttr, itemId: ItemId, actionType?: string) {\n    if (!this.attrAssertions.get(gameAttr)) {\n      this.attrAssertions.set(gameAttr, []);\n    }\n    this.attrAssertions.get(gameAttr)!.push({ itemId, actionType });\n    return itemId;\n  }\n\n  public assertLocAttrs(locAttr: GameLocationAttr, itemIds: ItemId[], actionType?: string) {\n    itemIds.forEach(itemId => this.assertLocAttr(locAttr, itemId, actionType));\n  }\n\n  public verifyAssertions() {\n    this.verifyLocAttrAssertions();\n    this.verifyAttrAssertions();\n  }\n\n  private verifyLocAttrAssertions() {\n    this.locAttrAssertions.forEach(\n      (assertionDetails: AssertionDetail[], gameLocationAttr: GameLocationAttr) => {\n        assertionDetails.forEach((assertionDetail: AssertionDetail) => {\n          const { itemId, actionType } = assertionDetail;\n          if (!Parser.checkpoint.map[gameLocationAttr].has(itemId)) {\n            if (actionType) {\n              this.actionAssertionError(itemId, gameLocationAttr, actionType);\n            }\n            throw new Error(`Cannot find id \"${itemId}\" under ${gameLocationAttr} entity type`);\n          }\n        });\n      }\n    );\n  }\n\n  private verifyAttrAssertions() {\n    this.attrAssertions.forEach((assertionDetails: AssertionDetail[], gameAttr: GameAttr) => {\n      assertionDetails.forEach((assertionDetail: AssertionDetail) => {\n        const { itemId, actionType } = assertionDetail;\n        switch (gameAttr) {\n          case GameAttr.locations:\n            Parser.checkpoint.map.getLocationAtId(itemId);\n            break;\n          case GameAttr.objectives:\n            if (Parser.checkpoint.objectives.getObjectives().get(itemId) === undefined) {\n              if (actionType) {\n                this.actionAssertionError(itemId, gameAttr, actionType);\n              }\n              throw new Error(`Cannot find objective id \"${itemId}\"`);\n            }\n            break;\n          case GameAttr.bgms:\n            const numberOfBgm = Parser.checkpoint.map\n              .getSoundAssets()\n              .filter(sound => sound.soundType === GameSoundType.BGM && sound.key === itemId)\n              .length;\n            if (numberOfBgm === 0) {\n              throw new Error(`Cannot find bgm key \"${itemId}\"`);\n            } else if (numberOfBgm > 1) {\n              throw new Error(`More than 1 bgm key \"${itemId}\"`);\n            }\n            break;\n          case GameAttr.sfxs:\n            const numberOfSfx = Parser.checkpoint.map\n              .getSoundAssets()\n              .filter(sound => sound.soundType === GameSoundType.SFX && sound.key === itemId)\n              .length;\n            if (numberOfSfx === 0) {\n              throw new Error(`Cannot find sfx key \"${itemId}\"`);\n            } else if (numberOfSfx > 1) {\n              throw new Error(`More than 1 sfx key \"${itemId}\"`);\n            }\n            break;\n        }\n      });\n    });\n  }\n\n  private actionAssertionError(itemId: ItemId, attribute: string, actionType: string) {\n    throw new Error(\n      `Expected type of \"${attribute}\" as argument for \"${actionType}\", obtained \"${itemId}\" which is either undefined or the wrong id.`\n    );\n  }\n}\n","import { GameAction, GameActionType } from '../action/GameActionTypes';\nimport { ItemId } from '../commons/CommonTypes';\nimport { GameLocationAttr } from '../location/GameMapTypes';\nimport StringUtils from '../utils/StringUtils';\nimport ConditionParser from './ConditionParser';\nimport Parser from './Parser';\nimport ParserConverter from './ParserConverter';\nimport { GameAttr } from './ParserValidator';\n\n/**\n * The Action Parser parses actions for all entities.\n * This class takes in action strings to produce GameAction objects,\n * which store information about action type and\n * action params (much like React actions)\n */\nexport default class ActionParser {\n  /**\n   * Parses many action strings, stores resulting Game Action objects\n   * inside the game map, and returns the corresponding actionIds.\n   *\n   * @param fullActionStrings raw action strings, eg [\"show_dialogue(done)\", \"change_location(room) if gamestate.finish\"]\n   * @returns {Array<ItemId>} returns actionIds of the parsed actions with actions are stored in the game map.\n   */\n  public static parseActions(fullActionStrings: string[]): ItemId[] {\n    return fullActionStrings.map(fullActionString => this.parseAction(fullActionString));\n  }\n\n  /**\n   * Parses an action string, stores resulting Game Action object\n   * inside the game map, and returns the corresponding actionId.\n   *\n   * @param rawActionString raw action string eg \"show_dialogue(done) if gamestate.finish\"\n   * @returns {ItemId} returns actionId of the parsed actions, as action is stored in the game map.\n   */\n  public static parseAction(rawActionString: string): ItemId {\n    const [actionString, conditionalsString] = StringUtils.splitByChar(rawActionString, 'if');\n\n    const gameAction = this.parseActionContent(actionString);\n    if (conditionalsString) {\n      gameAction.actionConditions = StringUtils.splitByChar(\n        conditionalsString,\n        'AND'\n      ).map(condition => ConditionParser.parse(condition));\n    }\n\n    Parser.checkpoint.map.addItemToMap(\n      GameLocationAttr.actions,\n      gameAction.interactionId,\n      gameAction\n    );\n\n    return gameAction.interactionId;\n  }\n\n  /**\n   * This funciton converts action strings eg \"show_dialogue(hello)\"\n   * (excluding conditionals) into Game Action objects\n   *\n   * Note that this function also validates the parameters to make\n   * sure that they are used correctly.\n   *\n   * @param actionString the action string to be parsed\n   * @returns {GameAction} resulting action that can be stored in the game map\n   */\n  public static parseActionContent(actionString: string): GameAction {\n    const [action, actionParamString] = StringUtils.splitByChar(actionString, '(');\n    let repeatable = false;\n    let actionType = action;\n    if (action[action.length - 1] === '*') {\n      repeatable = true;\n      actionType = actionType.slice(0, -1);\n    }\n\n    const gameActionType = ParserConverter.stringToActionType(actionType);\n    const actionParams = StringUtils.splitByChar(actionParamString.slice(0, -1), ',');\n    const actionParamObj: any = {};\n\n    switch (gameActionType) {\n      case GameActionType.ObtainCollectible:\n        actionParamObj.id = Parser.validator.assertLocAttr(\n          GameLocationAttr.collectibles,\n          actionParams[0],\n          actionType\n        );\n        break;\n      case GameActionType.CompleteObjective:\n        actionParamObj.id = Parser.validator.assertAttr(\n          GameAttr.objectives,\n          actionParams[0],\n          actionType\n        );\n        break;\n      case GameActionType.LocationChange:\n      case GameActionType.ChangeBackground:\n        actionParamObj.id = Parser.validator.assertAttr(\n          GameAttr.locations,\n          actionParams[0],\n          actionType\n        );\n        break;\n      case GameActionType.BringUpDialogue:\n        actionParamObj.id = Parser.validator.assertLocAttr(\n          GameLocationAttr.talkTopics,\n          actionParams[0],\n          actionType\n        );\n        break;\n      case GameActionType.AddItem:\n      case GameActionType.RemoveItem:\n        const gameLocAttr = ParserConverter.stringToLocAttr(actionParams[0]);\n        actionParamObj.attr = gameLocAttr;\n        actionParamObj.locationId = Parser.validator.assertAttr(\n          GameAttr.locations,\n          actionParams[1],\n          actionType\n        );\n        actionParamObj.id = Parser.validator.assertLocAttr(\n          gameLocAttr,\n          actionParams[2],\n          actionType\n        );\n        break;\n      case GameActionType.AddLocationMode:\n      case GameActionType.RemoveLocationMode:\n        actionParamObj.locationId = Parser.validator.assertAttr(\n          GameAttr.locations,\n          actionParams[0],\n          actionType\n        );\n        actionParamObj.mode = ParserConverter.stringToGameMode(actionParams[1]);\n        break;\n      case GameActionType.AddPopup:\n        actionParamObj.id = Parser.validator.assertLocAttr(\n          GameLocationAttr.objects,\n          actionParams[0],\n          actionType\n        );\n        actionParamObj.position = ParserConverter.stringToPosition(actionParams[1]);\n        break;\n      case GameActionType.MakeObjectBlink:\n        actionParamObj.id = Parser.validator.assertLocAttr(\n          GameLocationAttr.objects,\n          actionParams[0],\n          actionType\n        );\n        actionParamObj.turnOn = actionParams[1] === 'false' ? false : true;\n        break;\n      case GameActionType.MakeObjectGlow:\n        actionParamObj.id = Parser.validator.assertLocAttr(\n          GameLocationAttr.objects,\n          actionParams[0],\n          actionType\n        );\n        actionParamObj.turnOn = actionParams[1] === 'false' ? false : true;\n        break;\n      case GameActionType.PlayBGM:\n        actionParamObj.id = Parser.validator.assertAttr(GameAttr.bgms, actionParams[0], actionType);\n        break;\n      case GameActionType.PlaySFX:\n        actionParamObj.id = Parser.validator.assertAttr(GameAttr.sfxs, actionParams[0], actionType);\n        break;\n    }\n\n    const actionId = Parser.generateActionId();\n    return {\n      actionType: gameActionType,\n      actionParams: actionParamObj,\n      actionConditions: [],\n      interactionId: actionId,\n      isInteractive: false,\n      isRepeatable: repeatable\n    };\n  }\n}\n","import { ActionCondition } from '../action/GameActionTypes';\nimport { GameStateStorage } from '../state/GameStateTypes';\nimport StringUtils from '../utils/StringUtils';\nimport Parser from './Parser';\nimport ParserConverter from './ParserConverter';\nimport { GameAttr } from './ParserValidator';\n\n/**\n * This parser is in charge of parsing conditionals\n */\nexport default class ConditionParser {\n  /**\n   * This function creates an ActionCondition object, given a condition string\n   *\n   * @param conditionDetails A conditional string such as \"!if userstate.assessments.301\"\n   * @returns {ActionCondition} encapsulating the information on the conditional\n   */\n  public static parse(conditionDetails: string): ActionCondition {\n    const hasExclamation = conditionDetails[0] === '!';\n    if (hasExclamation) {\n      conditionDetails = conditionDetails.slice(1);\n    }\n    const [gameStateStorage, ...condParams] = StringUtils.splitByChar(conditionDetails, '.');\n    switch (ParserConverter.stringToGameStateStorage(gameStateStorage)) {\n      case GameStateStorage.ChecklistState:\n        return {\n          state: GameStateStorage.ChecklistState,\n          conditionParams: { id: Parser.validator.assertAttr(GameAttr.objectives, condParams[0]) },\n          boolean: !hasExclamation\n        };\n\n      case GameStateStorage.UserState:\n        return {\n          state: GameStateStorage.UserState,\n          conditionParams: {\n            listName: condParams[0],\n            id: condParams[1]\n          },\n          boolean: !hasExclamation\n        };\n      default:\n        throw new Error('Parsing error: Invalid condition param');\n    }\n  }\n}\n","import { Character } from '../character/GameCharacterTypes';\nimport { AssetKey, ItemId } from '../commons/CommonTypes';\nimport { GameLocationAttr, LocationId } from '../location/GameMapTypes';\nimport StringUtils from '../utils/StringUtils';\nimport Parser from './Parser';\nimport ParserConverter from './ParserConverter';\n\n/**\n * This class is in charge of parsing Character entities\n * from character lines\n */\nexport default class CharacterParser {\n  /**\n   * This class parses the character paragraph into\n   * Characters and places them in the game map\n   *\n   * @param locationId Location where the character lines are found\n   * @param characterList the list of character CSV lines\n   */\n  public static parse(locationId: LocationId, characterList: string[]) {\n    characterList.forEach(characterDetails =>\n      this.parseCharacterDetails(locationId, characterDetails)\n    );\n  }\n\n  /**\n   * Generates the asset key for a character and expression\n   *\n   * @param characterId the character's id, which is also the folder of the character in /avatars folder\n   * @param expression the expression of the character, which is also present in filename\n   */\n  public static characterAssetKey(characterId: ItemId, expression: string) {\n    return characterId + '-' + expression;\n  }\n\n  /**\n   * Generates the short asset path for a character and an expression\n   *\n   * @param characterId the character's id, which is also the folder of the character in /avatars folder\n   * @param expression the expression of the character, which is also present in filename\n   */\n  public static characterAssetPath(characterId: ItemId, expression: string) {\n    return `/avatars/${characterId}/${characterId}.${expression}.png`;\n  }\n\n  /**\n   * This function parses character CSVs and returns Characters\n   * and places the characters inside the game map\n   *\n   * @param locationId the character's location\n   * @param characterDetails the CSV string containing character details\n   */\n  private static parseCharacterDetails(locationId: LocationId, characterDetails: string) {\n    const addToLoc = characterDetails[0] === '+';\n    if (addToLoc) {\n      characterDetails = characterDetails.slice(1);\n    }\n\n    const [id, name, defaultExpression, defaultPosition] = StringUtils.splitByChar(\n      characterDetails,\n      ','\n    );\n\n    const expressions = new Map<string, AssetKey>();\n\n    const character: Character = {\n      id,\n      name,\n      expressions,\n      defaultExpression,\n      defaultPosition: ParserConverter.stringToPosition(defaultPosition)\n    };\n\n    // Add asset key to expression map\n    expressions.set(defaultExpression, this.characterAssetKey(id, defaultExpression));\n\n    // Add asset keys to expression map\n    Parser.checkpoint.map.addMapAsset(\n      this.characterAssetKey(id, defaultExpression),\n      this.characterAssetPath(id, defaultExpression)\n    );\n\n    // Add character to map\n    Parser.checkpoint.map.addItemToMap(GameLocationAttr.characters, id, character);\n\n    // Add character to location\n    if (addToLoc) {\n      Parser.checkpoint.map.setItemAt(locationId, GameLocationAttr.characters, id);\n    }\n  }\n}\n","import { SpeakerDetail } from '../character/GameCharacterTypes';\nimport StringUtils from '../utils/StringUtils';\nimport CharacterParser from './CharacterParser';\nimport Parser from './Parser';\nimport ParserConverter from './ParserConverter';\n\n/**\n * This classes parses the speaker portion of the dialogue\n * and returns SpeakerDetail object encapsulating information\n * about speakers in a dialogue.\n *\n * This class also loads the character expressions into the\n * Character entity in the game map\n */\nexport default class SpeakerParser {\n  /**\n   * The character parses one line containing the speaker details\n   * and returns a speaker detail object which is a property of some DialogueLine's.\n   *\n   * @param rawStr the string containing the character ids and expressions\n   * @returns {SpeakerDetail} associated with that string\n   */\n  public static parse(rawStr: string): SpeakerDetail {\n    const [speakerId, expression, speakerPositionStr] = StringUtils.splitByChar(\n      rawStr.slice(1), // remove the @\n      ','\n    );\n    const speakerPosition = ParserConverter.stringToPosition(speakerPositionStr);\n\n    this.addCharacterExprToMap(speakerId, expression);\n\n    return {\n      speakerId,\n      expression,\n      speakerPosition\n    };\n  }\n\n  /**\n   * This line adds the  expression into the expression map of an\n   * existing Character in the game map. This ensures that\n   * images of the characters' various expressions are loaded properly\n   * into the game map.\n   *\n   * @param charId the character Id of that character, also the asset folder of the character inside /avatars folder\n   * @param expression the expression of character to be loaded into the expression map of the character\n   */\n  private static addCharacterExprToMap(charId: string, expression: string) {\n    if (charId === 'you' || charId === 'narrator') {\n      return;\n    }\n    const character = Parser.checkpoint.map.getCharacters().get(charId);\n\n    if (!character) {\n      throw new Error(`Character \"${charId}\" not in map`);\n    }\n\n    const charExpression = expression || character.defaultExpression;\n\n    character.expressions.set(\n      expression,\n      CharacterParser.characterAssetKey(charId, expression || charExpression)\n    );\n\n    Parser.checkpoint.map.addMapAsset(\n      CharacterParser.characterAssetKey(charId, charExpression),\n      CharacterParser.characterAssetPath(charId, charExpression)\n    );\n  }\n}\n","import { Dialogue, DialogueLine, PartName } from '../dialogue/GameDialogueTypes';\nimport { GameLocationAttr } from '../location/GameMapTypes';\nimport { mapValues } from '../utils/GameUtils';\nimport StringUtils from '../utils/StringUtils';\nimport ActionParser from './ActionParser';\nimport Parser from './Parser';\nimport SpeakerParser from './SpeakerParser';\n\n/**\n * This class parses dialogues and creates\n * Dialogue Objects which can be read by the\n * Dialogue Generator\n */\nexport default class DialogueParser {\n  /**\n   * This function reads the entire text under the \"dialogue\" heading,\n   * converts dialogues listed underneath into Dialogue entities,\n   * and stores these dialogues in the game map.\n   *\n   * @param dialogueText the entire dialogue text beneath Dialogue\n   */\n  public static parse(dialogueText: string[]) {\n    const dialoguesParagraphs = StringUtils.splitToParagraph(dialogueText);\n\n    dialoguesParagraphs.forEach(([dialogueDetails, dialogueBody]: [string, string[]]) => {\n      if (dialogueBody.length === 0) {\n        console.error('No dialogue found for dialogueId');\n        return;\n      }\n      this.parseDialogue(dialogueDetails, dialogueBody);\n    });\n  }\n\n  /**\n   * This function parses one dialogue and stores it into the game map\n   *\n   * @param dialogueDetails the string containing dialogue Id and/or dialouge title\n   * @param dialogueBody the body of the dialogue containing its contents\n   */\n  private static parseDialogue(dialogueDetails: string, dialogueBody: string[]) {\n    const [dialogueId, title] = StringUtils.splitByChar(dialogueDetails, ',', 1);\n    const content = this.parseDialogueContent(dialogueBody);\n    const dialogue: Dialogue = { title, content };\n\n    Parser.checkpoint.map.addItemToMap(GameLocationAttr.talkTopics, dialogueId, dialogue);\n  }\n\n  /**\n   * This function parses the dialogue's body and\n   * converts each into a Dialogue object.\n   *\n   * This function's main task is to separate a dialogue into\n   * parts (or part if just one), and then uses  createDialogueLines to parse each part.\n   *\n   * @param dialogueBody The entire dialogue body\n   */\n  private static parseDialogueContent(dialogueBody: string[]) {\n    const rawDialogueContent: Map<PartName, string[]> = StringUtils.mapByHeader(\n      dialogueBody,\n      isInteger\n    );\n\n    const dialogueObject: Map<PartName, DialogueLine[]> = mapValues(\n      rawDialogueContent,\n      this.createDialogueLines\n    );\n    return dialogueObject;\n  }\n\n  /**\n   * This function parses one \"part\" of a dialogue,\n   * and converts them into a series of DialogueLine's,\n   * where DialogueLine encapsulates data on the text,\n   * (as well as speaker change, actions and gotos if any)\n   *\n   * @param {Array<string>} lines the lines inside one part of a dialogue\n   * @returns {Array<DialogueLine>}\n   */\n  private static createDialogueLines(lines: string[]): DialogueLine[] {\n    const dialogueLines: DialogueLine[] = [];\n    let currIndex = 0;\n\n    while (currIndex !== lines.length) {\n      const rawStr = lines[currIndex];\n      switch (true) {\n        case isGotoLabel(rawStr):\n          dialogueLines[dialogueLines.length - 1].goto = rawStr.split(' ')[1];\n          break;\n        case isActionLabel(rawStr):\n          const lastLine = dialogueLines[dialogueLines.length - 1];\n          !lastLine.actionIds && (lastLine.actionIds = []);\n          lastLine.actionIds.push(ActionParser.parseAction(rawStr));\n          break;\n        case isSpeaker(rawStr):\n          currIndex++;\n          const nextLine = lines[currIndex];\n          if (!nextLine) {\n            throw new Error('Parsing error: Cannot change speaker without next line');\n          }\n          dialogueLines.push({ line: nextLine });\n          dialogueLines[dialogueLines.length - 1].speakerDetail = SpeakerParser.parse(rawStr);\n          break;\n        default:\n          dialogueLines.push({ line: rawStr });\n          break;\n      }\n      currIndex++;\n    }\n    return dialogueLines;\n  }\n}\n\nconst isInteger = (line: string) => new RegExp(/^[0-9]+$/).test(line);\nconst isGotoLabel = (line: string) => new RegExp(/^goto [0-9]+$/).test(line);\nconst isActionLabel = (line: string) => line && (line[0] === '\\t' || line.slice(0, 4) === '    ');\nconst isSpeaker = (line: string) => line && line[0] === '@';\n","import { LocationId } from '../location/GameMapTypes';\nimport { GameSoundType } from '../sound/GameSoundTypes';\nimport StringUtils from '../utils/StringUtils';\nimport Parser from './Parser';\n\n/**\n * This class contains the parser for the BGM and SFX paragraphs\n * within a location\n */\nexport default class MusicParser {\n  /**\n   * This function parses a series of sounds and updates\n   * the sound assets included in the game map.\n   *\n   * It also parses the first BGM as the bgm of the location\n   *\n   * @param locationId The locationId of the BGM/SFX you want to parse\n   * @param soundList the list of sounds to be added as assets\n   * @param soundType Whether it's BGM or SFX\n   */\n  public static parse(locationId: LocationId, soundList: string[], soundType: GameSoundType) {\n    soundList.forEach((musicDetails, musicIndex) => {\n      const [id, assetPath, volume] = StringUtils.splitByChar(musicDetails, ',');\n      Parser.checkpoint.map.addSoundAsset({\n        key: id,\n        path: assetPath,\n        config: {\n          volume: parseFloat(volume),\n          loop: soundType === GameSoundType.BGM\n        },\n        soundType\n      });\n\n      if (soundType === GameSoundType.BGM && musicIndex === 0) {\n        Parser.checkpoint.map.setBGMusicAt(locationId, id);\n      }\n    });\n  }\n}\n","import { GameCheckpoint } from '../chapter/GameChapterTypes';\nimport GameMap from '../location/GameMap';\nimport GameObjective from '../objective/GameObjective';\nimport StringUtils from '../utils/StringUtils';\nimport ActionParser from './ActionParser';\nimport DialoguesParser from './DialogueParser';\nimport LocationsParser from './LocationDetailsParser';\nimport LocationParser from './LocationParser';\nimport ParserValidator, { GameAttr } from './ParserValidator';\n\n/**\n * This class converts a checkpoint txt file into a Checkpoint\n * object.\n *\n * A Checkpoint object encapsulates data about the map including all\n * the locations inside it, as well as the objectives in that checkpoint,\n * basically everything the game engine needs to know to render\n * the entire checkpoint for players to play.\n *\n */\nclass Parser {\n  public static checkpoint: GameCheckpoint;\n  private static actionIdNum: number;\n  public static validator: ParserValidator;\n\n  public static generateActionId() {\n    Parser.actionIdNum++;\n    return `action#${Parser.actionIdNum}`;\n  }\n\n  public static init() {\n    Parser.actionIdNum = 0;\n\n    Parser.checkpoint = {\n      map: new GameMap(),\n      startingLoc: '',\n      objectives: new GameObjective()\n    };\n\n    Parser.validator = new ParserValidator();\n  }\n\n  public static parse(chapterText: string, continueParse = false): GameCheckpoint {\n    if (!continueParse) {\n      Parser.init();\n    }\n\n    const checkPointLines = StringUtils.splitToLines(chapterText);\n    const checkPointParagraphs = StringUtils.splitToParagraph(checkPointLines);\n\n    checkPointParagraphs.forEach(([header, body]: [string, string[]]) => {\n      if (body.length === 0 && header.includes(':')) {\n        Parser.parseCheckpointConfig(header);\n      } else {\n        Parser.parseCheckpointParagraphs(header, body) || LocationParser.parse(header, body);\n      }\n    });\n\n    Parser.validator.verifyAssertions();\n    return this.checkpoint;\n  }\n\n  private static parseCheckpointConfig(checkpointConfig: string) {\n    const [key, value] = StringUtils.splitByChar(checkpointConfig, ':');\n    switch (key) {\n      case 'startingLoc':\n        Parser.validator.assertAttr(GameAttr.locations, value);\n        Parser.checkpoint.startingLoc = value;\n        break;\n      default:\n        throw new Error(`Invalid checkpoint config key, \"${checkpointConfig}\"`);\n    }\n  }\n\n  private static parseCheckpointParagraphs(header: string, body: string[]) {\n    switch (header) {\n      case 'objectives':\n        Parser.checkpoint.objectives.addObjectives(body);\n        break;\n      case 'locations':\n        LocationsParser.parse(body);\n        break;\n      case 'gameStartActions':\n        Parser.checkpoint.map.setGameStartActions(ActionParser.parseActions(body));\n        break;\n      case 'checkpointCompleteActions':\n        Parser.checkpoint.map.setCheckpointCompleteActions(ActionParser.parseActions(body));\n        break;\n      case 'dialogues':\n        DialoguesParser.parse(body);\n        break;\n      default:\n        return false;\n    }\n    return true;\n  }\n}\n\nexport default Parser;\n","import { GameLocation, GameLocationAttr, LocationId } from '../location/GameMapTypes';\nimport { GameSoundType } from '../sound/GameSoundTypes';\nimport StringUtils from '../utils/StringUtils';\nimport ActionParser from './ActionParser';\nimport BoundingBoxParser from './BoundingBoxParser';\nimport CharacterParser from './CharacterParser';\nimport MusicParser from './MusicParser';\nimport ObjectParser from './ObjectParser';\nimport Parser from './Parser';\nimport ParserConverter from './ParserConverter';\nimport { GameAttr } from './ParserValidator';\n\n/**\n * This class parses data for one specific location.\n */\nexport default class LocationParser {\n  /**\n   * This function reads the entire location body and\n   * updates the location in the game map based on details inside\n   * including charcters, objects, boundingBoxes etc.\n   *\n   * @param locationId The location id for the location to parse\n   * @param locationBody The entire body of the location as string array\n   */\n  public static parse(locationId: LocationId, locationBody: string[]) {\n    const location = Parser.checkpoint.map.getLocationAtId(locationId);\n    const locationParagraphs = StringUtils.splitToParagraph(locationBody);\n\n    locationParagraphs.forEach(([header, body]: [string, string[]]) => {\n      if (body.length === 0) {\n        this.parseLocationConfig(location, header);\n      } else {\n        this.parseLocationParagraphs(location, header, body);\n      }\n    });\n  }\n\n  /**\n   * This paragraph parses all the config details in a specific location\n   * ie lines containing the ':' to specify gameplay details about the location\n   *\n   * @param location The reference game location that we want to update\n   * @param locationConfig The config string about the location\n   */\n  private static parseLocationConfig(location: GameLocation, locationConfig: string) {\n    const [key, value] = StringUtils.splitByChar(locationConfig, ':');\n    const configValues = StringUtils.splitByChar(value, ',');\n    switch (key) {\n      case 'modes':\n        configValues.forEach(mode => {\n          const gameMode = ParserConverter.stringToGameMode(mode);\n          location.modes.add(gameMode);\n        });\n        break;\n      case 'nav':\n        configValues.forEach(otherLocationId => {\n          Parser.validator.assertAttr(GameAttr.locations, otherLocationId);\n          location.navigation.add(otherLocationId);\n        });\n        break;\n      case 'talkTopics':\n        const talkTopics = configValues;\n        Parser.validator.assertLocAttrs(GameLocationAttr.talkTopics, talkTopics);\n        location.talkTopics = new Set(talkTopics);\n        break;\n      default:\n        throw new Error(`Invalid config key \"${key}\" specified under location \"${location.id}\"`);\n    }\n  }\n\n  /**\n   * This paragraph parses all the paragraphs inside a specific location\n   * ie lines paragraphs headed by 'objects', 'boundingBoxes', etc.\n   *\n   * @param location The reference game location that we want to update\n   * @param entityHeader The header of the entity we want to parse in the location\n   * @param body The body paragraph underneath the entity header\n   */\n  private static parseLocationParagraphs(\n    location: GameLocation,\n    entityHeader: string,\n    body: string[]\n  ) {\n    switch (entityHeader) {\n      case 'objects':\n        ObjectParser.parse(location.id, body);\n        break;\n      case 'boundingBoxes':\n        BoundingBoxParser.parse(location.id, body);\n        break;\n      case 'characters':\n        CharacterParser.parse(location.id, body);\n        break;\n      case 'bgm':\n        MusicParser.parse(location.id, body, GameSoundType.BGM);\n        break;\n      case 'sfx':\n        MusicParser.parse(location.id, body, GameSoundType.SFX);\n        break;\n      case 'actions':\n        location.actionIds = ActionParser.parseActions(body);\n        break;\n      default:\n        throw new Error(`Invalid location paragraph header \"${entityHeader}\"`);\n    }\n  }\n}\n","import { GameLocationAttr, LocationId } from '../location/GameMapTypes';\nimport { ObjectProperty } from '../objects/GameObjectTypes';\nimport StringUtils from '../utils/StringUtils';\nimport ActionParser from './ActionParser';\nimport Parser from './Parser';\n\n/**\n * This class parses object CSV's into Object Properties\n */\nexport default class ObjectParser {\n  /**\n   * This function parses object CSVs in a location,\n   * and creates Object Properties corresponding to the each object CSV,\n   * and stores these Object Properties into the game map.\n   *\n   * The class also parses actions of objects if any.\n   *\n   * @param locationId the location where the object paragraph can be found\n   * @param objectList the list of lines describing objects in the location, including actions\n   */\n  public static parse(locationId: LocationId, objectList: string[]) {\n    const objectParagraphs = StringUtils.splitToParagraph(objectList);\n\n    objectParagraphs.forEach(([header, body]: [string, string[]]) => {\n      const object = this.parseObjectConfig(locationId, header);\n      if (body.length) {\n        object.isInteractive = true;\n        object.actionIds = ActionParser.parseActions(body);\n      }\n    });\n  }\n\n  /**\n   * Generates an asset key based on the object path\n   *\n   * @param shortPath path to the object\n   */\n  private static objectAssetKey(shortPath: string) {\n    return shortPath;\n  }\n\n  /**\n   * Generates an asset path based on the object path\n   *\n   * @param shortPath path to the object\n   */\n  private static objectPath(shortPath: string) {\n    return shortPath;\n  }\n\n  /**\n   * This function parses one object CSV into an Object Property,\n   * and places the object inside the game map.\n   *\n   * It also returns the reference to the object property, so that\n   * actionIds can be added to it.\n   *\n   * @param locationId The location id\n   * @param objectDetails One line containing an object CSV\n   * @returns {ObjectProperty} the object property created\n   */\n  private static parseObjectConfig(locationId: LocationId, objectDetails: string): ObjectProperty {\n    const addToLoc = objectDetails[0] === '+';\n    if (addToLoc) {\n      objectDetails = objectDetails.slice(1);\n    }\n\n    const [objectId, shortPath, x, y, width, height] = StringUtils.splitByChar(objectDetails, ',');\n    const objectProperty: ObjectProperty = {\n      assetKey: this.objectAssetKey(shortPath),\n      x: parseInt(x),\n      y: parseInt(y),\n      width: parseInt(width) || undefined,\n      height: parseInt(height) || undefined,\n      isInteractive: false,\n      interactionId: objectId\n    };\n\n    Parser.checkpoint.map.addMapAsset(this.objectAssetKey(shortPath), this.objectPath(shortPath));\n\n    Parser.checkpoint.map.addItemToMap(GameLocationAttr.objects, objectId, objectProperty);\n    if (addToLoc) {\n      Parser.checkpoint.map.setItemAt(locationId, GameLocationAttr.objects, objectId);\n    }\n\n    return objectProperty;\n  }\n}\n","import { BBoxProperty } from '../boundingBoxes/GameBoundingBoxTypes';\nimport { GameLocationAttr, LocationId } from '../location/GameMapTypes';\nimport StringUtils from '../utils/StringUtils';\nimport ActionParser from './ActionParser';\nimport Parser from './Parser';\n\n/**\n * This class is in charge of parsing the boundingBoxes paragraph\n */\nexport default class BoundingBoxParser {\n  /**\n   * This parses the boundingBoxes paragraph (with actions) into Bounding Box Properties\n   * and stores them in the correct location in the game map\n   *\n   * @param locationId locationId where the boundingBox paragraph is\n   * @param boundingBoxList the list of raw bounding box strings in the paragraph\n   */\n  public static parse(locationId: LocationId, boundingBoxList: string[]) {\n    const boundingBoxParagraphs = StringUtils.splitToParagraph(boundingBoxList);\n\n    boundingBoxParagraphs.forEach(([header, body]: [string, string[]]) => {\n      const boundingBox = this.parseBBoxConfig(locationId, header);\n      if (body.length) {\n        boundingBox.isInteractive = true;\n        boundingBox.actionIds = ActionParser.parseActions(body);\n      }\n    });\n  }\n\n  /**\n   * This class parses one bounding box CSV and produces a\n   * Bounding box property from that bounding box string\n   *\n   * @param locationId LocationId where the bounding box paragraph is\n   * @param bboxDetails One bounding box CSV line\n   * @returns {BBoxProperty} corresponding bbox property produced from that CSV line\n   */\n  private static parseBBoxConfig(locationId: LocationId, bboxDetails: string): BBoxProperty {\n    const addToLoc = bboxDetails[0] === '+';\n    if (addToLoc) {\n      bboxDetails = bboxDetails.slice(1);\n    }\n\n    const [bboxId, x, y, width, height] = StringUtils.splitByChar(bboxDetails, ',');\n    const bboxProperty: BBoxProperty = {\n      x: parseInt(x),\n      y: parseInt(y),\n      width: parseInt(width),\n      height: parseInt(height),\n      isInteractive: false,\n      interactionId: bboxId\n    };\n\n    Parser.checkpoint.map.addItemToMap(GameLocationAttr.boundingBoxes, bboxId, bboxProperty);\n    if (addToLoc) {\n      Parser.checkpoint.map.setItemAt(locationId, GameLocationAttr.boundingBoxes, bboxId);\n    }\n\n    return bboxProperty;\n  }\n}\n","import { createEmptyLocation } from '../location/GameMapHelper';\nimport StringUtils from '../utils/StringUtils';\nimport Parser from './Parser';\n\n/**\n * This class parses the \"locations\" paragraphs,\n * and creates all the game locations declared\n * in the paragraph.\n */\nexport default class LocationDetailsParser {\n  /**\n   * This function parses location strings\n   * and adds GameLocations to the map based on location\n   * descriptions\n   *\n   * @param locationDetails the CSV lines containing descriptions about game locations\n   */\n  public static parse(locationDetails: string[]) {\n    locationDetails.forEach(locationDetail => {\n      const [id, shortPath, name] = StringUtils.splitByChar(locationDetail, ',', 2);\n      Parser.checkpoint.map.addLocation(id, {\n        ...createEmptyLocation(),\n        id,\n        name,\n        assetKey: this.locationAssetKey(shortPath)\n      });\n      Parser.checkpoint.map.addMapAsset(\n        this.locationAssetKey(shortPath),\n        this.locationPath(shortPath)\n      );\n    });\n  }\n\n  /**\n   * Genrates an asset key for the location\n   *\n   * @param shortPath the path to the location\n   */\n  private static locationAssetKey(shortPath: string) {\n    return shortPath;\n  }\n\n  /**\n   * Genrates an asset path for the location\n   *\n   * @param shortPath the path to the location\n   */\n  private static locationPath(shortPath: string) {\n    return shortPath;\n  }\n}\n","import { GameLocation } from './GameMapTypes';\n\n/**\n * Intialises an an empty location\n */\nexport function createEmptyLocation(): GameLocation {\n  return {\n    id: '',\n    name: '',\n    assetKey: '',\n    modes: new Set([]),\n    navigation: new Set([]),\n    talkTopics: new Set([]),\n    objects: new Set([]),\n    boundingBoxes: new Set([]),\n    bgmKey: '',\n    characters: new Set([])\n  };\n}\n","import TextAssets, { toTxtPath } from '../assets/TextAssets';\nimport Parser from '../parser/Parser';\nimport SourceAcademyGame from '../SourceAcademyGame';\nimport { loadText } from '../utils/LoaderUtils';\n\n/**\n * Starts a new checkpoint with the given chapter number\n * and checkpoint number. The chapter/checkpoint file\n * will also be appended with the default checkpoint text.\n *\n * @param continueGame if true, will load the last checkpoint. Else, restart the chapter.\n * @param chapterNum chapter number\n * @param checkpointNum checkpoint number\n */\nexport async function callGameManagerOnTxtLoad(\n  continueGame: boolean,\n  chapterNum: number,\n  checkpointNum: number\n) {\n  const scene = SourceAcademyGame.getInstance().getCurrentSceneRef();\n  const gameChapters = SourceAcademyGame.getInstance().getGameChapters();\n  const filename = gameChapters[chapterNum].filenames[checkpointNum];\n  if (!filename) {\n    return;\n  }\n  await loadText(scene, filename, filename);\n  await loadText(scene, TextAssets.defaultCheckpoint.key, TextAssets.defaultCheckpoint.path);\n\n  const text = scene.cache.text.get(filename);\n  const defaultCheckpointText = scene.cache.text.get(TextAssets.defaultCheckpoint.key);\n\n  Parser.parse(defaultCheckpointText);\n  Parser.parse(text, true);\n  const gameCheckpoint = Parser.checkpoint;\n\n  scene.scene.start('GameManager', {\n    gameCheckpoint,\n    continueGame,\n    chapterNum,\n    checkpointNum\n  });\n}\n\n/**\n * Starts a new checkpoint using the next checkpoint in the\n * the chapter simulator stack\n */\nexport async function callGameManagerForSim() {\n  const scene = SourceAcademyGame.getInstance().getCurrentSceneRef();\n  const checkpointFilenames = SourceAcademyGame.getInstance().getSSChapterSimFilenames();\n  if (!checkpointFilenames.length) {\n    scene.scene.start('StorySimulatorMenu');\n    return;\n  }\n  const filename = checkpointFilenames.pop() as string;\n  await loadText(scene, filename, toTxtPath(filename));\n  await loadText(scene, TextAssets.defaultCheckpoint.key, TextAssets.defaultCheckpoint.path);\n\n  const text = scene.cache.text.get(filename);\n  const defaultCheckpointText = scene.cache.text.get(TextAssets.defaultCheckpoint.key);\n\n  Parser.parse(defaultCheckpointText);\n  Parser.parse(text, true);\n  const gameCheckpoint = Parser.checkpoint;\n\n  scene.scene.start('GameManager', {\n    gameCheckpoint,\n    chapterNum: -1,\n    checkpointNum: -1\n  });\n  return true;\n}\n","import { screenCenter } from '../../../game/commons/CommonConstants';\nimport ImageAssets from '../../assets/ImageAssets';\nimport { GameChapter } from '../../chapter/GameChapterTypes';\nimport CommonTextHover from '../../commons/CommonTextHover';\nimport SourceAcademyGame from '../../SourceAcademyGame';\nimport { createButton } from '../../utils/ButtonUtils';\nimport { createBitmapText } from '../../utils/TextUtils';\nimport { callGameManagerOnTxtLoad } from '../../utils/TxtLoaderUtils';\nimport ChapterSelect from './ChapterSelect';\nimport chapConstants, {\n  chapterActionAltStyle,\n  chapterIndexStyle,\n  chapterTitleStyle\n} from './ChapterSelectConstants';\n\n/**\n * Create a chapter selection and formats it.\n *\n * It will use the chapter preview background and set it as the\n * chapter selection background.\n *\n * Additionally, this method attach a 'Play/Continue' button and\n * 'Reset Progress' button to the chapter selection; with an already\n * set up button functionality.\n *\n * @param scene scene for the chapter selection container to attach to\n * @param title title of the chapter\n * @param imageUrl url of the preview image\n * @param index index of chapter\n * @param lastCheckpointsIdx last checkpoint to continue users' progression from\n */\nexport function createChapter(\n  scene: ChapterSelect,\n  { title, imageUrl }: GameChapter,\n  index: number,\n  lastCheckpointsIdx: number\n) {\n  const [x, y] = getCoorByChapter(index);\n  const chapterContainer = new Phaser.GameObjects.Container(scene, x, y);\n\n  // Chapter Preview\n  const chapterPreview = new Phaser.GameObjects.Image(scene, 0, 0, imageUrl).setDisplaySize(\n    chapConstants.imageRect.width,\n    chapConstants.imageRect.height\n  );\n\n  // Chapter Frame\n  const chapterFrame = new Phaser.GameObjects.Sprite(\n    scene,\n    chapConstants.frameXOffset,\n    chapConstants.frameYOffset,\n    ImageAssets.chapterSelectFrame.key\n  );\n\n  // Chapter Action Popup\n  const chapterRepeatHover = new CommonTextHover(\n    scene,\n    0,\n    0,\n    'Reset progress',\n    chapterActionAltStyle\n  );\n  const chapterContinueHover = new CommonTextHover(\n    scene,\n    0,\n    0,\n    'Play/Continue',\n    chapterActionAltStyle\n  );\n\n  // Chapter Actions\n  const chapterRepeat = createButton(scene, {\n    assetKey: ImageAssets.chapterRepeatButton.key,\n    onUp: async () => await callGameManagerOnTxtLoad(false, index, 0),\n    onHover: () => chapterRepeatHover.setVisible(true),\n    onOut: () => chapterRepeatHover.setVisible(false),\n    onPointerMove: (pointer: Phaser.Input.Pointer) => {\n      chapterRepeatHover.x = pointer.worldX - chapterContainer.x;\n      chapterRepeatHover.y = pointer.worldY - chapterContainer.y;\n    }\n  }).setPosition(chapConstants.buttonsXOffset, chapConstants.buttonsYOffset);\n\n  const chapterContinue = createButton(scene, {\n    assetKey: ImageAssets.chapterContinueButton.key,\n    onUp: async () => await callGameManagerOnTxtLoad(true, index, lastCheckpointsIdx),\n    onHover: () => chapterContinueHover.setVisible(true),\n    onOut: () => chapterContinueHover.setVisible(false),\n    onPointerMove: (pointer: Phaser.Input.Pointer) => {\n      chapterContinueHover.x = pointer.worldX - chapterContainer.x;\n      chapterContinueHover.y = pointer.worldY - chapterContainer.y;\n    }\n  }).setPosition(-chapConstants.buttonsXOffset, chapConstants.buttonsYOffset);\n\n  // Chapter Text\n  const chapterIndexText = createBitmapText(\n    scene,\n    `Chapter ${index}`,\n    chapConstants.indexTextConfig,\n    chapterIndexStyle\n  );\n\n  const chapterTitleText = createBitmapText(\n    scene,\n    title,\n    chapConstants.titleTextConfig,\n    chapterTitleStyle\n  );\n\n  const chapterDone =\n    index <= SourceAcademyGame.getInstance().getSaveManager().getLargestCompletedChapterNum() + 1;\n\n  const blackTint = new Phaser.GameObjects.Rectangle(\n    scene,\n    0,\n    0,\n    chapConstants.imageRect.width,\n    chapConstants.imageRect.height,\n    0\n  )\n    .setOrigin(0.5)\n    .setAlpha(chapterDone ? 0 : 0.8)\n    .setInteractive();\n\n  chapterContainer.add([\n    chapterPreview,\n    chapterFrame,\n    chapterRepeat,\n    chapterContinue,\n    chapterRepeatHover,\n    chapterContinueHover,\n    chapterIndexText,\n    chapterTitleText,\n    blackTint\n  ]);\n\n  return chapterContainer;\n}\n\nexport function getCoorByChapter(chapterNum: number) {\n  const x = screenCenter.x + chapConstants.imageDist * chapterNum;\n  const y = screenCenter.y;\n  return [x, y];\n}\n","import { screenCenter, screenSize } from 'src/features/game/commons/CommonConstants';\nimport { limitNumber, sleep, toS3Path } from 'src/features/game/utils/GameUtils';\n\nimport ImageAssets from '../../assets/ImageAssets';\nimport CommonBackButton from '../../commons/CommonBackButton';\nimport { addLoadingScreen } from '../../effects/LoadingScreen';\nimport GameLayerManager from '../../layer/GameLayerManager';\nimport { Layer } from '../../layer/GameLayerTypes';\nimport { FullSaveState } from '../../save/GameSaveTypes';\nimport SourceAcademyGame from '../../SourceAcademyGame';\nimport { createButton } from '../../utils/ButtonUtils';\nimport { loadImage } from '../../utils/LoaderUtils';\nimport chapConstants from './ChapterSelectConstants';\nimport { createChapter } from './ChapterSelectHelper';\n\n/**\n * The Chapter Select scene.\n * Player is able to choose which chapter to play from here.\n */\nclass ChapterSelect extends Phaser.Scene {\n  public layerManager: GameLayerManager;\n\n  private chapterContainer: Phaser.GameObjects.Container | undefined;\n  private backButtonContainer: Phaser.GameObjects.Container | undefined;\n  private loadedGameState: FullSaveState | undefined;\n  private autoScrolling: boolean;\n  private isScrollLeft: boolean;\n  private isScrollRight: boolean;\n\n  constructor() {\n    super('ChapterSelect');\n\n    this.chapterContainer = undefined;\n    this.backButtonContainer = undefined;\n    this.layerManager = new GameLayerManager();\n    this.autoScrolling = true;\n    this.isScrollLeft = false;\n    this.isScrollRight = false;\n  }\n\n  public init() {\n    SourceAcademyGame.getInstance().setCurrentSceneRef(this);\n  }\n\n  public preload() {\n    addLoadingScreen(this);\n    this.layerManager.initialise(this);\n  }\n\n  public async create() {\n    await this.preloadChapterAssets();\n    this.renderBackground();\n    this.renderChapters();\n    this.autoScroll();\n  }\n\n  public update() {\n    if (!this.chapterContainer || this.autoScrolling) return;\n\n    // Scroll the chapter select if button is currently clicked/held down\n    let newXPos = this.chapterContainer.x;\n    if (this.isScrollRight) {\n      newXPos -= chapConstants.defaultScrollSpeed;\n    } else if (this.isScrollLeft) {\n      newXPos += chapConstants.defaultScrollSpeed;\n    }\n    this.chapterContainer.x = limitNumber(\n      newXPos,\n      -chapConstants.imageDist * (this.getGameChapters().length - 1),\n      0\n    );\n  }\n\n  /**\n   * Clean up of related managers.\n   */\n  public cleanUp() {\n    this.layerManager.clearAllLayers();\n  }\n\n  /**\n   * Load the chapter previews assets to be shown.\n   */\n  private async preloadChapterAssets() {\n    await Promise.all(\n      this.getGameChapters().map(\n        async chapterDetail =>\n          await loadImage(this, chapterDetail.imageUrl, toS3Path(chapterDetail.imageUrl))\n      )\n    );\n  }\n\n  /**\n   * Render the background of this scene.\n   */\n  private renderBackground() {\n    const background = new Phaser.GameObjects.Image(\n      this,\n      screenCenter.x,\n      screenCenter.y,\n      ImageAssets.chapterSelectBackground.key\n    );\n    const blackOverlay = new Phaser.GameObjects.Rectangle(\n      this,\n      screenCenter.x,\n      screenCenter.y,\n      screenSize.x,\n      screenSize.y,\n      0\n    ).setAlpha(0.3);\n    this.layerManager.addToLayer(Layer.Background, background);\n    this.layerManager.addToLayer(Layer.Background, blackOverlay);\n  }\n\n  /**\n   * Render all the chapter selections and UI elements\n   * (the gray frame, the left and right arrow, and back button.)\n   */\n  private renderChapters() {\n    const mask = this.createMask();\n    this.backButtonContainer = new CommonBackButton(this, () => {\n      this.cleanUp();\n      this.scene.start('MainMenu');\n    });\n    this.chapterContainer = this.createChapterContainer();\n    this.chapterContainer.mask = new Phaser.Display.Masks.GeometryMask(this, mask);\n\n    const border = new Phaser.GameObjects.Image(\n      this,\n      screenCenter.x,\n      screenCenter.y,\n      ImageAssets.chapterSelectBorder.key\n    );\n\n    const leftArrow = createButton(this, {\n      assetKey: ImageAssets.chapterSelectArrow.key,\n      onDown: () => (this.isScrollLeft = true),\n      onUp: () => (this.isScrollLeft = false),\n      onOut: () => (this.isScrollLeft = false)\n    }).setPosition(screenCenter.x - chapConstants.arrowXOffset, screenCenter.y);\n\n    const rightArrow = createButton(this, {\n      assetKey: ImageAssets.chapterSelectArrow.key,\n      onDown: () => (this.isScrollRight = true),\n      onUp: () => (this.isScrollRight = false),\n      onOut: () => (this.isScrollRight = false)\n    })\n      .setPosition(screenCenter.x + chapConstants.arrowXOffset, screenCenter.y)\n      .setScale(-1, 1);\n\n    this.layerManager.addToLayer(Layer.UI, this.chapterContainer);\n    this.layerManager.addToLayer(Layer.UI, this.backButtonContainer);\n    this.layerManager.addToLayer(Layer.UI, border);\n    this.layerManager.addToLayer(Layer.UI, leftArrow);\n    this.layerManager.addToLayer(Layer.UI, rightArrow);\n  }\n\n  private createMask() {\n    const graphics = this.add.graphics();\n    const mask = graphics\n      .fillRect(\n        chapConstants.maskRect.x,\n        chapConstants.maskRect.y,\n        chapConstants.maskRect.width,\n        chapConstants.maskRect.height\n      )\n      .setPosition(screenCenter.x, screenCenter.y);\n    mask.alpha = 0;\n    return mask;\n  }\n\n  /**\n   * Create a chapter selection based on its detail; as well as\n   * attach it with the necessary information (user progress).\n   *\n   * The information will be used/mutated depending on whether\n   * the user decide tocontinue or reset the progress.\n   */\n  private createChapterContainer() {\n    const chapterContainer = new Phaser.GameObjects.Container(this, 0, 0);\n    chapterContainer.add(\n      this.getGameChapters().map((chapterDetail, chapterIndex) => {\n        // Use latest checkpoint if it exist\n        let lastCheckpoint = 0;\n        if (this.loadedGameState && this.loadedGameState.gameSaveStates[chapterIndex]) {\n          lastCheckpoint = this.loadedGameState.gameSaveStates[chapterIndex].lastCheckpointPlayed;\n        }\n        return createChapter(this, chapterDetail, chapterIndex, lastCheckpoint);\n      })\n    );\n    return chapterContainer;\n  }\n\n  /**\n   * Auto scroll to the largest (not latest!) completed chapter.\n   * The chapter will be scrolled until it is at the middle of the screen.\n   */\n  private async autoScroll() {\n    const chapterIdx = Math.min(\n      SourceAcademyGame.getInstance().getSaveManager().getLargestCompletedChapterNum() + 1,\n      this.getGameChapters().length - 1\n    );\n\n    await this.scrollToIndex(chapterIdx);\n    this.autoScrolling = false;\n  }\n\n  public getGameChapters = () => SourceAcademyGame.getInstance().getGameChapters();\n\n  /**\n   * Scroll the screen to a chapter index, so that its chapter selection\n   * is at the middle of the screen.\n   *\n   * @param id index of chapter\n   */\n  private async scrollToIndex(id: number) {\n    if (!this.chapterContainer) return;\n    const xTarget = -id * chapConstants.imageDist;\n\n    const scrollDuration = 800;\n    this.tweens.add({\n      targets: this.chapterContainer,\n      x: xTarget,\n      ease: 'Power2',\n      duration: scrollDuration\n    });\n    await sleep(scrollDuration);\n  }\n}\n\nexport default ChapterSelect;\n","import FontAssets from '../../assets/FontAssets';\nimport { screenCenter } from '../../commons/CommonConstants';\nimport { BitmapFontStyle } from '../../commons/CommonTypes';\nimport { HexColor } from '../../utils/StyleUtils';\n\nexport const transitionTextStyle: BitmapFontStyle = {\n  key: FontAssets.alienCowsFont.key,\n  size: 80,\n  fill: HexColor.lightBlue,\n  align: Phaser.GameObjects.BitmapText.ALIGN_CENTER\n};\n\nconst tweenDuration = 1500;\n\nconst checkpointConstants = {\n  chapterText: 'Chapter completed.',\n  checkpointText: 'Checkpoint reached.',\n  transitionTextConfig: { x: screenCenter.x, y: screenCenter.y, oriX: 0.5, oriY: 0.5 },\n  tweenDuration: tweenDuration,\n  entryTween: {\n    alpha: 1,\n    duration: tweenDuration,\n    ease: 'Power2'\n  },\n  exitTween: {\n    alpha: 0,\n    duration: tweenDuration,\n    ease: 'Power2'\n  }\n};\n\nexport default checkpointConstants;\n","import { GameChapter } from '../../chapter/GameChapterTypes';\nimport SourceAcademyGame, { GameType } from '../../SourceAcademyGame';\nimport { sleep } from '../../utils/GameUtils';\nimport { createBitmapText } from '../../utils/TextUtils';\nimport { callGameManagerForSim, callGameManagerOnTxtLoad } from '../../utils/TxtLoaderUtils';\nimport checkpointConstants, { transitionTextStyle } from './CheckpointTransitionConstants';\n\n/**\n * This scene is triggered in between checkpoints/chapters.\n * From user's perspective, it is when the in-between scene that is triggered\n * after they completed a checkpoint.\n *\n * Internally, we use this scene to fully load the next checkpoint,\n * before finally loading the next scene.\n *\n * In story simulator, the next checkpoint is loaded based on the\n * chapterSimStack using the callGameManagerForSim function.\n *\n * We cannot load these informations at the start of GameManager as\n * it can alter the sequencing of preload() and create() in the GameManager.\n */\nclass CheckpointTransition extends Phaser.Scene {\n  constructor() {\n    super('CheckpointTransition');\n  }\n\n  public preload() {\n    SourceAcademyGame.getInstance().setCurrentSceneRef(this);\n  }\n\n  public async create() {\n    if (SourceAcademyGame.getInstance().isGameType(GameType.Simulator)) {\n      await this.showTransitionText(checkpointConstants.checkpointText);\n      await callGameManagerForSim();\n      return;\n    }\n\n    // Fetch all the necessary informations: save state and chapter details.\n    const loadedGameState = SourceAcademyGame.getInstance().getSaveManager().getFullSaveState();\n    const chapterDetails = SourceAcademyGame.getInstance().getGameChapters();\n\n    const [currChapter, currCheckpoint] = loadedGameState.userSaveState.recentlyPlayedCheckpoint;\n\n    if (this.isLastCheckpoint(chapterDetails, currChapter, currCheckpoint)) {\n      // If it is the last checkpoint, we mark that chapter is completed\n      await SourceAcademyGame.getInstance().getSaveManager().saveChapterComplete(currChapter);\n      if (this.isLastChapter(chapterDetails, currChapter)) {\n        // No more chapter, transition to main menu instead\n        this.scene.start('MainMenu');\n        return;\n      } else {\n        // Transition to the next chapter, first checkpoint\n        await this.showTransitionText(checkpointConstants.chapterText);\n        await callGameManagerOnTxtLoad(true, currChapter + 1, 0);\n        return;\n      }\n    } else {\n      // Transition to the next checkpoint\n      await this.showTransitionText(checkpointConstants.checkpointText);\n      await callGameManagerOnTxtLoad(false, currChapter, currCheckpoint + 1);\n      return;\n    }\n  }\n\n  /**\n   * In-game text to be shown during the checkpoint transition.\n   *\n   * @param text text to show\n   */\n  private async showTransitionText(text: string) {\n    const transitionText = createBitmapText(\n      this,\n      text,\n      checkpointConstants.transitionTextConfig,\n      transitionTextStyle\n    ).setAlpha(0);\n\n    this.add.existing(transitionText);\n\n    // Fade in\n    this.tweens.add({\n      targets: transitionText,\n      ...checkpointConstants.entryTween\n    });\n\n    await sleep(checkpointConstants.tweenDuration * 2);\n\n    // Fade out\n    this.tweens.add({\n      targets: transitionText,\n      ...checkpointConstants.exitTween\n    });\n\n    await sleep(checkpointConstants.tweenDuration);\n  }\n\n  /**\n   * Checks whether the given checkpoint is the last checkpoint\n   * of the chapter.\n   *\n   * @param chapterDetails the entire story collection of chapters' information\n   * @param currChapter current chapter\n   * @param currCheckpoint current checkpoint\n   */\n  private isLastCheckpoint(\n    chapterDetails: GameChapter[],\n    currChapter: number,\n    currCheckpoint: number\n  ) {\n    return currCheckpoint >= chapterDetails[currChapter].filenames.length - 1;\n  }\n\n  /**\n   * Checks whether the given chapter is the last chapter of the story.\n   *\n   * @param chapterDetails the entire story collection of chapters' information\n   * @param currChapter current chapter\n   */\n  public isLastChapter(chapterDetails: GameChapter[], currChapter: number) {\n    return currChapter >= chapterDetails.length - 1;\n  }\n}\n\nexport default CheckpointTransition;\n","import FontAssets from '../../assets/FontAssets';\nimport { screenCenter, screenSize } from '../../commons/CommonConstants';\nimport { BitmapFontStyle } from '../../commons/CommonTypes';\nimport { HexColor } from '../../utils/StyleUtils';\n\nexport const mainMenuStyle: BitmapFontStyle = {\n  key: FontAssets.zektonFont.key,\n  size: 30,\n  fill: HexColor.lightBlue,\n  align: Phaser.GameObjects.BitmapText.ALIGN_RIGHT\n};\n\nconst bannerShow = 200;\nconst bannerHide = 300;\n\nconst mainMenuConstants = {\n  optionsText: {\n    chapterSelect: 'Play Chapter',\n    studentRoom: 'Go to My Room',\n    awards: 'Awards Hall',\n    settings: 'Settings',\n    bindings: 'Key Bindings'\n  },\n  buttonYSpace: screenSize.y * 0.5,\n  optXOffset: 80,\n  textXOffset: 600,\n  bannerHide: bannerHide,\n  bannerShow: bannerShow,\n  onFocusOptTween: {\n    x: screenCenter.x + bannerShow,\n    duration: 200,\n    ease: 'Power2'\n  },\n  outFocusOptTween: {\n    x: screenCenter.x + bannerHide,\n    duration: 200,\n    ease: 'Power2'\n  }\n};\n\nexport default mainMenuConstants;\n","import ImageAssets from '../../assets/ImageAssets';\nimport { screenCenter, screenSize } from '../../commons/CommonConstants';\nimport GameLayerManager from '../../layer/GameLayerManager';\nimport { Layer } from '../../layer/GameLayerTypes';\nimport SourceAcademyGame from '../../SourceAcademyGame';\nimport { createButton } from '../../utils/ButtonUtils';\nimport { calcTableFormatPos, Direction } from '../../utils/StyleUtils';\nimport mainMenuConstants, { mainMenuStyle } from './MainMenuConstants';\n\n/**\n * Main Menu\n *\n * User can navigate to other scenes from here.\n */\nclass MainMenu extends Phaser.Scene {\n  private layerManager: GameLayerManager;\n\n  constructor() {\n    super('MainMenu');\n\n    this.layerManager = new GameLayerManager();\n  }\n\n  public preload() {\n    SourceAcademyGame.getInstance().setCurrentSceneRef(this);\n    this.layerManager.initialise(this);\n  }\n\n  public async create() {\n    this.renderBackground();\n    this.renderOptionButtons();\n  }\n\n  /**\n   * Render background image for the main menu.\n   */\n  private renderBackground() {\n    const backgroundImg = new Phaser.GameObjects.Image(\n      this,\n      screenCenter.x,\n      screenCenter.y,\n      ImageAssets.mainMenuBackground.key\n    );\n    backgroundImg.setDisplaySize(screenSize.x, screenSize.y);\n\n    this.layerManager.addToLayer(Layer.Background, backgroundImg);\n  }\n\n  /**\n   * Render all the buttons for the main menu.\n   * Selection of buttons is detailed at getOptionButtons().\n   */\n  private renderOptionButtons() {\n    const optionsContainer = new Phaser.GameObjects.Container(this, 0, 0);\n    const buttons = this.getOptionButtons();\n\n    const buttonPositions = calcTableFormatPos({\n      direction: Direction.Column,\n      numOfItems: buttons.length,\n      maxYSpace: mainMenuConstants.buttonYSpace\n    });\n\n    optionsContainer.add(\n      buttons.map((button, index) =>\n        this.createOptionButton(\n          button.text,\n          buttonPositions[index][0] + mainMenuConstants.bannerHide,\n          buttonPositions[index][1],\n          button.callback\n        )\n      )\n    );\n\n    this.layerManager.addToLayer(Layer.UI, optionsContainer);\n  }\n\n  /**\n   * Format a main menu button with the given text; attach a callback\n   * and position it at the given xPos and yPos.\n   *\n   * @param text text to be displayed on the button\n   * @param xPos x position of the button\n   * @param yPos y position of the button\n   * @param callback callback to be attached to the button\n   */\n  private createOptionButton(text: string, xPos: number, yPos: number, callback: any) {\n    // Animation to trigger on Hover and off Hover\n    const tweenOnHover = (target: Phaser.GameObjects.Container) => {\n      this.tweens.add({\n        targets: target,\n        ...mainMenuConstants.onFocusOptTween\n      });\n    };\n    const tweenOffHover = (target: Phaser.GameObjects.Container) => {\n      this.tweens.add({\n        targets: target,\n        ...mainMenuConstants.outFocusOptTween\n      });\n    };\n\n    // Create button with main menu style\n    const optButton: Phaser.GameObjects.Container = createButton(this, {\n      assetKey: ImageAssets.mainMenuOptBanner.key,\n      message: text,\n      textConfig: { x: mainMenuConstants.textXOffset, y: 0, oriX: 1.0, oriY: 0.1 },\n      bitMapTextStyle: mainMenuStyle,\n      onUp: callback,\n      onHover: () => tweenOnHover(optButton),\n      onOut: () => tweenOffHover(optButton),\n      onHoverEffect: false\n    }).setPosition(xPos, yPos);\n\n    return optButton;\n  }\n\n  /**\n   * Return all the buttons available at main menu,\n   * as well as their callbacks.\n   */\n  private getOptionButtons() {\n    return [\n      {\n        text: mainMenuConstants.optionsText.chapterSelect,\n        callback: () => {\n          this.layerManager.clearAllLayers();\n          this.scene.start('ChapterSelect');\n        }\n      },\n      {\n        text: mainMenuConstants.optionsText.awards,\n        callback: () => {\n          this.layerManager.clearAllLayers();\n          this.scene.start('AwardsHall');\n        }\n      },\n      {\n        text: mainMenuConstants.optionsText.studentRoom,\n        callback: () => {\n          this.layerManager.clearAllLayers();\n          this.scene.start('RoomPreview');\n        }\n      },\n      {\n        text: mainMenuConstants.optionsText.settings,\n        callback: () => {\n          this.layerManager.clearAllLayers();\n          this.scene.start('Settings');\n        }\n      },\n      {\n        text: mainMenuConstants.optionsText.bindings,\n        callback: () => {\n          this.layerManager.clearAllLayers();\n          this.scene.start('Bindings');\n        }\n      }\n    ];\n  }\n}\n\nexport default MainMenu;\n","import FontAssets from '../../assets/FontAssets';\nimport { BitmapFontStyle } from '../../commons/CommonTypes';\nimport { HexColor } from '../../utils/StyleUtils';\n\nexport const roomDefaultCode = `\nimport { prepend_remote_url, get_screen_width, get_screen_height, load_image, create_image, create_text, create_rect, add, set_display_size, set_alpha, set_origin } from 'game';\n\nfunction preload() {\n    load_image(\"galaxy\", prepend_remote_url(\"/locations/galaxy/normal.png\"));\n}\n\nfunction create() {\n    const width = get_screen_width();\n    const height = get_screen_height();\n    const centre_x = width / 2;\n    const centre_y = height / 2;\n\n    const image = create_image(centre_x, centre_y, \"galaxy\");\n    const image_resized = set_display_size(image, width, height);\n\n    const black_tint = create_rect(centre_x, centre_y, width, height, 0x000011);\n    const black_tint_alpha = set_alpha(black_tint, 0.5);\n\n    const text = create_text(centre_x, centre_y, \"Unable to fetch mission!\");\n    const text_repos = set_origin(text, 0.5, 0.5);\n\n    add(image_resized);\n    add(black_tint_alpha);\n    add(text_repos);\n}\n\nfunction update() {}\n`;\n\nexport const verifiedStyle: BitmapFontStyle = {\n  key: FontAssets.pixelFont.key,\n  size: 25,\n  fill: HexColor.paleYellow,\n  align: Phaser.GameObjects.BitmapText.ALIGN_CENTER\n};\n\nexport const roomConstants = {\n  verifiedText: 'VERIFIED',\n  tagWidth: 128,\n  tagHeight: 50,\n  startTextXPos: 200,\n  hoverTagTextConfig: { x: 0, y: 0, oriX: 0.0, oriY: 0.6 }\n};\n","import { Assessment, IProgrammingQuestion } from 'src/commons/assessment/AssessmentTypes';\nimport { getAssessment } from 'src/commons/sagas/RequestsSaga';\n\nimport ImageAssets from '../../assets/ImageAssets';\nimport GameAwardsManager from '../../awards/GameAwardsManager';\nimport GameEscapeManager from '../../escape/GameEscapeManager';\nimport GameModeSequence from '../../mode/sequence/GameModeSequence';\nimport { GamePhaseType } from '../../phase/GamePhaseTypes';\nimport SourceAcademyGame from '../../SourceAcademyGame';\nimport { HexColor } from '../../utils/StyleUtils';\nimport { createBitmapText } from '../../utils/TextUtils';\nimport RoomPreview from './RoomPreview';\nimport { roomConstants, roomDefaultCode, verifiedStyle } from './RoomPreviewConstants';\n\n/**\n * Async function that obtains students code for Create-My-Room mission\n *\n * @param {AccountInfo} accInfo - students' account information\n * @returns {Promise<string>} - promise of students code\n */\nexport async function getRoomPreviewCode(): Promise<string> {\n  const roomMissionId = getRoomMissionId();\n  const mission = await getAssessment(\n    roomMissionId,\n    SourceAcademyGame.getInstance().getAccountInfo()\n  );\n  const studentCode = getStudentRoomCode(mission);\n  return studentCode;\n}\n\n/**\n * Function that generates the correct mission id of students\n *\n * @param {AccountInfo} accInfo - students' account information\n */\nfunction getRoomMissionId() {\n  // TODO: Change to non-hardcode\n  return 405;\n}\n\n/**\n * Fetches the student code based on the mission.\n * If student has not attempted the mission; will return\n * the answer template instead.\n *\n * If the mission is invalid (e.g. invalid ID, typo), the\n * default code for the room will be returned instead.\n *\n * @param mission\n */\nfunction getStudentRoomCode(mission: Assessment | null) {\n  if (mission) {\n    const progQn = mission.questions[0] as IProgrammingQuestion;\n    const answer = progQn.answer;\n    return answer ? (answer as string) : progQn.solutionTemplate;\n  }\n  return roomDefaultCode;\n}\n\n/**\n * CMR Game Phases for the phase manager.\n *\n * @param escapeMenu escape menu tied to CMR\n * @param awardMenu award menu tied to CMR\n */\nexport const createCMRGamePhases = (\n  escapeMenu: GameEscapeManager,\n  awardMenu: GameAwardsManager\n) => {\n  return new Map([\n    [GamePhaseType.None, new GameModeSequence()],\n    [GamePhaseType.EscapeMenu, escapeMenu],\n    [GamePhaseType.AwardMenu, awardMenu]\n  ]);\n};\n\n/**\n * Create a verification container and its mask.\n *\n * @param scene room preview scene\n * @returns {[Phaser.GameObjects.Container, Phaser.GameObjects.Graphics]} verification container, and its mask\n */\nexport const createVerifiedHoverContainer = (scene: RoomPreview) => {\n  const hoverContainer = new Phaser.GameObjects.Container(scene, 0, 0);\n  const hoverTextBg = new Phaser.GameObjects.Rectangle(\n    scene,\n    0,\n    0,\n    roomConstants.tagWidth,\n    roomConstants.tagHeight,\n    HexColor.darkBlue\n  )\n    .setOrigin(0.0, 0.5)\n    .setAlpha(0.8);\n  const hoverTextFrame = new Phaser.GameObjects.Sprite(\n    scene,\n    0,\n    0,\n    ImageAssets.verifiedFrame.key\n  ).setOrigin(0.0, 0.5);\n\n  const hoverMask = new Phaser.GameObjects.Graphics(scene)\n    .fillRect(\n      hoverTextBg.x - hoverTextBg.height * hoverTextBg.originX * 0.5,\n      hoverTextBg.y - hoverTextBg.width * hoverTextBg.originY * 0.5,\n      hoverTextBg.width,\n      hoverTextBg.height\n    )\n    .setAlpha(0);\n\n  const hoverText = createBitmapText(\n    scene,\n    roomConstants.verifiedText,\n    roomConstants.hoverTagTextConfig,\n    verifiedStyle\n  )\n    .setPosition(roomConstants.startTextXPos, 0)\n    .setMask(hoverMask.createGeometryMask());\n\n  scene.tweens.add({\n    targets: hoverText,\n    x: -roomConstants.startTextXPos,\n    duration: 5000,\n    ease: 'Power0',\n    loop: -1,\n    onLoop: () => (hoverText.x = roomConstants.startTextXPos + 50)\n  });\n\n  hoverContainer.add([hoverTextBg, hoverText, hoverTextFrame]);\n  hoverContainer.setVisible(false);\n  return [hoverContainer, hoverMask];\n};\n","import { Context, runInContext } from 'js-slang';\nimport { createContext } from 'src/commons/utils/JsSlangHelper';\n\nimport ImageAssets from '../../assets/ImageAssets';\nimport { getAwardProp } from '../../awards/GameAwardsHelper';\nimport GameAwardsManager from '../../awards/GameAwardsManager';\nimport { Constants, screenSize } from '../../commons/CommonConstants';\nimport { ItemId } from '../../commons/CommonTypes';\nimport { addLoadingScreen } from '../../effects/LoadingScreen';\nimport GameEscapeManager from '../../escape/GameEscapeManager';\nimport GameInputManager from '../../input/GameInputManager';\nimport GameLayerManager from '../../layer/GameLayerManager';\nimport { Layer } from '../../layer/GameLayerTypes';\nimport GamePhaseManager from '../../phase/GamePhaseManager';\nimport { GamePhaseType } from '../../phase/GamePhaseTypes';\nimport SourceAcademyGame from '../../SourceAcademyGame';\nimport { UserStateTypes } from '../../state/GameStateTypes';\nimport GameUserStateManager from '../../state/GameUserStateManager';\nimport { mandatory } from '../../utils/GameUtils';\nimport { loadImage, loadSound } from '../../utils/LoaderUtils';\nimport { roomDefaultCode } from './RoomPreviewConstants';\nimport { createCMRGamePhases, createVerifiedHoverContainer } from './RoomPreviewHelper';\n\n/**\n * This scene uses the students code as part of its code.\n *\n * Additionally, the scene shares some common functionality as\n * GameManager, in that it incorporates escape menu and collectible\n * menu.\n */\nexport default class RoomPreview extends Phaser.Scene {\n  public layerManager: GameLayerManager;\n  public inputManager: GameInputManager;\n\n  private phaseManager: GamePhaseManager;\n  private userStateManager: GameUserStateManager;\n  private escapeManager: GameEscapeManager;\n  private awardManager: GameAwardsManager;\n  private studentCode: string;\n  private preloadImageMap: Map<string, string>;\n  private preloadSoundMap: Map<string, string>;\n\n  private verifCont: Phaser.GameObjects.Container | undefined;\n  private verifMask: Phaser.GameObjects.Graphics | undefined;\n\n  private context?: Context;\n\n  constructor() {\n    super('RoomPreview');\n    this.preloadImageMap = new Map<string, string>();\n    this.preloadSoundMap = new Map<string, string>();\n    this.layerManager = new GameLayerManager();\n    this.phaseManager = new GamePhaseManager();\n    this.inputManager = new GameInputManager();\n    this.escapeManager = new GameEscapeManager();\n    this.userStateManager = new GameUserStateManager();\n    this.awardManager = new GameAwardsManager();\n    this.studentCode = roomDefaultCode;\n  }\n\n  public init() {\n    SourceAcademyGame.getInstance().setCurrentSceneRef(this);\n\n    this.studentCode = SourceAcademyGame.getInstance().getRoomCode();\n\n    this.userStateManager = new GameUserStateManager();\n    this.layerManager = new GameLayerManager();\n    this.phaseManager = new GamePhaseManager();\n    this.inputManager = new GameInputManager();\n    this.escapeManager = new GameEscapeManager();\n    this.awardManager = new GameAwardsManager();\n    this.createContext();\n  }\n\n  public preload() {\n    addLoadingScreen(this);\n    this.userStateManager.initialise();\n    this.layerManager.initialise(this);\n    this.inputManager.initialise(this);\n    this.awardManager.initialise(this, this.userStateManager, this.phaseManager);\n    this.phaseManager.initialise(\n      createCMRGamePhases(this.escapeManager, this.awardManager),\n      this.inputManager\n    );\n    this.escapeManager.initialise(this, this.phaseManager);\n    this.bindKeyboardTriggers();\n\n    // Initialise one verified tag to be used throughout the CMR\n    const [verifCont, verifMask] = createVerifiedHoverContainer(this);\n    this.verifCont = verifCont as Phaser.GameObjects.Container;\n    this.verifMask = verifMask as Phaser.GameObjects.Graphics;\n  }\n\n  public async create() {\n    await this.userStateManager.loadAchievements();\n\n    // Run student code once to update the context\n    await this.eval(this.studentCode);\n\n    /**\n     * We don't use .eval('preload();') at preload() as\n     * .eval() is not awaited by the preload() method i.e. it does not\n     * wait for student's preload function to finish.\n     *\n     * Instead, the students' 'preload()' function simply populate a map\n     * of assets key and path to be loaded.\n     *\n     * We await the students .eval('preload();') at create()\n     * to ensure that the .eval('preload();') is fully resolved.\n     */\n    await this.eval(`preload();`);\n\n    // Preload all necessary assets\n    await Promise.all(\n      Array.from(this.preloadImageMap).map(async ([key, path]) => {\n        await loadImage(this, key, path);\n      })\n    );\n    await Promise.all(\n      Array.from(this.preloadSoundMap).map(async ([key, path]) => {\n        await loadSound(this, key, path);\n      })\n    );\n\n    // Execute create\n    await this.eval(`create();`);\n    SourceAcademyGame.getInstance().getSoundManager().playBgMusic(Constants.nullInteractionId);\n\n    // Add verified tag\n    this.layerManager.addToLayer(Layer.UI, this.getVerifCont());\n  }\n\n  public update() {\n    this.eval(`update();`);\n  }\n\n  public createContext() {\n    this.context = createContext(4, [], {}, 'gpu', {\n      scene: this,\n      phaser: Phaser,\n      preloadImageMap: this.preloadImageMap,\n      preloadSoundMap: this.preloadSoundMap,\n      layerManager: this.layerManager,\n      layerTypes: Layer,\n      remotePath: Constants.assetsFolder,\n      screenSize: screenSize,\n      createAward: (x: number, y: number, key: ItemId) => this.createAward(x, y, key)\n    });\n    this.context.externalContext = 'playground';\n  }\n\n  private async eval(code: string) {\n    // runInContext also automatically updates the context\n    await runInContext(code, this.context!);\n  }\n\n  /**\n   * Bind the escape menu and awards menu to keyboard keys.\n   */\n  private bindKeyboardTriggers() {\n    // Bind escape menu\n    this.inputManager.registerKeyboardListener(\n      Phaser.Input.Keyboard.KeyCodes.ESC,\n      'up',\n      async () => {\n        if (this.phaseManager.isCurrentPhase(GamePhaseType.EscapeMenu)) {\n          await this.phaseManager.popPhase();\n        } else {\n          await this.phaseManager.pushPhase(GamePhaseType.EscapeMenu);\n        }\n      }\n    );\n    // Bind collectible menu\n    this.inputManager.registerKeyboardListener(\n      Phaser.Input.Keyboard.KeyCodes.TAB,\n      'up',\n      async () => {\n        if (this.phaseManager.isCurrentPhase(GamePhaseType.AwardMenu)) {\n          await this.phaseManager.popPhase();\n        } else {\n          await this.phaseManager.pushPhase(GamePhaseType.AwardMenu);\n        }\n      }\n    );\n  }\n\n  /**\n   * Clean up on related managers\n   */\n  public cleanUp() {\n    this.inputManager.clearListeners();\n    this.layerManager.clearAllLayers();\n  }\n\n  /**\n   * Create an award based on the given award key.\n   * The award key is associated with an awardProperty,\n   * which in turn will be used as the source of information for\n   * the award.\n   *\n   * If the award is a valid key and the student already has\n   * the award, the resulting object will have a verification\n   * tag that pops up when student hovers over it.\n   *\n   * Else, we return a default image of a cookie; without\n   * the verification tag.\n   *\n   * @param x x position of the award\n   * @param y y position of the award\n   * @param awardKey key associated with the award\n   */\n  private createAward(x: number, y: number, awardKey: ItemId) {\n    const achievements = this.userStateManager.getList(UserStateTypes.achievements);\n    const collectibles = this.userStateManager.getList(UserStateTypes.collectibles);\n    if (achievements.includes(awardKey) || collectibles.includes(awardKey)) {\n      const awardProp = getAwardProp(awardKey);\n      const award = new Phaser.GameObjects.Sprite(this, x, y, awardProp.assetKey);\n      return this.attachVerificationTag(award);\n    }\n    return new Phaser.GameObjects.Sprite(this, x, y, ImageAssets.cookies.key);\n  }\n\n  /**\n   * Attach a verification tag to the sprite.\n   * When user hovers on the sprite, a verification will appear\n   * on the image.\n   *\n   * Used to verify autheticity of the award.\n   *\n   * @param sprite sprite to attach the verification tag to\n   */\n  private attachVerificationTag(sprite: Phaser.GameObjects.Sprite) {\n    const verifCont = this.getVerifCont();\n    const verifMask = this.getVerifMask();\n\n    sprite.setInteractive({ pixelPerfect: true, useHandCursor: true });\n    sprite.addListener(Phaser.Input.Events.GAMEOBJECT_POINTER_OVER, () =>\n      verifCont.setVisible(true)\n    );\n    sprite.addListener(Phaser.Input.Events.GAMEOBJECT_POINTER_OUT, () =>\n      verifCont.setVisible(false)\n    );\n    sprite.addListener(\n      Phaser.Input.Events.GAMEOBJECT_POINTER_MOVE,\n      (pointer: Phaser.Input.Pointer) => {\n        verifCont.x = pointer.x + 10;\n        verifCont.y = pointer.y - 10;\n        verifMask.x = pointer.x + 10;\n        verifMask.y = pointer.y - 10;\n      }\n    );\n    return sprite;\n  }\n\n  private getVerifCont = () => mandatory(this.verifCont);\n  private getVerifMask = () => mandatory(this.verifMask);\n}\n","import ImageAssets from '../../assets/ImageAssets';\nimport CommonBackButton from '../../commons/CommonBackButton';\nimport { screenCenter, screenSize } from '../../commons/CommonConstants';\nimport CommonRadioButton from '../../commons/CommonRadioButton';\nimport GameLayerManager from '../../layer/GameLayerManager';\nimport { Layer } from '../../layer/GameLayerTypes';\nimport SourceAcademyGame from '../../SourceAcademyGame';\nimport { createButton } from '../../utils/ButtonUtils';\nimport { calcTableFormatPos, Direction } from '../../utils/StyleUtils';\nimport { createBitmapText } from '../../utils/TextUtils';\nimport settingsConstants, {\n  applySettingsTextStyle,\n  optionHeaderTextStyle,\n  optionTextStyle\n} from './SettingsConstants';\n\n/**\n * Settings scene, in which students can control\n * different settings of the game.\n */\nclass Settings extends Phaser.Scene {\n  private bgmVolumeRadioButtons: CommonRadioButton | undefined;\n  private sfxVolumeRadioButtons: CommonRadioButton | undefined;\n  private layerManager: GameLayerManager;\n\n  constructor() {\n    super('Settings');\n    this.layerManager = new GameLayerManager();\n  }\n  public preload() {\n    SourceAcademyGame.getInstance().setCurrentSceneRef(this);\n    this.layerManager.initialise(this);\n  }\n\n  public async create() {\n    this.renderBackground();\n    this.renderOptions();\n  }\n\n  /**\n   * Set up the background and add it to the background layer.\n   */\n  private renderBackground() {\n    const background = new Phaser.GameObjects.Image(\n      this,\n      screenCenter.x,\n      screenCenter.y,\n      ImageAssets.settingBackground.key\n    );\n\n    const settingBgImg = new Phaser.GameObjects.Image(\n      this,\n      screenCenter.x,\n      screenCenter.y,\n      ImageAssets.settingBanner.key\n    );\n    this.layerManager.addToLayer(Layer.Background, background);\n    this.layerManager.addToLayer(Layer.Background, settingBgImg);\n  }\n\n  /**\n   * Add various settings that user can use.\n   * Sets up the header and the radio buttons, and add it to the screen.\n   */\n  private renderOptions() {\n    // Create Headers\n    const optCont = new Phaser.GameObjects.Container(this, 0, 0);\n    const optHeader = this.getSettingsHeader();\n    const optHeaderPos = calcTableFormatPos({\n      direction: Direction.Column,\n      numOfItems: optHeader.length,\n      maxYSpace: settingsConstants.optYSpace\n    });\n    optCont.add(\n      optHeader.map((header, index) => this.createOptionHeader(header, optHeaderPos[index][1]))\n    );\n\n    // Get user default choice\n    const { bgmVolume, sfxVolume } = this.getSaveManager().getSettings();\n    const sfxVolIdx = settingsConstants.volContainerOpts.findIndex(\n      value => parseFloat(value) === sfxVolume\n    );\n    const bgmVolIdx = settingsConstants.volContainerOpts.findIndex(\n      value => parseFloat(value) === bgmVolume\n    );\n\n    // Create SFX Radio Buttons\n    this.sfxVolumeRadioButtons = this.createOptRadioOptions(sfxVolIdx, optHeaderPos[0][1]);\n    // Create BGM Radio Buttons\n    this.bgmVolumeRadioButtons = this.createOptRadioOptions(bgmVolIdx, optHeaderPos[1][1]);\n\n    // Create apply settings button\n    const applySettingsButton = createButton(this, {\n      assetKey: ImageAssets.mediumButton.key,\n      message: 'Apply Settings',\n      textConfig: { x: 0, y: 0, oriX: 0.33, oriY: 0.85 },\n      bitMapTextStyle: applySettingsTextStyle,\n      onUp: () => this.applySettings()\n    }).setPosition(screenCenter.x, screenSize.y * 0.925);\n\n    // Create back button to main menu\n    const backButton = new CommonBackButton(this, () => {\n      this.layerManager.clearAllLayers();\n      this.scene.start('MainMenu');\n    });\n\n    this.layerManager.addToLayer(Layer.UI, optCont);\n    this.layerManager.addToLayer(Layer.UI, this.sfxVolumeRadioButtons);\n    this.layerManager.addToLayer(Layer.UI, this.bgmVolumeRadioButtons);\n    this.layerManager.addToLayer(Layer.UI, applySettingsButton);\n    this.layerManager.addToLayer(Layer.UI, backButton);\n  }\n\n  /**\n   * Options header to display.\n   */\n  private getSettingsHeader() {\n    return ['SFX', 'BGM'];\n  }\n\n  /**\n   * Formats the header text as well as the blue arrow and\n   * underline, and place it based on the given yPos.\n   *\n   * @param header text for the header\n   * @param yPos y position of the option\n   */\n  private createOptionHeader(header: string, yPos: number) {\n    const optHeaderCont = new Phaser.GameObjects.Container(this, 0, yPos);\n    const headerDiv = new Phaser.GameObjects.Image(\n      this,\n      screenCenter.x,\n      0,\n      ImageAssets.settingOption.key\n    );\n    const headerText = createBitmapText(\n      this,\n      header,\n      settingsConstants.optHeaderTextConfig,\n      optionHeaderTextStyle\n    );\n    optHeaderCont.add([headerDiv, headerText]);\n    return optHeaderCont;\n  }\n\n  /**\n   * Create a radio buttons, formatted with settings' style.\n   *\n   * @param defaultChoiceIdx default choice of the radio button\n   * @param yPos y position of the radio button\n   */\n  private createOptRadioOptions(defaultChoiceIdx: number, yPos: number) {\n    return new CommonRadioButton(\n      this,\n      {\n        choices: settingsConstants.volContainerOpts,\n        defaultChoiceIdx: defaultChoiceIdx,\n        maxXSpace: settingsConstants.optXSpace,\n        choiceTextConfig: { x: 0, y: -50, oriX: 0.5, oriY: 0.25 },\n        bitmapTextStyle: optionTextStyle\n      },\n      settingsConstants.optXPos,\n      -screenCenter.y + yPos\n    );\n  }\n\n  /**\n   * Fetch the current radio buttons value, save it, then apply it.\n   *\n   * This method is responsible in contacting the managers that\n   * need to be aware of the update.\n   */\n  public async applySettings() {\n    const sfxVol = this.sfxVolumeRadioButtons\n      ? parseFloat(this.sfxVolumeRadioButtons.getChosenChoice())\n      : 1;\n    const bgmVol = this.bgmVolumeRadioButtons\n      ? parseFloat(this.bgmVolumeRadioButtons.getChosenChoice())\n      : 1;\n\n    // Save settings\n    await this.getSaveManager().saveSettings({ bgmVolume: bgmVol, sfxVolume: sfxVol });\n\n    // Apply settings\n    SourceAcademyGame.getInstance()\n      .getSoundManager()\n      .applyUserSettings(this.getSaveManager().getSettings());\n  }\n\n  public getSaveManager = () => SourceAcademyGame.getInstance().getSaveManager();\n}\n\nexport default Settings;\n","import { AssetMap, SoundAsset } from '../assets/AssetsTypes';\nimport { Constants } from '../commons/CommonConstants';\nimport { AssetKey, AssetPath } from '../commons/CommonTypes';\nimport { SettingsJson } from '../save/GameSaveTypes';\nimport SourceAcademyGame from '../SourceAcademyGame';\nimport { mandatory, toS3Path } from '../utils/GameUtils';\nimport { bgMusicFadeDuration, musicFadeOutTween } from './GameSoundTypes';\n\n/**\n * This class manages the sounds for the entire game\n * It proxies the game's sound manager\n */\nclass GameSoundManager {\n  private soundAssetMap: Map<AssetKey, SoundAsset>;\n  private bgmVol: number;\n  private sfxVol: number;\n\n  private currBgMusicKey: AssetKey;\n  private currBgMusic: Phaser.Sound.WebAudioSound | undefined;\n\n  constructor() {\n    (this.getBaseSoundManager() as Phaser.Sound.HTML5AudioSoundManager).unlock();\n    this.soundAssetMap = new Map<AssetKey, SoundAsset>();\n    this.bgmVol = 1;\n    this.sfxVol = 1;\n    this.currBgMusicKey = Constants.nullInteractionId;\n  }\n\n  /**\n   * Apply user settings to the sound manager;\n   * namely the sfxVolume and bgmVolume.\n   *\n   * In the case the volumes are not defined, it will\n   * be defaulted to 1 (max volume).\n   *\n   * @param settings user settings\n   */\n  public applyUserSettings(settings: SettingsJson) {\n    this.bgmVol = settings.bgmVolume !== undefined ? settings.bgmVolume : 1;\n    this.sfxVol = settings.sfxVolume !== undefined ? settings.sfxVolume : 1;\n\n    // Modify currently playing BGM, if any\n    if (this.currBgMusic && this.currBgMusic.isPlaying) {\n      const soundAsset = mandatory(this.getSoundAsset(this.currBgMusicKey));\n      const bgmVol = soundAsset.config.volume !== undefined ? soundAsset.config.volume : 1;\n      this.currBgMusic.setVolume(bgmVol * this.bgmVol);\n    }\n  }\n\n  /**\n   * Store the sound asset within the sound manager.\n   * Sound asset is stored as it is used when playing the\n   * sound (to apply the sound config).\n   *\n   * @param soundAsset sound asset\n   */\n  private addSoundAsset(soundAsset: SoundAsset) {\n    this.soundAssetMap.set(soundAsset.key, soundAsset);\n  }\n\n  /**\n   * Return a sound asset based on its key.\n   * If there is none, return undefined.\n   *\n   * @param key sound asset key\n   */\n  private getSoundAsset(key: AssetKey) {\n    return this.soundAssetMap.get(key);\n  }\n\n  /**\n   * Preload sound assets into the sound manager.\n   *\n   * @param soundAssets array of sound assets\n   */\n  public loadSounds(soundAssets: SoundAsset[]) {\n    soundAssets.forEach(asset => {\n      this.addSoundAsset(asset);\n      this.loadSound(asset.key, toS3Path(asset.path));\n    });\n  }\n\n  /**\n   * Preload sound assets into the sound manager.\n   *\n   * @param assetMap AssetMap of sound assets\n   */\n  public loadSoundAssetMap(assetMap: AssetMap<SoundAsset>) {\n    Object.values(assetMap).forEach(asset => {\n      this.addSoundAsset(asset);\n      this.loadSound(asset.key, toS3Path(asset.path));\n    });\n  }\n\n  /**\n   * Preload sound asset into the sound manager.\n   *\n   * @param assetKey key to be associated with the sound\n   * @param assetPath path to the sound file\n   */\n  private loadSound(assetKey: AssetKey, assetPath: AssetPath) {\n    this.getCurrentScene().load.audio(assetKey, assetPath);\n  }\n\n  /**\n   * Play a sound, usually an SFX.\n   * The sound will be added, played, and destroyed afterwards; hence\n   * there is no need to keep any reference to it.\n   *\n   * Its volume will be multipled by the current user's SFX volume.\n   *\n   * @param soundKey key associated with the sound.\n   */\n  public playSound(soundKey: AssetKey) {\n    const soundAsset = this.getSoundAsset(soundKey);\n    if (soundAsset) {\n      const vol = soundAsset.config.volume !== undefined ? soundAsset.config.volume : 1;\n      this.getBaseSoundManager().play(soundAsset.key, {\n        ...soundAsset.config,\n        volume: vol * this.sfxVol\n      });\n    }\n  }\n\n  /**\n   * Play a background music. Only one background music is able\n   * to be played at any one time; hence calling this method will\n   * also stop the previous background music.\n   *\n   * If the provided soundKey is the same as the the currently\n   * playing background music, it will be skipped (to avoid strange\n   * stopping and playing of the same music).\n   *\n   * To play no music, the parameter can be set to empty string i.e. ''.\n   *\n   * @param soundKey key to the background music to be played.\n   * @param fadeDuration duration to fade out previous background music\n   */\n  public playBgMusic(soundKey: AssetKey, fadeDuration?: number) {\n    // Game is no longer mounted, do not play the music\n    if (!SourceAcademyGame.getInstance().isMounted) {\n      return;\n    }\n\n    // If same music is already playing, skip\n    if (this.currBgMusicKey === soundKey) {\n      return;\n    }\n\n    // Requested soundKey is empty, stop current BGM\n    if (soundKey === Constants.nullInteractionId && this.currBgMusic) {\n      this.fadeOutAndDestroyMusic(this.currBgMusic, fadeDuration);\n      this.currBgMusic = undefined;\n      this.currBgMusicKey = soundKey;\n      return;\n    }\n\n    // Stop previous BgMusic\n    if (this.currBgMusic) this.fadeOutAndDestroyMusic(this.currBgMusic);\n\n    // Update BGM and key\n    const soundAsset = mandatory(this.getSoundAsset(soundKey));\n    const bgmVol = soundAsset.config.volume !== undefined ? soundAsset.config.volume : 1;\n\n    /**\n     * We do not use `this.getBaseSoundManager().add` as it often\n     * results in crash, due to audio not being present into audio cache.\n     * i.e. calling `.add()` while the sound is not in cache.audio will\n     * result in crash.\n     *\n     * From observation, the audio cache used by `this.getBaseSoundManager()`\n     * and `this.getCurrentScene().sound` can be different.\n     *\n     * From observation, `loadSound()` loads the audio into\n     * `this.getCurrentScene().sound.game.cache.audio`; and not into\n     * `this.getBaseSoundManager().game.cache.audio`.\n     *\n     * Hence, we use `this.getCurrentScene().sound.add` in order to refer\n     * to the correct audio cache.\n     *\n     * NOTE: To check the audio cache, compare between:\n     *  - this.getBaseSoundManager().game.cache.audio\n     *  - this.getCurrentScene().sound.game.cache.audio\n     */\n    this.currBgMusic = this.getCurrentScene().sound.add(soundAsset.key, {\n      ...soundAsset.config,\n      volume: bgmVol * this.bgmVol\n    }) as Phaser.Sound.WebAudioSound;\n    this.currBgMusicKey = soundAsset.key;\n\n    // Finally, play it\n    this.currBgMusic.play();\n  }\n\n  /**\n   * Fade out a sound and destroy it.\n   *\n   * @param sound sound to be destroyed\n   * @param fadeDuration duration of fade out\n   */\n  private fadeOutAndDestroyMusic(\n    sound: Phaser.Sound.BaseSound,\n    fadeDuration: number = bgMusicFadeDuration\n  ) {\n    this.getCurrentScene().tweens.add({\n      targets: sound,\n      ...musicFadeOutTween,\n      duration: fadeDuration\n    });\n\n    setTimeout(() => sound.destroy(), fadeDuration * 2);\n  }\n\n  /**\n   * Stop all currently playing sounds.\n   */\n  public stopAllSound() {\n    this.getBaseSoundManager().stopAll();\n  }\n\n  /**\n   * Pause currently playing BGM music, if it is playing.\n   */\n  public pauseCurrBgMusic() {\n    if (this.getCurrentScene() && this.currBgMusic && this.currBgMusic.isPlaying) {\n      this.currBgMusic.pause();\n    }\n  }\n\n  /**\n   * Continue currently playing BGM music, if it is paused.\n   */\n  public continueCurrBgMusic() {\n    if (this.getCurrentScene() && this.currBgMusic && this.currBgMusic.isPaused) {\n      this.currBgMusic.play();\n    }\n  }\n\n  public getBaseSoundManager = () => mandatory(SourceAcademyGame.getInstance().sound);\n  public getCurrentScene = () => mandatory(SourceAcademyGame.getInstance().getCurrentSceneRef());\n}\n\nexport default GameSoundManager;\n","import Constants from 'src/commons/utils/Constants';\n\nimport SourceAcademyGame from '../game/SourceAcademyGame';\n\nconst sendRequest = (route: string) => async (\n  requestPath: string,\n  method: string,\n  headerConfig: object = {},\n  requestDetails: object = {}\n) => {\n  try {\n    const accessToken = SourceAcademyGame.getInstance().getAccountInfo().accessToken || '';\n\n    const headers = createHeaders(accessToken);\n    Object.entries(headerConfig).forEach(([key, value]: string[]) => {\n      headers.append(key, value);\n    });\n\n    const config = {\n      method,\n      headers,\n      ...requestDetails\n    };\n\n    return fetch(Constants.backendUrl + `/v1/${route}/` + requestPath, config);\n  } finally {\n  }\n};\n\nexport const sendAssetRequest = sendRequest('assets');\nexport const sendStoryRequest = sendRequest('stories');\n\nexport function createHeaders(accessToken: string): Headers {\n  const headers = new Headers();\n  headers.append('Accept', 'application/json');\n  headers.append('Authorization', `Bearer ${accessToken}`);\n  return headers;\n}\n","import _ from 'lodash';\n\nimport { sendAssetRequest, sendStoryRequest } from './StorySimulatorRequest';\nimport { ChapterDetail } from './StorySimulatorTypes';\n\n/**\n * List of all folders to fetch S3 assets from\n */\nexport const s3AssetFolders = [\n  'locations',\n  'objects',\n  'images',\n  'avatars',\n  'ui',\n  'sfx',\n  'bgm',\n  'stories'\n];\n\nexport function obtainTextAssets(assetPaths: string[]) {\n  return assetPaths\n    .filter(assetPath => assetPath.startsWith('stories') && assetPath.endsWith('txt'))\n    .map(\n      assetPath => assetPath.slice(8) // remove /stories\n    );\n}\n\n/**\n * Request to fetches assets from all S3 folders\n *\n * @param folders - S3 folders to fetch from\n * @returns {Promise<string[]>} - full concatenated list of files in the given S3 folders\n */\nexport async function fetchAssetPaths(folders: string[]) {\n  const files = await Promise.all(\n    folders.map(async folderName => {\n      const files = await fetchFolder(folderName);\n      return files.length ? files : [`${folderName}`];\n    })\n  );\n  return files.reduce((combinedList, newList) => combinedList.concat(newList), []);\n}\n\n/**\n * Request to fetches assets from one S3 folders\n *\n * @param folderName - S3 folder to fetch from\n * @returns {Promise<string[]>} - list of files in S3 folder\n */\nasync function fetchFolder(folderName: string) {\n  const response = await sendAssetRequest(folderName, 'GET', {\n    'Content-Type': 'application/json'\n  });\n  return response.status === 200 ? response.json() : [];\n}\n\n/**\n * Request to delete an S3 file\n *\n * @param assetPath - file path to delete\n * @returns {Promise<string>} - request response\n */\nexport async function deleteS3File(assetPath: string) {\n  const response = await sendAssetRequest(assetPath, 'DELETE');\n  const message = await response.text();\n  return message || 'Successfully Deleted';\n}\n\n/**\n * Request to upload a group of files into a chosen S3 folder\n *\n * @param fileList - the files to upload\n * @param folderName - which folder to upload to\n * @returns {Promise<string>} - Request responses, concatentated together\n */\nexport async function uploadAssetsToS3(fileList: FileList, folderName: string) {\n  const responses = await Promise.all(\n    Array.from(fileList).map(async file => {\n      const response = await uploadAssetToS3(file, folderName);\n      return file.name + ' => ' + response;\n    })\n  );\n  return responses.join('\\n');\n}\n\n/**\n * Uploads just one file into S3 folder\n *\n * @param file - file to delete\n * @param folderName - file path to delete\n * @returns {Promise<string>} - Request response\n */\nexport async function uploadAssetToS3(file: File, folderName: string) {\n  const formData = new FormData();\n  formData.set('upload', file);\n\n  const response = await sendAssetRequest(\n    `${folderName}/${file.name}`,\n    'POST',\n    {},\n    { body: formData, mode: 'cors' }\n  );\n\n  return response ? response.text() : '';\n}\n\n/**\n * Fetches all chapters from the backend\n *\n * @param accessToken - staff access token\n * @returns {Promise<object[]>} - All the chapter objects in a list\n */\nexport async function fetchChapters(): Promise<ChapterDetail[]> {\n  const response = await sendStoryRequest('', 'GET');\n  const chapterDetails = response.status === 200 ? await response.json() : [];\n  return _.sortBy(chapterDetails, (chapterDetail: ChapterDetail) => new Date(chapterDetail.openAt));\n}\n\n/**\n * Creates or updates a chapter\n *\n * @returns {Promise<string>} - Response\n */\nexport async function updateChapterRequest(id: string, body: object) {\n  const response = await sendStoryRequest(\n    id,\n    'POST',\n    {\n      'Content-Type': 'application/json'\n    },\n    {\n      body: JSON.stringify(body)\n    }\n  );\n  return response.status === 200 ? 'Chapter successfully created/updated' : response.text();\n}\n\n/**\n * Creates a chapter\n *\n * @returns {Promise<string>} - Response\n */\nexport async function deleteChapterRequest(id: string) {\n  const response = await sendStoryRequest(id, 'DELETE');\n  return response.status === 204 ? 'Chapter successfully deleted' : response.text();\n}\n","import { GameChapter } from './GameChapterTypes';\n\nconst GameChapterMocks: GameChapter[] = [\n  {\n    title: 'Spaceship Emergency',\n    imageUrl: '/locations/planet-y-orbit/crashing.png',\n    filenames: ['../assets/mockChapter0.txt', '../assets/mockChapter0.1.txt']\n  },\n  {\n    title: 'Alien Attack',\n    imageUrl: '/locations/telebay/emergency.png',\n    filenames: ['../assets/mockChapter1.txt']\n  },\n  {\n    title: 'Jedi Master',\n    imageUrl: '/locations/classroom/normal.png',\n    filenames: ['../assets/mockChapter2.txt']\n  }\n];\nexport default GameChapterMocks;\n","import { AwardProperty } from '../awards/GameAwardsTypes';\nimport { ItemId } from '../commons/CommonTypes';\nimport { toS3Path } from '../utils/GameUtils';\nimport StringUtils from '../utils/StringUtils';\nimport ParserConverter from './ParserConverter';\n\n/**\n * This class parses the awardsMapping.txt, and creates a\n * map of each item id to their corresponding award properties.\n */\nclass AwardParser {\n  public static awardsMapping: Map<ItemId, AwardProperty>;\n\n  /**\n   * This function parses the awards and produces the mapping of award id to award properties.\n   *\n   * @param assetText the entire txt file\n   * @returns {Map<ItemId, AwardProperty>} the mapping of the assets and details corresponding to each award id\n   *                                       the award id may either refer to collectible id or achievement id\n   */\n  public static parse(assetText: string): Map<ItemId, AwardProperty> {\n    AwardParser.awardsMapping = new Map<ItemId, AwardProperty>();\n\n    const assetLines = StringUtils.splitToLines(assetText);\n    const assetParagraphs = StringUtils.splitToParagraph(assetLines);\n\n    assetParagraphs.forEach(([awardType, awardBody]: [string, string[]]) => {\n      AwardParser.parseAwardParagraphs(awardType, awardBody);\n    });\n    return this.awardsMapping;\n  }\n\n  /**\n   * This parses the each award paragraph and stores award properties into the award mapping\n   *\n   * @param awardType whether the type is collectible or achievement\n   * @param awardBody whether this is a\n   */\n  private static parseAwardParagraphs(awardType: string, awardBody: string[]) {\n    const awardParagraph = StringUtils.splitToParagraph(awardBody);\n    awardParagraph.forEach(([id, awardProperties]: [ItemId, string[]]) => {\n      const [assetKey, assetPath, title, description] = StringUtils.splitByChar(\n        awardProperties[0],\n        ',',\n        3\n      );\n      AwardParser.awardsMapping.set(id, {\n        id,\n        assetKey,\n        assetPath: toS3Path(assetPath),\n        title,\n        description,\n        awardType: ParserConverter.stringToUserState(awardType)\n      });\n    });\n  }\n}\n\nexport default AwardParser;\n","import FontAssets from '../../assets/FontAssets';\nimport ImageAssets from '../../assets/ImageAssets';\nimport SoundAssets from '../../assets/SoundAssets';\nimport TextAssets from '../../assets/TextAssets';\nimport { addLoadingScreen } from '../../effects/LoadingScreen';\nimport AwardParser from '../../parser/AwardParser';\nimport SourceAcademyGame from '../../SourceAcademyGame';\nimport { toS3Path } from '../../utils/GameUtils';\nimport { loadImage } from '../../utils/LoaderUtils';\n\n/**\n * User entry point into the game.\n *\n * This is where all the fetching happens\n */\nclass EntryScene extends Phaser.Scene {\n  constructor() {\n    super('EntryScene');\n  }\n\n  public preload() {\n    SourceAcademyGame.getInstance().setCurrentSceneRef(this);\n    this.preloadAssets();\n    addLoadingScreen(this);\n  }\n\n  public async create() {\n    if (SourceAcademyGame.getInstance().getAccountInfo().role === 'staff') {\n      console.log('Staff do not have accounts');\n      return;\n    }\n\n    await SourceAcademyGame.getInstance().loadGameChapters();\n    await SourceAcademyGame.getInstance().loadRoomCode();\n    await SourceAcademyGame.getInstance().getSaveManager().loadLastSaveState();\n    await this.preloadAwards();\n\n    this.applyLoadedSettings();\n\n    this.scene.start('MainMenu');\n  }\n\n  /**\n   * Load save state and settings; then applying them.\n   */\n  private applyLoadedSettings() {\n    const userSettings = SourceAcademyGame.getInstance().getSaveManager().getSettings();\n    SourceAcademyGame.getInstance().getSoundManager().applyUserSettings(userSettings);\n  }\n\n  /**\n   * Fetch the awardsMapping text, set it as global variable,\n   * and load all the necessary assets.\n   */\n  private async preloadAwards() {\n    const awardsMappingTxt = this.cache.text.get(TextAssets.awardsMapping.key);\n    const awardsMapping = AwardParser.parse(awardsMappingTxt);\n    SourceAcademyGame.getInstance().setAwardsMapping(awardsMapping);\n    await Promise.all(\n      Array.from(awardsMapping.values()).map(\n        async awardInfo => await loadImage(this, awardInfo.assetKey, awardInfo.assetPath)\n      )\n    );\n  }\n\n  /**\n   * Preload all image assets, font assets, and sound assets into the game.\n   */\n  private preloadAssets() {\n    SourceAcademyGame.getInstance().getSoundManager().loadSoundAssetMap(SoundAssets);\n    Object.values(ImageAssets).forEach(asset => this.load.image(asset.key, toS3Path(asset.path)));\n    Object.values(FontAssets).forEach(asset =>\n      this.load.bitmapFont(asset.key, asset.pngPath, asset.fntPath)\n    );\n    Object.values(TextAssets).forEach(asset => this.load.text(asset.key, asset.path));\n  }\n}\n\nexport default EntryScene;\n","import * as Phaser from 'phaser';\nimport { AwardProperty } from 'src/features/game/awards/GameAwardsTypes';\nimport { Constants, screenSize } from 'src/features/game/commons/CommonConstants';\nimport { ItemId } from 'src/features/game/commons/CommonTypes';\nimport GameSaveManager from 'src/features/game/save/GameSaveManager';\nimport AwardsHall from 'src/features/game/scenes/awardsHall/AwardsHall';\nimport Bindings from 'src/features/game/scenes/bindings/Bindings';\nimport ChapterSelect from 'src/features/game/scenes/chapterSelect/ChapterSelect';\nimport CheckpointTransition from 'src/features/game/scenes/checkpointTransition/CheckpointTransition';\nimport GameManager from 'src/features/game/scenes/gameManager/GameManager';\nimport MainMenu from 'src/features/game/scenes/mainMenu/MainMenu';\nimport RoomPreview from 'src/features/game/scenes/roomPreview/RoomPreview';\nimport Settings from 'src/features/game/scenes/settings/Settings';\nimport GameSoundManager from 'src/features/game/sound/GameSoundManager';\nimport { mandatory } from 'src/features/game/utils/GameUtils';\nimport { StorySimState } from 'src/features/storySimulator/StorySimulatorTypes';\n\nimport { fetchChapters } from '../storySimulator/StorySimulatorService';\nimport { toTxtPath } from './assets/TextAssets';\nimport GameChapterMocks from './chapter/GameChapterMocks';\nimport { GameChapter } from './chapter/GameChapterTypes';\nimport EntryScene from './scenes/entry/EntryScene';\nimport { getRoomPreviewCode } from './scenes/roomPreview/RoomPreviewHelper';\n\nexport type AccountInfo = {\n  accessToken: string;\n  refreshToken: string;\n  role: string;\n  name: string;\n};\n\nexport enum GameType {\n  Simulator = 'Simulator',\n  Game = 'Game'\n}\n\ntype GlobalGameProps = {\n  accountInfo: AccountInfo | undefined;\n  setStorySimState: (value: React.SetStateAction<string>) => void;\n  awardsMapping: Map<ItemId, AwardProperty>;\n  currentSceneRef?: Phaser.Scene;\n  soundManager: GameSoundManager;\n  saveManager: GameSaveManager;\n  gameType: GameType;\n  gameChapters: GameChapter[];\n  ssChapterSimFilenames: string[];\n  isUsingMock: boolean;\n  roomCode: string;\n};\n\nexport default class SourceAcademyGame extends Phaser.Game {\n  static instance: SourceAcademyGame;\n  protected global: GlobalGameProps;\n  public isMounted: boolean;\n\n  constructor(config: Phaser.Types.Core.GameConfig, gameType: GameType) {\n    super(config);\n    SourceAcademyGame.instance = this;\n    this.isMounted = true;\n    this.global = {\n      awardsMapping: new Map<ItemId, AwardProperty>(),\n      accountInfo: undefined,\n      setStorySimState: Constants.nullFunction,\n      currentSceneRef: undefined,\n      soundManager: new GameSoundManager(),\n      saveManager: new GameSaveManager(),\n      gameType,\n      gameChapters: [],\n      ssChapterSimFilenames: [],\n      isUsingMock: false,\n      roomCode: ''\n    };\n  }\n\n  static getInstance = () => mandatory(SourceAcademyGame.instance);\n\n  public stopAllSounds() {\n    this.sound.stopAll();\n  }\n\n  public setAccountInfo(acc: AccountInfo | undefined) {\n    this.global.accountInfo = acc;\n  }\n\n  public setAwardsMapping(awardsMapping: Map<ItemId, AwardProperty>) {\n    this.global.awardsMapping = awardsMapping;\n  }\n\n  public setStorySimStateSetter(setStorySimState: (value: React.SetStateAction<string>) => void) {\n    this.setStorySimState = setStorySimState;\n  }\n\n  public async loadGameChapters() {\n    const chapters = await fetchChapters();\n    chapters.forEach(chapter => (chapter.filenames = chapter.filenames.map(toTxtPath)));\n    this.global.gameChapters = chapters;\n  }\n\n  public async loadRoomCode() {\n    this.global.roomCode = await getRoomPreviewCode();\n  }\n\n  public setStorySimState(state: StorySimState) {\n    this.global.setStorySimState(state);\n  }\n\n  public setCurrentSceneRef(scene: Phaser.Scene) {\n    this.global.currentSceneRef = scene;\n  }\n\n  public toggleUsingMock() {\n    this.global.isUsingMock = !this.global.isUsingMock;\n  }\n\n  public setChapterSimStack(checkpointFilenames: string[]) {\n    this.global.ssChapterSimFilenames = checkpointFilenames.reverse();\n  }\n\n  public getAwardsMapping = () => mandatory(this.global.awardsMapping);\n  public getAccountInfo = () => mandatory(this.global.accountInfo);\n  public getSoundManager = () => mandatory(this.global.soundManager);\n  public getSaveManager = () => mandatory(this.global.saveManager);\n  public getCurrentSceneRef = () => mandatory(this.global.currentSceneRef);\n  public isGameType = (gameType: GameType) => this.global.gameType === gameType;\n  public getSSChapterSimFilenames = () => this.global.ssChapterSimFilenames;\n  public getIsUsingMock = () => this.global.isUsingMock;\n  public getRoomCode = () => this.global.roomCode;\n  public getGameChapters = () =>\n    this.global.isUsingMock ? GameChapterMocks : this.global.gameChapters;\n}\n\nconst config = {\n  debug: true,\n  type: Phaser.WEBGL,\n  width: screenSize.x,\n  height: screenSize.y,\n  physics: {\n    default: 'arcade'\n  },\n  scale: {\n    mode: Phaser.Scale.FIT,\n    parent: 'game-display'\n  },\n  scene: [\n    EntryScene,\n    MainMenu,\n    Settings,\n    ChapterSelect,\n    GameManager,\n    CheckpointTransition,\n    AwardsHall,\n    RoomPreview,\n    Bindings\n  ]\n};\n\nexport const createSourceAcademyGame = () => {\n  return new SourceAcademyGame(config, GameType.Game);\n};\n","import * as React from 'react';\nimport { useSelector } from 'react-redux';\nimport { OverallState } from 'src/commons/application/ApplicationTypes';\nimport { clearData } from 'src/features/game/save/GameSaveRequests';\nimport SourceAcademyGame, {\n  AccountInfo,\n  createSourceAcademyGame\n} from 'src/features/game/SourceAcademyGame';\n\nfunction Game() {\n  const session = useSelector((state: OverallState) => state.session);\n  const [isTestStudent, setIsTestStudent] = React.useState(false);\n  const [isUsingMock, setIsUsingMock] = React.useState(false);\n\n  React.useEffect(() => {\n    createSourceAcademyGame();\n    return () => {\n      SourceAcademyGame.getInstance().isMounted = false;\n      SourceAcademyGame.getInstance().stopAllSounds();\n    };\n  }, []);\n\n  React.useEffect(() => {\n    SourceAcademyGame.getInstance().setAccountInfo(session as AccountInfo);\n    if (session.name === 'Test Student') {\n      setIsTestStudent(true);\n      setIsUsingMock(true);\n      SourceAcademyGame.getInstance().toggleUsingMock();\n    }\n  }, [session]);\n\n  return (\n    <>\n      <div id=\"game-display\"></div>\n      {isTestStudent && (\n        <div className=\"Horizontal\">\n          <button\n            onClick={async () => {\n              await clearData();\n            }}\n          >\n            Clear data\n          </button>\n          <button\n            onClick={() => {\n              setIsUsingMock(!isUsingMock);\n              SourceAcademyGame.getInstance().toggleUsingMock();\n            }}\n          >\n            {isUsingMock ? 'Use Game Chapters' : 'Use Mock Chapters'}\n          </button>\n        </div>\n      )}\n    </>\n  );\n}\n\nexport default Game;\n","import { Classes } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport * as React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nimport controlButton from '../../../../commons/ControlButton';\nimport { filterNotificationsBySubmission } from '../../../../commons/notificationBadge/NotificationBadgeHelper';\nimport { NotificationFilterFunction } from '../../../../commons/notificationBadge/NotificationBadgeTypes';\nimport { GradingOverviewWithNotifications } from '../../../../features/grading/GradingTypes';\n\ntype EditGradingCellProps = DispatchProps & StateProps;\n\ntype DispatchProps = {\n  handleAcknowledgeNotifications: (withFilter?: NotificationFilterFunction) => void;\n};\n\ntype StateProps = {\n  data: GradingOverviewWithNotifications;\n};\n\n/**\n * Used to render a link in the table that displays GradingOverviews.\n * This is a fully fledged component (not SFC) by specification in\n * ag-grid.\n *\n * See {@link https://www.ag-grid.com/example-react-dynamic}\n */\nclass GradingEditGradingCell extends React.Component<EditGradingCellProps, {}> {\n  public render() {\n    return (\n      <NavLink\n        to={`/academy/grading/${this.props.data.submissionId}`}\n        activeClassName={Classes.ACTIVE}\n      >\n        {controlButton(\n          '',\n          IconNames.ANNOTATION,\n          () =>\n            this.props.handleAcknowledgeNotifications(\n              filterNotificationsBySubmission(this.props.data.submissionId)\n            ),\n          { fullWidth: true }\n        )}\n      </NavLink>\n    );\n  }\n}\n\nexport default GradingEditGradingCell;\n","import { Position, Tooltip } from '@blueprintjs/core';\nimport * as React from 'react';\n\nimport { GradingCellProps } from '../../../../features/grading/GradingTypes';\n\n/**\n * Used to render the submission grade details in the table that displays GradingOverviews.\n * This is a fully fledged component (not SFC) by specification in\n * ag-grid.\n *\n * See {@link https://www.ag-grid.com/example-react-dynamic}\n */\nclass GradingGradeCell extends React.Component<GradingCellProps, {}> {\n  /** Component to render in table - marks */\n  public render() {\n    if (this.props.data.maxGrade) {\n      const tooltip = `Initial Grade: ${this.props.data.initialGrade}\n        (${this.props.data.gradeAdjustment >= 0 ? '+' : ''}${\n        this.props.data.gradeAdjustment\n      } adj.)`;\n      return (\n        <div>\n          <Tooltip content={tooltip} position={Position.LEFT} hoverOpenDelay={10} lazy={true}>\n            {`${this.props.data.currentGrade} / ${this.props.data.maxGrade}`}\n          </Tooltip>\n        </div>\n      );\n    } else {\n      return <div>N/A</div>;\n    }\n  }\n}\n\nexport default GradingGradeCell;\n","import { Icon, IconName, Intent, Position, Tooltip } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport * as React from 'react';\n\nimport { GradingStatuses } from '../../../../commons/assessment/AssessmentTypes';\nimport { GradingCellProps } from '../../../../features/grading/GradingTypes';\n\n/**\n * Used to render the submission grading status details in the table that displays GradingOverviews.\n * This is a fully fledged component (not SFC) by specification in\n * ag-grid.\n *\n * See {@link https://www.ag-grid.com/example-react-dynamic}\n */\nclass GradingStatusCell extends React.Component<GradingCellProps, {}> {\n  /** Component to render in table - grading status */\n  public render() {\n    const gradingStatus = this.props.data.gradingStatus;\n    let iconName: IconName;\n    let tooltip: string;\n    let intent: Intent;\n\n    switch (gradingStatus) {\n      case GradingStatuses.graded:\n        iconName = IconNames.TICK;\n        tooltip = `Fully graded: ${this.props.data.gradedCount} of\n          ${this.props.data.questionCount}`;\n        intent = Intent.SUCCESS;\n        break;\n      case GradingStatuses.grading:\n        iconName = IconNames.TIME;\n        tooltip = `Partially graded: ${this.props.data.gradedCount} of\n          ${this.props.data.questionCount}`;\n        intent = Intent.WARNING;\n        break;\n      case GradingStatuses.none:\n        iconName = IconNames.CROSS;\n        tooltip = `Not graded: ${this.props.data.gradedCount} of\n          ${this.props.data.questionCount}`;\n        intent = Intent.DANGER;\n        break;\n      default:\n        iconName = IconNames.DISABLE;\n        tooltip = 'Not applicable';\n        intent = Intent.PRIMARY;\n    }\n\n    return (\n      <div>\n        <Tooltip content={tooltip} position={Position.LEFT} hoverOpenDelay={10} lazy={true}>\n          <Icon icon={iconName} intent={intent} />\n        </Tooltip>\n      </div>\n    );\n  }\n}\n\nexport default GradingStatusCell;\n","import { Alert, Intent } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport * as React from 'react';\n\nimport { Role } from '../../../../commons/application/ApplicationTypes';\nimport controlButton from '../../../../commons/ControlButton';\nimport { GradingOverview } from '../../../../features/grading/GradingTypes';\n\nexport type UnsubmitCellProps = DispatchProps & StateProps;\n\ntype DispatchProps = {\n  handleUnsubmitSubmission: (submissionId: number) => void;\n};\n\ntype StateProps = {\n  data: GradingOverview;\n  group: string | null;\n  role?: Role;\n};\n\ntype State = {\n  isAlertOpen: boolean;\n};\n\nclass GradingUnsubmitCell extends React.Component<UnsubmitCellProps, State> {\n  public constructor(props: UnsubmitCellProps) {\n    super(props);\n\n    this.state = {\n      isAlertOpen: false\n    };\n  }\n\n  public render() {\n    if (this.props.data.submissionStatus !== 'submitted') {\n      return null;\n    } else if (this.props.group !== this.props.data.groupName && this.props.role! !== Role.Admin) {\n      return null;\n    }\n\n    return (\n      <div>\n        <Alert\n          canEscapeKeyCancel={true}\n          canOutsideClickCancel={true}\n          cancelButtonText=\"Cancel\"\n          className=\"unsubmit-alert alert\"\n          intent={Intent.DANGER}\n          onConfirm={this.handleConfirmUnsubmit}\n          isOpen={this.state.isAlertOpen}\n          onCancel={this.handleUnsubmitAlertClose}\n        >\n          Are you sure you want to unsubmit?\n        </Alert>\n        {controlButton('', IconNames.ARROW_LEFT, () => this.setState({ isAlertOpen: true }), {\n          fullWidth: true\n        })}\n      </div>\n    );\n  }\n\n  private handleConfirmUnsubmit = () => {\n    this.props.handleUnsubmitSubmission(this.props.data.submissionId);\n    this.setState({ isAlertOpen: false });\n  };\n\n  private handleUnsubmitAlertClose = () => this.setState({ isAlertOpen: false });\n}\n\nexport default GradingUnsubmitCell;\n","import {\n  Divider,\n  H3,\n  Icon,\n  IconName,\n  Intent,\n  NumericInput,\n  Position,\n  Pre\n} from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport * as React from 'react';\nimport ReactMde, { ReactMdeProps } from 'react-mde';\nimport { Prompt } from 'react-router';\n\nimport controlButton from '../../../../commons/ControlButton';\nimport Markdown from '../../../../commons/Markdown';\nimport { getPrettyDate } from '../../../../commons/utils/DateHelper';\nimport {\n  showSuccessMessage,\n  showWarningMessage\n} from '../../../../commons/utils/NotificationsHelper';\nimport { stringParamToInt } from '../../../../commons/utils/ParamParseHelper';\n\ntype GradingEditorProps = DispatchProps & OwnProps;\n\ntype GradingSaveFunction = (\n  submissionId: number,\n  questionId: number,\n  gradeAdjustment: number | undefined,\n  xpAdjustment: number | undefined,\n  comments?: string\n) => void;\n\nexport type DispatchProps = {\n  handleGradingSave: GradingSaveFunction;\n  handleGradingSaveAndContinue: GradingSaveFunction;\n};\n\ntype OwnProps = {\n  solution: number | string | null;\n  questionId: number;\n  submissionId: number;\n  initialGrade: number;\n  gradeAdjustment: number;\n  maxGrade: number;\n  initialXp: number;\n  xpAdjustment: number;\n  maxXp: number;\n  studentName: string;\n  comments?: string;\n  graderName?: string;\n  gradedAt?: string;\n};\n\n/**\n * Keeps track of the current editor state,\n * as well as the grade adjustment in the numeric input.\n *\n * @prop gradeAdjustmentInput a potentially null string which defines the\n *   result for the number grade input. This property being null\n *   will show the hint text in the NumericInput. This property is a string\n *   so as to allow input such as the '-' character.\n *\n * @prop xpAdjustmentInput a potentially null string which defines the\n *   result for the number XP input. This property being null\n *   will show the hint text in the NumericInput. This property is a string\n *   so as to allow input such as the '-' character.\n *\n * @prop editorValue the text in the react-mde editor, that will be saved\n *   to a comment displayed below the numerical grade and XP\n *\n * @prop selectedTab the selected tab for the react-mde editor\n *   (either 'write' or 'preview')\n *\n * @prop currentlySaving determines whether the 'You have unsaved changes'\n *   prompt should appear on page navigation, to prevent the\n *   'Save and Continue' button from activating the prompt\n *   in cases where navigation occurs before Redux has\n *   updated the props of the Editor component\n *\n *   This may pose a problem if the user clicks 'Save and Continue'\n *   and the saving process fails. The prompt would no longer\n *   appear although there exist unsaved changes\n */\ntype State = {\n  gradeAdjustmentInput: string | null;\n  xpAdjustmentInput: string | null;\n  editorValue?: string;\n  selectedTab: ReactMdeProps['selectedTab'];\n  currentlySaving: boolean;\n};\n\nconst gradingEditorButtonClass = 'grading-editor-button';\n\nclass GradingEditor extends React.Component<GradingEditorProps, State> {\n  constructor(props: GradingEditorProps) {\n    super(props);\n    this.state = {\n      gradeAdjustmentInput: props.gradeAdjustment.toString(),\n      xpAdjustmentInput: props.xpAdjustment.toString(),\n      editorValue: props.comments,\n      selectedTab: 'write',\n      currentlySaving: false\n    };\n  }\n\n  public render() {\n    const hasUnsavedChanges = this.hasUnsavedChanges();\n    const saveButtonOpts = {\n      intent: hasUnsavedChanges ? Intent.WARNING : Intent.NONE,\n      minimal: !hasUnsavedChanges,\n      className: gradingEditorButtonClass\n    };\n    const discardButtonOpts = {\n      intent: hasUnsavedChanges ? Intent.DANGER : Intent.NONE,\n      minimal: !hasUnsavedChanges,\n      className: gradingEditorButtonClass\n    };\n    const saveAndContinueButtonOpts = {\n      intent: hasUnsavedChanges ? Intent.SUCCESS : Intent.NONE,\n      minimal: !hasUnsavedChanges,\n      className: gradingEditorButtonClass\n    };\n    const onTabChange = (tab: ReactMdeProps['selectedTab']) =>\n      this.setState({\n        ...this.state,\n        selectedTab: tab\n      });\n\n    // Derived values\n    const totalGrade =\n      this.props.initialGrade +\n      (stringParamToInt(this.state.gradeAdjustmentInput || undefined) || 0);\n    const totalXp =\n      this.props.initialXp + (stringParamToInt(this.state.xpAdjustmentInput || undefined) || 0);\n    const gradePlaceholder = `${this.props.initialGrade > 0 ? '-' : ''}${\n      this.props.initialGrade\n    } to ${this.props.maxGrade - this.props.initialGrade}`;\n    const xpPlaceholder = `${this.props.initialXp > 0 ? '-' : ''}${this.props.initialXp} to ${\n      this.props.maxXp - this.props.initialXp\n    }`;\n\n    return (\n      <div className=\"GradingEditor\">\n        {!this.state.currentlySaving && hasUnsavedChanges ? (\n          <Prompt message={'You have unsaved changes. Are you sure you want to leave?'} />\n        ) : null}\n\n        <div className=\"grading-editor-header\">\n          <H3>Currently Grading: {this.props.studentName}</H3>\n        </div>\n        {this.props.solution !== null ? (\n          <div className=\"grading-editor-marking-scheme\">\n            <Pre>{this.props.solution.toString()} </Pre>\n          </div>\n        ) : null}\n\n        <div className=\"grading-editor-container\">\n          <div className=\"grading-editor-grades\">\n            <div className=\"autograder-grade\">\n              <div>Autograder grade:</div>\n              <div>{`${this.props.initialGrade} / ${this.props.maxGrade}`}</div>\n            </div>\n            <div className=\"grade-adjustment\">\n              <div>Grade adjustment:</div>\n              <div>\n                <NumericInput\n                  className=\"adjustment-input\"\n                  onValueChange={this.onGradeAdjustmentInputChange}\n                  value={this.state.gradeAdjustmentInput || ''}\n                  buttonPosition={Position.RIGHT}\n                  fill={true}\n                  placeholder={gradePlaceholder}\n                  intent={\n                    totalGrade < 0 || totalGrade > this.props.maxGrade ? Intent.DANGER : Intent.NONE\n                  }\n                  min={0 - this.props.initialGrade}\n                  max={\n                    this.props.maxGrade > this.props.initialGrade\n                      ? this.props.maxGrade - this.props.initialGrade\n                      : undefined\n                  }\n                />\n              </div>\n            </div>\n            <div className=\"final-grade\">\n              <div>Final grade:</div>\n              <div>{`${totalGrade} / ${this.props.maxGrade}`}</div>\n            </div>\n          </div>\n          <div className=\"grading-editor-xp\">\n            <div className=\"autograder-grade\">\n              <div>Autograder XP:</div>\n              <div>{`${this.props.initialXp} / ${this.props.maxXp}`}</div>\n            </div>\n            <div className=\"grade-adjustment\">\n              <div>XP adjustment:</div>\n              <div>\n                <NumericInput\n                  className=\"adjustment-input\"\n                  onValueChange={this.onXpAdjustmentInputChange}\n                  value={this.state.xpAdjustmentInput || ''}\n                  buttonPosition={Position.RIGHT}\n                  fill={true}\n                  placeholder={xpPlaceholder}\n                  intent={totalXp < 0 || totalXp > this.props.maxXp ? Intent.DANGER : Intent.NONE}\n                  min={0 - this.props.initialXp}\n                  max={\n                    this.props.maxXp > this.props.initialXp\n                      ? this.props.maxXp - this.props.initialXp\n                      : undefined\n                  }\n                />\n              </div>\n            </div>\n            <div className=\"final-grade\">\n              <div>Final XP:</div>\n              <div>{`${totalXp} / ${this.props.maxXp}`}</div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"react-mde-parent\">\n          <ReactMde\n            value={this.state.editorValue || ''}\n            onChange={this.handleEditorValueChange}\n            selectedTab={this.state.selectedTab}\n            onTabChange={onTabChange}\n            generateMarkdownPreview={this.generateMarkdownPreview}\n            minEditorHeight={200}\n            maxEditorHeight={1000}\n            minPreviewHeight={240}\n            getIcon={this.blueprintIconProvider}\n          />\n        </div>\n\n        {this.state.selectedTab === 'write' && (\n          <div className=\"grading-editor-draft-buttons\">\n            <div className=\"grading-editor-save-button\">\n              {controlButton(\n                'Save Changes',\n                IconNames.FLOPPY_DISK,\n                this.validateGradesBeforeSave(this.props.handleGradingSave),\n                saveButtonOpts\n              )}\n            </div>\n            <div className=\"grading-editor-discard-button\">\n              {controlButton(\n                'Discard Changes',\n                IconNames.TRASH,\n                this.discardChanges,\n                discardButtonOpts\n              )}\n            </div>\n          </div>\n        )}\n        <div className=\"grading-editor-save-continue-button\">\n          {controlButton(\n            'Save and Continue',\n            IconNames.UPDATED,\n            this.validateGradesBeforeSave(this.onClickSaveAndContinue),\n            saveAndContinueButtonOpts\n          )}\n        </div>\n        {this.props.graderName && this.props.gradedAt && (\n          <>\n            <Divider />\n            <div className=\"grading-editor-last-graded-details\">\n              Last edited by <b>{this.props.graderName}</b> on {getPrettyDate(this.props.gradedAt)}\n            </div>\n          </>\n        )}\n      </div>\n    );\n  }\n\n  /**\n   * A custom icons provider. It uses a bulky mapping function\n   * defined below.\n   *\n   * See {@link https://github.com/andrerpena/react-mde}\n   */\n  private blueprintIconProvider(name: string) {\n    const blueprintIcon = mdeToBlueprintIconMapping(name);\n    return <Icon icon={blueprintIcon.iconName} htmlTitle={blueprintIcon.title} />;\n  }\n\n  /**\n   * Makes sure that the Grade and XP values are permissible before\n   * returning the relevant saving function (for the 'Save Draft'\n   * and 'Submit and Continue' buttons)\n   */\n  private validateGradesBeforeSave = (handleSaving: GradingSaveFunction): (() => void) => () => {\n    const gradeAdjustmentInput =\n      stringParamToInt(this.state.gradeAdjustmentInput || undefined) || undefined;\n    const grade = this.props.initialGrade + (gradeAdjustmentInput || 0);\n    const xpAdjustmentInput =\n      stringParamToInt(this.state.xpAdjustmentInput || undefined) || undefined;\n    const xp = this.props.initialXp + (xpAdjustmentInput || 0);\n    if (grade < 0 || grade > this.props.maxGrade) {\n      showWarningMessage(\n        `Grade ${grade.toString()} is out of bounds. Maximum grade is ${this.props.maxGrade.toString()}.`\n      );\n      return;\n    } else if (xp < 0 || xp > this.props.maxXp) {\n      showWarningMessage(\n        `XP ${xp.toString()} is out of bounds. Maximum xp is ${this.props.maxXp.toString()}.`\n      );\n      return;\n    } else {\n      handleSaving(\n        this.props.submissionId,\n        this.props.questionId,\n        gradeAdjustmentInput,\n        xpAdjustmentInput,\n        this.state.editorValue!\n      );\n    }\n  };\n\n  /**\n   * Sets the state currentlySaving to true to disable\n   * the 'You have unsaved changes' prompt\n   */\n  private onClickSaveAndContinue: GradingSaveFunction = (\n    submissionId: number,\n    questionId: number,\n    gradeAdjustment: number | undefined,\n    xpAdjustment: number | undefined,\n    comments?: string\n  ) => {\n    const callback = (): void => {\n      this.props.handleGradingSaveAndContinue(\n        submissionId,\n        questionId,\n        gradeAdjustment,\n        xpAdjustment,\n        comments!\n      );\n    };\n    this.setState({ ...this.state, currentlySaving: true }, callback);\n  };\n\n  /**\n   * Send a warning prompt that loading from a local draft\n   * will overwrite any unsaved changes\n   */\n  private discardChanges = (): void => {\n    if (!this.hasUnsavedChanges() || window.confirm('This will reset the editor. Are you sure?')) {\n      this.setState(\n        {\n          ...this.state,\n          gradeAdjustmentInput: this.props.gradeAdjustment!.toString(),\n          xpAdjustmentInput: this.props.xpAdjustment!.toString(),\n          editorValue: this.props.comments || ''\n        },\n        () => {\n          showSuccessMessage('Discarded!', 1000);\n        }\n      );\n    }\n  };\n\n  /**\n   * Handles changes in the grade NumericInput, and updates the local State.\n   *\n   * @param valueAsNumber an unused parameter, as we use strings for the input. @see State\n   * @param valueAsString a string that contains the input. To be parsed by another function.\n   */\n  private onGradeAdjustmentInputChange = (valueAsNumber: number, valueAsString: string | null) => {\n    this.setState({\n      ...this.state,\n      gradeAdjustmentInput: valueAsString,\n      xpAdjustmentInput: String(\n        Math.round((valueAsNumber / this.props.maxGrade) * this.props.maxXp) || 0\n      )\n    });\n  };\n\n  /**\n   * Handles changes in the XP NumericInput, and updates the local State.\n   *\n   * @param valueAsNumber an unused parameter, as we use strings for the input. @see State\n   * @param valueAsString a string that contains the input. To be parsed by another function.\n   */\n  private onXpAdjustmentInputChange = (valueAsNumber: number, valueAsString: string | null) => {\n    this.setState({\n      ...this.state,\n      xpAdjustmentInput: valueAsString\n    });\n  };\n\n  private handleEditorValueChange = (editorValue: string) => {\n    this.setState({\n      ...this.state,\n      editorValue\n    });\n  };\n\n  private hasUnsavedChanges = () => {\n    const gradeAdjustmentInput = stringParamToInt(this.state.gradeAdjustmentInput || undefined);\n    const xpAdjustmentInput = stringParamToInt(this.state.xpAdjustmentInput || undefined);\n    return (\n      this.props.gradeAdjustment !== gradeAdjustmentInput ||\n      this.props.xpAdjustment !== xpAdjustmentInput ||\n      this.props.comments !== this.state.editorValue\n    );\n  };\n\n  private generateMarkdownPreview = (markdown: string) =>\n    Promise.resolve(\n      <Markdown\n        content={markdown}\n        simplifiedAutoLink={true}\n        strikethrough={true}\n        tasklists={true}\n        openLinksInNewWindow={true}\n      />\n    );\n}\n\n/**\n * Maps react-mde icon names to blueprintjs counterparts\n * to reduce the number of dependencies on icons and\n * keep a more consistent look\n *\n * Also, generate a HTML title for the icon to be shown on mouse hover\n *\n * By default, react-mde would use FontAwesome5 icons if this\n * icon mapping is not provided\n */\nconst mdeToBlueprintIconMapping = (name: string): { iconName: IconName; title?: string } => {\n  switch (name) {\n    case 'header':\n      return {\n        iconName: IconNames.HEADER,\n        title: 'Header Styles'\n      };\n    case 'bold':\n      return {\n        iconName: IconNames.BOLD,\n        title: 'Bold'\n      };\n    case 'italic':\n      return {\n        iconName: IconNames.ITALIC,\n        title: 'Italic'\n      };\n    case 'strikethrough':\n      return {\n        iconName: IconNames.STRIKETHROUGH,\n        title: 'Strikethrough'\n      };\n    case 'link':\n      return {\n        iconName: IconNames.LINK,\n        title: 'Link'\n      };\n    case 'quote':\n      return {\n        iconName: IconNames.CITATION,\n        title: 'Quote'\n      };\n    case 'code':\n      return {\n        iconName: IconNames.CODE,\n        title: 'Monospaced'\n      };\n    case 'image':\n      return {\n        iconName: IconNames.MEDIA,\n        title: 'Image'\n      };\n    case 'unordered-list':\n      return {\n        iconName: IconNames.UNGROUP_OBJECTS,\n        title: 'Bullets'\n      };\n    case 'ordered-list':\n      return {\n        iconName: IconNames.NUMBERED_LIST,\n        title: 'Numbering'\n      };\n    case 'checked-list':\n      return {\n        iconName: IconNames.SQUARE,\n        title: 'Checkboxes'\n      };\n    default:\n      // For unknown icons, a question mark icon is returned\n      return {\n        iconName: IconNames.HELP\n      };\n  }\n};\n\nexport default GradingEditor;\n","import { connect, MapDispatchToProps } from 'react-redux';\nimport { bindActionCreators, Dispatch } from 'redux';\n\nimport {\n  submitGrading,\n  submitGradingAndContinue\n} from '../../../../commons/application/actions/SessionActions';\nimport GradingEditor, { DispatchProps } from './GradingEditor';\n\nconst mapDispatchToProps: MapDispatchToProps<DispatchProps, {}> = (dispatch: Dispatch) =>\n  bindActionCreators(\n    {\n      handleGradingSave: submitGrading,\n      handleGradingSaveAndContinue: submitGradingAndContinue\n    },\n    dispatch\n  );\n\nconst GradingEditorContainer = connect(null, mapDispatchToProps)(GradingEditor);\n\nexport default GradingEditorContainer;\n","import { Classes, NonIdealState, Spinner } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport classNames from 'classnames';\nimport * as React from 'react';\n\nimport { InterpreterOutput } from '../../../../commons/application/ApplicationTypes';\nimport {\n  AutogradingResult,\n  IMCQQuestion,\n  Library,\n  Question,\n  QuestionTypes,\n  Testcase\n} from '../../../../commons/assessment/AssessmentTypes';\nimport { ControlBarProps } from '../../../../commons/controlBar/ControlBar';\nimport { ControlBarClearButton } from '../../../../commons/controlBar/ControlBarClearButton';\nimport { ControlBarEvalButton } from '../../../../commons/controlBar/ControlBarEvalButton';\nimport { ControlBarNextButton } from '../../../../commons/controlBar/ControlBarNextButton';\nimport { ControlBarPreviousButton } from '../../../../commons/controlBar/ControlBarPreviousButton';\nimport { ControlBarQuestionViewButton } from '../../../../commons/controlBar/ControlBarQuestionViewButton';\nimport { ControlBarRunButton } from '../../../../commons/controlBar/ControlBarRunButton';\nimport { HighlightedLines, Position } from '../../../../commons/editor/EditorTypes';\nimport Markdown from '../../../../commons/Markdown';\nimport { SideContentProps } from '../../../../commons/sideContent/SideContent';\nimport SideContentAutograder from '../../../../commons/sideContent/SideContentAutograder';\nimport SideContentToneMatrix from '../../../../commons/sideContent/SideContentToneMatrix';\nimport { SideContentTab, SideContentType } from '../../../../commons/sideContent/SideContentTypes';\nimport { history } from '../../../../commons/utils/HistoryHelper';\nimport Workspace, { WorkspaceProps } from '../../../../commons/workspace/Workspace';\nimport { WorkspaceState } from '../../../../commons/workspace/WorkspaceTypes';\nimport { AnsweredQuestion, Grading } from '../../../../features/grading/GradingTypes';\nimport GradingEditor from './GradingEditorContainer';\n\ntype GradingWorkspaceProps = DispatchProps & OwnProps & StateProps;\n\nexport type DispatchProps = {\n  handleActiveTabChange: (activeTab: SideContentType) => void;\n  handleBrowseHistoryDown: () => void;\n  handleBrowseHistoryUp: () => void;\n  handleChapterSelect: (chapter: any, changeEvent: any) => void;\n  handleClearContext: (library: Library) => void;\n  handleDeclarationNavigate: (cursorPosition: Position) => void;\n  handleEditorEval: () => void;\n  handleEditorValueChange: (val: string) => void;\n  handleEditorHeightChange: (height: number) => void;\n  handleEditorWidthChange: (widthChange: number) => void;\n  handleEditorUpdateBreakpoints: (breakpoints: string[]) => void;\n  handleGradingFetch: (submissionId: number) => void;\n  handleInterruptEval: () => void;\n  handleReplEval: () => void;\n  handleReplOutputClear: () => void;\n  handleReplValueChange: (newValue: string) => void;\n  handleResetWorkspace: (options: Partial<WorkspaceState>) => void;\n  handleSideContentHeightChange: (heightChange: number) => void;\n  handleTestcaseEval: (testcaseId: number) => void;\n  handleDebuggerPause: () => void;\n  handleDebuggerResume: () => void;\n  handleDebuggerReset: () => void;\n  handleUpdateCurrentSubmissionId: (submissionId: number, questionId: number) => void;\n  handleUpdateHasUnsavedChanges: (hasUnsavedChanges: boolean) => void;\n  handlePromptAutocomplete: (row: number, col: number, callback: any) => void;\n};\n\nexport type OwnProps = {\n  submissionId: number;\n  questionId: number;\n};\n\nexport type StateProps = {\n  autogradingResults: AutogradingResult[];\n  grading?: Grading;\n  editorPrepend: string;\n  editorValue: string | null;\n  editorPostpend: string;\n  editorTestcases: Testcase[];\n  editorHeight?: number;\n  editorWidth: string;\n  breakpoints: string[];\n  highlightedLines: HighlightedLines[];\n  hasUnsavedChanges: boolean;\n  isRunning: boolean;\n  isDebugging: boolean;\n  enableDebugging: boolean;\n  newCursorPosition?: Position;\n  output: InterpreterOutput[];\n  replValue: string;\n  sideContentHeight?: number;\n  storedSubmissionId?: number;\n  storedQuestionId?: number;\n};\n\nclass GradingWorkspace extends React.Component<GradingWorkspaceProps> {\n  /**\n   * After mounting (either an older copy of the grading\n   * or a loading screen), try to fetch a newer grading.\n   */\n  public componentDidMount() {\n    this.props.handleGradingFetch(this.props.submissionId);\n\n    if (!this.props.grading) {\n      return;\n    }\n\n    let questionId = this.props.questionId;\n    if (this.props.questionId >= this.props.grading.length) {\n      questionId = this.props.grading.length - 1;\n    }\n\n    const question: AnsweredQuestion = this.props.grading[questionId].question;\n    let answer: string = '';\n\n    if (question.type === QuestionTypes.programming) {\n      if (question.answer) {\n        answer = question.answer as string;\n      } else {\n        answer = question.solutionTemplate || '';\n      }\n    }\n\n    this.props.handleEditorValueChange(answer);\n  }\n\n  /**\n   * Once there is an update (due to the grading being fetched), check\n   * if a workspace reset is needed.\n   */\n  public componentDidUpdate() {\n    /* Don't reset workspace if grading not fetched yet. */\n    if (this.props.grading === undefined) {\n      return;\n    }\n    const questionId = this.props.questionId;\n\n    /**\n     * Check if questionId is out of bounds, if it is, redirect to the\n     * grading overview page\n     *\n     * This occurs if the grading is submitted on the last question,\n     * as the function to move to the next question does not check\n     * if that question exists\n     */\n    if (this.props.grading[questionId] === undefined) {\n      history.push('/academy/grading');\n    } else {\n      this.checkWorkspaceReset(this.props);\n    }\n  }\n\n  public render() {\n    if (this.props.grading === undefined) {\n      return (\n        <NonIdealState\n          className={classNames('WorkspaceParent', Classes.DARK)}\n          description=\"Getting assessment ready...\"\n          icon={<Spinner size={Spinner.SIZE_LARGE} />}\n        />\n      );\n    }\n\n    /* If questionId is out of bounds, set it to the max. */\n    const questionId =\n      this.props.questionId >= this.props.grading.length\n        ? this.props.grading.length - 1\n        : this.props.questionId;\n    /* Get the question to be graded */\n    const question = this.props.grading[questionId].question as Question;\n    const workspaceProps: WorkspaceProps = {\n      controlBarProps: this.controlBarProps(questionId),\n      editorProps:\n        question.type === QuestionTypes.programming\n          ? {\n              editorSessionId: '',\n              editorValue: this.props.editorValue!,\n              handleDeclarationNavigate: this.props.handleDeclarationNavigate,\n              handleEditorEval: this.props.handleEditorEval,\n              handleEditorValueChange: this.props.handleEditorValueChange,\n              breakpoints: this.props.breakpoints,\n              highlightedLines: this.props.highlightedLines,\n              newCursorPosition: this.props.newCursorPosition,\n              handleEditorUpdateBreakpoints: this.props.handleEditorUpdateBreakpoints,\n              handlePromptAutocomplete: this.props.handlePromptAutocomplete,\n              isEditorAutorun: false\n            }\n          : undefined,\n      editorHeight: this.props.editorHeight,\n      editorWidth: this.props.editorWidth,\n      handleEditorHeightChange: this.props.handleEditorHeightChange,\n      handleEditorWidthChange: this.props.handleEditorWidthChange,\n      handleSideContentHeightChange: this.props.handleSideContentHeightChange,\n      mcqProps: {\n        mcq: question as IMCQQuestion,\n        handleMCQSubmit: (i: number) => {}\n      },\n      sideContentHeight: this.props.sideContentHeight,\n      sideContentProps: this.sideContentProps(this.props, questionId),\n      replProps: {\n        handleBrowseHistoryDown: this.props.handleBrowseHistoryDown,\n        handleBrowseHistoryUp: this.props.handleBrowseHistoryUp,\n        handleReplEval: this.props.handleReplEval,\n        handleReplValueChange: this.props.handleReplValueChange,\n        output: this.props.output,\n        replValue: this.props.replValue\n      }\n    };\n    return (\n      <div className={classNames('WorkspaceParent', Classes.DARK)}>\n        <Workspace {...workspaceProps} />\n      </div>\n    );\n  }\n\n  /**\n   * Checks if there is a need to reset the workspace, then executes\n   * a dispatch (in the props) if needed.\n   *\n   * Assumes that 'props.grading' is defined\n   */\n  private checkWorkspaceReset(props: GradingWorkspaceProps) {\n    /* Reset grading if it has changed.*/\n    const submissionId = props.submissionId;\n    const questionId = props.questionId;\n\n    if (props.storedSubmissionId === submissionId && props.storedQuestionId === questionId) {\n      return;\n    }\n    const question = props.grading![questionId].question as Question;\n\n    let autogradingResults: AutogradingResult[] = [];\n    let editorValue: string = '';\n    let editorPrepend: string = '';\n    let editorPostpend: string = '';\n    let editorTestcases: Testcase[] = [];\n\n    if (question.type === QuestionTypes.programming) {\n      const questionData = question as AnsweredQuestion;\n      autogradingResults = questionData.autogradingResults;\n      editorPrepend = questionData.prepend;\n      editorPostpend = questionData.postpend;\n      editorTestcases = questionData.testcases;\n\n      editorValue = questionData.answer as string;\n      if (!editorValue) {\n        editorValue = questionData.solutionTemplate!;\n      }\n    }\n\n    props.handleEditorUpdateBreakpoints([]);\n    props.handleUpdateCurrentSubmissionId(submissionId, questionId);\n    props.handleResetWorkspace({\n      autogradingResults,\n      editorPrepend,\n      editorValue,\n      editorPostpend,\n      editorTestcases\n    });\n    props.handleClearContext(question.library);\n    props.handleUpdateHasUnsavedChanges(false);\n    if (editorValue) {\n      props.handleEditorValueChange(editorValue);\n    }\n  }\n\n  /** Pre-condition: Grading has been loaded */\n  private sideContentProps: (p: GradingWorkspaceProps, q: number) => SideContentProps = (\n    props: GradingWorkspaceProps,\n    questionId: number\n  ) => {\n    const tabs: SideContentTab[] = [\n      {\n        label: `Grading: Question ${questionId + 1}`,\n        iconName: IconNames.TICK,\n        /* Render an editor with the xp given to the current question. */\n        body: (\n          <GradingEditor\n            solution={props.grading![questionId].question.solution}\n            questionId={props.grading![questionId].question.id}\n            submissionId={props.submissionId}\n            initialGrade={props.grading![questionId].grade.grade}\n            gradeAdjustment={props.grading![questionId].grade.gradeAdjustment}\n            maxGrade={props.grading![questionId].question.maxGrade}\n            initialXp={props.grading![questionId].grade.xp}\n            xpAdjustment={props.grading![questionId].grade.xpAdjustment}\n            maxXp={props.grading![questionId].question.maxXp}\n            studentName={props.grading![questionId].student.name}\n            comments={props.grading![questionId].grade.comments!}\n            graderName={\n              props.grading![questionId].grade.grader\n                ? props.grading![questionId].grade.grader!.name\n                : undefined\n            }\n            gradedAt={\n              props.grading![questionId].grade.grader\n                ? props.grading![questionId].grade.gradedAt!\n                : undefined\n            }\n          />\n        ),\n        id: SideContentType.grading,\n        toSpawn: () => true\n      },\n      {\n        label: `Task ${questionId + 1}`,\n        iconName: IconNames.NINJA,\n        body: <Markdown content={props.grading![questionId].question.content} />,\n        id: SideContentType.questionOverview,\n        toSpawn: () => true\n      },\n      {\n        label: `Autograder`,\n        iconName: IconNames.AIRPLANE,\n        body: (\n          <SideContentAutograder\n            testcases={props.editorTestcases}\n            autogradingResults={props.autogradingResults}\n            handleTestcaseEval={this.props.handleTestcaseEval}\n          />\n        ),\n        id: SideContentType.autograder,\n        toSpawn: () => true\n      }\n    ];\n\n    const functionsAttached = props.grading![questionId].question.library.external.symbols;\n    if (functionsAttached.includes('get_matrix')) {\n      tabs.push({\n        label: `Tone Matrix`,\n        iconName: IconNames.GRID_VIEW,\n        body: <SideContentToneMatrix />,\n        id: SideContentType.toneMatrix,\n        toSpawn: () => true\n      });\n    }\n\n    const sideContentProps: SideContentProps = {\n      handleActiveTabChange: props.handleActiveTabChange,\n      tabs,\n      workspaceLocation: 'grading'\n    };\n\n    return sideContentProps;\n  };\n\n  /** Pre-condition: Grading has been loaded */\n  private controlBarProps: (q: number) => ControlBarProps = (questionId: number) => {\n    const listingPath = `/academy/grading`;\n    const gradingWorkspacePath = listingPath + `/${this.props.submissionId}`;\n    const questionProgress: [number, number] = [questionId + 1, this.props.grading!.length];\n\n    const onClickPrevious = () =>\n      history.push(gradingWorkspacePath + `/${(questionId - 1).toString()}`);\n    const onClickNext = () =>\n      history.push(gradingWorkspacePath + `/${(questionId + 1).toString()}`);\n    const onClickReturn = () => history.push(listingPath);\n\n    const clearButton = (\n      <ControlBarClearButton\n        handleReplOutputClear={this.props.handleReplOutputClear}\n        key=\"clear_repl\"\n      />\n    );\n\n    const evalButton = (\n      <ControlBarEvalButton\n        handleReplEval={this.props.handleReplEval}\n        isRunning={this.props.isRunning}\n        key=\"eval_repl\"\n      />\n    );\n\n    const nextButton = (\n      <ControlBarNextButton\n        onClickNext={onClickNext}\n        onClickReturn={onClickReturn}\n        questionProgress={questionProgress}\n        key=\"next_question\"\n      />\n    );\n\n    const previousButton = (\n      <ControlBarPreviousButton\n        onClick={onClickPrevious}\n        questionProgress={questionProgress}\n        key=\"previous_question\"\n      />\n    );\n\n    const questionView = (\n      <ControlBarQuestionViewButton questionProgress={questionProgress} key=\"question_view\" />\n    );\n\n    const runButton = (\n      <ControlBarRunButton handleEditorEval={this.props.handleEditorEval} key=\"run\" />\n    );\n\n    return {\n      editorButtons: [runButton],\n      flowButtons: [previousButton, questionView, nextButton],\n      replButtons: [evalButton, clearButton]\n    };\n  };\n}\n\nexport default GradingWorkspace;\n","import { connect, MapDispatchToProps, MapStateToProps } from 'react-redux';\nimport { bindActionCreators, Dispatch } from 'redux';\n\nimport {\n  beginDebuggerPause,\n  beginInterruptExecution,\n  debuggerReset,\n  debuggerResume\n} from '../../../../commons/application/actions/InterpreterActions';\nimport { fetchGrading } from '../../../../commons/application/actions/SessionActions';\nimport { OverallState } from '../../../../commons/application/ApplicationTypes';\nimport { Library } from '../../../../commons/assessment/AssessmentTypes';\nimport { Position } from '../../../../commons/editor/EditorTypes';\nimport { SideContentType } from '../../../../commons/sideContent/SideContentTypes';\nimport {\n  beginClearContext,\n  browseReplHistoryDown,\n  browseReplHistoryUp,\n  changeEditorHeight,\n  changeEditorWidth,\n  changeSideContentHeight,\n  chapterSelect,\n  clearReplOutput,\n  evalEditor,\n  evalRepl,\n  evalTestcase,\n  navigateToDeclaration,\n  promptAutocomplete,\n  resetWorkspace,\n  setEditorBreakpoint,\n  updateActiveTab,\n  updateCurrentSubmissionId,\n  updateEditorValue,\n  updateHasUnsavedChanges,\n  updateReplValue\n} from '../../../../commons/workspace/WorkspaceActions';\nimport { WorkspaceLocation, WorkspaceState } from '../../../../commons/workspace/WorkspaceTypes';\nimport GradingWorkspace, { DispatchProps, OwnProps, StateProps } from './GradingWorkspace';\n\nconst workspaceLocation: WorkspaceLocation = 'grading';\n\nconst mapStateToProps: MapStateToProps<StateProps, OwnProps, OverallState> = (state, props) => {\n  return {\n    autogradingResults: state.workspaces.grading.autogradingResults,\n    editorPrepend: state.workspaces.grading.editorPrepend,\n    editorValue: state.workspaces.grading.editorValue,\n    editorPostpend: state.workspaces.grading.editorPostpend,\n    editorTestcases: state.workspaces.grading.editorTestcases,\n    editorHeight: state.workspaces.grading.editorHeight,\n    editorWidth: state.workspaces.grading.editorWidth,\n    breakpoints: state.workspaces.grading.breakpoints,\n    highlightedLines: state.workspaces.grading.highlightedLines,\n    grading: state.session.gradings.get(props.submissionId),\n    hasUnsavedChanges: state.workspaces.grading.hasUnsavedChanges,\n    isRunning: state.workspaces.grading.isRunning,\n    isDebugging: state.workspaces.grading.isDebugging,\n    enableDebugging: state.workspaces.grading.enableDebugging,\n    newCursorPosition: state.workspaces.grading.newCursorPosition,\n    output: state.workspaces.grading.output,\n    replValue: state.workspaces.grading.replValue,\n    sideContentHeight: state.workspaces.grading.sideContentHeight,\n    storedSubmissionId: state.workspaces.grading.currentSubmission,\n    storedQuestionId: state.workspaces.grading.currentQuestion\n  };\n};\n\nconst mapDispatchToProps: MapDispatchToProps<DispatchProps, {}> = (dispatch: Dispatch) =>\n  bindActionCreators(\n    {\n      handleActiveTabChange: (activeTab: SideContentType) =>\n        updateActiveTab(activeTab, workspaceLocation),\n      handleBrowseHistoryDown: () => browseReplHistoryDown(workspaceLocation),\n      handleBrowseHistoryUp: () => browseReplHistoryUp(workspaceLocation),\n      handleChapterSelect: (chapter: any, changeEvent: any) =>\n        chapterSelect(chapter, 'default', workspaceLocation),\n      handleClearContext: (library: Library) => beginClearContext(library, workspaceLocation),\n      handleDeclarationNavigate: (cursorPosition: Position) =>\n        navigateToDeclaration(workspaceLocation, cursorPosition),\n      handleEditorEval: () => evalEditor(workspaceLocation),\n      handleEditorValueChange: (val: string) => updateEditorValue(val, workspaceLocation),\n      handleEditorHeightChange: (height: number) => changeEditorHeight(height, workspaceLocation),\n      handleEditorWidthChange: (widthChange: number) =>\n        changeEditorWidth(widthChange.toString(), workspaceLocation),\n      handleEditorUpdateBreakpoints: (breakpoints: string[]) =>\n        setEditorBreakpoint(breakpoints, workspaceLocation),\n      handleGradingFetch: fetchGrading,\n      handleInterruptEval: () => beginInterruptExecution(workspaceLocation),\n      handleReplEval: () => evalRepl(workspaceLocation),\n      handleReplOutputClear: () => clearReplOutput(workspaceLocation),\n      handleReplValueChange: (newValue: string) => updateReplValue(newValue, workspaceLocation),\n      handleResetWorkspace: (options: Partial<WorkspaceState>) =>\n        resetWorkspace(workspaceLocation, options),\n      handleSideContentHeightChange: (heightChange: number) =>\n        changeSideContentHeight(heightChange, workspaceLocation),\n      handleTestcaseEval: (testcaseId: number) => evalTestcase(workspaceLocation, testcaseId),\n      handleUpdateCurrentSubmissionId: updateCurrentSubmissionId,\n      handleUpdateHasUnsavedChanges: (unsavedChanges: boolean) =>\n        updateHasUnsavedChanges(workspaceLocation, unsavedChanges),\n      handleDebuggerPause: () => beginDebuggerPause(workspaceLocation),\n      handleDebuggerResume: () => debuggerResume(workspaceLocation),\n      handleDebuggerReset: () => debuggerReset(workspaceLocation),\n      handlePromptAutocomplete: (row: number, col: number, callback: any) =>\n        promptAutocomplete(workspaceLocation, row, col, callback)\n    },\n    dispatch\n  );\n\nconst GradingWorkspaceContainer = connect(mapStateToProps, mapDispatchToProps)(GradingWorkspace);\n\nexport default GradingWorkspaceContainer;\n","import { Position, Tooltip } from '@blueprintjs/core';\nimport * as React from 'react';\n\nimport { GradingCellProps } from '../../../../features/grading/GradingTypes';\n\n/**\n * Used to render the submission XP details in the table that displays GradingOverviews.\n * This is a fully fledged component (not SFC) by specification in\n * ag-grid.\n *\n * See {@link https://www.ag-grid.com/example-react-dynamic}\n */\nclass GradingXPCell extends React.Component<GradingCellProps, {}> {\n  /** Component to render in table - XP */\n  public render() {\n    if (this.props.data.maxXp || this.props.data.xpBonus) {\n      const tooltip = `Initial XP: ${this.props.data.initialXp}\n        (${this.props.data.xpBonus > 0 ? `+${this.props.data.xpBonus} bonus ` : ''}\n        ${this.props.data.xpAdjustment >= 0 ? '+' : ''}${this.props.data.xpAdjustment} adj.)`;\n      return (\n        <div>\n          <Tooltip content={tooltip} position={Position.LEFT} hoverOpenDelay={10} lazy={true}>\n            {`${this.props.data.currentXp + this.props.data.xpBonus} / ${this.props.data.maxXp}`}\n          </Tooltip>\n        </div>\n      );\n    } else {\n      return <div>No Exp</div>;\n    }\n  }\n}\n\nexport default GradingXPCell;\n","import 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-balham.css';\n\nimport {\n  Button,\n  Colors,\n  Divider,\n  FormGroup,\n  InputGroup,\n  Intent,\n  NonIdealState,\n  Spinner\n} from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport { ColDef, GridApi, GridReadyEvent } from 'ag-grid-community';\nimport { ValueFormatterParams } from 'ag-grid-community/dist/lib/entities/colDef';\nimport { AgGridReact } from 'ag-grid-react';\nimport * as React from 'react';\nimport { RouteComponentProps } from 'react-router';\nimport { GradingNavLinkProps, GradingWorkspaceParams } from 'src/features/grading/GradingTypes';\n\nimport { Role } from '../../../commons/application/ApplicationTypes';\nimport ContentDisplay from '../../../commons/ContentDisplay';\nimport NotificationBadge from '../../../commons/notificationBadge/NotificationBadgeContainer';\nimport { filterNotificationsBySubmission } from '../../../commons/notificationBadge/NotificationBadgeHelper';\nimport {\n  Notification,\n  NotificationFilterFunction\n} from '../../../commons/notificationBadge/NotificationBadgeTypes';\nimport { stringParamToInt } from '../../../commons/utils/ParamParseHelper';\nimport {\n  GradingOverview,\n  GradingOverviewWithNotifications\n} from '../../../features/grading/GradingTypes';\nimport GradingEditGradingCell from './subcomponents/GradingEditGradingCell';\nimport GradingGradeCell from './subcomponents/GradingGradeCell';\nimport GradingStatusCell from './subcomponents/GradingStatusCell';\nimport GradingUnsubmitCell from './subcomponents/GradingUnsubmitCell';\nimport { OwnProps as GradingWorkspaceOwnProps } from './subcomponents/GradingWorkspace';\nimport GradingWorkspaceContainer from './subcomponents/GradingWorkspaceContainer';\nimport GradingXPCell from './subcomponents/GradingXPCell';\n\ntype GradingProps = DispatchProps & StateProps & RouteComponentProps<GradingWorkspaceParams>;\n\nexport type DispatchProps = {\n  handleAcknowledgeNotifications: (withFilter?: NotificationFilterFunction) => void;\n  handleFetchGradingOverviews: (filterToGroup?: boolean) => void;\n  handleUnsubmitSubmission: (submissionId: number) => void;\n};\n\nexport type StateProps = {\n  group: string | null;\n  gradingOverviews?: GradingOverview[];\n  notifications: Notification[];\n  role?: Role;\n};\n\ntype State = {\n  filterValue: string;\n  groupFilterEnabled: boolean;\n  currPage: number;\n  maxPages: number;\n  rowCountString: string;\n  isBackDisabled: boolean;\n  isForwardDisabled: boolean;\n};\n\nclass Grading extends React.Component<GradingProps, State> {\n  private columnDefs: ColDef[];\n  private defaultColumnDefs: ColDef;\n  private gridApi?: GridApi;\n\n  public constructor(props: GradingProps) {\n    super(props);\n\n    this.columnDefs = [\n      {\n        headerName: '',\n        field: 'notifications',\n        cellRendererFramework: this.NotificationBadgeCell,\n        width: 30,\n        suppressMovable: true,\n        suppressMenu: true,\n        suppressSizeToFit: true,\n        resizable: false\n      },\n      { headerName: 'Assessment Name', field: 'assessmentName' },\n      { headerName: 'Category', field: 'assessmentCategory', maxWidth: 100 },\n      { headerName: 'Student Name', field: 'studentName' },\n      {\n        headerName: 'Group',\n        field: 'groupName',\n        maxWidth: 100\n      },\n      {\n        headerName: 'Status',\n        field: 'submissionStatus',\n        maxWidth: 100,\n        valueFormatter: (params: ValueFormatterParams) => {\n          const str = params.value as string;\n          return str.charAt(0).toUpperCase() + str.slice(1);\n        },\n        cellStyle: (params: GradingNavLinkProps) => {\n          if (params.data.submissionStatus === 'submitted') {\n            return { backgroundColor: Colors.GREEN5 };\n          }\n          return { backgroundColor: Colors.RED5 };\n        }\n      },\n      {\n        headerName: 'Grading',\n        field: 'gradingStatus',\n        cellRendererFramework: this.GradingStatus,\n        maxWidth: 110\n      },\n      {\n        headerName: 'Grade',\n        field: '',\n        cellRendererFramework: this.GradingMarks,\n        maxWidth: 100,\n        cellStyle: (params: GradingNavLinkProps) => {\n          if (params.data.currentGrade < params.data.maxGrade) {\n            return { backgroundColor: Colors.RED5 };\n          }\n          return {};\n        },\n        comparator: (valueA, valueB, nodeA, nodeB, isInverted) => {\n          if (nodeA && nodeB) {\n            return nodeA.data.currentGrade - nodeB.data.currentGrade;\n          }\n          return valueA - valueB;\n        }\n      },\n      {\n        headerName: 'XP',\n        field: '',\n        cellRendererFramework: this.GradingExp,\n        maxWidth: 100,\n        comparator: (valueA, valueB, nodeA, nodeB, isInverted) => {\n          if (nodeA && nodeB) {\n            return nodeA.data.currentXp - nodeB.data.currentXp;\n          }\n          return valueA - valueB;\n        }\n      },\n      {\n        headerName: 'Edit',\n        cellRendererFramework: GradingEditGradingCell,\n        cellRendererParams: {\n          handleAcknowledgeNotifications: this.props.handleAcknowledgeNotifications\n        },\n        width: 65,\n        filter: false,\n        resizable: false,\n        sortable: false,\n        suppressSizeToFit: true,\n        cellStyle: {\n          padding: 0\n        }\n      },\n      {\n        headerName: 'Unsubmit',\n        colId: 'Unsubmit',\n        width: 100,\n        field: '',\n        cellRendererFramework: GradingUnsubmitCell,\n        cellRendererParams: {\n          group: this.props.group,\n          handleUnsubmitSubmission: this.props.handleUnsubmitSubmission,\n          role: this.props.role\n        },\n        filter: false,\n        resizable: false,\n        sortable: false,\n        suppressSizeToFit: true,\n        cellStyle: {\n          padding: 0\n        }\n      },\n      { headerName: 'Question Count', field: 'questionCount', hide: true },\n      { headerName: 'Questions Graded', field: 'gradedCount', hide: true },\n      { headerName: 'Initial Grade', field: 'initialGrade', hide: true },\n      { headerName: 'Grade Adjustment', field: 'gradeAdjustment', hide: true },\n      { headerName: 'Initial XP', field: 'initialXp', hide: true },\n      { headerName: 'XP Adjustment', field: 'xpAdjustment', hide: true },\n      { headerName: 'Current Grade', field: 'currentGrade', hide: true },\n      { headerName: 'Max Grade', field: 'maxGrade', hide: true },\n      { headerName: 'Current XP (excl. bonus)', field: 'currentXp', hide: true },\n      { headerName: 'Max XP', field: 'maxXp', hide: true },\n      { headerName: 'Bonus XP', field: 'xpBonus', hide: true }\n    ];\n\n    this.defaultColumnDefs = {\n      filter: true,\n      resizable: true,\n      sortable: true\n    };\n\n    this.state = {\n      filterValue: '',\n      groupFilterEnabled: false,\n      currPage: 1,\n      maxPages: 1,\n      rowCountString: '(none)',\n      isBackDisabled: true,\n      isForwardDisabled: true\n    };\n  }\n\n  public render() {\n    const submissionId: number | null = stringParamToInt(this.props.match.params.submissionId);\n    // default questionId is 0 (the first question)\n    const questionId: number = stringParamToInt(this.props.match.params.questionId) || 0;\n\n    /* Create a workspace to grade a submission. */\n    if (submissionId !== null) {\n      const props: GradingWorkspaceOwnProps = {\n        submissionId,\n        questionId\n      };\n      return <GradingWorkspaceContainer {...props} />;\n    }\n\n    /* Display either a loading screen or a table with overviews. */\n    const loadingDisplay = (\n      <NonIdealState\n        className=\"Grading\"\n        description=\"Fetching submissions...\"\n        icon={<Spinner size={Spinner.SIZE_LARGE} />}\n      />\n    );\n    const data = this.sortSubmissionsByNotifications();\n\n    const grid = (\n      <div className=\"GradingContainer\">\n        <div>\n          <FormGroup label=\"Filter:\" labelFor=\"text-input\" inline={true}>\n            <InputGroup\n              id=\"filterBar\"\n              large={false}\n              leftIcon=\"filter\"\n              placeholder=\"Enter any text (e.g. mission)\"\n              value={this.state.filterValue}\n              onChange={this.handleFilterChange}\n              onKeyPress={this.handleFilterKeypress}\n              onBlur={this.handleApplyFilter}\n            />\n          </FormGroup>\n\n          <div className=\"ag-grid-controls\">\n            <div className=\"left-controls\">\n              <Button\n                active={this.state.groupFilterEnabled}\n                icon={IconNames.GIT_REPO}\n                intent={this.state.groupFilterEnabled ? Intent.PRIMARY : Intent.NONE}\n                onClick={this.handleGroupsFilter}\n              >\n                <div className=\"ag-grid-button-text hidden-xs\">Show all groups</div>\n              </Button>\n            </div>\n            <div className=\"centre-controls\">\n              <Button\n                icon={IconNames.CHEVRON_BACKWARD}\n                onClick={this.changePaginationView('first')}\n                minimal={true}\n                disabled={this.state.isBackDisabled}\n              />\n              <Button\n                icon={IconNames.CHEVRON_LEFT}\n                onClick={this.changePaginationView('prev')}\n                minimal={true}\n                disabled={this.state.isBackDisabled}\n              />\n              <Button className=\"pagination-details hidden-xs\" disabled={true} minimal={true}>\n                <div>{`Page ${this.state.currPage} of ${this.state.maxPages}`}</div>\n                <div>{this.state.rowCountString}</div>\n              </Button>\n              <Button\n                icon={IconNames.CHEVRON_RIGHT}\n                onClick={this.changePaginationView('next')}\n                minimal={true}\n                disabled={this.state.isForwardDisabled}\n              />\n              <Button\n                icon={IconNames.CHEVRON_FORWARD}\n                onClick={this.changePaginationView('last')}\n                minimal={true}\n                disabled={this.state.isForwardDisabled}\n              />\n            </div>\n            <div className=\"right-controls\">\n              <Button icon={IconNames.EXPORT} onClick={this.exportCSV}>\n                <div className=\"ag-grid-button-text hidden-xs\">Export to CSV</div>\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        <Divider />\n\n        <div className=\"Grading\">\n          <div className=\"ag-grid-parent ag-theme-balham\">\n            <AgGridReact\n              domLayout={'autoHeight'}\n              columnDefs={this.columnDefs}\n              defaultColDef={this.defaultColumnDefs}\n              onGridReady={this.onGridReady}\n              onGridSizeChanged={this.resizeGrid}\n              onPaginationChanged={this.updatePaginationState}\n              rowData={data}\n              rowHeight={30}\n              pagination={true}\n              paginationPageSize={25}\n              suppressMovableColumns={true}\n              suppressPaginationPanel={true}\n            />\n          </div>\n        </div>\n      </div>\n    );\n    return (\n      <div>\n        <ContentDisplay\n          loadContentDispatch={this.props.handleFetchGradingOverviews}\n          display={this.props.gradingOverviews === undefined ? loadingDisplay : grid}\n          fullWidth={false}\n        />\n      </div>\n    );\n  }\n\n  public componentDidUpdate(prevProps: GradingProps, prevState: State) {\n    // Only update grid data when a notification is acknowledged\n    if (this.gridApi && this.props.notifications.length !== prevProps.notifications.length) {\n      // Pass the new reconstructed row data to the grid after fetching the updated notifs\n      this.gridApi.setRowData(this.sortSubmissionsByNotifications());\n    }\n  }\n\n  /** Component to render in table - grading status */\n  private GradingStatus = (props: GradingNavLinkProps) => {\n    return <GradingStatusCell data={props.data} />;\n  };\n\n  /** Component to render in table - marks */\n  private GradingMarks = (props: GradingNavLinkProps) => {\n    return <GradingGradeCell data={props.data} />;\n  };\n\n  private NotificationBadgeCell = (props: GradingNavLinkProps) => {\n    return (\n      <NotificationBadge\n        notificationFilter={filterNotificationsBySubmission(props.data.submissionId)}\n      />\n    );\n  };\n\n  /** Component to render in table - XP */\n  private GradingExp = (props: GradingNavLinkProps) => {\n    return <GradingXPCell data={props.data} />;\n  };\n\n  // Forcibly resizes columns to fit the width of the datagrid - prevents datagrid\n  // from needing to render a horizontal scrollbar when columns overflow grid width\n  private resizeGrid = () => {\n    if (this.gridApi) {\n      this.gridApi.sizeColumnsToFit();\n    }\n  };\n\n  private updatePaginationState = () => {\n    if (this.gridApi) {\n      const newTotalPages = this.gridApi.paginationGetTotalPages();\n      const newCurrPage = newTotalPages === 0 ? 0 : this.gridApi.paginationGetCurrentPage() + 1;\n      this.setState({\n        currPage: newCurrPage,\n        maxPages: newTotalPages,\n        rowCountString: this.formatRowCountString(\n          25,\n          newCurrPage,\n          newTotalPages,\n          this.gridApi.paginationGetRowCount()\n        ),\n        isBackDisabled: newTotalPages === 0 || newCurrPage === 1,\n        isForwardDisabled: newTotalPages === 0 || newCurrPage === newTotalPages\n      });\n    }\n  };\n\n  private formatRowCountString = (\n    pageSize: number,\n    currPage: number,\n    maxPages: number,\n    totalRows: number\n  ) => {\n    return maxPages === 0\n      ? '(none)'\n      : currPage !== maxPages\n      ? `(#${pageSize * currPage - 24} - #${pageSize * currPage})`\n      : `(#${pageSize * currPage - 24} - #${totalRows})`;\n  };\n\n  private handleFilterChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const changeVal = event.target.value;\n    this.setState({ filterValue: changeVal });\n  };\n\n  private handleFilterKeypress = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === 'Enter') {\n      this.handleApplyFilter();\n    }\n  };\n\n  private handleApplyFilter = () => {\n    if (this.gridApi) {\n      this.gridApi.setQuickFilter(this.state.filterValue);\n    }\n  };\n\n  private handleGroupsFilter = () => {\n    if (this.gridApi) {\n      this.setState({ groupFilterEnabled: !this.state.groupFilterEnabled });\n      this.props.handleFetchGradingOverviews(this.state.groupFilterEnabled);\n    }\n  };\n\n  private onGridReady = (params: GridReadyEvent) => {\n    this.gridApi = params.api;\n    this.gridApi.sizeColumnsToFit();\n    this.updatePaginationState();\n  };\n\n  private exportCSV = () => {\n    if (this.gridApi) {\n      this.gridApi.exportDataAsCsv({\n        fileName: `SA submissions (${new Date().toISOString()}).csv`,\n        // Explicitly declare exported columns to avoid exporting trash columns\n        columnKeys: [\n          'assessmentName',\n          'assessmentCategory',\n          'studentName',\n          'groupName',\n          'submissionStatus',\n          'gradingStatus',\n          'questionCount',\n          'gradedCount',\n          'initialGrade',\n          'gradeAdjustment',\n          'currentGrade',\n          'maxGrade',\n          'initialXp',\n          'xpAdjustment',\n          'currentXp',\n          'maxXp',\n          'xpBonus'\n        ]\n      });\n    }\n  };\n\n  private changePaginationView = (type: string) => {\n    return () => {\n      if (this.gridApi) {\n        switch (type) {\n          case 'first':\n            return this.gridApi.paginationGoToFirstPage();\n          case 'prev':\n            return this.gridApi.paginationGoToPreviousPage();\n          case 'next':\n            return this.gridApi.paginationGoToNextPage();\n          case 'last':\n            return this.gridApi.paginationGoToLastPage();\n          default:\n        }\n      }\n    };\n  };\n\n  /** Constructs data nodes for the datagrid by joining grading overviews with their\n   *  associated notifications.\n   *  @return Returns an array of data nodes, prioritising grading overviews with\n   *  notifications first.\n   */\n  private sortSubmissionsByNotifications = () => {\n    if (!this.props.gradingOverviews) {\n      return [];\n    }\n\n    return (this.props.gradingOverviews as GradingOverviewWithNotifications[])\n      .map(overview => ({\n        ...overview,\n        notifications: filterNotificationsBySubmission(overview.submissionId)(\n          this.props.notifications\n        )\n      }))\n      .sort((subX, subY) => subY.notifications.length - subX.notifications.length);\n  };\n}\n\nexport default Grading;\n","import { connect, MapDispatchToProps, MapStateToProps } from 'react-redux';\nimport { bindActionCreators, Dispatch } from 'redux';\n\nimport {\n  acknowledgeNotifications,\n  fetchGradingOverviews,\n  unsubmitSubmission\n} from '../../../commons/application/actions/SessionActions';\nimport { OverallState } from '../../../commons/application/ApplicationTypes';\nimport Grading, { DispatchProps, StateProps } from './Grading';\n\nconst mapStateToProps: MapStateToProps<StateProps, {}, OverallState> = state => ({\n  gradingOverviews: state.session.gradingOverviews,\n  group: state.session.group,\n  notifications: state.session.notifications,\n  role: state.session.role\n});\n\nconst mapDispatchToProps: MapDispatchToProps<DispatchProps, {}> = (dispatch: Dispatch) =>\n  bindActionCreators(\n    {\n      handleAcknowledgeNotifications: acknowledgeNotifications,\n      handleFetchGradingOverviews: fetchGradingOverviews,\n      handleUnsubmitSubmission: unsubmitSubmission\n    },\n    dispatch\n  );\n\nconst GradingContainer = connect(mapStateToProps, mapDispatchToProps)(Grading);\n\nexport default GradingContainer;\n","import { Classes, Dialog } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport * as React from 'react';\n\nimport { AssessmentOverview } from '../../../../commons/assessment/AssessmentTypes';\nimport controlButton from '../../../../commons/ControlButton';\n\ninterface IDeleteCellProps {\n  data: AssessmentOverview;\n  handleDeleteAssessment: (id: number) => void;\n}\n\ninterface IDeleteCellState {\n  dialogOpen: boolean;\n}\n\nclass DeleteCell extends React.Component<IDeleteCellProps, IDeleteCellState> {\n  public constructor(props: IDeleteCellProps) {\n    super(props);\n    this.state = {\n      dialogOpen: false\n    };\n  }\n\n  public render() {\n    return (\n      <div>\n        {controlButton('', IconNames.TRASH, this.handleOpenDialog)}\n        <Dialog\n          icon=\"info-sign\"\n          isOpen={this.state.dialogOpen}\n          onClose={this.handleCloseDialog}\n          title=\"Delete Assessment\"\n          canOutsideClickClose={true}\n        >\n          <div className={Classes.DIALOG_BODY}>\n            {<p>Are you sure that you want to delete this Assessment?</p>}\n            {<p>Students' answers and submissions will be deleted as well.</p>}\n          </div>\n          <div className={Classes.DIALOG_FOOTER}>\n            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n              {controlButton('Confirm Delete', IconNames.TRASH, this.handleDelete)}\n              {controlButton('Cancel', IconNames.CROSS, this.handleCloseDialog)}\n            </div>\n          </div>\n        </Dialog>\n      </div>\n    );\n  }\n\n  private handleCloseDialog = () => this.setState({ dialogOpen: false });\n  private handleOpenDialog = () => this.setState({ dialogOpen: true });\n  private handleDelete = () => {\n    const { data } = this.props;\n    this.props.handleDeleteAssessment(data.id);\n    this.handleCloseDialog();\n  };\n}\n\nexport default DeleteCell;\n","import { Card, Elevation, Switch } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport { FlexDirectionProperty } from 'csstype';\nimport * as React from 'react';\nimport { useDropzone } from 'react-dropzone';\n\nimport controlButton from '../../../../commons/ControlButton';\n\ninterface IDispatchProps {\n  handleUploadAssessment: (file: File) => void;\n  toggleForceUpdate: () => void;\n  toggleDisplayConfirmation: () => void;\n}\n\ninterface IStateProps {\n  forceUpdate: boolean;\n  displayConfirmation: boolean;\n}\n\ninterface IDropzoneProps extends IDispatchProps, IStateProps {}\n\n// Dropzone styling\nconst dropZoneStyle = {\n  baseStyle: {\n    flex: 1,\n    display: 'flex',\n    height: '30vh',\n    flexDirection: 'column' as FlexDirectionProperty,\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: '20px',\n    borderWidth: 2,\n    borderRadius: 2,\n    borderColor: '#eeeeee',\n    borderStyle: 'dashed',\n    backgroundColor: '#fafafa',\n    color: '#bdbdbd',\n    outline: 'none',\n    transition: 'border .24s ease-in-out'\n  },\n\n  activeStyle: {\n    borderColor: '#2196f3'\n  },\n\n  acceptStyle: {\n    borderColor: '#00e676'\n  },\n\n  rejectStyle: {\n    borderColor: '#ff1744'\n  }\n};\n\nconst MaterialDropzone: React.FC<IDropzoneProps> = props => {\n  const [file, setFile] = React.useState<File>();\n  const [title, setTitle] = React.useState<string>();\n  const handleConfirmUpload = () => {\n    props.handleUploadAssessment(file!);\n    setFile(undefined);\n  };\n  const handleCancelUpload = () => setFile(undefined);\n\n  const {\n    getRootProps,\n    getInputProps,\n    isDragActive,\n    isDragAccept,\n    isDragReject,\n    isFocused\n  } = useDropzone({\n    onDrop: acceptedFiles => {\n      setFile(acceptedFiles[0]);\n      setTitle(acceptedFiles[0].name);\n    }\n  });\n  const style = React.useMemo(\n    () => ({\n      ...dropZoneStyle.baseStyle,\n      ...(isDragActive ? dropZoneStyle.activeStyle : {}),\n      ...(isDragAccept ? dropZoneStyle.acceptStyle : {}),\n      ...(isDragReject ? dropZoneStyle.rejectStyle : {}),\n      ...(isFocused ? dropZoneStyle.activeStyle : {})\n    }),\n    [isDragActive, isDragAccept, isDragReject, isFocused]\n  );\n\n  const handleToggleOnChange = () => {\n    if (!props.forceUpdate) {\n      props.toggleDisplayConfirmation();\n      props.toggleForceUpdate();\n    } else {\n      props.toggleForceUpdate();\n    }\n  };\n\n  const toggleButton = () => {\n    return (\n      <div className=\"toggle-button-wrapper\">\n        <Switch checked={props.forceUpdate} onChange={handleToggleOnChange} />\n      </div>\n    );\n  };\n\n  const handleConfirmForceUpdate = () => {\n    props.toggleDisplayConfirmation();\n  };\n\n  const handleCancelForceUpdate = () => {\n    props.toggleDisplayConfirmation();\n    props.toggleForceUpdate();\n  };\n\n  const confirmationMessage = () => {\n    return (\n      <div>\n        <p>Are you sure that you want to force update the assessment?</p>\n        {controlButton('Yes', IconNames.CONFIRM, handleConfirmForceUpdate)}\n        {controlButton('No', IconNames.CROSS, handleCancelForceUpdate)}\n      </div>\n    );\n  };\n\n  return (\n    <>\n      <Card className=\"contentdisplay-content\" elevation={Elevation.THREE}>\n        <div {...getRootProps({ style })}>\n          <input {...getInputProps()} />\n          <p>Drag 'n' drop some files here, or click to select files</p>\n        </div>\n      </Card>\n      {file && (\n        <Card>\n          <div>{title}</div>\n          <br />\n          {!props.displayConfirmation &&\n            controlButton('Confirm Upload', IconNames.UPLOAD, handleConfirmUpload)}\n          {!props.displayConfirmation &&\n            controlButton('Cancel Upload', IconNames.DELETE, handleCancelUpload)}\n          <br />\n          <br />\n          {!props.displayConfirmation && <p>Force update opened assessment</p>}\n          {props.displayConfirmation && confirmationMessage()}\n          {!props.displayConfirmation && toggleButton()}\n        </Card>\n      )}\n    </>\n  );\n};\n\nexport default MaterialDropzone;\n","import { Classes, Dialog } from '@blueprintjs/core';\nimport { DateInput } from '@blueprintjs/datetime';\nimport { IconNames } from '@blueprintjs/icons';\nimport * as React from 'react';\n\nimport controlButton from '../../../../commons/ControlButton';\nimport { IGroundControlAssessmentOverview } from '../../../../features/groundControl/GroundControlTypes';\n\ninterface IEditCellProps {\n  data: IGroundControlAssessmentOverview;\n  handleAssessmentChangeDate: (id: number, openAt: string, closeAt: string) => void;\n  forOpenDate: boolean;\n}\n\ninterface IEditCellState extends IEditCellDateState {\n  dialogOpen: boolean;\n}\n\ninterface IEditCellDateState {\n  openAt: Date;\n  closeAt: Date;\n}\n\nclass EditCell extends React.Component<IEditCellProps, IEditCellState> {\n  private maxDate = new Date(new Date(Date.now()).setFullYear(2100));\n\n  public constructor(props: IEditCellProps) {\n    super(props);\n    this.state = {\n      dialogOpen: false,\n      openAt: new Date(Date.parse(this.props.data.openAt)),\n      closeAt: new Date(Date.parse(this.props.data.closeAt))\n    };\n  }\n\n  public render() {\n    const fieldName = this.props.forOpenDate ? 'Opening' : 'Closing';\n    return (\n      <div>\n        {this.props.forOpenDate ? this.props.data.prettyOpenAt : this.props.data.prettyCloseAt}\n        {controlButton('', IconNames.EDIT, this.handleOpenDialog)}\n        <Dialog\n          icon=\"info-sign\"\n          isOpen={this.state.dialogOpen}\n          onClose={this.handleCloseDialog}\n          title=\"Update Assessment\"\n          canOutsideClickClose={true}\n        >\n          <div className={Classes.DIALOG_BODY}>\n            {fieldName} Date: {this.dateInput()}\n          </div>\n          <div className={Classes.DIALOG_FOOTER}>\n            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n              {controlButton('Confirm Update', IconNames.TICK, this.handleUpdate)}\n              {controlButton('Cancel', IconNames.CROSS, this.handleCloseDialog)}\n            </div>\n          </div>\n        </Dialog>\n      </div>\n    );\n  }\n\n  private dateInput = () => {\n    return (\n      <DateInput\n        formatDate={this.formatDate}\n        onChange={this.handleDateChange}\n        parseDate={this.parseDate}\n        value={this.props.forOpenDate ? this.state.openAt : this.state.closeAt}\n        timePrecision={'minute'}\n        fill={true}\n        maxDate={this.maxDate}\n        closeOnSelection={false}\n      />\n    );\n  };\n\n  private parseDate = (str: string) => new Date(str);\n\n  private formatDate = (date: Date) => date.toLocaleString();\n\n  private handleDateChange = (selectedDate: Date) => {\n    if (this.props.forOpenDate) {\n      this.setState({ openAt: selectedDate });\n    } else {\n      this.setState({ closeAt: selectedDate });\n    }\n  };\n\n  private handleCloseDialog = () => this.setState({ dialogOpen: false });\n  private handleOpenDialog = () => this.setState({ dialogOpen: true });\n  private handleUpdate = () => {\n    const { data } = this.props;\n    this.props.handleAssessmentChangeDate(\n      data.id,\n      this.state.openAt.toISOString(),\n      this.state.closeAt.toISOString()\n    );\n    this.handleCloseDialog();\n  };\n}\n\nexport default EditCell;\n","import { Classes, Dialog, Switch } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport * as React from 'react';\n\nimport { AssessmentOverview } from '../../../../commons/assessment/AssessmentTypes';\nimport controlButton from '../../../../commons/ControlButton';\n\ninterface IPublishCellProps {\n  data: AssessmentOverview;\n  handlePublishAssessment: (togglePublishTo: boolean, id: number) => void;\n}\n\ninterface IPublishCellState {\n  dialogOpen: boolean;\n  isPublished: boolean;\n}\n\nclass PublishCell extends React.Component<IPublishCellProps, IPublishCellState> {\n  public constructor(props: IPublishCellProps) {\n    super(props);\n    this.state = {\n      dialogOpen: false,\n      isPublished: this.props.data.isPublished === undefined ? false : this.props.data.isPublished\n    };\n  }\n\n  public render() {\n    const text = this.props.data.isPublished ? 'Unpublish' : 'Publish';\n    const lowerCaseText = text.toLowerCase();\n    const toggleButton = () => {\n      return (\n        <div className=\"toggle-button-wrapper\">\n          <Switch checked={this.state.isPublished} onChange={this.handleOpenDialog} />\n        </div>\n      );\n    };\n    return (\n      <div>\n        {toggleButton()}\n        <Dialog\n          icon=\"info-sign\"\n          isOpen={this.state.dialogOpen}\n          onClose={this.handleCloseDialog}\n          title={text + ' Assessment'}\n          canOutsideClickClose={true}\n        >\n          <div className={Classes.DIALOG_BODY}>\n            {<p>Are you sure that you want to {lowerCaseText} this Assessment?</p>}\n          </div>\n          <div className={Classes.DIALOG_FOOTER}>\n            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n              {controlButton('Confirm ' + text, IconNames.CONFIRM, this.handleDelete)}\n              {controlButton('Cancel', IconNames.CROSS, this.handleCloseDialog)}\n            </div>\n          </div>\n        </Dialog>\n      </div>\n    );\n  }\n\n  private handleCloseDialog = () => this.setState({ dialogOpen: false });\n  private handleOpenDialog = () => this.setState({ dialogOpen: true });\n  private handleDelete = () => {\n    const { data } = this.props;\n    this.props.handlePublishAssessment(!data.isPublished, data.id);\n    this.handleCloseDialog();\n  };\n}\n\nexport default PublishCell;\n","import 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-balham.css';\n\nimport { ColDef, GridApi, GridReadyEvent } from 'ag-grid-community';\nimport { AgGridReact } from 'ag-grid-react';\nimport { sortBy } from 'lodash';\nimport * as React from 'react';\n\nimport { AssessmentOverview } from '../../../commons/assessment/AssessmentTypes';\nimport ContentDisplay from '../../../commons/ContentDisplay';\nimport { getPrettyDate } from '../../../commons/utils/DateHelper';\nimport { IGroundControlAssessmentOverview } from '../../../features/groundControl/GroundControlTypes';\nimport DeleteCell from './subcomponents/GroundControlDeleteCell';\nimport Dropzone from './subcomponents/GroundControlDropzone';\nimport EditCell from './subcomponents/GroundControlEditCell';\nimport PublishCell from './subcomponents/GroundControlPublishCell';\n\nexport type GroundControlProps = DispatchProps & StateProps;\n\nexport type DispatchProps = {\n  handleAssessmentOverviewFetch: () => void;\n  handleDeleteAssessment: (id: number) => void;\n  handleUploadAssessment: (file: File, forceUpdate: boolean) => void;\n  handlePublishAssessment: (togglePublishTo: boolean, id: number) => void;\n  handleAssessmentChangeDate: (id: number, openAt: string, closeAt: string) => void;\n};\n\nexport type StateProps = {\n  assessmentOverviews: AssessmentOverview[];\n};\n\ntype State = {\n  forceUpdate: boolean;\n  displayConfirmation: boolean;\n};\n\nclass GroundControl extends React.Component<GroundControlProps, State> {\n  private columnDefs: ColDef[];\n  private defaultColumnDefs: ColDef;\n  private gridApi?: GridApi;\n\n  public constructor(props: GroundControlProps) {\n    super(props);\n\n    this.state = {\n      forceUpdate: false,\n      displayConfirmation: false\n    };\n    this.columnDefs = [\n      {\n        headerName: 'Title',\n        field: 'title'\n      },\n      {\n        headerName: 'Category',\n        field: 'category',\n        width: 100\n      },\n      {\n        headerName: 'Open Date',\n        field: '',\n        cellRendererFramework: EditCell,\n        cellRendererParams: {\n          handleAssessmentChangeDate: this.props.handleAssessmentChangeDate,\n          forOpenDate: true\n        },\n        width: 150,\n        sortable: false,\n        suppressMovable: true,\n        suppressMenu: true,\n        cellStyle: {\n          padding: 0\n        }\n      },\n      {\n        headerName: 'Close Date',\n        field: '',\n        cellRendererFramework: EditCell,\n        cellRendererParams: {\n          handleAssessmentChangeDate: this.props.handleAssessmentChangeDate,\n          forOpenDate: false\n        },\n        width: 150,\n        sortable: false,\n        suppressMovable: true,\n        suppressMenu: true,\n        cellStyle: {\n          padding: 0\n        }\n      },\n      {\n        headerName: 'Publish',\n        field: '',\n        cellRendererFramework: PublishCell,\n        cellRendererParams: {\n          handlePublishAssessment: this.props.handlePublishAssessment\n        },\n        width: 100,\n        sortable: false,\n        suppressMovable: true,\n        suppressMenu: true,\n        cellStyle: {\n          padding: 0\n        },\n        hide: !this.props.handlePublishAssessment\n      },\n      {\n        headerName: 'Delete',\n        field: '',\n        cellRendererFramework: DeleteCell,\n        cellRendererParams: {\n          handleDeleteAssessment: this.props.handleDeleteAssessment\n        },\n        width: 100,\n        sortable: false,\n        suppressMovable: true,\n        suppressMenu: true,\n        cellStyle: {\n          padding: 0\n        },\n        hide: !this.props.handleDeleteAssessment\n      }\n    ];\n\n    this.defaultColumnDefs = {\n      filter: true,\n      resizable: true,\n      sortable: true\n    };\n  }\n\n  public componentDidUpdate(prevProps: GroundControlProps) {\n    if (\n      this.gridApi &&\n      this.props.assessmentOverviews.length !== prevProps.assessmentOverviews.length\n    ) {\n      this.gridApi.setRowData(this.sortByCategoryAndDate());\n    }\n  }\n\n  public render() {\n    const data = this.sortByCategoryAndDate();\n    const Grid = () => (\n      <div className=\"GradingContainer\">\n        <div className=\"Grading ag-grid-parent ag-theme-balham\">\n          <AgGridReact\n            domLayout={'autoHeight'}\n            columnDefs={this.columnDefs}\n            defaultColDef={this.defaultColumnDefs}\n            onGridReady={this.onGridReady}\n            onGridSizeChanged={this.resizeGrid}\n            rowData={data}\n            rowHeight={30}\n            pagination={true}\n            paginationPageSize={25}\n            suppressMovableColumns={true}\n            suppressPaginationPanel={true}\n          />\n        </div>\n      </div>\n    );\n\n    const display = (\n      <div className=\"GroundControl\">\n        <Dropzone\n          handleUploadAssessment={this.handleUploadAssessment}\n          toggleForceUpdate={this.toggleForceUpdate}\n          toggleDisplayConfirmation={this.toggleDisplayConfirmation}\n          forceUpdate={this.state.forceUpdate}\n          displayConfirmation={this.state.displayConfirmation}\n        />\n        <Grid />\n      </div>\n    );\n\n    return (\n      <div>\n        <ContentDisplay\n          display={display}\n          loadContentDispatch={this.props.handleAssessmentOverviewFetch}\n        />\n      </div>\n    );\n  }\n\n  private sortByCategoryAndDate = () => {\n    if (!this.props.assessmentOverviews) {\n      return [];\n    }\n\n    const overview: IGroundControlAssessmentOverview[] = this.props.assessmentOverviews\n      .slice()\n      .map(assessmentOverview => {\n        const clone: IGroundControlAssessmentOverview = JSON.parse(\n          JSON.stringify(assessmentOverview)\n        );\n        clone.prettyCloseAt = getPrettyDate(clone.closeAt);\n        clone.prettyOpenAt = getPrettyDate(clone.openAt);\n        clone.formattedOpenAt = new Date(Date.parse(clone.openAt));\n        clone.formattedCloseAt = new Date(Date.parse(clone.closeAt));\n        return clone;\n      });\n    return sortBy(overview, ['category', 'formattedOpenAt', 'formattedCloseAt']);\n  };\n\n  private onGridReady = (params: GridReadyEvent) => {\n    this.gridApi = params.api;\n    this.gridApi.sizeColumnsToFit();\n  };\n\n  private resizeGrid = () => {\n    if (this.gridApi) {\n      this.gridApi.sizeColumnsToFit();\n    }\n  };\n\n  private handleUploadAssessment = (file: File) => {\n    this.props.handleUploadAssessment(file, this.state.forceUpdate);\n    this.setState({ forceUpdate: false });\n  };\n\n  private toggleForceUpdate = () => {\n    this.setState({ forceUpdate: !this.state.forceUpdate });\n  };\n\n  private toggleDisplayConfirmation = () => {\n    this.setState({ displayConfirmation: !this.state.displayConfirmation });\n  };\n}\n\nexport default GroundControl;\n","import { connect, MapDispatchToProps, MapStateToProps } from 'react-redux';\nimport { bindActionCreators, Dispatch } from 'redux';\n\nimport { fetchAssessmentOverviews } from '../../../commons/application/actions/SessionActions';\nimport { OverallState } from '../../../commons/application/ApplicationTypes';\nimport {\n  changeDateAssessment,\n  deleteAssessment,\n  publishAssessment,\n  uploadAssessment\n} from '../../../features/groundControl/GroundControlActions';\nimport GroundControl, { DispatchProps, StateProps } from './GroundControl';\n\nconst mapStateToProps: MapStateToProps<StateProps, {}, OverallState> = state => ({\n  assessmentOverviews: state.session.assessmentOverviews ? state.session.assessmentOverviews : []\n});\n\nconst mapDispatchToProps: MapDispatchToProps<DispatchProps, {}> = (dispatch: Dispatch) =>\n  bindActionCreators(\n    {\n      handleAssessmentChangeDate: changeDateAssessment,\n      handleAssessmentOverviewFetch: fetchAssessmentOverviews,\n      handleDeleteAssessment: deleteAssessment,\n      handleUploadAssessment: uploadAssessment,\n      handlePublishAssessment: publishAssessment\n    },\n    dispatch\n  );\n\nconst GroundControlContainer = connect(mapStateToProps, mapDispatchToProps)(GroundControl);\n\nexport default GroundControlContainer;\n","import { Switch } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport * as React from 'react';\n\nimport controlButton from '../ControlButton';\nimport { ControlBarRunButton } from './ControlBarRunButton';\n\ntype ControlBarAutorunButtonProps = DispatchProps & StateProps;\n\ntype DispatchProps = {\n  handleDebuggerPause: () => void;\n  handleDebuggerReset: () => void;\n  handleDebuggerResume: () => void;\n  handleEditorEval: () => void;\n  handleInterruptEval: () => void;\n  handleToggleEditorAutorun?: () => void;\n};\n\ntype StateProps = {\n  isDebugging: boolean;\n  isEditorAutorun?: boolean;\n  isRunning: boolean;\n  key: string;\n};\n\nexport function ControlBarAutorunButtons(props: ControlBarAutorunButtonProps) {\n  const toggleAutorunButton = (\n    <div className=\"Switch\">\n      <Switch label=\"\" checked={props.isEditorAutorun} onChange={props.handleToggleEditorAutorun} />\n    </div>\n  );\n\n  const autoRunButton = controlButton('Auto', IconNames.AUTOMATIC_UPDATES);\n  const stopButton = controlButton('Stop', IconNames.STOP, props.handleInterruptEval);\n  const debuggerResetButton = controlButton(\n    'Stop Debugger',\n    IconNames.STOP,\n    props.handleDebuggerReset\n  );\n  const pauseButton = controlButton('Pause', IconNames.STOP, props.handleDebuggerPause);\n  const resumeButton = controlButton('Resume', IconNames.CHEVRON_RIGHT, props.handleDebuggerResume);\n\n  const runButtonGrouping = () => {\n    if (props.isEditorAutorun) {\n      return autoRunButton;\n    }\n    if (props.isRunning) {\n      return stopButton;\n    }\n    if (props.isDebugging) {\n      return null;\n    }\n    return <ControlBarRunButton handleEditorEval={props.handleEditorEval} key=\"run\" />;\n  };\n\n  const pauseButtonGrouping = () => {\n    if (props.isRunning && !props.isDebugging) {\n      return pauseButton;\n    }\n    if (!props.isRunning && props.isDebugging) {\n      return resumeButton;\n    }\n    return null;\n  };\n\n  return (\n    <>\n      {toggleAutorunButton}\n      {runButtonGrouping()}\n      {pauseButtonGrouping()}\n      {props.isDebugging ? debuggerResetButton : null}\n    </>\n  );\n}\n","import { Button, Classes, MenuItem } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport { ItemRenderer, Select } from '@blueprintjs/select';\nimport * as React from 'react';\n\nimport {\n  External,\n  externalLibraries,\n  ExternalLibraryName\n} from '../application/types/ExternalTypes';\n\ntype ControlBarExternalLibrarySelectProps = DispatchProps & StateProps;\n\ntype DispatchProps = {\n  handleExternalSelect?: (i: External, e?: React.SyntheticEvent<HTMLElement>) => void;\n};\n\ntype StateProps = {\n  externalLibraryName?: string;\n  key: string;\n};\n\nexport function ControlBarExternalLibrarySelect(props: ControlBarExternalLibrarySelectProps) {\n  const iExternals = Array.from(externalLibraries.entries()).map((entry, index) => ({\n    name: entry[0] as ExternalLibraryName,\n    key: index,\n    symbols: entry[1]\n  }));\n\n  const ExternalSelectComponent = Select.ofType<External>();\n\n  const externalRenderer: ItemRenderer<External> = (\n    external,\n    { handleClick, modifiers, query }\n  ) => <MenuItem active={false} key={external.key} onClick={handleClick} text={external.name} />;\n\n  const externalSelect = (\n    currentExternal: string,\n    handleSelect: (i: External, e?: React.SyntheticEvent<HTMLElement>) => void\n  ) => (\n    <ExternalSelectComponent\n      className={Classes.MINIMAL}\n      items={iExternals}\n      onItemSelect={handleSelect}\n      itemRenderer={externalRenderer}\n      filterable={false}\n    >\n      <Button\n        className={Classes.MINIMAL}\n        text={currentExternal}\n        rightIcon={IconNames.DOUBLE_CARET_VERTICAL}\n      />\n    </ExternalSelectComponent>\n  );\n\n  return externalSelect(props.externalLibraryName!, props.handleExternalSelect!);\n}\n","import { Classes, NonIdealState, Spinner } from '@blueprintjs/core';\nimport classNames from 'classnames';\nimport * as React from 'react';\n\nimport { Links } from '../utils/Constants';\n\ntype State = {\n  loading: boolean;\n};\n\nclass SideContentEnvVisualizer extends React.Component<{}, State> {\n  private $parent: HTMLElement | null = null;\n\n  constructor(props: any) {\n    super(props);\n    this.state = { loading: true };\n  }\n\n  public componentDidMount() {\n    this.tryToLoad();\n  }\n\n  public render() {\n    return (\n      <div ref={r => (this.$parent = r)} className={classNames('sa-env-visualizer', Classes.DARK)}>\n        <p id=\"env-visualizer-default-text\" className={Classes.RUNNING_TEXT}>\n          The environmental visualizer generates the environmental model diagram based on\n          breakpoints set in the editor.\n          <br />\n          <br />\n          It is activated by clicking on the gutter of the editor (where all the line numbers are,\n          on the left) to set a breakpoint, and then running the program.\n          <br />\n          <br />\n          The environment model diagram follows a notation introduced in{' '}\n          <a href={Links.sourceDocsChapter3_2} rel=\"noopener noreferrer\" target=\"_blank\">\n            <i>\n              Structure and Interpretation of Computer Programs, JavaScript Adaptation, Chapter 3,\n              Section 2\n            </i>\n          </a>\n          .\n        </p>\n        {this.state.loading && (\n          <NonIdealState description=\"Loading Env Visualizer...\" icon={<Spinner />} />\n        )}\n      </div>\n    );\n  }\n\n  private tryToLoad = () => {\n    const element = (window as any).EnvVisualizer;\n    if (this.$parent && element) {\n      // Env Visualizer has been loaded into the DOM\n      element.init(this.$parent);\n      this.setState((state, props) => {\n        return { loading: false };\n      });\n    } else {\n      // Try again in 1 second\n      window.setTimeout(this.tryToLoad, 1000);\n    }\n  };\n}\n\nexport default SideContentEnvVisualizer;\n","import { Classes, NonIdealState, Spinner } from '@blueprintjs/core';\nimport * as React from 'react';\n\ntype State = {\n  loading: boolean;\n};\n\nclass SideContentInspector extends React.Component<{}, State> {\n  private $parent: HTMLElement | null = null;\n\n  constructor(props: any) {\n    super(props);\n    this.state = { loading: true };\n  }\n\n  public componentDidMount() {\n    this.tryToLoad();\n  }\n\n  public render() {\n    return (\n      <div ref={r => (this.$parent = r)} className=\"sa-inspector\">\n        <p id=\"inspector-default-text\" className={Classes.RUNNING_TEXT}>\n          The inspector generates a list of variable bindings based on breakpoints set in the\n          editor.\n          <br />\n          <br />\n          It is activated by clicking on the gutter of the editor (where all the line numbers are,\n          on the left) to set a breakpoint, and then running the program. Only the first line of a\n          statement can have a breakpoint. The program halts just before the statement is evaluated.\n        </p>\n        {this.state.loading && (\n          <NonIdealState description=\"Loading Inspector...\" icon={<Spinner />} />\n        )}\n      </div>\n    );\n  }\n\n  private tryToLoad = () => {\n    const element = (window as any).Inspector;\n    if (this.$parent && element) {\n      // Inspector has been loaded into the DOM\n      element.init(this.$parent);\n      this.setState((state, props) => {\n        return { loading: false };\n      });\n    } else {\n      // Try again in 1 second\n      window.setTimeout(this.tryToLoad, 1000);\n    }\n  };\n}\n\nexport default SideContentInspector;\n","import { Classes, NonIdealState, Spinner } from '@blueprintjs/core';\nimport classNames from 'classnames';\nimport * as React from 'react';\n\nimport { Links } from '../utils/Constants';\n\ntype State = {\n  loading: boolean;\n};\n\nclass SideContentListVisualizer extends React.Component<{}, State> {\n  private $parent: HTMLElement | null = null;\n\n  constructor(props: any) {\n    super(props);\n    this.state = { loading: true };\n  }\n\n  public componentDidMount() {\n    this.tryToLoad();\n  }\n\n  public render() {\n    // Default text will be hidden by visualizer.js when 'draw_data' is called\n    return (\n      <div ref={r => (this.$parent = r)} className={classNames('sa-list-visualizer', Classes.DARK)}>\n        <p id=\"data-visualizer-default-text\" className={Classes.RUNNING_TEXT}>\n          The data visualizer visualises data structures.\n          <br />\n          <br />\n          It is activated by calling the function <code>draw_data(the_data)</code>, where\n          <code>the_data</code> would be the data structure that you want to visualise.\n          <br />\n          <br />\n          The data visualizer uses box-and-pointer diagrams, as introduced in{' '}\n          <a href={Links.sourceDocsChapter2_2} rel=\"noopener noreferrer\" target=\"_blank\">\n            <i>\n              Structure and Interpretation of Computer Programs, JavaScript Adaptation, Chapter 2,\n              Section 2\n            </i>\n          </a>\n          .\n        </p>\n        {this.state.loading && (\n          <NonIdealState description=\"Loading Data Visualizer...\" icon={<Spinner />} />\n        )}\n      </div>\n    );\n  }\n\n  private tryToLoad = () => {\n    const element = (window as any).ListVisualizer;\n    if (this.$parent && element) {\n      // List Visualizer has been loaded into the DOM\n      element.init(this.$parent);\n      this.setState((state, props) => {\n        return { loading: false };\n      });\n    } else {\n      // Try again in 1 second\n      window.setTimeout(this.tryToLoad, 1000);\n    }\n  };\n}\n\nexport default SideContentListVisualizer;\n","import { Slider } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport * as React from 'react';\n\nimport {\n  CodeDelta,\n  Input,\n  PlaybackData,\n  PlaybackStatus,\n  SourcecastData\n} from '../../features/sourceRecorder/SourceRecorderTypes';\nimport { ExternalLibraryName } from '../application/types/ExternalTypes';\nimport controlButton from '../ControlButton';\n\nexport type SourceRecorderControlBarProps = DispatchProps & StateProps;\n\ntype DispatchProps = {\n  handleEditorValueChange: (newCode: string) => void;\n  handleSetCurrentPlayerTime: (playTime: number) => void;\n  handleSetCodeDeltasToApply: (deltas: CodeDelta[]) => void;\n  handleSetEditorReadonly: (editorReadonly: boolean) => void;\n  handleSetInputToApply: (inputToApply: Input) => void;\n  handleSetSourcecastDuration: (duration: number) => void;\n  handleSetSourcecastStatus: (playbackStatus: PlaybackStatus) => void;\n  handleChapterSelect: (chapter: number) => void;\n  handleExternalSelect: (name: ExternalLibraryName) => void;\n  handlePromptAutocomplete: (row: number, col: number, callback: any) => void;\n};\n\ntype StateProps = {\n  audioUrl: string;\n  currentPlayerTime: number;\n  duration: number;\n  playbackData: PlaybackData;\n  playbackStatus: PlaybackStatus;\n};\n\ntype State = {\n  currentDeltaRevision: number;\n  currentPlayerProgress: number;\n  currentSourcecastItem: SourcecastData | null;\n  duration: number;\n};\n\nclass SourceRecorderControlBar extends React.PureComponent<SourceRecorderControlBarProps, State> {\n  private audio: React.RefObject<HTMLAudioElement>;\n\n  constructor(props: SourceRecorderControlBarProps) {\n    super(props);\n    this.audio = React.createRef();\n    this.state = {\n      currentDeltaRevision: 0,\n      currentPlayerProgress: 0,\n      currentSourcecastItem: null,\n      duration: 0\n    };\n  }\n\n  public render() {\n    const PlayerPlayButton = controlButton(\n      'Play',\n      IconNames.PLAY,\n      this.handlePlayerPlaying,\n      {},\n      !this.props.duration\n    );\n    const PlayerPauseButton = controlButton('Pause', IconNames.PAUSE, this.handlePlayerPausing);\n    return (\n      <div className=\"Bar\">\n        <audio\n          src={this.props.audioUrl}\n          ref={this.audio}\n          onEnded={this.handlePlayerStopping}\n          onLoadedMetadata={this.handleAudioLoaded}\n          onSeeked={this.handleSeeked}\n          onTimeUpdate={this.updatePlayerTime}\n          preload=\"metadata\"\n          // controls={true}\n        />\n        <br />\n        <div>\n          <div className=\"PlayerControl\">\n            <div className=\"PlayerControl\">\n              {this.props.playbackStatus === PlaybackStatus.paused && PlayerPlayButton}\n              {this.props.playbackStatus === PlaybackStatus.playing && PlayerPauseButton}\n            </div>\n          </div>\n          <div className=\"Slider\">\n            <Slider\n              min={0}\n              max={1}\n              stepSize={0.0001}\n              onChange={this.handlePlayerProgressBarChange}\n              value={this.state.currentPlayerProgress}\n              labelRenderer={this.renderLabel}\n            />\n          </div>\n        </div>\n        <br />\n      </div>\n    );\n  }\n\n  private handleSeeked = () => {\n    // FIXME: loop in applyPlaybackDataFromStart keeps running if seeked from paused mode\n    this.stopPreviousPlaybackAndApplyFromStart(this.props.playbackData);\n  };\n\n  private handleAudioLoaded = () => {\n    this.props.handleSetSourcecastDuration(this.audio.current!.duration);\n  };\n\n  private applyDeltas = (deltas: CodeDelta[]) => {\n    this.props.handleSetCodeDeltasToApply(deltas);\n  };\n\n  private stopPreviousPlaybackAndApplyFromStart = (playbackData: PlaybackData) => {\n    this.setState(\n      {\n        currentDeltaRevision: this.state.currentDeltaRevision + 1\n      },\n      () => this.applyPlaybackDataFromStart(playbackData)\n    );\n  };\n\n  private applyPlaybackDataFromStart = async (playbackData: PlaybackData) => {\n    const sleep = (ms: number) => new Promise(r => setTimeout(r, ms));\n    const currentRevision = this.state.currentDeltaRevision;\n    let currentTime = this.audio.current!.currentTime * 1000;\n    this.props.handleEditorValueChange(playbackData.init.editorValue);\n    this.props.handleExternalSelect(playbackData.init.externalLibrary);\n    this.props.handleChapterSelect(playbackData.init.chapter);\n    const codeDeltasToApply = playbackData.inputs\n      .filter(\n        deltaWithTime => deltaWithTime.time <= currentTime && deltaWithTime.type === 'codeDelta'\n      )\n      .map(deltaWithTime => deltaWithTime.data as CodeDelta);\n    this.applyDeltas(codeDeltasToApply);\n\n    const futureData = playbackData.inputs.filter(\n      deltaWithTime => deltaWithTime.time > currentTime\n    );\n    const len = futureData.length;\n    let i = 0;\n    while (i < len && this.state.currentDeltaRevision === currentRevision) {\n      currentTime = this.audio.current!.currentTime * 1000;\n      if (futureData[i].time < currentTime) {\n        this.props.handleSetInputToApply(futureData[i]);\n        i++;\n        continue;\n      }\n      await sleep(20);\n    }\n  };\n\n  private stopCurrentPlayback() {\n    this.setState({\n      currentDeltaRevision: this.state.currentDeltaRevision + 1\n    });\n  }\n\n  private handlePlayerPausing = () => {\n    const audio = this.audio.current;\n    audio!.pause();\n    this.props.handleSetEditorReadonly(false);\n    this.props.handleSetSourcecastStatus(PlaybackStatus.paused);\n    this.stopCurrentPlayback();\n  };\n\n  private handlePlayerPlaying = () => {\n    const audio = this.audio.current;\n    audio!.play();\n    this.props.handleSetEditorReadonly(true);\n    this.props.handleSetSourcecastStatus(PlaybackStatus.playing);\n    this.stopPreviousPlaybackAndApplyFromStart(this.props.playbackData);\n  };\n\n  private handlePlayerStopping = () => {\n    this.props.handleSetEditorReadonly(false);\n    this.props.handleSetSourcecastStatus(PlaybackStatus.paused);\n    this.props.handleSetCurrentPlayerTime(0);\n    this.setState({\n      currentPlayerProgress: 0\n    });\n  };\n\n  private updatePlayerTime: React.ReactEventHandler<HTMLAudioElement> = e => {\n    const { currentTime }: { currentTime: number } = e.target as HTMLMediaElement;\n    this.props.handleSetCurrentPlayerTime(currentTime);\n    this.setState({\n      currentPlayerProgress: currentTime / this.props.duration\n    });\n  };\n\n  private handlePlayerProgressBarChange = (value: number) => {\n    if (this.audio.current) {\n      const currentTime = this.props.duration * value;\n      this.audio.current.currentTime = currentTime;\n      this.props.handleSetCurrentPlayerTime(currentTime);\n      this.setState({\n        currentPlayerProgress: value\n      });\n    }\n  };\n\n  private renderLabel = (value: number) => {\n    if (this.props.duration) {\n      const totalTime = this.props.duration * value;\n      const min = Math.floor(totalTime / 60);\n      const sec = Math.floor(totalTime - min * 60);\n      const minString = min < 10 ? '0' + min : min;\n      const secString = sec < 10 ? '0' + sec : sec;\n      return minString + ':' + secString;\n    } else {\n      return '00:00';\n    }\n  };\n}\n\nexport default SourceRecorderControlBar;\n","import 'ace-builds/src-noconflict/ext-searchbox';\nimport 'ace-builds/src-noconflict/mode-javascript';\nimport 'js-slang/dist/editors/ace/theme/source';\n\nimport { isEqual } from 'lodash';\nimport * as React from 'react';\nimport AceEditor, { IAceEditorProps } from 'react-ace';\nimport { HotKeys } from 'react-hotkeys';\n\nimport {\n  CodeDelta,\n  Input,\n  KeyboardCommand,\n  SelectionRange\n} from '../../features/sourceRecorder/SourceRecorderTypes';\nimport { HighlightedLines, Position } from '../editor/EditorTypes';\n\n/**\n * @property editorValue - The string content of the react-ace editor\n * @property handleEditorChange  - A callback function\n *           for the react-ace editor's `onChange`\n * @property handleEvalEditor  - A callback function for evaluation\n *           of the editor's content, using `slang`\n * @property editorReadonly - Used for sourcecast only\n */\nexport type SourceRecorderEditorProps = DispatchProps & StateProps;\n\ntype DispatchProps = {\n  getTimerDuration?: () => number;\n  handleDeclarationNavigate: (cursorPosition: Position) => void;\n  handleEditorEval: () => void;\n  handleEditorValueChange: (newCode: string) => void;\n  handleEditorUpdateBreakpoints: (breakpoints: string[]) => void;\n  handleFinishInvite?: () => void;\n  handleRecordInput?: (input: Input) => void;\n  handleSetWebsocketStatus?: (websocketStatus: number) => void;\n  handleUpdateHasUnsavedChanges?: (hasUnsavedChanges: boolean) => void;\n};\n\ntype StateProps = {\n  breakpoints: string[];\n  codeDeltasToApply?: CodeDelta[] | null;\n  editorReadonly?: boolean;\n  editorSessionId: string;\n  editorValue: string;\n  highlightedLines: HighlightedLines[];\n  isEditorAutorun: boolean;\n  inputToApply?: Input | null;\n  isPlaying?: boolean;\n  isRecording?: boolean;\n  newCursorPosition?: Position;\n  sharedbAceInitValue?: string;\n  sharedbAceIsInviting?: boolean;\n};\n\nclass SourcecastEditor extends React.PureComponent<SourceRecorderEditorProps, {}> {\n  public ShareAce: any;\n  public AceEditor: React.RefObject<AceEditor>;\n  private onChangeMethod: (newCode: string, delta: CodeDelta) => void;\n  private onCursorChange: (selecction: any) => void;\n  private onSelectionChange: (selection: any) => void;\n\n  constructor(props: SourceRecorderEditorProps) {\n    super(props);\n    this.AceEditor = React.createRef();\n    this.ShareAce = null;\n    this.onChangeMethod = (newCode: string, delta: CodeDelta) => {\n      if (this.props.handleUpdateHasUnsavedChanges) {\n        this.props.handleUpdateHasUnsavedChanges(true);\n      }\n      this.props.handleEditorValueChange(newCode);\n      if (this.props.isRecording) {\n        this.props.handleRecordInput!({\n          type: 'codeDelta',\n          time: this.props.getTimerDuration!(),\n          data: delta\n        });\n      }\n      const annotations = this.AceEditor.current!.editor.getSession().getAnnotations();\n      if (this.props.isEditorAutorun && annotations.length === 0) {\n        this.props.handleEditorEval();\n      }\n    };\n    this.onCursorChange = (selection: any) => {\n      if (!this.props.isRecording) {\n        return;\n      }\n      const editorCursorPositionToBeApplied: Position = selection.getCursor();\n      this.props.handleRecordInput!({\n        type: 'cursorPositionChange',\n        time: this.props.getTimerDuration!(),\n        data: editorCursorPositionToBeApplied\n      });\n    };\n    this.onSelectionChange = (selection: any) => {\n      if (!this.props.isRecording) {\n        return;\n      }\n      const range: SelectionRange = selection.getRange();\n      const isBackwards: boolean = selection.isBackwards();\n      if (!isEqual(range.start, range.end)) {\n        this.props.handleRecordInput!({\n          type: 'selectionRangeData',\n          time: this.props.getTimerDuration!(),\n          data: { range, isBackwards }\n        });\n      }\n    };\n  }\n\n  public componentDidUpdate(prevProps: SourceRecorderEditorProps) {\n    const { codeDeltasToApply, inputToApply, newCursorPosition } = this.props;\n\n    if (codeDeltasToApply && codeDeltasToApply !== prevProps.codeDeltasToApply) {\n      this.AceEditor.current!.editor.session.getDocument().applyDeltas(codeDeltasToApply);\n      this.AceEditor.current!.editor.selection.clearSelection();\n    }\n\n    if (newCursorPosition && newCursorPosition !== prevProps.newCursorPosition) {\n      this.moveCursor(newCursorPosition);\n    }\n\n    if (!inputToApply || inputToApply === prevProps.inputToApply) {\n      return;\n    }\n\n    switch (inputToApply.type) {\n      case 'codeDelta':\n        this.AceEditor.current!.editor.session.getDocument().applyDelta(inputToApply.data);\n        this.AceEditor.current!.editor.selection.clearSelection();\n        break;\n      case 'cursorPositionChange':\n        this.moveCursor(inputToApply.data);\n        break;\n      case 'selectionRangeData':\n        const { range, isBackwards } = inputToApply.data;\n        this.AceEditor.current!.editor.selection.setRange(range, isBackwards);\n        break;\n      case 'keyboardCommand':\n        const keyboardCommand = inputToApply.data;\n        switch (keyboardCommand) {\n          case 'run':\n            this.props.handleEditorEval();\n            break;\n        }\n        break;\n    }\n  }\n\n  public getBreakpoints() {\n    return this.AceEditor.current!.editor.session.getBreakpoints().filter(x => x != null);\n  }\n\n  public componentDidMount() {\n    if (!this.AceEditor || !this.AceEditor.current || !this.AceEditor.current.editor) {\n      return;\n    }\n    const editor = this.AceEditor.current!.editor;\n    const session = editor.getSession();\n\n    editor.on('gutterclick' as any, this.handleGutterClick);\n\n    // Change all info annotations to error annotations\n    session.on('changeAnnotation' as any, this.handleAnnotationChange(session));\n  }\n\n  public componentWillUnmount() {\n    if (this.ShareAce !== null) {\n      // Umounting... Closing websocket\n      this.ShareAce.WS.close();\n    }\n    this.ShareAce = null;\n  }\n\n  public getMarkers = () => {\n    const markerProps: IAceEditorProps['markers'] = [];\n    for (const lineNum of this.props.highlightedLines) {\n      markerProps.push({\n        startRow: lineNum[0],\n        startCol: 0,\n        endRow: lineNum[1],\n        endCol: 1,\n        className: 'myMarker',\n        type: 'fullLine'\n      });\n    }\n    return markerProps;\n  };\n\n  public render() {\n    return (\n      <HotKeys className=\"Editor\" handlers={handlers}>\n        <div className=\"row editor-react-ace\">\n          <AceEditor\n            className=\"react-ace\"\n            commands={[\n              {\n                name: 'evaluate',\n                bindKey: {\n                  win: 'Shift-Enter',\n                  mac: 'Shift-Enter'\n                },\n                exec: this.handleEvaluate\n              },\n              {\n                name: 'navigate',\n                bindKey: {\n                  win: 'Ctrl-B',\n                  mac: 'Command-B'\n                },\n                exec: this.handleDeclarationNavigate\n              }\n            ]}\n            editorProps={{\n              $blockScrolling: Infinity\n            }}\n            ref={this.AceEditor}\n            markers={this.getMarkers()}\n            fontSize={17}\n            height=\"100%\"\n            highlightActiveLine={false}\n            mode=\"javascript\"\n            onChange={this.onChangeMethod}\n            onCursorChange={this.onCursorChange}\n            onSelectionChange={this.onSelectionChange}\n            readOnly={this.props.editorReadonly ? this.props.editorReadonly : false}\n            theme=\"source\"\n            value={this.props.editorValue}\n            width=\"100%\"\n            setOptions={{\n              fontFamily: \"'Inconsolata', monospace\"\n            }}\n          />\n        </div>\n      </HotKeys>\n    );\n  }\n\n  private handleGutterClick = (e: any) => {\n    const target = e.domEvent.target;\n    if (\n      target.className.indexOf('ace_gutter-cell') === -1 ||\n      !e.editor.isFocused() ||\n      e.clientX > 35 + target.getBoundingClientRect().left\n    ) {\n      return;\n    }\n\n    const row = e.getDocumentPosition().row;\n    const content = e.editor.session.getLine(row);\n    const breakpoints = e.editor.session.getBreakpoints(row, 0);\n    if (\n      breakpoints[row] === undefined &&\n      content.length !== 0 &&\n      !content.includes('//') &&\n      !content.includes('debugger;')\n    ) {\n      e.editor.session.setBreakpoint(row);\n    } else {\n      e.editor.session.clearBreakpoint(row);\n    }\n    e.stop();\n    this.props.handleEditorUpdateBreakpoints(e.editor.session.$breakpoints);\n  };\n\n  private handleAnnotationChange = (session: any) => () => {\n    const annotations = session.getAnnotations();\n    let count = 0;\n    for (const anno of annotations) {\n      if (anno.type === 'info') {\n        anno.type = 'error';\n        anno.className = 'ace_error';\n        count++;\n      }\n    }\n    if (count !== 0) {\n      session.setAnnotations(annotations);\n    }\n  };\n\n  private handleEvaluate = () => {\n    this.props.handleEditorEval();\n    if (!this.props.isRecording) {\n      return;\n    }\n    this.props.handleRecordInput!({\n      type: 'keyboardCommand',\n      time: this.props.getTimerDuration!(),\n      data: KeyboardCommand.run\n    });\n  };\n\n  // Used in navigating from occurence to navigation\n  private moveCursor = (position: Position) => {\n    this.AceEditor.current!.editor.selection.clearSelection();\n    this.AceEditor.current!.editor.moveCursorToPosition(position);\n    this.AceEditor.current!.editor.renderer.showCursor();\n    this.AceEditor.current!.editor.renderer.scrollCursorIntoView(position, 0.5);\n  };\n\n  private handleDeclarationNavigate = () => {\n    this.props.handleDeclarationNavigate(this.AceEditor.current!.editor.getCursorPosition());\n  };\n}\n\n/* Override handler, so does not trigger when focus is in editor */\nconst handlers = {\n  goGreen: () => {}\n};\n\nexport default SourcecastEditor;\n","import { Classes, Dialog } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport * as React from 'react';\n\nimport { SourcecastData } from '../../features/sourceRecorder/SourceRecorderTypes';\nimport controlButton from '../ControlButton';\n\ntype SourceRecorderDeleteCellProps = DispatchProps & StateProps;\n\ntype DispatchProps = {\n  handleDeleteSourcecastEntry: (id: number) => void;\n};\n\ntype StateProps = {\n  data: SourcecastData;\n};\n\ntype State = {\n  dialogOpen: boolean;\n};\n\nclass SourceRecorderDeleteCell extends React.Component<SourceRecorderDeleteCellProps, State> {\n  public constructor(props: SourceRecorderDeleteCellProps) {\n    super(props);\n    this.state = {\n      dialogOpen: false\n    };\n  }\n\n  public render() {\n    return (\n      <div>\n        {controlButton('', IconNames.TRASH, this.handleOpenDialog)}\n        <Dialog\n          icon=\"info-sign\"\n          isOpen={this.state.dialogOpen}\n          onClose={this.handleCloseDialog}\n          title=\"Delete Sourcecast\"\n          canOutsideClickClose={true}\n        >\n          <div className={Classes.DIALOG_BODY}>\n            <p>Are you sure to delete this sourcecast entry?</p>\n          </div>\n          <div className={Classes.DIALOG_FOOTER}>\n            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n              {controlButton('Confirm Delete', IconNames.TRASH, this.handleDelete)}\n              {controlButton('Cancel', IconNames.CROSS, this.handleCloseDialog)}\n            </div>\n          </div>\n        </Dialog>\n      </div>\n    );\n  }\n\n  private handleCloseDialog = () => this.setState({ dialogOpen: false });\n  private handleOpenDialog = () => this.setState({ dialogOpen: true });\n  private handleDelete = () => {\n    const { data } = this.props;\n    this.props.handleDeleteSourcecastEntry(data.id);\n  };\n}\n\nexport default SourceRecorderDeleteCell;\n","import { IconNames } from '@blueprintjs/icons';\nimport * as React from 'react';\n\nimport { PlaybackData, SourcecastData } from '../../features/sourceRecorder/SourceRecorderTypes';\nimport controlButton from '../ControlButton';\n\ntype SourceRecorderSelectCellProps = DispatchProps & StateProps;\n\ntype DispatchProps = {\n  handleSetSourcecastData: (\n    title: string,\n    description: string,\n    audioUrl: string,\n    playbackData: PlaybackData\n  ) => void;\n};\n\ntype StateProps = {\n  data: SourcecastData;\n};\n\nclass SourceRecorderSelectCell extends React.Component<SourceRecorderSelectCellProps, {}> {\n  public constructor(props: SourceRecorderSelectCellProps) {\n    super(props);\n  }\n\n  public render() {\n    return (\n      <div>{controlButton(`${this.props.data.title}`, IconNames.PLAY, this.handleSelect)}</div>\n    );\n  }\n\n  private handleSelect = () => {\n    const { data } = this.props;\n    const url = data.url;\n    const playbackData = JSON.parse(data.playbackData);\n    this.props.handleSetSourcecastData(data.title, data.description, url, playbackData);\n  };\n}\n\nexport default SourceRecorderSelectCell;\n","import 'ag-grid-community/dist/styles/ag-grid.css';\n\nimport { Divider, FormGroup, InputGroup, NonIdealState, Spinner } from '@blueprintjs/core';\nimport { ColDef, GridApi, GridReadyEvent } from 'ag-grid-community';\nimport { AgGridReact } from 'ag-grid-react';\nimport { sortBy } from 'lodash';\nimport * as React from 'react';\n\nimport { PlaybackData, SourcecastData } from '../../features/sourceRecorder/SourceRecorderTypes';\nimport { getStandardDate } from '../utils/DateHelper';\nimport SourcastDeleteCell from './SourceRecorderDeleteCell';\nimport SourceRecorderSelectCell from './SourceRecorderSelectCell';\n\ntype SourceRecorderTableProps = OwnProps;\n\ntype OwnProps = {\n  handleDeleteSourcecastEntry?: (id: number) => void;\n  handleFetchSourcecastIndex: () => void;\n  handleSetSourcecastData?: (\n    title: string,\n    description: string,\n    audioUrl: string,\n    playbackData: PlaybackData\n  ) => void;\n  sourcecastIndex: SourcecastData[] | null;\n};\n\n/**\n * Column Definitions are defined within the state, so that data\n * can be manipulated easier. See constructor for an example.\n */\ntype State = {\n  columnDefs: ColDef[];\n  filterValue: string;\n  groupFilterEnabled: boolean;\n};\n\nclass SourcecastTable extends React.Component<SourceRecorderTableProps, State> {\n  private defaultColumnDefs: ColDef;\n  private gridApi?: GridApi;\n\n  public constructor(props: SourceRecorderTableProps) {\n    super(props);\n\n    this.state = {\n      columnDefs: [\n        {\n          headerName: 'Title',\n          field: 'title',\n          cellRendererFramework: SourceRecorderSelectCell,\n          cellRendererParams: {\n            handleSetSourcecastData: this.props.handleSetSourcecastData\n          },\n          width: 400,\n          suppressMovable: true,\n          suppressMenu: true,\n          cellStyle: {\n            'text-align': 'left'\n          },\n          hide: !this.props.handleSetSourcecastData\n        },\n        {\n          headerName: 'Title',\n          field: 'title',\n          width: 200,\n          suppressMovable: true,\n          suppressMenu: true,\n          hide: !!this.props.handleSetSourcecastData\n        },\n        {\n          headerName: 'Uploader',\n          field: 'uploader.name',\n          width: 200,\n          suppressMovable: true,\n          suppressMenu: true,\n          cellStyle: {\n            'text-align': 'center'\n          }\n        },\n        {\n          headerName: 'Date',\n          valueGetter: params => getStandardDate(params.data.inserted_at),\n          maxWidth: 200,\n          suppressMovable: true,\n          suppressMenu: true\n        },\n        {\n          headerName: 'Delete',\n          field: '',\n          cellRendererFramework: SourcastDeleteCell,\n          cellRendererParams: {\n            handleDeleteSourcecastEntry: this.props.handleDeleteSourcecastEntry\n          },\n          width: 100,\n          maxWidth: 100,\n          sortable: false,\n          suppressMovable: true,\n          suppressMenu: true,\n          cellStyle: {\n            'text-align': 'center'\n          },\n          hide: !this.props.handleDeleteSourcecastEntry\n        },\n        { headerName: 'description', field: 'description', hide: true },\n        { headerName: 'inserted_at', field: 'inserted_at', hide: true },\n        { headerName: 'updated_at', field: 'updated_at', hide: true },\n        { headerName: 'audio', field: 'audio', hide: true },\n        { headerName: 'playbackData', field: 'playbackData', hide: true },\n        { headerName: 'url', field: 'url', hide: true }\n      ],\n      filterValue: '',\n      groupFilterEnabled: false\n    };\n\n    this.defaultColumnDefs = {\n      filter: true,\n      resizable: true,\n      sortable: true\n    };\n  }\n\n  public componentDidMount() {\n    this.props.handleFetchSourcecastIndex();\n  }\n\n  public render() {\n    /* Display either a loading screen or a table with overviews. */\n    const loadingDisplay = (\n      <NonIdealState\n        className=\"Sourcecast\"\n        description=\"Fetching sourcecast index...\"\n        icon={<Spinner size={Spinner.SIZE_LARGE} />}\n      />\n    );\n    const data = sortBy(this.props.sourcecastIndex, [(a: SourcecastData) => -a.id]);\n\n    const grid = (\n      <div className=\"SourcecastContainer\">\n        <br />\n        <div>\n          <FormGroup label=\"\" labelFor=\"text-input\">\n            <InputGroup\n              id=\"searchBar\"\n              large={false}\n              leftIcon=\"search\"\n              placeholder=\"Search\"\n              value={this.state.filterValue}\n              onChange={this.handleFilterChange}\n            />\n          </FormGroup>\n        </div>\n        <Divider />\n        <div className=\"SourcecastTable\">\n          <div className=\"ag-grid-parent\">\n            <AgGridReact\n              domLayout={'autoHeight'}\n              columnDefs={this.state.columnDefs}\n              defaultColDef={this.defaultColumnDefs}\n              onGridReady={this.onGridReady}\n              rowData={data}\n              rowHeight={30}\n              pagination={false}\n              paginationPageSize={50}\n            />\n          </div>\n        </div>\n        <br />\n      </div>\n    );\n    return <div>{this.props.sourcecastIndex === undefined ? loadingDisplay : grid}</div>;\n  }\n\n  private handleFilterChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const changeVal = event.target.value;\n    this.setState({ filterValue: changeVal });\n\n    if (this.gridApi) {\n      this.gridApi.setQuickFilter(changeVal);\n    }\n  };\n\n  private onGridReady = (params: GridReadyEvent) => {\n    this.gridApi = params.api;\n    this.gridApi.sizeColumnsToFit();\n    window.onresize = () => this.gridApi!.sizeColumnsToFit();\n  };\n}\n\nexport default SourcecastTable;\n","import { Card, H1, Popover } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport * as React from 'react';\nimport Recorder from 'yareco';\n\nimport controlButton from '../../../../commons/ControlButton';\nimport {\n  Input,\n  PlaybackData,\n  RecordingStatus\n} from '../../../../features/sourceRecorder/SourceRecorderTypes';\n\ntype SourcereelControlbarProps = DispatchProps & StateProps;\n\ntype DispatchProps = {\n  handleRecordInit: () => void;\n  handleResetInputs: (inputs: Input[]) => void;\n  handleSaveSourcecastData: (\n    title: string,\n    description: string,\n    audio: Blob,\n    playbackData: PlaybackData\n  ) => void;\n  handleSetSourcecastData: (\n    title: string,\n    description: string,\n    audioUrl: string,\n    playbackData: PlaybackData\n  ) => void;\n  handleSetEditorReadonly: (readonly: boolean) => void;\n  handleTimerPause: () => void;\n  handleTimerReset: () => void;\n  handleTimerResume: (timeBefore: number) => void;\n  handleTimerStart: () => void;\n  handleTimerStop: () => void;\n  getTimerDuration: () => number;\n};\n\ntype StateProps = {\n  currentPlayerTime: number;\n  editorValue: string;\n  playbackData: PlaybackData;\n  recordingStatus: RecordingStatus;\n};\n\ntype State = {\n  duration: number;\n  fileDataBlob?: Blob;\n  updater?: NodeJS.Timeout;\n  saveTitle: string;\n  saveDescription: string;\n};\n\nclass SourcereelControlbar extends React.PureComponent<SourcereelControlbarProps, State> {\n  private recorder?: Recorder = undefined;\n\n  constructor(props: SourcereelControlbarProps) {\n    super(props);\n    this.state = {\n      duration: 0,\n      updater: undefined,\n      saveTitle: 'Title',\n      saveDescription: 'Description'\n    };\n  }\n\n  public async componentDidMount() {\n    Recorder.getPermission().then(\n      () => {},\n      (error: any) => {\n        alert('Microphone not found: ' + error);\n      }\n    );\n  }\n\n  public render() {\n    const RecorderPauseButton = controlButton('Pause', IconNames.PAUSE, this.handleRecorderPausing);\n    const RecorderResumeButton = controlButton(\n      'Resume',\n      IconNames.PLAY,\n      this.handleRecorderResuming\n    );\n    const RecorderResumeFromCurrentButton = controlButton(\n      'Resume Here',\n      IconNames.PLAY,\n      this.handleRecorderResumingFromCurrent\n    );\n    const RecorderStartButton = controlButton(\n      'Record',\n      IconNames.PLAY,\n      this.handleRecorderStarting\n    );\n    const RecorderStopButton = controlButton('Stop', IconNames.STOP, this.handleRecorderStopping);\n    const RecorderResetButton = controlButton(\n      'Reset',\n      IconNames.REFRESH,\n      this.handleRecorderResetting\n    );\n    const RecorderSaveButton = (\n      <Popover popoverClassName=\"Popover-share\" inheritDarkTheme={false}>\n        {controlButton('Save', IconNames.FLOPPY_DISK)}\n        <ul className=\"Sourcereel-save-form\">\n          <li className=\"form-row\">\n            <label htmlFor=\"title\">Title: </label>\n            <input\n              id=\"title\"\n              value={this.state.saveTitle}\n              onChange={this.handleSaveTitleInputChange}\n            />\n          </li>\n          <li className=\"form-row\">\n            <label htmlFor=\"description\">Description: </label>\n            <input\n              id=\"description\"\n              value={this.state.saveDescription}\n              onChange={this.handleSaveDescriptionInputChange}\n            />\n          </li>\n          <li>{controlButton('Submit', IconNames.TICK, this.handleRecorderSaving)}</li>\n        </ul>\n      </Popover>\n    );\n    return (\n      <div>\n        <br />\n        <div className=\"Timer\">\n          <Card elevation={2} style={{ background: '#24323F' }}>\n            <H1>\n              {this.renderLabel(\n                this.props.recordingStatus !== RecordingStatus.paused\n                  ? this.state.duration / 1000\n                  : this.props.currentPlayerTime\n              )}\n            </H1>\n          </Card>\n        </div>\n        <br />\n        <div className=\"RecorderControl\">\n          {this.props.recordingStatus === RecordingStatus.notStarted && RecorderStartButton}\n          {this.props.recordingStatus === RecordingStatus.paused && RecorderResumeButton}\n          {this.props.recordingStatus === RecordingStatus.paused && RecorderResumeFromCurrentButton}\n          {this.props.recordingStatus === RecordingStatus.recording && RecorderPauseButton}\n          {this.props.recordingStatus === RecordingStatus.paused && RecorderStopButton}\n          {/* {this.props.recordingStatus === RecordingStatus.finished && RecorderDownloadButton} */}\n          {this.props.recordingStatus === RecordingStatus.finished && RecorderSaveButton}\n          {this.props.recordingStatus !== RecordingStatus.notStarted && RecorderResetButton}\n        </div>\n        <br />\n      </div>\n    );\n  }\n\n  private updateTimerDuration = () => {\n    this.setState({ duration: this.props.getTimerDuration() });\n  };\n\n  private handleTruncatePlaybackData = () => {\n    const truncatedInputs = this.props.playbackData.inputs.filter(\n      deltaWithTime => deltaWithTime.time <= this.props.currentPlayerTime * 1000\n    );\n    this.props.handleResetInputs(truncatedInputs);\n  };\n\n  private handleRecorderPausing = () => {\n    if (!this.recorder) {\n      return;\n    }\n    const { handleSetEditorReadonly, handleSetSourcecastData, handleTimerPause } = this.props;\n    clearInterval(this.state.updater!);\n    handleSetEditorReadonly(true);\n    handleTimerPause();\n    this.recorder.pause();\n    const audioUrl = window.URL.createObjectURL(this.recorder.exportWAV());\n    handleSetSourcecastData('', '', audioUrl, this.props.playbackData);\n  };\n\n  private handleRecorderStarting = () => {\n    this.recorder = new Recorder();\n    const { handleRecordInit, handleSetEditorReadonly, handleTimerStart } = this.props;\n    this.recorder.start().then(\n      () => {\n        handleRecordInit();\n        handleSetEditorReadonly(false);\n        handleTimerStart();\n        const updater = setInterval(this.updateTimerDuration, 100);\n        this.setState({ updater });\n        // this.recorder.onRecord = (duration: number) => console.log(duration);\n      },\n      (error: any) => {\n        alert('Microphone not found: ' + error);\n      }\n    );\n  };\n\n  private handleRecorderResuming = () => {\n    if (!this.recorder) {\n      return;\n    }\n    const { handleSetEditorReadonly, handleTimerResume } = this.props;\n    handleSetEditorReadonly(false);\n    // -1 means resume from the end\n    handleTimerResume(-1);\n    const updater = setInterval(this.updateTimerDuration, 100);\n    this.setState({ updater });\n    this.recorder.resume();\n  };\n\n  private handleRecorderResumingFromCurrent = () => {\n    if (!this.recorder) {\n      return;\n    }\n    const { currentPlayerTime, handleSetEditorReadonly, handleTimerResume } = this.props;\n    this.handleTruncatePlaybackData();\n    handleSetEditorReadonly(false);\n    handleTimerResume(currentPlayerTime * 1000);\n    const updater = setInterval(this.updateTimerDuration, 100);\n    this.setState({ updater });\n    this.recorder.resume(currentPlayerTime);\n  };\n\n  private handleRecorderStopping = () => {\n    if (!this.recorder) {\n      return;\n    }\n    const { handleSetEditorReadonly, handleTimerStop } = this.props;\n    handleSetEditorReadonly(false);\n    handleTimerStop();\n    clearInterval(this.state.updater!);\n    this.recorder.stop();\n    this.setState({\n      fileDataBlob: this.recorder.exportWAV()\n    });\n    this.recorder.clear();\n  };\n\n  private handleRecorderResetting = () => {\n    const { handleSetEditorReadonly, handleTimerReset } = this.props;\n    handleSetEditorReadonly(false);\n    handleTimerReset();\n    clearInterval(this.state.updater!);\n    this.setState({ duration: 0 });\n    if (this.recorder) {\n      this.recorder.stop();\n      this.recorder.clear();\n    }\n  };\n\n  private handleRecorderSaving = () => {\n    if (!this.state.fileDataBlob) {\n      alert('No recording found');\n      return;\n    }\n    this.props.handleSaveSourcecastData(\n      this.state.saveTitle,\n      this.state.saveDescription,\n      this.state.fileDataBlob,\n      this.props.playbackData\n    );\n  };\n\n  private renderLabel = (value: number) => {\n    const min = Math.floor(value / 60);\n    const sec = Math.floor(value - min * 60);\n    const minString = min < 10 ? '0' + min : min;\n    const secString = sec < 10 ? '0' + sec : sec;\n    return minString + ':' + secString;\n  };\n\n  private handleSaveTitleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ saveTitle: event.target.value });\n  };\n\n  private handleSaveDescriptionInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ saveDescription: event.target.value });\n  };\n}\n\nexport default SourcereelControlbar;\n","import { Classes, Pre } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport classNames from 'classnames';\nimport { Variant } from 'js-slang/dist/types';\nimport * as React from 'react';\n\nimport { InterpreterOutput } from '../../../commons/application/ApplicationTypes';\nimport { ExternalLibraryName } from '../../../commons/application/types/ExternalTypes';\nimport { ControlBarAutorunButtons } from '../../../commons/controlBar/ControlBarAutorunButtons';\nimport { ControlBarChapterSelect } from '../../../commons/controlBar/ControlBarChapterSelect';\nimport { ControlBarClearButton } from '../../../commons/controlBar/ControlBarClearButton';\nimport { ControlBarEvalButton } from '../../../commons/controlBar/ControlBarEvalButton';\nimport { ControlBarExternalLibrarySelect } from '../../../commons/controlBar/ControlBarExternalLibrarySelect';\nimport { HighlightedLines, Position } from '../../../commons/editor/EditorTypes';\nimport SideContentEnvVisualizer from '../../../commons/sideContent/SideContentEnvVisualizer';\nimport SideContentInspector from '../../../commons/sideContent/SideContentInspector';\nimport SideContentListVisualizer from '../../../commons/sideContent/SideContentListVisualizer';\nimport { SideContentTab, SideContentType } from '../../../commons/sideContent/SideContentTypes';\nimport SourceRecorderControlBar, {\n  SourceRecorderControlBarProps\n} from '../../../commons/sourceRecorder/SourceRecorderControlBar';\nimport SourcecastEditor, {\n  SourceRecorderEditorProps\n} from '../../../commons/sourceRecorder/SourceRecorderEditor';\nimport SourcecastTable from '../../../commons/sourceRecorder/SourceRecorderTable';\nimport Workspace, { WorkspaceProps } from '../../../commons/workspace/Workspace';\nimport {\n  CodeDelta,\n  Input,\n  KeyboardCommand,\n  PlaybackData,\n  PlaybackStatus,\n  RecordingStatus,\n  SourcecastData\n} from '../../../features/sourceRecorder/SourceRecorderTypes';\nimport SourcereelControlbar from './subcomponents/SourcereelControlbar';\n\ntype SourcereelProps = DispatchProps & StateProps;\n\nexport type DispatchProps = {\n  handleActiveTabChange: (activeTab: SideContentType) => void;\n  handleBrowseHistoryDown: () => void;\n  handleBrowseHistoryUp: () => void;\n  handleChapterSelect: (chapter: number) => void;\n  handleDebuggerPause: () => void;\n  handleDebuggerResume: () => void;\n  handleDebuggerReset: () => void;\n  handleDeclarationNavigate: (cursorPosition: Position) => void;\n  handleDeleteSourcecastEntry: (id: number) => void;\n  handleEditorEval: () => void;\n  handleEditorHeightChange: (height: number) => void;\n  handleEditorValueChange: (val: string) => void;\n  handleEditorWidthChange: (widthChange: number) => void;\n  handleEditorUpdateBreakpoints: (breakpoints: string[]) => void;\n  handleExternalSelect: (externalLibraryName: ExternalLibraryName) => void;\n  handleFetchSourcecastIndex: () => void;\n  handleInterruptEval: () => void;\n  handlePromptAutocomplete: (row: number, col: number, callback: any) => void;\n  handleResetInputs: (inputs: Input[]) => void;\n  handleRecordInput: (input: Input) => void;\n  handleReplEval: () => void;\n  handleReplOutputClear: () => void;\n  handleReplValueChange: (newValue: string) => void;\n  handleRecordInit: (initData: PlaybackData['init']) => void;\n  handleSaveSourcecastData: (\n    title: string,\n    description: string,\n    audio: Blob,\n    playbackData: PlaybackData\n  ) => void;\n  handleSetSourcecastData: (\n    title: string,\n    description: string,\n    audioUrl: string,\n    playbackData: PlaybackData\n  ) => void;\n  handleSetCurrentPlayerTime: (playTime: number) => void;\n  handleSetCodeDeltasToApply: (delta: CodeDelta[]) => void;\n  handleSetEditorReadonly: (editorReadonly: boolean) => void;\n  handleSetInputToApply: (inputToApply: Input) => void;\n  handleSetSourcecastDuration: (duration: number) => void;\n  handleSetSourcecastStatus: (PlaybackStatus: PlaybackStatus) => void;\n  handleSideContentHeightChange: (heightChange: number) => void;\n  handleTimerPause: () => void;\n  handleTimerReset: () => void;\n  handleTimerResume: (timeBefore: number) => void;\n  handleTimerStart: () => void;\n  handleTimerStop: () => void;\n  handleToggleEditorAutorun: () => void;\n};\n\nexport type StateProps = {\n  audioUrl: string;\n  currentPlayerTime: number;\n  codeDeltasToApply: CodeDelta[] | null;\n  breakpoints: string[];\n  editorHeight?: string;\n  editorReadonly: boolean;\n  editorValue: string;\n  editorWidth: string;\n  enableDebugging: boolean;\n  externalLibraryName: string;\n  highlightedLines: HighlightedLines[];\n  inputToApply: Input | null;\n  isDebugging: boolean;\n  isEditorAutorun: boolean;\n  isRunning: boolean;\n  newCursorPosition?: Position;\n  output: InterpreterOutput[];\n  playbackData: PlaybackData;\n  playbackDuration: number;\n  playbackStatus: PlaybackStatus;\n  recordingStatus: RecordingStatus;\n  replValue: string;\n  timeElapsedBeforePause: number;\n  sideContentActiveTab: SideContentType;\n  sideContentHeight?: number;\n  sourcecastIndex: SourcecastData[] | null;\n  sourceChapter: number;\n  sourceVariant: Variant;\n  timeResumed: number;\n};\n\nclass Sourcereel extends React.Component<SourcereelProps> {\n  public componentDidUpdate(prevProps: SourcereelProps) {\n    const { inputToApply } = this.props;\n\n    if (!inputToApply || inputToApply === prevProps.inputToApply) {\n      return;\n    }\n\n    switch (inputToApply.type) {\n      case 'activeTabChange':\n        this.props.handleActiveTabChange(inputToApply.data);\n        break;\n      case 'chapterSelect':\n        this.props.handleChapterSelect(inputToApply.data);\n        break;\n      case 'externalLibrarySelect':\n        this.props.handleExternalSelect(inputToApply.data);\n        break;\n    }\n  }\n\n  public render() {\n    const editorEvalHandler = () => {\n      this.props.handleEditorEval();\n      if (this.props.recordingStatus !== RecordingStatus.recording) {\n        return;\n      }\n      this.props.handleRecordInput({\n        time: this.getTimerDuration(),\n        type: 'keyboardCommand',\n        data: KeyboardCommand.run\n      });\n    };\n    const autorunButtons = (\n      <ControlBarAutorunButtons\n        handleDebuggerPause={this.props.handleDebuggerPause}\n        handleDebuggerReset={this.props.handleDebuggerReset}\n        handleDebuggerResume={this.props.handleDebuggerResume}\n        handleEditorEval={editorEvalHandler}\n        handleInterruptEval={this.props.handleInterruptEval}\n        handleToggleEditorAutorun={this.props.handleToggleEditorAutorun}\n        isDebugging={this.props.isDebugging}\n        isEditorAutorun={this.props.isEditorAutorun}\n        isRunning={this.props.isRunning}\n        key=\"autorun\"\n      />\n    );\n\n    const chapterSelectHandler = ({ chapter }: { chapter: number }, e: any) => {\n      this.props.handleChapterSelect(chapter);\n      if (this.props.recordingStatus !== RecordingStatus.recording) {\n        return;\n      }\n      this.props.handleRecordInput({\n        time: this.getTimerDuration(),\n        type: 'chapterSelect',\n        data: chapter\n      });\n    };\n\n    const chapterSelect = (\n      <ControlBarChapterSelect\n        handleChapterSelect={chapterSelectHandler}\n        sourceChapter={this.props.sourceChapter}\n        sourceVariant={this.props.sourceVariant}\n        key=\"chapter\"\n      />\n    );\n\n    const clearButton = (\n      <ControlBarClearButton\n        handleReplOutputClear={this.props.handleReplOutputClear}\n        key=\"clear_repl\"\n      />\n    );\n\n    const evalButton = (\n      <ControlBarEvalButton\n        handleReplEval={this.props.handleReplEval}\n        isRunning={this.props.isRunning}\n        key=\"eval_repl\"\n      />\n    );\n\n    const externalSelectHandler = ({ name }: { name: ExternalLibraryName }, e: any) => {\n      this.props.handleExternalSelect(name);\n      if (this.props.recordingStatus !== RecordingStatus.recording) {\n        return;\n      }\n      this.props.handleRecordInput({\n        time: this.getTimerDuration(),\n        type: 'externalLibrarySelect',\n        data: name\n      });\n    };\n\n    const externalLibrarySelect = (\n      <ControlBarExternalLibrarySelect\n        externalLibraryName={this.props.externalLibraryName}\n        handleExternalSelect={externalSelectHandler}\n        key=\"external_library\"\n      />\n    );\n\n    const editorProps: SourceRecorderEditorProps = {\n      codeDeltasToApply: this.props.codeDeltasToApply,\n      editorReadonly: this.props.editorReadonly,\n      editorValue: this.props.editorValue,\n      editorSessionId: '',\n      getTimerDuration: this.getTimerDuration,\n      handleDeclarationNavigate: this.props.handleDeclarationNavigate,\n      handleEditorEval: this.props.handleEditorEval,\n      handleEditorValueChange: this.props.handleEditorValueChange,\n      isEditorAutorun: this.props.isEditorAutorun,\n      inputToApply: this.props.inputToApply,\n      isPlaying: this.props.playbackStatus === PlaybackStatus.playing,\n      isRecording: this.props.recordingStatus === RecordingStatus.recording,\n      breakpoints: this.props.breakpoints,\n      highlightedLines: this.props.highlightedLines,\n      newCursorPosition: this.props.newCursorPosition,\n      handleEditorUpdateBreakpoints: this.props.handleEditorUpdateBreakpoints,\n      handleRecordInput: this.props.handleRecordInput\n    };\n\n    const activeTabChangeHandler = (activeTab: SideContentType) => {\n      this.props.handleActiveTabChange(activeTab);\n      if (this.props.recordingStatus !== RecordingStatus.recording) {\n        return;\n      }\n      this.props.handleRecordInput({\n        time: this.getTimerDuration(),\n        type: 'activeTabChange',\n        data: activeTab\n      });\n    };\n\n    const workspaceProps: WorkspaceProps = {\n      controlBarProps: {\n        editorButtons: [autorunButtons, chapterSelect, externalLibrarySelect],\n        replButtons: [evalButton, clearButton]\n      },\n      customEditor: <SourcecastEditor {...editorProps} />,\n      editorHeight: this.props.editorHeight,\n      editorWidth: this.props.editorWidth,\n      handleEditorHeightChange: this.props.handleEditorHeightChange,\n      handleEditorWidthChange: this.props.handleEditorWidthChange,\n      handleSideContentHeightChange: this.props.handleSideContentHeightChange,\n      replProps: {\n        output: this.props.output,\n        replValue: this.props.replValue,\n        handleBrowseHistoryDown: this.props.handleBrowseHistoryDown,\n        handleBrowseHistoryUp: this.props.handleBrowseHistoryUp,\n        handleReplEval: this.props.handleReplEval,\n        handleReplValueChange: this.props.handleReplValueChange\n      },\n      sideContentHeight: this.props.sideContentHeight,\n      sideContentProps: {\n        handleActiveTabChange: activeTabChangeHandler,\n        selectedTabId: this.props.sideContentActiveTab,\n        tabs: [\n          {\n            label: 'Recording Panel',\n            iconName: IconNames.COMPASS,\n            body: (\n              <div>\n                <span className=\"Multi-line\">\n                  <Pre> {INTRODUCTION} </Pre>\n                </span>\n                <SourcereelControlbar\n                  currentPlayerTime={this.props.currentPlayerTime}\n                  editorValue={this.props.editorValue}\n                  getTimerDuration={this.getTimerDuration}\n                  playbackData={this.props.playbackData}\n                  handleRecordInit={this.handleRecordInit}\n                  handleResetInputs={this.props.handleResetInputs}\n                  handleSaveSourcecastData={this.props.handleSaveSourcecastData}\n                  handleSetSourcecastData={this.props.handleSetSourcecastData}\n                  handleSetEditorReadonly={this.props.handleSetEditorReadonly}\n                  handleTimerPause={this.props.handleTimerPause}\n                  handleTimerReset={this.props.handleTimerReset}\n                  handleTimerResume={this.props.handleTimerResume}\n                  handleTimerStart={this.props.handleTimerStart}\n                  handleTimerStop={this.props.handleTimerStop}\n                  recordingStatus={this.props.recordingStatus}\n                />\n              </div>\n            ),\n            id: SideContentType.sourcereel,\n            toSpawn: () => true\n          },\n          {\n            label: 'Sourcecast Table',\n            iconName: IconNames.EDIT,\n            body: (\n              <div>\n                <SourcecastTable\n                  handleDeleteSourcecastEntry={this.props.handleDeleteSourcecastEntry}\n                  handleFetchSourcecastIndex={this.props.handleFetchSourcecastIndex}\n                  sourcecastIndex={this.props.sourcecastIndex}\n                />\n              </div>\n            ),\n            id: SideContentType.introduction,\n            toSpawn: () => true\n          },\n          listVisualizerTab,\n          inspectorTab,\n          envVisualizerTab\n        ],\n        workspaceLocation: 'sourcereel'\n      }\n    };\n    const sourcecastControlbarProps: SourceRecorderControlBarProps = {\n      handleEditorValueChange: this.props.handleEditorValueChange,\n      handlePromptAutocomplete: this.props.handlePromptAutocomplete,\n      handleSetCurrentPlayerTime: this.props.handleSetCurrentPlayerTime,\n      handleSetCodeDeltasToApply: this.props.handleSetCodeDeltasToApply,\n      handleSetEditorReadonly: this.props.handleSetEditorReadonly,\n      handleSetInputToApply: this.props.handleSetInputToApply,\n      handleSetSourcecastDuration: this.props.handleSetSourcecastDuration,\n      handleSetSourcecastStatus: this.props.handleSetSourcecastStatus,\n      audioUrl: this.props.audioUrl,\n      currentPlayerTime: this.props.currentPlayerTime,\n      duration: this.props.playbackDuration,\n      playbackData: this.props.playbackData,\n      playbackStatus: this.props.playbackStatus,\n      handleChapterSelect: this.props.handleChapterSelect,\n      handleExternalSelect: this.props.handleExternalSelect\n    };\n    return (\n      <div className={classNames('Sourcereel', Classes.DARK)}>\n        {this.props.recordingStatus === RecordingStatus.paused ? (\n          <SourceRecorderControlBar {...sourcecastControlbarProps} />\n        ) : undefined}\n        <Workspace {...workspaceProps} />\n      </div>\n    );\n  }\n\n  public getTimerDuration = () =>\n    this.props.timeElapsedBeforePause + Date.now() - this.props.timeResumed;\n\n  private handleRecordInit = () =>\n    this.props.handleRecordInit({\n      chapter: this.props.sourceChapter,\n      externalLibrary: this.props.externalLibraryName as ExternalLibraryName,\n      editorValue: this.props.editorValue\n    });\n}\n\nconst INTRODUCTION = 'Welcome to Sourcereel!';\n\nconst listVisualizerTab: SideContentTab = {\n  label: 'Data Visualizer',\n  iconName: IconNames.EYE_OPEN,\n  body: <SideContentListVisualizer />,\n  id: SideContentType.dataVisualiser,\n  toSpawn: () => true\n};\n\nconst inspectorTab: SideContentTab = {\n  label: 'Inspector',\n  iconName: IconNames.SEARCH,\n  body: <SideContentInspector />,\n  id: SideContentType.inspector,\n  toSpawn: () => true\n};\n\nconst envVisualizerTab: SideContentTab = {\n  label: 'Env Visualizer',\n  iconName: IconNames.GLOBE,\n  body: <SideContentEnvVisualizer />,\n  id: SideContentType.envVisualiser,\n  toSpawn: () => true\n};\n\nexport default Sourcereel;\n","import { connect, MapDispatchToProps, MapStateToProps } from 'react-redux';\nimport { bindActionCreators, Dispatch } from 'redux';\n\nimport {\n  beginDebuggerPause,\n  beginInterruptExecution,\n  debuggerReset,\n  debuggerResume\n} from '../../../commons/application/actions/InterpreterActions';\nimport { OverallState } from '../../../commons/application/ApplicationTypes';\nimport { ExternalLibraryName } from '../../../commons/application/types/ExternalTypes';\nimport { Position } from '../../../commons/editor/EditorTypes';\nimport { SideContentType } from '../../../commons/sideContent/SideContentTypes';\nimport {\n  browseReplHistoryDown,\n  browseReplHistoryUp,\n  changeEditorHeight,\n  changeEditorWidth,\n  changeSideContentHeight,\n  chapterSelect,\n  clearReplOutput,\n  evalEditor,\n  evalRepl,\n  externalLibrarySelect,\n  navigateToDeclaration,\n  promptAutocomplete,\n  setEditorBreakpoint,\n  setEditorReadonly,\n  toggleEditorAutorun,\n  updateActiveTab,\n  updateEditorValue,\n  updateReplValue\n} from '../../../commons/workspace/WorkspaceActions';\nimport { WorkspaceLocation } from '../../../commons/workspace/WorkspaceTypes';\nimport { fetchSourcecastIndex } from '../../../features/sourceRecorder/sourcecast/SourcecastActions';\nimport {\n  saveSourcecastData,\n  setCodeDeltasToApply,\n  setCurrentPlayerTime,\n  setInputToApply,\n  setSourcecastData,\n  setSourcecastDuration,\n  setSourcecastStatus\n} from '../../../features/sourceRecorder/SourceRecorderActions';\nimport {\n  CodeDelta,\n  Input,\n  PlaybackData,\n  PlaybackStatus\n} from '../../../features/sourceRecorder/SourceRecorderTypes';\nimport {\n  deleteSourcecastEntry,\n  recordInit,\n  recordInput,\n  resetInputs,\n  timerPause,\n  timerReset,\n  timerResume,\n  timerStart,\n  timerStop\n} from '../../../features/sourceRecorder/sourcereel/SourcereelActions';\nimport Sourcereel, { DispatchProps, StateProps } from './Sourcereel';\n\nconst mapStateToProps: MapStateToProps<StateProps, {}, OverallState> = state => ({\n  audioUrl: state.workspaces.sourcecast.audioUrl,\n  currentPlayerTime: state.workspaces.sourcecast.currentPlayerTime,\n  codeDeltasToApply: state.workspaces.sourcecast.codeDeltasToApply,\n  breakpoints: state.workspaces.sourcereel.breakpoints,\n  editorReadonly: state.workspaces.sourcereel.editorReadonly,\n  editorValue: state.workspaces.sourcereel.editorValue!,\n  editorWidth: state.workspaces.sourcereel.editorWidth,\n  enableDebugging: state.workspaces.sourcereel.enableDebugging,\n  externalLibraryName: state.workspaces.sourcereel.externalLibrary,\n  highlightedLines: state.workspaces.sourcereel.highlightedLines,\n  inputToApply: state.workspaces.sourcecast.inputToApply,\n  isDebugging: state.workspaces.sourcereel.isDebugging,\n  isEditorAutorun: state.workspaces.sourcereel.isEditorAutorun,\n  isRunning: state.workspaces.sourcereel.isRunning,\n  newCursorPosition: state.workspaces.sourcereel.newCursorPosition,\n  output: state.workspaces.sourcereel.output,\n  playbackData: state.workspaces.sourcereel.playbackData,\n  playbackDuration: state.workspaces.sourcecast.playbackDuration,\n  playbackStatus: state.workspaces.sourcecast.playbackStatus,\n  recordingStatus: state.workspaces.sourcereel.recordingStatus,\n  replValue: state.workspaces.sourcereel.replValue,\n  sideContentHeight: state.workspaces.sourcereel.sideContentHeight,\n  sideContentActiveTab: state.workspaces.sourcereel.sideContentActiveTab,\n  sourcecastIndex: state.workspaces.sourcecast.sourcecastIndex,\n  sourceChapter: state.workspaces.sourcereel.context.chapter,\n  sourceVariant: state.workspaces.sourcereel.context.variant,\n  timeElapsedBeforePause: state.workspaces.sourcereel.timeElapsedBeforePause,\n  timeResumed: state.workspaces.sourcereel.timeResumed\n});\n\nconst location: WorkspaceLocation = 'sourcereel';\n\nconst mapDispatchToProps: MapDispatchToProps<DispatchProps, {}> = (dispatch: Dispatch) =>\n  bindActionCreators(\n    {\n      handleActiveTabChange: (activeTab: SideContentType) => updateActiveTab(activeTab, location),\n      handleBrowseHistoryDown: () => browseReplHistoryDown(location),\n      handleBrowseHistoryUp: () => browseReplHistoryUp(location),\n      handleChapterSelect: (chapter: number) => chapterSelect(chapter, 'default', location),\n      handleDeclarationNavigate: (cursorPosition: Position) =>\n        navigateToDeclaration(location, cursorPosition),\n      handleDeleteSourcecastEntry: (id: number) => deleteSourcecastEntry(id, 'sourcecast'),\n      handleEditorEval: () => evalEditor(location),\n      handleEditorValueChange: (val: string) => updateEditorValue(val, location),\n      handleEditorHeightChange: (height: number) => changeEditorHeight(height, location),\n      handleEditorWidthChange: (widthChange: number) =>\n        changeEditorWidth(widthChange.toString(), location),\n      handleEditorUpdateBreakpoints: (breakpoints: string[]) =>\n        setEditorBreakpoint(breakpoints, location),\n      handleExternalSelect: (externalLibraryName: ExternalLibraryName) =>\n        externalLibrarySelect(externalLibraryName, location),\n      handleFetchSourcecastIndex: () => fetchSourcecastIndex('sourcecast'),\n      handleInterruptEval: () => beginInterruptExecution(location),\n      handleRecordInput: (input: Input) => recordInput(input, location),\n      handleReplEval: () => evalRepl(location),\n      handleReplOutputClear: () => clearReplOutput(location),\n      handleReplValueChange: (newValue: string) => updateReplValue(newValue, location),\n      handleSaveSourcecastData: (\n        title: string,\n        description: string,\n        audio: Blob,\n        playbackData: PlaybackData\n      ) => saveSourcecastData(title, description, audio, playbackData, 'sourcecast'),\n      handleSetCurrentPlayerTime: (playerTime: number) =>\n        setCurrentPlayerTime(playerTime, 'sourcecast'),\n      handleSetCodeDeltasToApply: (deltas: CodeDelta[]) =>\n        setCodeDeltasToApply(deltas, 'sourcecast'),\n      handleSetInputToApply: (inputToApply: Input) => setInputToApply(inputToApply, 'sourcecast'),\n      handleSetSourcecastData: (\n        title: string,\n        description: string,\n        audioUrl: string,\n        playbackData: PlaybackData\n      ) => setSourcecastData(title, description, audioUrl, playbackData, 'sourcecast'),\n      handleSetSourcecastDuration: (duration: number) =>\n        setSourcecastDuration(duration, 'sourcecast'),\n      handleSetSourcecastStatus: (playbackStatus: PlaybackStatus) =>\n        setSourcecastStatus(playbackStatus, 'sourcecast'),\n      handleSetEditorReadonly: (readonly: boolean) => setEditorReadonly(location, readonly),\n      handleResetInputs: (inputs: Input[]) => resetInputs(inputs, location),\n      handleRecordInit: (initData: PlaybackData['init']) => recordInit(initData, location),\n      handleSideContentHeightChange: (heightChange: number) =>\n        changeSideContentHeight(heightChange, location),\n      handleTimerPause: () => timerPause(location),\n      handleTimerReset: () => timerReset(location),\n      handleTimerResume: (timeBefore: number) => timerResume(timeBefore, location),\n      handleTimerStart: () => timerStart(location),\n      handleTimerStop: () => timerStop(location),\n      handleToggleEditorAutorun: () => toggleEditorAutorun(location),\n      handleDebuggerPause: () => beginDebuggerPause(location),\n      handleDebuggerResume: () => debuggerResume(location),\n      handleDebuggerReset: () => debuggerReset(location),\n      handlePromptAutocomplete: (row: number, col: number, callback: any) =>\n        promptAutocomplete(location, row, col, callback)\n    },\n    dispatch\n  );\n\nconst SourcereelContainer = connect(mapStateToProps, mapDispatchToProps)(Sourcereel);\n\nexport default SourcereelContainer;\n","export enum StorySimState {\n  Default = 'Default',\n  ObjectPlacement = 'ObjectPlacement',\n  AssetUploader = 'AssetUploader',\n  CheckpointSim = 'CheckpointSim',\n  ChapterSim = 'ChapterSim'\n}\n\nexport type ChapterDetail = {\n  id: string;\n  openAt: string;\n  closeAt: string;\n  title: string;\n  filenames: string[];\n  isPublished: boolean;\n  imageUrl: string;\n};\n","import { Button, InputGroup, Menu, MenuItem, Popover, Position } from '@blueprintjs/core';\nimport React from 'react';\nimport {\n  s3AssetFolders,\n  uploadAssetsToS3\n} from 'src/features/storySimulator/StorySimulatorService';\n\nconst specifyFolderText = 'Specify own folder...';\nconst folderOverwritePlaceholder = \"Or specify your own, e.g. 'locations/hallway'\";\n\n/**\n * This is component allows storywriters to upload any assets into to\n * specific folders into Story Sim's Asset Uploader\n */\nconst AssetFileUploader = () => {\n  const [fileList, setFileList] = React.useState<FileList>();\n  const [uploadFolder, setUploadFolder] = React.useState<string>(s3AssetFolders[0]);\n\n  const [folderOverwrite, setFolderOverwrite] = React.useState<string>();\n  const [showfolderOverwrite, setShowFolderOverwrite] = React.useState<boolean>(false);\n\n  function handleLoadFile(e: any) {\n    if (!e.target.files) return;\n    const loadedFiles = e.target.files;\n    setFileList(loadedFiles);\n  }\n\n  async function handleUploadButtonClick() {\n    const finalFolder = folderOverwrite || uploadFolder;\n    if (!fileList || !finalFolder) return;\n    const response = await uploadAssetsToS3(fileList, finalFolder);\n    alert(response);\n  }\n\n  function handleChangeUploadFolder(e: any) {\n    if (!e.target.innerText) return;\n    setUploadFolder(e.target.innerText);\n    setShowFolderOverwrite(false);\n  }\n\n  function handleChangeFolderOverwrite(e: any) {\n    setFolderOverwrite(e.target.value);\n  }\n\n  function showSpecifyFolder(e: any) {\n    if (!e.target.innerText) return;\n    setUploadFolder(e.target.innerText);\n    setShowFolderOverwrite(true);\n  }\n\n  return (\n    <div className=\"LeftAlign\">\n      <h4>Choose Folder</h4>\n      <Popover position={Position.BOTTOM}>\n        <Button text={uploadFolder} />\n        <Menu>\n          {s3AssetFolders.map(folder => (\n            <MenuItem onClick={handleChangeUploadFolder} id={folder} key={folder} text={folder} />\n          ))}\n          <MenuItem\n            onClick={showSpecifyFolder}\n            id={specifyFolderText}\n            key={specifyFolderText}\n            text={specifyFolderText}\n          ></MenuItem>\n        </Menu>\n      </Popover>\n      {showfolderOverwrite && (\n        <InputGroup\n          placeholder={folderOverwritePlaceholder}\n          onChange={handleChangeFolderOverwrite}\n        />\n      )}\n      <br />\n      <h4>Choose File</h4>\n      <input type=\"file\" multiple onChange={handleLoadFile} />\n      <Button onClick={handleUploadButtonClick}>Upload</Button>\n    </div>\n  );\n};\n\nexport default AssetFileUploader;\n","import { ITreeNode } from '@blueprintjs/core';\nimport _ from 'lodash';\n\n/**\n * This function applies a function fn to every node in a blueprint core Tree\n *\n * @param nodes All parent nodes of the blueprint core tree\n * @param fn Function to apply to every element in the tree\n */\nexport function treeMap(nodes: ITreeNode[] | undefined, fn: (node: ITreeNode) => void) {\n  nodes &&\n    nodes.forEach(node => {\n      fn(node);\n      treeMap(node.childNodes, fn);\n    });\n}\n\n/**\n * This function takes a list of filepaths\n * (e.g. [\"locations/hallway/normal.png\", \"locations/hallway/emergency.png\"]) and returns\n * blueprint core tree nodes, where each node represents a folder/file.\n *\n * The child of each folder node are the files/folders inside it.\n *\n * @param assetPaths - a list of all filepaths\n * @param iconRenderer - Function that dictates what JSX Element/icon to render beside\n *                       all blueprint core nodes basded on the file path\n * @param rootFolders - a default list of parent folder names that you want to display regardless of\n *                      whether or not they have contents\n * @returns {ITreeNode[]} - a blueprint core tree parent nodes\n */\nexport function assetPathsToTree(\n  assetPaths: string[],\n  iconRenderer: (pathName: string) => JSX.Element,\n  rootFolders: string[] = []\n): ITreeNode[] {\n  const assetObj = {};\n  assetPaths.forEach(assetPath => _.set(assetObj, assetPath.split('/'), 'FILE'));\n  rootFolders.forEach(folder => {\n    if (!assetObj[folder] || assetObj[folder] === 'FILE') {\n      assetObj[folder] = [];\n    }\n  });\n\n  function helper(parentFolders: string[], assetObj: object | Array<string>): ITreeNode[] {\n    return Object.keys(assetObj).map(file => {\n      const shortPath = '/' + parentFolders.join('/') + '/' + file;\n      return {\n        id: shortPath,\n        label: file,\n        secondaryLabel: iconRenderer(shortPath),\n        childNodes:\n          assetObj[file] === 'FILE' ? undefined : helper([...parentFolders, file], assetObj[file])\n      };\n    });\n  }\n  return helper([], assetObj);\n}\n","import React, { memo } from 'react';\nimport { Constants } from 'src/features/game/commons/CommonConstants';\n\ntype AssetProps = {\n  assetPath: string;\n};\n\n/**\n * This file renders one asset path so that story writers can preview\n * the asset\n *\n * @assetPath - the asset to render/preview\n */\nconst AssetViewer = memo(({ assetPath }: AssetProps) => {\n  const displayAssetPath = assetPath || Constants.defaultAssetPath;\n  return (\n    <>\n      <img\n        alt=\"asset\"\n        crossOrigin={'anonymous'}\n        src={Constants.assetsFolder + displayAssetPath}\n        width=\"150px\"\n      ></img>\n    </>\n  );\n});\n\nexport default AssetViewer;\n","import { Icon, ITreeNode, Tooltip, Tree } from '@blueprintjs/core';\nimport React from 'react';\nimport { deleteS3File, s3AssetFolders } from 'src/features/storySimulator/StorySimulatorService';\n\nimport { assetPathsToTree, treeMap } from './StorySimulatorAssetSelectionHelper';\nimport StorySimulatorAssetViewer from './StorySimulatorAssetViewer';\n\ntype TreeState = {\n  nodes: ITreeNode[];\n};\n\ntype Props = {\n  assetPaths: string[];\n};\n\n/**\n * This component takes in all the asset paths and renders them in a folder format\n * where contents of folders are listed, and each folder can be opened/closed.\n *\n * When a file is selected, its filename is stored in session storage, so that\n * Story Simulator's Object Placement can read the filename and load the image.\n *\n * @param assetPaths all the paths of assets in the S3 folder\n */\nconst StorySimulatorAssetSelection = ({ assetPaths }: Props) => {\n  const [currentAsset, setCurrentAsset] = React.useState('');\n  const [assetTree, setAssetTree] = React.useState<TreeState>({ nodes: [] });\n\n  React.useEffect(() => {\n    setAssetTree({ nodes: assetPathsToTree(assetPaths, toolIcons, s3AssetFolders) });\n  }, [assetPaths]);\n\n  const handleNodeClick = (nodeData: ITreeNode) => {\n    treeMap(assetTree.nodes, (node: ITreeNode) => (node.isSelected = false));\n    nodeData.isSelected = !nodeData.isSelected;\n    nodeData.isExpanded = !nodeData.isExpanded;\n    const selectedPath = nodeData.id.toString();\n    if (!nodeData.childNodes) {\n      setCurrentAsset(selectedPath);\n      sessionStorage.setItem('selectedAsset', selectedPath);\n    }\n    setAssetTree({ ...assetTree });\n  };\n\n  return (\n    <>\n      <StorySimulatorAssetViewer assetPath={currentAsset} />\n      <Tree contents={assetTree.nodes} onNodeClick={handleNodeClick} />\n    </>\n  );\n};\n\n/**\n * Tools that are added to asset selection, includes: trash-can delete tool\n *\n * @param filePath the path to asset you want to supply tools for\n * @returns {JSX.Element} A trash can that deletes the file given the asset path\n */\nconst toolIcons = (filePath: string) => (\n  <Tooltip content=\"Delete\">\n    <Icon icon=\"trash\" onClick={deleteFile(filePath)} />\n  </Tooltip>\n);\n\n/**\n * This function deletes an S3 file given the short filepath\n *\n * @param filePath - the file path e.g. \"stories/chapter0.txt\"\n */\nconst deleteFile = (filePath: string) => async () => {\n  const confirm = window.confirm(\n    `Are you sure you want to delete ${filePath}?\\nThere is no undoing this action!`\n  );\n  alert(confirm ? await deleteS3File(filePath) : 'Whew');\n};\n\nexport default StorySimulatorAssetSelection;\n","import { Button } from '@blueprintjs/core';\nimport arrayMove from 'array-move';\nimport React from 'react';\nimport { SortableContainer, SortableElement } from 'react-sortable-hoc';\n\nconst SortableItem = React.memo(\n  SortableElement(({ value }: any) => (\n    <div>\n      <Button>{value}</Button>\n    </div>\n  ))\n);\n\nexport const SortableList = React.memo(\n  SortableContainer(({ items }: any) => {\n    return (\n      <div>\n        {items &&\n          items.map((value: any, index: number) => (\n            <SortableItem key={`item-${value}`} index={index} value={value} />\n          ))}\n      </div>\n    );\n  })\n);\n\nexport const useSortableList = () => {\n  const [items, setItems] = React.useState<string[]>([]);\n\n  const onSortEnd = React.useCallback(({ oldIndex, newIndex }: any) => {\n    setItems(prevState => arrayMove(prevState, oldIndex, newIndex));\n  }, []);\n\n  return {\n    items,\n    setItems,\n    onSortEnd\n  };\n};\n","import { Button, Intent, Switch } from '@blueprintjs/core';\nimport { DatePicker } from '@blueprintjs/datetime';\nimport React from 'react';\nimport { getStandardDateTime } from 'src/commons/utils/DateHelper';\nimport { useInput } from 'src/commons/utils/Hooks';\nimport { SortableList, useSortableList } from 'src/commons/utils/SortableList';\nimport SourceAcademyGame from 'src/features/game/SourceAcademyGame';\nimport { toS3Path } from 'src/features/game/utils/GameUtils';\nimport { callGameManagerForSim } from 'src/features/game/utils/TxtLoaderUtils';\nimport {\n  deleteChapterRequest,\n  updateChapterRequest\n} from 'src/features/storySimulator/StorySimulatorService';\nimport { ChapterDetail } from 'src/features/storySimulator/StorySimulatorTypes';\n\nimport { createChapterIndex, inAYear } from './StorySimulatorChapterSim';\n\ntype ChapterSimProps = {\n  chapterDetail: ChapterDetail;\n  checkpointFilenames?: string[];\n};\n\n/**\n * This is the Chapter Editor Form that\n * storywriters use to either create\n * or udpate chapters for the game.\n *\n * @param chapterDetail the starting state of the form,\n *                      either loaded from defaultChapter if user wants to create a new chapter\n *                      or loaded from the existing chapter if user wants to edit the chapter\n * @param checkpointFilenames the list of all checkpoint text files to choose from\n */\nconst ChapterEditor = React.memo(({ chapterDetail, checkpointFilenames }: ChapterSimProps) => {\n  const { id } = chapterDetail;\n  const { value: title, setValue: setTitle, inputProps: titleProps } = useInput('');\n  const { value: imageUrl, setValue: setImageUrl, inputProps: imageUrlProps } = useInput('');\n  const { items: chosenFiles, setItems: setChosenFiles, onSortEnd } = useSortableList();\n\n  const [isPublished, setIsPublished] = React.useState(false);\n  const [openDate, setOpenDate] = React.useState<Date>(new Date());\n  const [txtsNotChosen, setTxtsNotChosen] = React.useState<string[]>([]);\n  const [rerender, setRender] = React.useState(false);\n\n  React.useEffect(() => {\n    setTitle(chapterDetail.title);\n    setImageUrl(chapterDetail.imageUrl);\n    setOpenDate(new Date(chapterDetail.openAt));\n    setChosenFiles(chapterDetail.filenames);\n    setIsPublished(chapterDetail.isPublished);\n    setTxtsNotChosen(\n      (checkpointFilenames || []).filter(textAsset => !chapterDetail.filenames.includes(textAsset))\n    );\n  }, [\n    chapterDetail,\n    setChosenFiles,\n    setImageUrl,\n    setOpenDate,\n    setTitle,\n    checkpointFilenames,\n    rerender\n  ]);\n\n  const deleteAllFromChosen = () => chosenFiles.map(deleteFileFromChosen);\n\n  const deleteFileFromChosen = React.useCallback(\n    (txtFile: string) => {\n      setChosenFiles(prevItemList => prevItemList.filter(item => item !== txtFile));\n      setTxtsNotChosen(prevItemList => [...prevItemList, txtFile]);\n    },\n    [setChosenFiles]\n  );\n\n  const addFileToChosen = React.useCallback(\n    (txtFile: string) => {\n      setChosenFiles(prevItemList => [...prevItemList, txtFile]);\n      setTxtsNotChosen(prevItemList => prevItemList.filter(item => item !== txtFile));\n    },\n    [setChosenFiles]\n  );\n\n  const saveChapter = async () => {\n    const updatedChapter = {\n      openAt: openDate.toISOString(),\n      closeAt: inAYear(openDate).toISOString(),\n      title,\n      filenames: chosenFiles,\n      imageUrl,\n      isPublished\n    };\n\n    const confirm = window.confirm(\n      `Are you sure you want to save changes to ${JSON.stringify(updatedChapter)}`\n    );\n    if (!confirm) {\n      return;\n    }\n    const response =\n      parseInt(id) === createChapterIndex\n        ? await updateChapterRequest('', updatedChapter)\n        : await updateChapterRequest(id, { story: updatedChapter });\n\n    alert(response);\n  };\n\n  const deleteChapter = async () => {\n    const confirm = window.confirm('Are you sure you want to delete this chapter?');\n    if (confirm) {\n      const response = await deleteChapterRequest(id);\n      alert(response);\n    }\n  };\n\n  const clearChanges = () => {\n    const confirm = window.confirm('Are you you want to clear changes for this chapter?');\n    if (confirm) {\n      setRender(!rerender);\n      alert('Cleared changes');\n    }\n  };\n\n  const simulateChapter = async () => {\n    SourceAcademyGame.getInstance().setChapterSimStack(chosenFiles);\n    await callGameManagerForSim();\n  };\n\n  return (\n    <>\n      <h4>\n        Title: <input className=\"bp3-input\" type=\"text\" {...titleProps} />\n      </h4>\n      <b>Open date: </b>\n      {openDate && getStandardDateTime(openDate.toISOString())}\n      <DatePicker\n        onChange={(date: Date) => {\n          date && setOpenDate(date);\n        }}\n      />\n      <h4>\n        Image url: <input className=\"bp3-input\" type=\"text\" {...imageUrlProps} />\n        <Button onClick={(_: any) => window.open(toS3Path(imageUrl))}>View</Button>\n      </h4>\n      <b>Checkpoint Txt Files</b>\n      <SortableList items={chosenFiles} onSortEnd={onSortEnd} />\n      <br />\n      {chosenFiles.length > 0 && (\n        <Button icon={'delete'} onClick={deleteAllFromChosen}>\n          Clear checkpoint files\n        </Button>\n      )}\n      <br />\n      <b>All Txt Files</b>\n      {txtsNotChosen &&\n        txtsNotChosen.map(textFile => {\n          return (\n            <div key={`choice-${textFile}`}>\n              <Button onClick={() => addFileToChosen(textFile)} icon={'add'}>\n                {textFile}\n              </Button>\n            </div>\n          );\n        })}\n      <br />\n      <Button icon=\"play\" onClick={simulateChapter}>\n        Simulate Chapter\n      </Button>\n      <br />\n      <br />\n      <Switch\n        checked={isPublished}\n        labelElement={'Published'}\n        onChange={() => setIsPublished(!isPublished)}\n      />\n      <Button onClick={saveChapter}>Save Changes</Button>\n      <Button intent={Intent.WARNING} onClick={clearChanges}>\n        Clear Changes\n      </Button>\n      <br />\n      <br />\n      <Button icon=\"trash\" intent={Intent.DANGER} onClick={deleteChapter}>\n        Delete Chapter\n      </Button>\n    </>\n  );\n});\n\nexport default ChapterEditor;\n","import React from 'react';\nimport { useRequest } from 'src/commons/utils/Hooks';\nimport { fetchChapters } from 'src/features/storySimulator/StorySimulatorService';\nimport { ChapterDetail } from 'src/features/storySimulator/StorySimulatorTypes';\n\nimport StorySimulatorChapterEditor from './StorySimulatorChapterEditor';\n\ntype ChapterSequencerProps = {\n  textAssets?: string[];\n};\n\nexport const inAYear = (date: Date) => {\n  date.setFullYear(date.getFullYear() + 1);\n  return date;\n};\n\nexport const createChapterIndex = -1;\nconst defaultChapter = {\n  id: createChapterIndex,\n  title: 'title goes here',\n  imageUrl: '/locations/telebay/emergency.png',\n  openAt: new Date().toISOString(),\n  closeAt: inAYear(new Date()).toISOString(),\n  isPublished: false,\n  filenames: []\n};\n\n/**\n * This components renders the chapter editor/chapter creator component\n * based on the chapter chosen in the dropdown.\n *\n * @param textAssets - the list of all text assets on S3 to choose from\n */\nconst ChapterSim = React.memo(({ textAssets }: ChapterSequencerProps) => {\n  const { value: chapters } = useRequest<ChapterDetail[]>(fetchChapters, []);\n  const [chosenIndex, setChosenIndex] = React.useState(createChapterIndex);\n\n  return (\n    <>\n      <h3>Chapter Simulator</h3>\n      <select className=\"bp3-menu\" onChange={(e: any) => setChosenIndex(e.target.value)}>\n        {chapters.map((chapter, chapterIndex) => (\n          <option value={chapterIndex} key={chapterIndex}>\n            {`Chapter ${chapterIndex}: ${chapter.title}`}\n          </option>\n        ))}\n        <option value={createChapterIndex} key={createChapterIndex}>\n          {`Create new chapter`}\n        </option>\n      </select>\n      <hr />\n      <StorySimulatorChapterEditor\n        chapterDetail={chapters[chosenIndex] || defaultChapter}\n        checkpointFilenames={textAssets}\n      />\n    </>\n  );\n});\nexport default ChapterSim;\n","import FontAssets from 'src/features/game/assets/FontAssets';\nimport { screenSize } from 'src/features/game/commons/CommonConstants';\nimport { BitmapFontStyle } from 'src/features/game/commons/CommonTypes';\nimport { HexColor } from 'src/features/game/utils/StyleUtils';\n\nexport const mainMenuOptStyle: BitmapFontStyle = {\n  key: FontAssets.zektonFont.key,\n  size: 35,\n  fill: HexColor.darkBlue,\n  align: Phaser.GameObjects.BitmapText.ALIGN_CENTER\n};\n\nconst SSMainMenuConstants = {\n  maxOptButtonsRow: 2,\n  optButtonsXSpace: screenSize.x * 0.9,\n  optButtonsYSpace: screenSize.y * 0.5,\n  gameTxtStorageName: {\n    defaultChapter: 'defaultChapter',\n    checkpointTxt: 'checkpointTxt'\n  }\n};\n\nexport default SSMainMenuConstants;\n","import 'ace-builds/webpack-resolver';\n\nimport { Button, Tab, Tabs } from '@blueprintjs/core';\nimport React from 'react';\nimport { toTxtPath } from 'src/features/game/assets/TextAssets';\nimport { Constants } from 'src/features/game/commons/CommonConstants';\n\ntype Props = {\n  storageName: string;\n  s3TxtFiles: string[];\n};\n\n/**\n * This component enables story writers to upload their txt file contents\n * to the browser, or load a file from S3 and store the txt contents\n * in the browser. So that GameManager can read from these txt files\n *\n * @param storageName the field in browser storage where the loaded/fetched txt files get stored temporarily\n * @param s3TxtFiles the list of S3 txt files to choose from\n */\nfunction CheckpointTxtLoader({ storageName, s3TxtFiles }: Props) {\n  const [chosenFilename, setChosenFilename] = React.useState(s3TxtFiles[0]);\n\n  function onLoadTxt(e: any) {\n    if (!e.target.files) return;\n    const [file] = e.target.files;\n    loadFileLocally(storageName, file);\n  }\n\n  async function changeChosenFilename(e: any) {\n    const filename = e.target.value;\n    setChosenFilename(filename);\n    const response = await fetch(`${Constants.assetsFolder}/stories/${filename}`, {\n      headers: createHeadersWithCors()\n    });\n    const txt = await response.text();\n    sessionStorage.setItem(storageName, txt);\n  }\n\n  const uploadButton = <input type=\"file\" onChange={onLoadTxt} style={{ width: '250px' }} />;\n\n  const chooseS3Txt = (\n    <>\n      <select className=\"bp3-menu\" onChange={changeChosenFilename}>\n        {s3TxtFiles.map(file => (\n          <option value={file} key={file}>\n            {file}\n          </option>\n        ))}\n      </select>\n      <Button icon={'download'} onClick={() => window.open(toTxtPath(chosenFilename))} />\n    </>\n  );\n\n  return (\n    <div className=\"LeftAlign\">\n      <hr />\n      <Tabs id=\"Tabs\" key={'vertical'} renderActiveTabPanelOnly={true}>\n        <Tab id=\"own\" title=\"Local\" panel={uploadButton} />\n        <Tab id=\"s3\" title=\"S3\" panel={chooseS3Txt} />\n      </Tabs>\n      <hr />\n    </div>\n  );\n}\n\nconst loadFileLocally = (storageName: string, txtFile: File) => {\n  const reader = new FileReader();\n  reader.readAsText(txtFile);\n  reader.onloadend = _ => {\n    if (!reader.result) {\n      return;\n    }\n    sessionStorage.setItem(storageName, reader.result.toString());\n  };\n};\n\nexport default CheckpointTxtLoader;\n\nfunction createHeadersWithCors(): Headers {\n  const headers = new Headers();\n  headers.append('Access-Control-Allow-Origin', '*');\n  return headers;\n}\n","import { Button } from '@blueprintjs/core';\nimport React from 'react';\nimport SourceAcademyGame from 'src/features/game/SourceAcademyGame';\nimport MainMenu from 'src/features/storySimulator/scenes/mainMenu/MainMenu';\nimport mainMenuConstants from 'src/features/storySimulator/scenes/mainMenu/MainMenuConstants';\n\nimport CheckpointTxtLoader from './StorySimulatorCheckpointTxtLoader';\n\ntype Props = {\n  textAssets: string[];\n};\n\n/**\n * This component helps one simulate a checkpoint by\n * supplying two txt files - the default txt file\n * and the checkpoint txt file\n *\n * @param textAssets these are the list of text files on S3, if storywriter's simulation\n *                   involves S3 text files.\n */\nexport default function CheckpointSim({ textAssets }: Props) {\n  function simulateCheckpoint() {\n    (SourceAcademyGame.getInstance().getCurrentSceneRef() as MainMenu).simulateCheckpoint();\n  }\n\n  return (\n    <>\n      <h3>Checkpoint Text Loader</h3>\n      <b>Step 1: Choose default checkpoint</b>\n      <CheckpointTxtLoader\n        s3TxtFiles={textAssets}\n        storageName={mainMenuConstants.gameTxtStorageName.defaultChapter}\n      />\n      <b>Step 2: Choose checkpoint text</b>\n      <CheckpointTxtLoader\n        s3TxtFiles={textAssets}\n        storageName={mainMenuConstants.gameTxtStorageName.checkpointTxt}\n      />\n      <br />\n      <Button onClick={simulateCheckpoint} icon=\"play\">\n        Simulate Checkpoint\n      </Button>\n      <br />\n      <br />\n      <Button onClick={clearSessionStorage}>Reset All Files</Button>\n      <br />\n    </>\n  );\n}\n\nfunction clearSessionStorage(e: any) {\n  sessionStorage.setItem(mainMenuConstants.gameTxtStorageName.checkpointTxt, '');\n  sessionStorage.setItem(mainMenuConstants.gameTxtStorageName.defaultChapter, '');\n}\n","import { ImageAssetMap } from 'src/features/game/assets/AssetsTypes';\n\nconst SSImageAssets: ImageAssetMap = {\n  storySimBg: { key: 'student-room', path: '/locations/deathCube_ext/shields-down.png' },\n  mainMenuOptBanner: { key: 'menu-option', path: '/ui/menuOption.png' },\n  shortButton: { key: 'short-button', path: '/ui/shortButton.png' },\n  invertedButton: { key: 'inverted-button', path: '/ui/invertedColorButton.png' },\n  blueUnderlay: { key: 'blue-underlay', path: '/ui/blueUnderlay.png' },\n  topButton: { key: 'top-button', path: '/ui/topButton.png' },\n  colorIcon: { key: 'color-icon', path: '/ui/colorIcon.png' },\n  imageIcon: { key: 'image-icon', path: '/ui/imageIcon.png' },\n  bboxIcon: { key: 'bbox-icon', path: '/ui/bboxIcon.png' },\n  handIcon: { key: 'hand-icon', path: '/ui/handIcon.png' },\n  listIcon: { key: 'list-icon', path: '/ui/listIcon.png' },\n  eraseIcon: { key: 'erase-icon', path: '/ui/eraserIcon.png' },\n  iconBg: { key: 'icon-bg', path: '/ui/modeIconBg.png' },\n  longButton: { key: 'long-button', path: '/ui/longButton.png' }\n};\n\nexport default SSImageAssets;\n","import FontAssets from 'src/features/game/assets/FontAssets';\nimport ImageAssets from 'src/features/game/assets/ImageAssets';\nimport SoundAssets from 'src/features/game/assets/SoundAssets';\nimport { screenCenter, screenSize } from 'src/features/game/commons/CommonConstants';\nimport { addLoadingScreen } from 'src/features/game/effects/LoadingScreen';\nimport GameLayerManager from 'src/features/game/layer/GameLayerManager';\nimport { Layer } from 'src/features/game/layer/GameLayerTypes';\nimport Parser from 'src/features/game/parser/Parser';\nimport SourceAcademyGame from 'src/features/game/SourceAcademyGame';\nimport { createButton } from 'src/features/game/utils/ButtonUtils';\nimport { toS3Path } from 'src/features/game/utils/GameUtils';\nimport { calcTableFormatPos } from 'src/features/game/utils/StyleUtils';\n\nimport SSImageAssets from '../../assets/ImageAssets';\nimport { StorySimState } from '../../StorySimulatorTypes';\nimport mainMenuConstants, { mainMenuOptStyle } from './MainMenuConstants';\n\n/**\n * Entry point for story simulator.\n *\n * User can access different story simulator\n * functionalities from here.\n */\nclass MainMenu extends Phaser.Scene {\n  private layerManager: GameLayerManager;\n\n  constructor() {\n    super('StorySimulatorMenu');\n    this.layerManager = new GameLayerManager();\n  }\n  public init() {\n    SourceAcademyGame.getInstance().setCurrentSceneRef(this);\n    this.layerManager.initialise(this);\n  }\n\n  public preload() {\n    addLoadingScreen(this);\n    Object.values(ImageAssets).forEach(asset => this.load.image(asset.key, toS3Path(asset.path)));\n    Object.values(SSImageAssets).forEach(asset => this.load.image(asset.key, toS3Path(asset.path)));\n    Object.values(FontAssets).forEach(asset =>\n      this.load.bitmapFont(asset.key, asset.pngPath, asset.fntPath)\n    );\n    SourceAcademyGame.getInstance().getSoundManager().loadSoundAssetMap(SoundAssets);\n  }\n\n  public async create() {\n    if (SourceAcademyGame.getInstance().getAccountInfo().role === 'student') {\n      console.log('Students cannot use story sim');\n      return;\n    }\n    this.renderBackground();\n    this.renderOptionButtons();\n  }\n\n  private renderOptionButtons() {\n    const optionsContainer = new Phaser.GameObjects.Container(this, 0, 0);\n    const buttons = this.getOptionButtons();\n\n    const buttonPositions = calcTableFormatPos({\n      numOfItems: buttons.length,\n      maxXSpace: mainMenuConstants.optButtonsXSpace,\n      maxYSpace: mainMenuConstants.optButtonsYSpace,\n      numItemLimit: mainMenuConstants.maxOptButtonsRow,\n      redistributeLast: true\n    });\n\n    optionsContainer.add(\n      buttons.map((button, index) =>\n        this.createOptButton(\n          button.text,\n          buttonPositions[index][0],\n          buttonPositions[index][1],\n          button.callback\n        )\n      )\n    );\n    this.layerManager.addToLayer(Layer.UI, optionsContainer);\n  }\n\n  private getOptionButtons() {\n    return [\n      {\n        text: 'Object Placement',\n        callback: () => {\n          SourceAcademyGame.getInstance().setStorySimState(StorySimState.ObjectPlacement);\n          this.layerManager.clearAllLayers();\n          this.scene.start('ObjectPlacement');\n        }\n      },\n      {\n        text: 'Checkpoint Simulator',\n        callback: () => {\n          SourceAcademyGame.getInstance().setStorySimState(StorySimState.CheckpointSim);\n        }\n      },\n      {\n        text: 'Asset Uploader',\n        callback: () => {\n          SourceAcademyGame.getInstance().setStorySimState(StorySimState.AssetUploader);\n        }\n      },\n      {\n        text: 'Chapter Simulator',\n        callback: () => {\n          SourceAcademyGame.getInstance().setStorySimState(StorySimState.ChapterSim);\n        }\n      }\n    ];\n  }\n\n  private createOptButton(text: string, xPos: number, yPos: number, callback: any) {\n    return createButton(this, {\n      assetKey: SSImageAssets.invertedButton.key,\n      message: text,\n      textConfig: { x: 0, y: 0, oriX: 0.5, oriY: 0.5 },\n      bitMapTextStyle: mainMenuOptStyle,\n      onUp: callback\n    }).setPosition(xPos, yPos);\n  }\n\n  public simulateCheckpoint() {\n    const defaultChapterText =\n      sessionStorage.getItem(mainMenuConstants.gameTxtStorageName.defaultChapter) || '';\n    const checkpointTxt =\n      sessionStorage.getItem(mainMenuConstants.gameTxtStorageName.checkpointTxt) || '';\n    if (defaultChapterText === '' && checkpointTxt === '') {\n      return;\n    }\n    this.layerManager.clearAllLayers();\n    Parser.parse(defaultChapterText);\n    if (checkpointTxt) {\n      Parser.parse(checkpointTxt, true);\n    }\n    const gameCheckpoint = Parser.checkpoint;\n\n    this.scene.start('GameManager', {\n      gameCheckpoint,\n      chapterNum: -1,\n      checkpointNum: -1\n    });\n  }\n\n  private renderBackground() {\n    const backgroundImg = new Phaser.GameObjects.Image(\n      this,\n      screenCenter.x,\n      screenCenter.y,\n      SSImageAssets.storySimBg.key\n    );\n    backgroundImg.setDisplaySize(screenSize.x, screenSize.y);\n    const backgroundUnderlay = new Phaser.GameObjects.Image(\n      this,\n      screenCenter.x,\n      screenCenter.y,\n      SSImageAssets.blueUnderlay.key\n    ).setAlpha(0.5);\n    this.layerManager.addToLayer(Layer.Background, backgroundImg);\n    this.layerManager.addToLayer(Layer.Background, backgroundUnderlay);\n  }\n}\n\nexport default MainMenu;\n","import { Constants, screenCenter } from 'src/features/game/commons/CommonConstants';\nimport { AssetKey } from 'src/features/game/commons/CommonTypes';\nimport { Layer } from 'src/features/game/layer/GameLayerTypes';\nimport { mandatory } from 'src/features/game/utils/GameUtils';\n\nimport { loadImage } from '../../game/utils/LoaderUtils';\nimport ObjectPlacement from '../scenes/ObjectPlacement/ObjectPlacement';\n\nexport default class SSBackgroundManager {\n  private backgroundAssetPath: string | undefined;\n  private objectPlacement: ObjectPlacement | undefined;\n  public x: number;\n  public y: number;\n\n  public constructor() {\n    this.x = screenCenter.x;\n    this.y = screenCenter.y;\n  }\n\n  public initialise(objectPlacement: ObjectPlacement) {\n    this.objectPlacement = objectPlacement;\n  }\n\n  public async loadBackground() {\n    const shortPath = sessionStorage.getItem('selectedAsset');\n    if (!shortPath || !shortPath.startsWith('/locations/')) {\n      return;\n    }\n    this.backgroundAssetPath = shortPath;\n\n    const backgroundAssetKey = `!${shortPath}`;\n    this.getObjectPlacement().addAsset(backgroundAssetKey, shortPath);\n\n    const assetKeyOnLoad = await loadImage(\n      this.getObjectPlacement(),\n      backgroundAssetKey,\n      Constants.assetsFolder + shortPath\n    );\n    this.renderBackground(assetKeyOnLoad);\n  }\n\n  private renderBackground(backgroundAssetKey: AssetKey) {\n    if (backgroundAssetKey[0] !== '!') {\n      return;\n    }\n\n    this.getObjectPlacement().layerManager.clearLayerContents(Layer.Background);\n    const backgroundSprite = new Phaser.GameObjects.Image(\n      this.getObjectPlacement(),\n      screenCenter.x,\n      screenCenter.y,\n      backgroundAssetKey\n    ).setInteractive();\n    this.getObjectPlacement().layerManager.addToLayer(Layer.Background, backgroundSprite);\n  }\n\n  private getObjectPlacement = () => mandatory(this.objectPlacement);\n\n  public getBackgroundAssetPath() {\n    return this.backgroundAssetPath;\n  }\n\n  public screenLog() {\n    return this.backgroundAssetPath + '\\n';\n  }\n}\n","export enum CursorMode {\n  DrawBBox,\n  DragResizeObj\n}\n","import { ItemId } from 'src/features/game/commons/CommonTypes';\nimport { Layer } from 'src/features/game/layer/GameLayerTypes';\nimport { mandatory } from 'src/features/game/utils/GameUtils';\nimport { resize } from 'src/features/game/utils/SpriteUtils';\nimport StringUtils from 'src/features/game/utils/StringUtils';\nimport { HexColor } from 'src/features/game/utils/StyleUtils';\n\nimport { CursorMode } from '../cursorMode/SSCursorModeTypes';\nimport { ICheckpointLoggable } from '../logger/SSLogManagerTypes';\nimport ObjectPlacement from '../scenes/ObjectPlacement/ObjectPlacement';\nimport { SSBBoxDetail } from './SSBBoxManagerTypes';\n\nexport default class SSBBoxManager implements ICheckpointLoggable {\n  public checkpointTitle = 'boundingBoxes';\n\n  private objectPlacement: ObjectPlacement | undefined;\n  private bboxBeingDrawn: Phaser.GameObjects.Rectangle | undefined;\n  private startingCoordinates: number[] | undefined;\n  private bboxDetailMap: Map<ItemId, SSBBoxDetail>;\n\n  constructor() {\n    this.bboxDetailMap = new Map<ItemId, SSBBoxDetail>();\n  }\n\n  public initialise(objectPlacement: ObjectPlacement) {\n    this.objectPlacement = objectPlacement;\n    this.addBBoxListeners(objectPlacement);\n  }\n\n  private addBBoxListeners(objectPlacement: ObjectPlacement) {\n    this.getObjectPlacement().inputManager.registerEventListener('pointerdown', () => {\n      if (this.getObjectPlacement().isCursorMode(CursorMode.DrawBBox)) {\n        this.bboxBeingDrawn = this.createNewBBox();\n      }\n    });\n\n    this.getObjectPlacement().inputManager.registerEventListener('pointerup', () => {\n      if (this.getObjectPlacement().isCursorMode(CursorMode.DrawBBox) && this.bboxBeingDrawn) {\n        if (this.bboxBeingDrawn.displayWidth <= 2 || this.bboxBeingDrawn.displayHeight <= 2) {\n          this.bboxBeingDrawn.destroy();\n          return;\n        }\n        this.bboxBeingDrawn.x += this.bboxBeingDrawn.displayWidth / 2;\n        this.bboxBeingDrawn.y += this.bboxBeingDrawn.displayHeight / 2;\n        this.bboxBeingDrawn.setOrigin(0.5);\n        this.registerBBox(this.bboxBeingDrawn);\n\n        objectPlacement.input.setDraggable(this.bboxBeingDrawn);\n        this.getObjectPlacement().setActiveSelection(this.bboxBeingDrawn);\n\n        this.startingCoordinates = undefined;\n        this.bboxBeingDrawn = undefined;\n      }\n    });\n  }\n\n  private createNewBBox() {\n    const [x, y] = this.getObjectPlacement().getCoordinates();\n    const bboxBeingDrawn = new Phaser.GameObjects.Rectangle(\n      this.getObjectPlacement(),\n      x,\n      y,\n      1,\n      1,\n      HexColor.white\n    )\n      .setOrigin(0)\n      .setAlpha(0.1)\n      .setInteractive()\n      .setDataEnabled();\n\n    this.startingCoordinates = [x, y];\n    this.getObjectPlacement().layerManager.addToLayer(Layer.BBox, bboxBeingDrawn);\n    return bboxBeingDrawn;\n  }\n\n  private registerBBox(bboxSprite: Phaser.GameObjects.Rectangle) {\n    const itemId = 'bbox' + this.getObjectPlacement().generateItemIdNumber();\n\n    const objectDetail: SSBBoxDetail = {\n      id: itemId,\n      x: bboxSprite.x,\n      y: bboxSprite.y,\n      width: bboxSprite.displayWidth,\n      height: bboxSprite.displayHeight\n    };\n\n    this.bboxDetailMap.set(itemId, objectDetail);\n\n    bboxSprite.data.set('itemId', itemId);\n    bboxSprite.data.set('type', 'bbox');\n  }\n\n  public getLoggables() {\n    return [...this.bboxDetailMap.values()];\n  }\n\n  public getItemById(itemId: ItemId) {\n    return this.bboxDetailMap.get(itemId);\n  }\n\n  private getObjectPlacement = () => mandatory(this.objectPlacement);\n\n  public resizeWhileBeingDrawn(objectPlacement: ObjectPlacement) {\n    if (\n      !this.getObjectPlacement().isCursorMode(CursorMode.DrawBBox) ||\n      !this.startingCoordinates ||\n      !this.bboxBeingDrawn\n    ) {\n      return;\n    }\n    const [startX, startY] = this.startingCoordinates;\n    const currentX = objectPlacement.input.x;\n    const currentY = objectPlacement.input.y;\n    resize(this.bboxBeingDrawn, currentX - startX, currentY - startY);\n  }\n\n  public checkpointTxtLog() {\n    const map: string[] = [];\n    this.bboxDetailMap.forEach((bboxDetail: SSBBoxDetail) => {\n      const bboxDetailArray = [\n        '+' + bboxDetail.id,\n        StringUtils.toIntString(bboxDetail.x),\n        StringUtils.toIntString(bboxDetail.y),\n        StringUtils.toIntString(bboxDetail.width),\n        StringUtils.toIntString(bboxDetail.height)\n      ];\n\n      map.push(bboxDetailArray.join(', '));\n      map.push('    show_dialogue*(click)');\n    });\n    return map;\n  }\n\n  public setAttribute(\n    gameObject: Phaser.GameObjects.Rectangle | Phaser.GameObjects.Image,\n    attribute: string,\n    value: number\n  ) {\n    const itemId = gameObject.data.get('itemId');\n    const bboxDetail = this.bboxDetailMap.get(itemId);\n    if (!bboxDetail) return;\n    bboxDetail[attribute] = value;\n  }\n\n  public deleteAll() {\n    this.bboxDetailMap.clear();\n  }\n\n  public delete(gameObject: Phaser.GameObjects.Image | Phaser.GameObjects.Rectangle) {\n    const itemId = gameObject.data.get('itemId');\n    this.bboxDetailMap.delete(itemId);\n  }\n}\n","import FontAssets from 'src/features/game/assets/FontAssets';\nimport { BitmapFontStyle } from 'src/features/game/commons/CommonTypes';\nimport { HexColor } from 'src/features/game/utils/StyleUtils';\n\nexport const altTextStyle: BitmapFontStyle = {\n  key: FontAssets.zektonFont.key,\n  size: 20,\n  fill: HexColor.lightBlue,\n  align: Phaser.GameObjects.BitmapText.ALIGN_LEFT\n};\n\nconst iconBgSize = 55;\n\nconst SSCursorModeConstants = {\n  iconBgSize: iconBgSize,\n  iconSize: 40,\n  iconSpacing: 15,\n  inactiveAlpha: 0.7,\n  onHoverAlpha: 1.0,\n  activeAlpha: 0.9\n};\n\nexport default SSCursorModeConstants;\n","import { Constants } from 'src/features/game/commons/CommonConstants';\nimport CommonTextHover from 'src/features/game/commons/CommonTextHover';\nimport { AssetKey } from 'src/features/game/commons/CommonTypes';\nimport { createButton } from 'src/features/game/utils/ButtonUtils';\n\nimport SSImageAssets from '../assets/ImageAssets';\nimport SSCursorModeConstants, { altTextStyle } from './SSCursorModeConstants';\nimport { CursorMode } from './SSCursorModeTypes';\n\nexport default class SSCursorMode extends Phaser.GameObjects.Container {\n  private isModes: Array<boolean>;\n  private currCursorMode: CursorMode;\n  private cursorModes: Array<Phaser.GameObjects.Container>;\n  private currActiveModeIdx: number;\n\n  constructor(\n    scene: Phaser.Scene,\n    x?: number,\n    y?: number,\n    defaultCursorMode: CursorMode = CursorMode.DragResizeObj\n  ) {\n    super(scene, x, y);\n    this.currCursorMode = defaultCursorMode;\n    this.isModes = new Array<boolean>();\n    this.cursorModes = new Array<Phaser.GameObjects.Container>();\n    this.currActiveModeIdx = Constants.nullSequenceNumber;\n  }\n\n  public getCurrCursorMode() {\n    return this.currCursorMode;\n  }\n\n  public setCursorMode(newMode: CursorMode) {\n    this.currCursorMode = newMode;\n  }\n\n  public addCursorMode(\n    scene: Phaser.Scene,\n    assetKey: AssetKey,\n    isMode: boolean = true,\n    text: string = '',\n    onClick: () => void = Constants.nullFunction,\n    onHover: () => void = Constants.nullFunction,\n    onOut: () => void = Constants.nullFunction\n  ) {\n    // Main container\n    const cursorModeContainer = new Phaser.GameObjects.Container(scene, 0, 0);\n\n    // Update\n    this.isModes.push(isMode);\n    this.cursorModes.push(cursorModeContainer);\n    const currIdx = this.cursorModes.length - 1;\n\n    // On hover text container\n    const hoverText = new CommonTextHover(scene, 0, 0, text, altTextStyle);\n\n    const onUp = () => {\n      if (this.isModes[currIdx]) this.currActiveModeIdx = currIdx;\n      onClick();\n      this.renderCursorModesContainer();\n    };\n\n    const onHoverWrapper = () => {\n      if (text !== '') hoverText.setVisible(true);\n      cursorModeContainer.setAlpha(SSCursorModeConstants.onHoverAlpha);\n      onHover();\n    };\n\n    const onOutWrapper = () => {\n      hoverText.setVisible(false);\n      const activeMode = currIdx === this.currActiveModeIdx && this.isModes[currIdx];\n      cursorModeContainer.setAlpha(\n        activeMode ? SSCursorModeConstants.activeAlpha : SSCursorModeConstants.inactiveAlpha\n      );\n      onOut();\n    };\n\n    const modeButton = createButton(scene, {\n      assetKey: SSImageAssets.iconBg.key,\n      onUp: onUp,\n      onHover: onHoverWrapper,\n      onOut: onOutWrapper,\n      onPointerMove: (pointer: Phaser.Input.Pointer) => {\n        hoverText.x = pointer.x - cursorModeContainer.x - 100;\n        hoverText.y = pointer.y - cursorModeContainer.y - 100;\n      },\n      onHoverEffect: false\n    });\n\n    // Icon\n    const modeIcon = new Phaser.GameObjects.Sprite(scene, 0, 0, assetKey).setDisplaySize(\n      SSCursorModeConstants.iconSize,\n      SSCursorModeConstants.iconSize\n    );\n\n    modeButton.add(modeIcon);\n\n    cursorModeContainer.add([modeButton, hoverText]);\n  }\n\n  public renderCursorModesContainer() {\n    this.removeAll(false);\n    let spacing = 0;\n    this.cursorModes.forEach((mode, index) => {\n      mode.setPosition(0, spacing);\n      const activeMode = index === this.currActiveModeIdx && this.isModes[index];\n      mode.setAlpha(\n        activeMode ? SSCursorModeConstants.activeAlpha : SSCursorModeConstants.inactiveAlpha\n      );\n      this.add(mode);\n      spacing += SSCursorModeConstants.iconBgSize + SSCursorModeConstants.iconSpacing;\n    });\n  }\n}\n","import FontAssets from 'src/features/game/assets/FontAssets';\nimport { BitmapFontStyle } from 'src/features/game/commons/CommonTypes';\nimport { HexColor } from 'src/features/game/utils/StyleUtils';\n\nexport const loggableStyle: BitmapFontStyle = {\n  key: FontAssets.zektonFont.key,\n  size: 27,\n  fill: HexColor.lightBlue,\n  align: Phaser.GameObjects.BitmapText.ALIGN_LEFT\n};\n","import { AssetPath } from 'src/features/game/commons/CommonTypes';\n\nexport function getIdFromShortPath(shortPath: AssetPath) {\n  return shortPath.split('/').pop()!.split('.')[0];\n}\n\nexport const padWithTab = (str: string) => '    ' + str;\n","import { AssetPath } from 'src/features/game/commons/CommonTypes';\nimport { mandatory } from 'src/features/game/utils/GameUtils';\nimport StringUtils from 'src/features/game/utils/StringUtils';\nimport { HexColor } from 'src/features/game/utils/StyleUtils';\nimport { createBitmapText } from 'src/features/game/utils/TextUtils';\n\nimport ObjectPlacement from '../scenes/ObjectPlacement/ObjectPlacement';\nimport { loggableStyle } from './SSLogConstants';\nimport { getIdFromShortPath, padWithTab } from './SSLogManagerHelper';\nimport { ICheckpointLoggable, IScreenLoggable } from './SSLogManagerTypes';\n\nexport default class SSLogManager {\n  private detailMapContainer: Phaser.GameObjects.Container | undefined;\n  private objectPlacement: ObjectPlacement | undefined;\n\n  public initialise(objectPlacement: ObjectPlacement) {\n    this.objectPlacement = objectPlacement;\n  }\n\n  public printCheckpoint(\n    locationAssetPath: AssetPath = '/locations/yourRoom-dim/normal.png',\n    checkpointLoggers: ICheckpointLoggable[]\n  ) {\n    const locationId = locationAssetPath === '' ? 'default' : getIdFromShortPath(locationAssetPath);\n\n    const loggables = checkpointLoggers.map(checkpointLogger => {\n      const txt = checkpointLogger.checkpointTxtLog();\n      if (!txt) {\n        return '';\n      }\n      const details = `${checkpointLogger.checkpointTitle}\\n${txt\n        .map(padWithTab)\n        .map(padWithTab)\n        .join('\\n')}`;\n\n      return details;\n    });\n\n    const checkpoint = `\nstartingLoc: ${locationId}\n\nobjectives\n    talk\n\nlocations\n    ${locationId}, ${locationAssetPath}, ${StringUtils.toCapitalizedWords(locationAssetPath)}\n\n${locationId}\n    modes: explore\n    actions\n        show_dialogue(welcome)\n${loggables.map(padWithTab).join('\\n')}\n\ndialogues\n    welcome\n        Congrats on creating your scene\n    click\n        Invisible bounding box is right here\n`;\n    alert('Chapter ready!');\n    console.log(checkpoint);\n  }\n\n  public showDetailMap(loggables: IScreenLoggable[]) {\n    this.detailMapContainer = new Phaser.GameObjects.Container(this.getObjectPlacement(), 0, 0);\n\n    loggables.forEach((loggable: IScreenLoggable) => {\n      const loggerRectangle = new Phaser.GameObjects.Rectangle(\n        this.getObjectPlacement(),\n        loggable.x,\n        loggable.y,\n        400,\n        210,\n        HexColor.darkBlue\n      )\n        .setOrigin(0.0, 0.5)\n        .setAlpha(0.9);\n\n      const loggerText = createBitmapText(\n        this.getObjectPlacement(),\n        this.formatObjectDetails(loggable),\n        { x: loggable.x + 20, y: loggable.y + 10, oriX: 0.0, oriY: 0.6 },\n        loggableStyle\n      ).setLetterSpacing(3);\n\n      this.detailMapContainer!.add([loggerRectangle, loggerText]);\n    });\n    this.getObjectPlacement().add.existing(this.detailMapContainer);\n  }\n\n  private formatObjectDetails(loggable: IScreenLoggable) {\n    return Object.entries(loggable)\n      .map(\n        ([key, value]) =>\n          `${key}: ${typeof value === 'number' ? StringUtils.toIntString(value) : value.toString()}`\n      )\n      .join('\\n');\n  }\n\n  public hideDetailMap() {\n    if (this.detailMapContainer) {\n      this.detailMapContainer.destroy();\n    }\n  }\n\n  private getObjectPlacement = () => mandatory(this.objectPlacement);\n}\n","import { Constants, screenCenter } from 'src/features/game/commons/CommonConstants';\nimport { AssetKey, ItemId } from 'src/features/game/commons/CommonTypes';\nimport { Layer } from 'src/features/game/layer/GameLayerTypes';\nimport { mandatory } from 'src/features/game/utils/GameUtils';\nimport StringUtils from 'src/features/game/utils/StringUtils';\n\nimport { loadImage } from '../../game/utils/LoaderUtils';\nimport { getIdFromShortPath } from '../logger/SSLogManagerHelper';\nimport { ICheckpointLoggable } from '../logger/SSLogManagerTypes';\nimport ObjectPlacement from '../scenes/ObjectPlacement/ObjectPlacement';\nimport { SSObjectDetail } from './SSObjectManagerTypes';\n\nexport default class SSObjectManager implements ICheckpointLoggable {\n  public checkpointTitle = 'objects';\n\n  private objectPlacement: ObjectPlacement | undefined;\n  private objectDetailMap: Map<ItemId, SSObjectDetail>;\n\n  constructor() {\n    this.objectDetailMap = new Map<ItemId, SSObjectDetail>();\n  }\n\n  public initialise(objectPlacement: ObjectPlacement) {\n    this.objectPlacement = objectPlacement;\n    this.objectDetailMap = new Map<ItemId, SSObjectDetail>();\n  }\n\n  public async loadObject() {\n    const shortPath = sessionStorage.getItem('selectedAsset');\n    if (!shortPath) return;\n    const objectAssetKey = `#${shortPath}`;\n    this.getObjectPlacement().addAsset(objectAssetKey, shortPath);\n\n    const assetKeyOnLoad = await loadImage(\n      this.getObjectPlacement(),\n      objectAssetKey,\n      Constants.assetsFolder + shortPath\n    );\n    this.renderObject(assetKeyOnLoad);\n  }\n\n  private renderObject(objectAssetKey: string) {\n    if (objectAssetKey[0] !== '#') {\n      return;\n    }\n    const objectSprite = new Phaser.GameObjects.Image(\n      this.getObjectPlacement(),\n      screenCenter.x,\n      screenCenter.y,\n      objectAssetKey\n    )\n      .setInteractive()\n      .setDataEnabled();\n    this.getObjectPlacement().input.setDraggable(objectSprite);\n    this.getObjectPlacement().layerManager.addToLayer(Layer.Objects, objectSprite);\n\n    this.registerObject(objectAssetKey, objectSprite);\n  }\n\n  private registerObject(objectAssetKey: AssetKey, objectSprite: Phaser.GameObjects.Image) {\n    const itemId = this.generateItemId(\n      objectAssetKey,\n      this.getObjectPlacement().generateItemIdNumber()\n    );\n\n    const assetShortPath = mandatory(this.getObjectPlacement().getAssetPath(objectAssetKey));\n\n    const objectDetail: SSObjectDetail = {\n      id: itemId,\n      assetKey: objectAssetKey,\n      assetPath: assetShortPath,\n      x: screenCenter.x,\n      y: screenCenter.y\n    };\n\n    this.objectDetailMap.set(itemId, objectDetail);\n\n    objectSprite.data.set('itemId', itemId);\n    objectSprite.data.set('type', 'object');\n\n    this.getObjectPlacement().setActiveSelection(objectSprite);\n  }\n\n  private generateItemId(assetKey: string, objectIdNumber: number) {\n    const itemName = getIdFromShortPath(assetKey);\n    return `${itemName}${objectIdNumber}`;\n  }\n\n  public getLoggables() {\n    return [...this.objectDetailMap.values()];\n  }\n\n  public checkpointTxtLog() {\n    return Array.from(this.objectDetailMap.values()).map((objectDetail: SSObjectDetail) => {\n      const objectDetailArray = [\n        '+' + objectDetail.id,\n        objectDetail.assetPath,\n        StringUtils.toIntString(objectDetail.x),\n        StringUtils.toIntString(objectDetail.y)\n      ];\n      if (objectDetail.width) {\n        objectDetailArray.push(StringUtils.toIntString(objectDetail.width));\n        objectDetailArray.push(StringUtils.toIntString(objectDetail.height!));\n      }\n      return objectDetailArray.join(', ');\n    });\n  }\n\n  private getObjectPlacement = () => mandatory(this.objectPlacement);\n\n  public setAttribute(\n    gameObject: Phaser.GameObjects.Image | Phaser.GameObjects.Rectangle,\n    attribute: string,\n    value: number\n  ) {\n    const itemId = gameObject.data.get('itemId');\n    const itemDetail = this.objectDetailMap.get(itemId);\n    if (!itemDetail) return;\n    itemDetail[attribute] = value;\n  }\n\n  public deleteAll() {\n    this.objectDetailMap.clear();\n  }\n\n  public delete(gameObject: Phaser.GameObjects.Image | Phaser.GameObjects.Rectangle) {\n    const itemId = gameObject.data.get('itemId');\n    this.objectDetailMap.delete(itemId);\n  }\n}\n","const transformConstants = {\n  activeSelectMargin: 30,\n  scaleFactor: 1.02\n};\n\nexport default transformConstants;\n","import { Layer } from 'src/features/game/layer/GameLayerTypes';\nimport { mandatory } from 'src/features/game/utils/GameUtils';\nimport { multiplyDimensions } from 'src/features/game/utils/SpriteUtils';\n\nimport { CursorMode } from '../cursorMode/SSCursorModeTypes';\nimport ObjectPlacement from '../scenes/ObjectPlacement/ObjectPlacement';\nimport transformConstants from './SSTransformManagerConstants';\n\nexport default class SSTransformManager {\n  private activeSelection: Phaser.GameObjects.Image | Phaser.GameObjects.Rectangle | undefined;\n  private activeSelectRect: Phaser.GameObjects.Rectangle | undefined;\n  private objectPlacement: ObjectPlacement | undefined;\n\n  public initialise(objectPlacement: ObjectPlacement) {\n    this.objectPlacement = objectPlacement;\n    this.trackDraggables(objectPlacement);\n    this.drawActiveSelectRect();\n    this.bindDeleteKey();\n  }\n\n  private drawActiveSelectRect() {\n    this.activeSelectRect = new Phaser.GameObjects.Rectangle(\n      this.getObjectPlacement(),\n      0,\n      0,\n      1,\n      1,\n      0\n    ).setAlpha(0.3);\n    this.getObjectPlacement().layerManager.addToLayer(Layer.Selector, this.activeSelectRect);\n  }\n\n  private trackDraggables(objectPlacement: ObjectPlacement) {\n    objectPlacement.inputManager.registerEventListener(\n      'drag',\n      (\n        pointer: MouseEvent,\n        gameObject: Phaser.GameObjects.Image | Phaser.GameObjects.Rectangle,\n        dragX: number,\n        dragY: number\n      ) => {\n        if (!objectPlacement.isCursorMode(CursorMode.DrawBBox)) {\n          objectPlacement.getCursorManager().setCursorMode(CursorMode.DragResizeObj);\n          gameObject.x = dragX;\n          gameObject.y = dragY;\n        }\n\n        if (gameObject.data.get('type') === 'object') {\n          objectPlacement.setObjAttribute(gameObject, 'x', dragX);\n          objectPlacement.setObjAttribute(gameObject, 'y', dragY);\n          this.setActiveSelection(gameObject);\n        }\n\n        if (gameObject.data.get('type') === 'bbox') {\n          objectPlacement.setBBoxAttribute(gameObject, 'x', dragX);\n          objectPlacement.setBBoxAttribute(gameObject, 'y', dragY);\n          this.setActiveSelection(gameObject);\n        }\n      }\n    );\n  }\n\n  public resizeActive(enlarge: boolean) {\n    const objectPlacement = this.getObjectPlacement();\n    if (!this.activeSelection || !this.activeSelectRect) {\n      return;\n    }\n    const factor = enlarge ? transformConstants.scaleFactor : 1 / transformConstants.scaleFactor;\n    multiplyDimensions(this.activeSelection, factor);\n    this.activeSelectRect.displayHeight =\n      this.activeSelection.displayHeight + transformConstants.activeSelectMargin;\n    this.activeSelectRect.displayWidth =\n      this.activeSelection.displayWidth + transformConstants.activeSelectMargin;\n\n    if (this.activeSelection.data.get('type') === 'object') {\n      objectPlacement.setObjAttribute(\n        this.activeSelection,\n        'width',\n        Math.abs(this.activeSelection.displayWidth)\n      );\n      objectPlacement.setObjAttribute(\n        this.activeSelection,\n        'height',\n        Math.abs(this.activeSelection.displayHeight)\n      );\n    }\n\n    if (this.activeSelection.data.get('type') === 'bbox') {\n      objectPlacement.setBBoxAttribute(\n        this.activeSelection,\n        'width',\n        Math.abs(this.activeSelection.displayWidth)\n      );\n      objectPlacement.setBBoxAttribute(\n        this.activeSelection,\n        'height',\n        Math.abs(this.activeSelection.displayHeight)\n      );\n    }\n  }\n\n  public setActiveSelection(gameObject: Phaser.GameObjects.Image | Phaser.GameObjects.Rectangle) {\n    if (!this.activeSelectRect) {\n      return;\n    }\n    this.activeSelectRect!.setAlpha(0.3);\n    this.activeSelection = gameObject;\n    this.activeSelectRect.x = gameObject.x;\n    this.activeSelectRect.y = gameObject.y;\n\n    this.activeSelectRect.displayHeight =\n      gameObject.displayHeight + transformConstants.activeSelectMargin;\n    this.activeSelectRect.displayWidth =\n      gameObject.displayWidth + transformConstants.activeSelectMargin;\n  }\n\n  public deselect() {\n    this.activeSelectRect!.setAlpha(0);\n    this.activeSelection = undefined;\n  }\n\n  private getObjectPlacement = () => mandatory(this.objectPlacement);\n\n  private bindDeleteKey() {\n    const deleteKeys = [\n      Phaser.Input.Keyboard.KeyCodes.BACKSPACE,\n      Phaser.Input.Keyboard.KeyCodes.DELETE\n    ];\n    deleteKeys.forEach(key =>\n      this.getObjectPlacement().inputManager.registerKeyboardListener(key, 'up', () => {\n        this.deleteActiveSelection();\n        this.deselect();\n      })\n    );\n  }\n\n  private deleteActiveSelection() {\n    if (!this.activeSelection) return;\n    switch (this.getType(this.activeSelection)) {\n      case 'object':\n        this.getObjectPlacement().deleteObj(this.activeSelection);\n        break;\n      case 'bbox':\n        this.getObjectPlacement().deleteBBox(this.activeSelection);\n        break;\n    }\n    this.activeSelection.destroy();\n  }\n\n  private getType(gameObject: Phaser.GameObjects.Rectangle | Phaser.GameObjects.Image) {\n    return this.activeSelection?.data.get('type');\n  }\n}\n","const objPlacementConstants = {\n  cursorModeXPos: 100,\n  cursorModeYPos: 100\n};\n\nexport default objPlacementConstants;\n","import CommonBackButton from 'src/features/game/commons/CommonBackButton';\nimport { screenCenter, screenSize } from 'src/features/game/commons/CommonConstants';\nimport { AssetKey, AssetPath } from 'src/features/game/commons/CommonTypes';\nimport GameInputManager from 'src/features/game/input/GameInputManager';\nimport GameLayerManager from 'src/features/game/layer/GameLayerManager';\nimport { Layer } from 'src/features/game/layer/GameLayerTypes';\nimport SourceAcademyGame from 'src/features/game/SourceAcademyGame';\nimport { mandatory } from 'src/features/game/utils/GameUtils';\n\nimport SSImageAssets from '../../assets/ImageAssets';\nimport SSBackgroundManager from '../../background/SSBackgroundManager';\nimport SSBBoxManager from '../../boundingBoxes/SSBBoxManager';\nimport SSCursorMode from '../../cursorMode/SSCursorMode';\nimport { CursorMode } from '../../cursorMode/SSCursorModeTypes';\nimport SSLogManager from '../../logger/SSLogManager';\nimport SSObjectManager from '../../objects/SSObjectManager';\nimport { StorySimState } from '../../StorySimulatorTypes';\nimport SSTransformManager from '../../transform/SSTransformManager';\nimport objPlacementConstants from './ObjectPlacementConstants';\n\n/**\n * Allow users to position objects, set backgrounds, and get\n * the coordinates of the objects.\n */\nexport default class ObjectPlacement extends Phaser.Scene {\n  public layerManager: GameLayerManager;\n  public inputManager: GameInputManager;\n  private transformManager: SSTransformManager;\n  private cursorModes: SSCursorMode | undefined;\n  private bboxManager: SSBBoxManager;\n  private objectManager: SSObjectManager;\n  private backgroundManager: SSBackgroundManager;\n  private logManager: SSLogManager;\n\n  private assetMap: Map<AssetKey, AssetPath>;\n  private itemIdNumber: number;\n\n  private openBracket: Phaser.Input.Keyboard.Key | undefined;\n  private closedBracket: Phaser.Input.Keyboard.Key | undefined;\n\n  constructor() {\n    super('ObjectPlacement');\n    this.layerManager = new GameLayerManager();\n    this.inputManager = new GameInputManager();\n    this.objectManager = new SSObjectManager();\n    this.bboxManager = new SSBBoxManager();\n    this.backgroundManager = new SSBackgroundManager();\n    this.logManager = new SSLogManager();\n    this.transformManager = new SSTransformManager();\n\n    this.cursorModes = undefined;\n    this.itemIdNumber = 0;\n    this.assetMap = new Map<AssetKey, AssetPath>();\n  }\n\n  public init() {\n    this.layerManager = new GameLayerManager();\n    this.inputManager = new GameInputManager();\n    this.objectManager = new SSObjectManager();\n    this.bboxManager = new SSBBoxManager();\n    this.backgroundManager = new SSBackgroundManager();\n    this.logManager = new SSLogManager();\n    this.transformManager = new SSTransformManager();\n\n    this.cursorModes = undefined;\n    this.itemIdNumber = 0;\n    this.assetMap = new Map<AssetKey, AssetPath>();\n  }\n\n  public create() {\n    SourceAcademyGame.getInstance().setCurrentSceneRef(this);\n\n    this.layerManager.initialise(this);\n    this.inputManager.initialise(this);\n    this.renderBackground();\n    this.createUIButtons();\n    this.backgroundManager.initialise(this);\n    this.objectManager.initialise(this);\n    this.bboxManager.initialise(this);\n    this.transformManager.initialise(this);\n    this.logManager.initialise(this);\n\n    this.openBracket = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.OPEN_BRACKET);\n    this.closedBracket = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.CLOSED_BRACKET);\n  }\n\n  public update() {\n    if (this.openBracket && this.openBracket.isDown) {\n      this.transformManager.resizeActive(false);\n    }\n    if (this.closedBracket && this.closedBracket.isDown) {\n      this.transformManager.resizeActive(true);\n    }\n\n    this.bboxManager.resizeWhileBeingDrawn(this);\n  }\n\n  private createUIButtons() {\n    const uiContainer = new Phaser.GameObjects.Container(this, 0, 0);\n    const backButton = new CommonBackButton(this, () => {\n      this.cleanUp();\n      SourceAcademyGame.getInstance().setStorySimState(StorySimState.Default);\n      this.scene.start('StorySimulatorMenu');\n    });\n\n    this.cursorModes = new SSCursorMode(\n      this,\n      objPlacementConstants.cursorModeXPos,\n      objPlacementConstants.cursorModeYPos\n    );\n    this.populateCursorModes();\n\n    uiContainer.add(this.cursorModes);\n    uiContainer.add(backButton);\n\n    this.layerManager.addToLayer(Layer.UI, uiContainer);\n  }\n\n  public renderBackground() {\n    const backgroundImg = new Phaser.GameObjects.Image(\n      this,\n      screenCenter.x,\n      screenCenter.y,\n      SSImageAssets.storySimBg.key\n    );\n    backgroundImg.setDisplaySize(screenSize.x, screenSize.y);\n\n    this.layerManager.addToLayer(Layer.Background, backgroundImg);\n  }\n\n  private populateCursorModes() {\n    if (this.cursorModes) {\n      // Change background\n      this.cursorModes.addCursorMode(\n        this,\n        SSImageAssets.colorIcon.key,\n        false,\n        'Set background',\n        async () => await this.backgroundManager.loadBackground()\n      );\n\n      // Add object\n      this.cursorModes.addCursorMode(\n        this,\n        SSImageAssets.imageIcon.key,\n        false,\n        'Add selected object',\n        async () => await this.objectManager.loadObject()\n      );\n\n      // Draw BBox\n      this.cursorModes.addCursorMode(\n        this,\n        SSImageAssets.bboxIcon.key,\n        true,\n        'Draw bounding boxes',\n        () => this.cursorModes!.setCursorMode(CursorMode.DrawBBox)\n      );\n\n      // Drag/Resize\n      this.cursorModes.addCursorMode(this, SSImageAssets.handIcon.key, true, 'Drag or resize', () =>\n        this.cursorModes!.setCursorMode(CursorMode.DragResizeObj)\n      );\n\n      // Print info\n      this.cursorModes.addCursorMode(\n        this,\n        SSImageAssets.listIcon.key,\n        false,\n        'Print coordinates',\n        () =>\n          this.logManager.printCheckpoint(this.backgroundManager.getBackgroundAssetPath(), [\n            this.objectManager,\n            this.bboxManager\n          ]),\n        () =>\n          this.logManager.showDetailMap([\n            ...this.objectManager.getLoggables(),\n            ...this.bboxManager.getLoggables()\n          ]),\n        () => this.logManager.hideDetailMap()\n      );\n\n      // Erase Layers\n      this.cursorModes.addCursorMode(this, SSImageAssets.eraseIcon.key, false, 'Erase all', () => {\n        const confirm = window.confirm('Are you sure you want to delete?');\n\n        if (!confirm) return;\n        this.layerManager.clearSeveralLayers([Layer.Background, Layer.BBox, Layer.Objects]);\n        this.objectManager.deleteAll();\n        this.bboxManager.deleteAll();\n        this.transformManager.deselect();\n        this.renderBackground();\n      });\n\n      this.cursorModes.renderCursorModesContainer();\n    }\n  }\n\n  public getCursorManager = () => mandatory(this.cursorModes);\n\n  public getCoordinates(): number[] {\n    return [this.input.x, this.input.y];\n  }\n\n  public isCursorMode(cursorMode: CursorMode) {\n    return this.getCursorManager().getCurrCursorMode() === cursorMode;\n  }\n\n  private cleanUp() {\n    this.inputManager.clearListeners();\n    this.layerManager.clearAllLayers();\n  }\n\n  public addAsset(assetKey: AssetKey, assetPath: AssetPath) {\n    this.assetMap.set(assetKey, assetPath);\n  }\n\n  public getAssetPath(assetKey: AssetKey) {\n    return this.assetMap.get(assetKey);\n  }\n\n  public generateItemIdNumber() {\n    return this.itemIdNumber++;\n  }\n\n  public setActiveSelection(gameObject: Phaser.GameObjects.Image | Phaser.GameObjects.Rectangle) {\n    this.transformManager.setActiveSelection(gameObject);\n  }\n\n  public setObjAttribute(\n    objectSprite: Phaser.GameObjects.Image | Phaser.GameObjects.Rectangle,\n    attribute: string,\n    value: number\n  ) {\n    this.objectManager.setAttribute(objectSprite, attribute, value);\n  }\n\n  public deleteObj(objectSprite: Phaser.GameObjects.Rectangle | Phaser.GameObjects.Image) {\n    this.objectManager.delete(objectSprite);\n  }\n\n  public setBBoxAttribute(\n    bboxSprite: Phaser.GameObjects.Image | Phaser.GameObjects.Rectangle,\n    attribute: string,\n    value: number\n  ) {\n    this.bboxManager.setAttribute(bboxSprite, attribute, value);\n  }\n\n  public deleteBBox(bboxSprite: Phaser.GameObjects.Rectangle | Phaser.GameObjects.Image) {\n    this.bboxManager.delete(bboxSprite);\n  }\n}\n","import * as Phaser from 'phaser';\nimport { screenSize } from 'src/features/game/commons/CommonConstants';\nimport CheckpointTransition from 'src/features/game/scenes/checkpointTransition/CheckpointTransition';\nimport GameManager from 'src/features/game/scenes/gameManager/GameManager';\nimport SourceAcademyGame, { GameType } from 'src/features/game/SourceAcademyGame';\nimport MainMenu from 'src/features/storySimulator/scenes/mainMenu/MainMenu';\nimport ObjectPlacement from 'src/features/storySimulator/scenes/ObjectPlacement/ObjectPlacement';\n\nconst config = {\n  debug: true,\n  type: Phaser.WEBGL,\n  width: screenSize.x,\n  height: screenSize.y,\n  physics: {\n    default: 'arcade'\n  },\n  scale: {\n    mode: Phaser.Scale.FIT,\n    parent: 'game-display'\n  }\n};\n\nexport const createStorySimulatorGame = () => {\n  const game = new SourceAcademyGame(config, GameType.Simulator);\n  game.scene.add('StorySimulatorMenu', MainMenu, true);\n  game.scene.add('ObjectPlacement', ObjectPlacement);\n  game.scene.add('GameManager', GameManager);\n  game.scene.add('CheckpointTransition', CheckpointTransition);\n  return game;\n};\n","import * as React from 'react';\nimport { useSelector } from 'react-redux';\nimport { OverallState } from 'src/commons/application/ApplicationTypes';\nimport SourceAcademyGame, { AccountInfo } from 'src/features/game/SourceAcademyGame';\nimport {\n  fetchAssetPaths,\n  obtainTextAssets,\n  s3AssetFolders\n} from 'src/features/storySimulator/StorySimulatorService';\nimport { StorySimState } from 'src/features/storySimulator/StorySimulatorTypes';\n\nimport StorySimulatorAssetFileUploader from './subcomponents/StorySimulatorAssetFileUploader';\nimport StorySimulatorAssetSelection from './subcomponents/StorySimulatorAssetSelection';\nimport StorySimulatorChapterSim from './subcomponents/StorySimulatorChapterSim';\nimport StorySimulatorCheckpointSim from './subcomponents/StorySimulatorCheckpointSim';\nimport { createStorySimulatorGame } from './subcomponents/storySimulatorGame';\n\nfunction StorySimulator() {\n  const session = useSelector((state: OverallState) => state.session);\n  const [assetPaths, setAssetPaths] = React.useState<string[]>([]);\n  const [textAssets, setTextAssets] = React.useState<string[]>([]);\n\n  const [storySimState, setStorySimState] = React.useState<string>(StorySimState.Default);\n\n  React.useEffect(() => {\n    createStorySimulatorGame().setStorySimStateSetter(setStorySimState);\n  }, []);\n\n  React.useEffect(() => {\n    (async () => {\n      SourceAcademyGame.getInstance().setAccountInfo(session as AccountInfo);\n      const paths = await fetchAssetPaths(s3AssetFolders);\n      setAssetPaths(paths);\n      setTextAssets(obtainTextAssets(paths));\n    })();\n  }, [session]);\n\n  return (\n    <>\n      <div className=\"StorySimulatorWrapper\">\n        <div id=\"game-display\" />\n        <div className=\"LeftAlign StorySimulatorPanel\">\n          {storySimState === StorySimState.Default && (\n            <>\n              <h3>Welcome to story simulator!</h3>\n            </>\n          )}\n          {storySimState === StorySimState.CheckpointSim && (\n            <StorySimulatorCheckpointSim textAssets={textAssets} />\n          )}\n          {storySimState === StorySimState.ObjectPlacement && (\n            <>\n              <h3>Asset Selection</h3>\n              <StorySimulatorAssetSelection assetPaths={assetPaths} />\n            </>\n          )}\n          {storySimState === StorySimState.AssetUploader && (\n            <>\n              <h3>Asset uploader</h3>\n              <StorySimulatorAssetFileUploader />\n              <h3>Asset Viewer</h3>\n              <StorySimulatorAssetSelection assetPaths={assetPaths} />\n            </>\n          )}\n          {storySimState === StorySimState.ChapterSim && (\n            <StorySimulatorChapterSim textAssets={textAssets} />\n          )}\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default StorySimulator;\n","import { connect, MapDispatchToProps, MapStateToProps } from 'react-redux';\nimport { withRouter } from 'react-router';\nimport { bindActionCreators, Dispatch } from 'redux';\n\nimport { OverallState } from '../../../commons/application/ApplicationTypes';\nimport { Chapter } from '../../../commons/application/types/ChapterTypes';\nimport { changeChapter, fetchChapter } from '../../../commons/workspace/WorkspaceActions';\nimport { DefaultChapter, DispatchProps, StateProps } from './AcademyDefaultChapter';\n\nconst mapStateToProps: MapStateToProps<StateProps, {}, OverallState> = state => ({\n  sourceChapter: state.workspaces.playground.context.chapter,\n  sourceVariant: state.workspaces.playground.context.variant\n});\n\nconst mapDispatchToProps: MapDispatchToProps<DispatchProps, {}> = (dispatch: Dispatch) =>\n  bindActionCreators(\n    {\n      handleFetchChapter: () => fetchChapter(),\n      handleUpdateChapter: (chapter: Chapter) => changeChapter(chapter.chapter, chapter.variant)\n    },\n    dispatch\n  );\n\nconst AcademyDefaultChapterContainer = withRouter(\n  connect(mapStateToProps, mapDispatchToProps)(DefaultChapter)\n);\n\nexport default AcademyDefaultChapterContainer;\n","import { Button, Classes, MenuItem } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport { ItemRenderer, Select } from '@blueprintjs/select';\nimport { Variant } from 'js-slang/dist/types';\nimport * as React from 'react';\nimport { RouteComponentProps } from 'react-router';\n\nimport {\n  SourceLanguage,\n  sourceLanguages,\n  styliseChapter\n} from '../../../commons/application/ApplicationTypes';\nimport { Chapter } from '../../../commons/application/types/ChapterTypes';\n\nexport type DefaultChapterProps = DispatchProps & StateProps & RouteComponentProps<{}>;\n\nexport type DispatchProps = {\n  handleFetchChapter: () => void;\n  handleUpdateChapter: (chapter: Chapter) => void;\n  handleChapterSelect?: (i: Chapter, e: React.ChangeEvent<HTMLSelectElement>) => void;\n};\n\nexport type StateProps = {\n  sourceChapter: number;\n  sourceVariant: Variant;\n};\n\nexport function DefaultChapter(props: DefaultChapterProps) {\n  props.handleFetchChapter();\n\n  const chapters = sourceLanguages.map((lang: SourceLanguage) => {\n    return {\n      chapter: lang.chapter,\n      variant: lang.variant,\n      displayName: styliseChapter(lang.chapter, lang.variant)\n    };\n  });\n\n  const chapterRenderer: ItemRenderer<Chapter> = (lang, { handleClick }) => (\n    <MenuItem\n      active={false}\n      key={lang.chapter + lang.variant}\n      onClick={handleClick}\n      text={lang.displayName}\n    />\n  );\n\n  const ChapterSelectComponent = Select.ofType<Chapter>();\n\n  const chapSelect = (\n    currentChap: number,\n    currentVariant: Variant,\n    handleSelect = (i: Chapter) => {}\n  ) => (\n    <ChapterSelectComponent\n      className={Classes.MINIMAL}\n      items={chapters}\n      onItemSelect={handleSelect}\n      itemRenderer={chapterRenderer}\n      filterable={false}\n    >\n      <Button\n        className={Classes.MINIMAL}\n        text={styliseChapter(currentChap, currentVariant)}\n        rightIcon={IconNames.DOUBLE_CARET_VERTICAL}\n      />\n    </ChapterSelectComponent>\n  );\n\n  return (\n    <div> {chapSelect(props.sourceChapter, props.sourceVariant, props.handleUpdateChapter)} </div>\n  );\n}\n","import { Alignment, Classes, Icon, Navbar, NavbarGroup } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nimport { Role } from '../../../commons/application/ApplicationTypes';\nimport { AssessmentCategories } from '../../../commons/assessment/AssessmentTypes';\nimport NotificationBadgeContainer from '../../../commons/notificationBadge/NotificationBadgeContainer';\nimport { filterNotificationsByType } from '../../../commons/notificationBadge/NotificationBadgeHelper';\nimport { assessmentCategoryLink } from '../../../commons/utils/ParamParseHelper';\nimport DefaultChapterContainer from './AcademyDefaultChapterContainer';\n\ntype OwnProps = {\n  role: Role;\n};\n\nconst AcademyNavigationBar: React.SFC<OwnProps> = props => (\n  <Navbar className=\"NavigationBar secondary-navbar\">\n    <NavbarGroup align={Alignment.LEFT}>\n      <NavLink\n        to={`/academy/${assessmentCategoryLink(AssessmentCategories.Mission)}`}\n        activeClassName={Classes.ACTIVE}\n        className={classNames('NavigationBar__link', Classes.BUTTON, Classes.MINIMAL)}\n      >\n        <Icon icon={IconNames.FLAME} />\n        <div className=\"navbar-button-text hidden-xs\">Missions</div>\n        <NotificationBadgeContainer\n          notificationFilter={filterNotificationsByType(AssessmentCategories.Mission)}\n          disableHover={true}\n        />\n      </NavLink>\n\n      <NavLink\n        to={`/academy/${assessmentCategoryLink(AssessmentCategories.Sidequest)}`}\n        activeClassName={Classes.ACTIVE}\n        className={classNames('NavigationBar__link', Classes.BUTTON, Classes.MINIMAL)}\n      >\n        <Icon icon={IconNames.LIGHTBULB} />\n        <div className=\"navbar-button-text hidden-xs\">Quests</div>\n        <NotificationBadgeContainer\n          notificationFilter={filterNotificationsByType(AssessmentCategories.Sidequest)}\n          disableHover={true}\n        />\n      </NavLink>\n\n      <NavLink\n        to={`/academy/${assessmentCategoryLink(AssessmentCategories.Path)}`}\n        activeClassName={Classes.ACTIVE}\n        className={classNames('NavigationBar__link', Classes.BUTTON, Classes.MINIMAL)}\n      >\n        <Icon icon={IconNames.PREDICTIVE_ANALYSIS} />\n        <div className=\"navbar-button-text hidden-xs\">Paths</div>\n        <NotificationBadgeContainer\n          notificationFilter={filterNotificationsByType(AssessmentCategories.Path)}\n          disableHover={true}\n        />\n      </NavLink>\n\n      <NavLink\n        to={`/academy/${assessmentCategoryLink(AssessmentCategories.Contest)}`}\n        activeClassName={Classes.ACTIVE}\n        className={classNames('NavigationBar__link', Classes.BUTTON, Classes.MINIMAL)}\n      >\n        <Icon icon={IconNames.COMPARISON} />\n        <div className=\"navbar-button-text hidden-xs\">Contests</div>\n        <NotificationBadgeContainer\n          notificationFilter={filterNotificationsByType(AssessmentCategories.Contest)}\n          disableHover={true}\n        />\n      </NavLink>\n\n      <NavLink\n        to={`/academy/${assessmentCategoryLink(AssessmentCategories.Practical)}`}\n        activeClassName={Classes.ACTIVE}\n        className={classNames('NavigationBar__link', Classes.BUTTON, Classes.MINIMAL)}\n      >\n        <Icon icon={IconNames.MANUAL} />\n        <div className=\"navbar-button-text hidden-xs\">Practical</div>\n      </NavLink>\n    </NavbarGroup>\n    {props.role === Role.Admin || props.role === Role.Staff ? (\n      <NavbarGroup align={Alignment.RIGHT}>\n        <DefaultChapterContainer />\n\n        <NavLink\n          to={'/academy/groundcontrol'}\n          activeClassName={Classes.ACTIVE}\n          className={classNames('NavigationBar__link', Classes.BUTTON, Classes.MINIMAL)}\n        >\n          <Icon icon=\"satellite\" />\n          <div className=\"navbar-button-text hidden-xs\">Ground Control</div>\n        </NavLink>\n\n        <NavLink\n          to={'/academy/dashboard'}\n          activeClassName={Classes.ACTIVE}\n          className={classNames('NavigationBar__link', Classes.BUTTON, Classes.MINIMAL)}\n        >\n          <Icon icon=\"globe\" />\n          <div className=\"navbar-button-text hidden-xs\">Dashboard</div>\n        </NavLink>\n\n        <NavLink\n          to={'/academy/sourcereel'}\n          activeClassName={Classes.ACTIVE}\n          className={classNames('NavigationBar__link', Classes.BUTTON, Classes.MINIMAL)}\n        >\n          <Icon icon={IconNames.MOBILE_VIDEO} />\n          <div className=\"navbar-button-text hidden-xs\">Sourcereel</div>\n        </NavLink>\n\n        <NavLink\n          to={'/academy/grading'}\n          activeClassName={Classes.ACTIVE}\n          className={classNames('NavigationBar__link', Classes.BUTTON, Classes.MINIMAL)}\n        >\n          <Icon icon={IconNames.ENDORSED} />\n          <div className=\"navbar-button-text hidden-xs\">Grading</div>\n          <NotificationBadgeContainer\n            notificationFilter={filterNotificationsByType('Grading')}\n            disableHover={true}\n          />\n        </NavLink>\n\n        <NavLink\n          to={'/academy/storysimulator'}\n          activeClassName={Classes.ACTIVE}\n          className={classNames('NavigationBar__link', Classes.BUTTON, Classes.MINIMAL)}\n        >\n          <Icon icon={IconNames.CROWN} />\n          <div className=\"navbar-button-text hidden-xs\">Story Simulator</div>\n        </NavLink>\n      </NavbarGroup>\n    ) : null}\n  </Navbar>\n);\n\nexport default AcademyNavigationBar;\n","import * as React from 'react';\nimport { Redirect, Route, RouteComponentProps, Switch } from 'react-router';\n\nimport { Role } from '../../commons/application/ApplicationTypes';\nimport { isAcademyRe } from '../../commons/application/reducers/SessionsReducer';\nimport AssessmentContainer from '../../commons/assessment/AssessmentContainer';\nimport { AssessmentCategories, AssessmentCategory } from '../../commons/assessment/AssessmentTypes';\nimport { HistoryHelper } from '../../commons/utils/HistoryHelper';\nimport { assessmentCategoryLink } from '../../commons/utils/ParamParseHelper';\nimport { assessmentRegExp, gradingRegExp } from '../../features/academy/AcademyTypes';\nimport DashboardContainer from './dashboard/DashboardContainer';\nimport Game from './game/Game';\nimport Grading from './grading/GradingContainer';\nimport GroundControl from './groundControl/GroundControlContainer';\nimport Sourcereel from './sourcereel/SourcereelContainer';\nimport StorySimulator from './storySimulator/StorySimulator';\nimport AcademyNavigationBar from './subcomponents/AcademyNavigationBar';\n\ntype AcademyProps = DispatchProps & StateProps & OwnProps & RouteComponentProps<{}>;\n\nexport type DispatchProps = {\n  handleFetchNotifications: () => void;\n};\n\nexport type StateProps = {\n  historyHelper: HistoryHelper;\n};\n\nexport type OwnProps = {\n  accessToken?: string;\n  role: Role;\n};\n\nclass Academy extends React.Component<AcademyProps> {\n  public componentDidMount() {\n    /* TODO: REPLACE WITH LONG POLLING METHOD */\n    this.props.handleFetchNotifications();\n  }\n\n  public render() {\n    return (\n      <div className=\"Academy\">\n        <AcademyNavigationBar role={this.props.role} />\n        <Switch>\n          <Route\n            path={`/academy/${assessmentCategoryLink(\n              AssessmentCategories.Contest\n            )}/${assessmentRegExp}`}\n            render={this.assessmentRenderFactory(AssessmentCategories.Contest)}\n          />\n          <Route path=\"/academy/game\" component={Game} />\n          <Route\n            path={`/academy/${assessmentCategoryLink(\n              AssessmentCategories.Mission\n            )}/${assessmentRegExp}`}\n            render={this.assessmentRenderFactory(AssessmentCategories.Mission)}\n          />\n          <Route\n            path={`/academy/${assessmentCategoryLink(\n              AssessmentCategories.Path\n            )}/${assessmentRegExp}`}\n            render={this.assessmentRenderFactory(AssessmentCategories.Path)}\n          />\n          <Route\n            path={`/academy/${assessmentCategoryLink(\n              AssessmentCategories.Sidequest\n            )}/${assessmentRegExp}`}\n            render={this.assessmentRenderFactory(AssessmentCategories.Sidequest)}\n          />\n          <Route\n            path={`/academy/${assessmentCategoryLink(\n              AssessmentCategories.Practical\n            )}/${assessmentRegExp}`}\n            render={this.assessmentRenderFactory(AssessmentCategories.Practical)}\n          />\n          <Route path=\"/academy/groundcontrol\" component={GroundControl} />\n          <Route path=\"/academy/dashboard\" component={DashboardContainer} />\n          <Route path={`/academy/grading/${gradingRegExp}`} component={Grading} />\n          <Route path=\"/academy/sourcereel\" component={Sourcereel} />\n          <Route path={'/academy/storysimulator'} component={StorySimulator} />\n          <Route exact={true} path=\"/academy\" component={this.dynamicRedirect(this.props)} />\n          <Route component={this.redirectTo404} />\n        </Switch>\n      </div>\n    );\n  }\n\n  private assessmentRenderFactory = (cat: AssessmentCategory) => (\n    routerProps: RouteComponentProps<any>\n  ) => <AssessmentContainer assessmentCategory={cat} />;\n\n  /**\n   * 1. If user is in /academy.*, redirect to game\n   * 2. If not, redirect to the last /acdaemy.* route the user was in\n   * See ../../commons/utils/HistoryHelper.ts for more details\n   */\n  private dynamicRedirect = (props: StateProps) => {\n    const clickedFrom = props.historyHelper.lastGeneralLocations[0];\n    const lastAcademy = props.historyHelper.lastAcademyLocations[0];\n    if (clickedFrom != null && isAcademyRe.exec(clickedFrom!) == null && lastAcademy != null) {\n      return () => <Redirect to={lastAcademy!} />;\n    } else {\n      return this.redirectToGame;\n    }\n  };\n\n  private redirectTo404 = () => <Redirect to=\"/404\" />;\n\n  private redirectToGame = () => <Redirect to=\"/academy/game\" />;\n}\n\nexport default Academy;\n","import { connect, MapDispatchToProps, MapStateToProps } from 'react-redux';\nimport { withRouter } from 'react-router';\nimport { bindActionCreators } from 'redux';\n\nimport { fetchNotifications } from '../../commons/application/actions/SessionActions';\nimport { OverallState } from '../../commons/application/ApplicationTypes';\nimport Academy, { DispatchProps, StateProps } from './Academy';\n\nconst mapStateToProps: MapStateToProps<StateProps, {}, OverallState> = state => ({\n  historyHelper: state.session.historyHelper\n});\n\nconst mapDispatchToProps: MapDispatchToProps<DispatchProps, {}> = dispatch =>\n  bindActionCreators(\n    {\n      handleFetchNotifications: fetchNotifications\n    },\n    dispatch\n  );\n\nconst AcademyContainer = withRouter(connect(mapStateToProps, mapDispatchToProps)(Academy));\n\nexport default AcademyContainer;\n","import { Card, Elevation } from '@blueprintjs/core';\nimport { H3, H5 } from '@blueprintjs/core';\nimport * as React from 'react';\n\nimport { Links } from '../../../commons/utils/Constants';\n\nconst dot = <span className=\"dot\">&bull;</span>;\n\nclass ContributorsDetails extends React.Component {\n  public render() {\n    return (\n      <div className=\"outsideDetails\">\n        <Card className=\"contributorsDetails\" elevation={Elevation.ONE}>\n          <H3>The people behind Source Academy</H3>\n          <p>\n            The <i>Source Academy</i> is designed by and for students of the National University of\n            Singapore. Students who completed the CS1101S module come back to coach their juniors as\n            \"Avengers\" or to further develop and improve the Academy. This page includes all\n            developers who contributed to the Source Academy <i>Knight</i> (2020) and its its\n            precursor, <i>Cadet</i> (2018). Both of these succeeded Source Academy 2 (2017) and\n            ultimately the original Source Academy (2016).\n          </p>\n          <div className=\"leadership\">\n            <H5>\n              <strong>\n                <u>2020 Leadership</u>\n              </strong>\n            </H5>\n            <p>\n              Tiffany Chong\n              <br />\n              <strong>(Game)</strong>\n            </p>\n            {dot}\n            <p>\n              Anthony Halim\n              <br />\n              <strong>(Architecture)</strong>\n            </p>\n            {dot}\n            <p>\n              Kan Yip Keng, Jet\n              <br />\n              <strong>(Frontend)</strong>\n            </p>\n            {dot}\n            <p>\n              Low Jun Kai, Sean\n              <br />\n              <strong>(Frontend)</strong>\n            </p>\n            {dot}\n            <p>\n              Daryl Tan\n              <br />\n              <strong>(Source)</strong>\n            </p>\n            {dot}\n            <p className=\"wider\">\n              Tee Hao Wei\n              <br />\n              <strong>(Backend &amp; DevOps)</strong>\n            </p>\n            {dot}\n            <p>\n              Martin Henz\n              <br />\n              <strong>(Coordination)</strong>\n            </p>\n          </div>\n          <div className=\"hallOfFame\">\n            <H5>\n              <strong>\n                <u>Hall of Fame</u>\n              </strong>\n            </H5>\n            <p>\n              <strong>Cadet architect</strong>\n            </p>\n            <p>Evan Sebastian</p>\n            <p>\n              <strong>Cadet core team</strong>\n            </p>\n            <p>\n              Julius Putra Tanu Setiaji {dot} Lee Ning Yuan {dot} Vignesh Shankar {dot} Thomas Tan{' '}\n              {dot} Chen Shaowei\n            </p>\n            <p>\n              <strong>Graphic design</strong>\n            </p>\n            <p>\n              Ng Tse Pei {dot} Joey Yeo {dot} Tan Yu Wei\n            </p>\n          </div>\n          <div className=\"leadership\">\n            <H5>\n              <strong>\n                <u>2019 Leadership</u>\n              </strong>\n            </H5>\n            <p>\n              Liow Jia Chen\n              <br />\n              <strong>(Backend)</strong>\n            </p>\n            {dot}\n            <p>\n              Ge Shuming\n              <br />\n              <strong>(Frontend)</strong>\n            </p>\n            {dot}\n            <p>\n              Rahul Rajesh\n              <br />\n              <strong>(DevOps)</strong>\n            </p>\n            {dot}\n            <p>\n              Daryl Tan\n              <br />\n              <strong>(Source)</strong>\n            </p>\n            {dot}\n            <p>\n              She Jiayu\n              <br />\n              <strong>(Tools)</strong>\n            </p>\n          </div>\n          <div className=\"contributors\">\n            <H5>\n              <strong>\n                <u>All Contributors</u>\n              </strong>\n            </H5>\n            <p>\n              Below are all contributors to the{' '}\n              <a href={Links.githubOrg}>GitHub repositories of the Source Academy</a>.\n            </p>\n          </div>\n        </Card>\n      </div>\n    );\n  }\n}\n\nexport default ContributorsDetails;\n","import {\n  ContributorsInApi,\n  Repo,\n  ReposInApi\n} from '../../../features/contributors/ContributorsTypes';\n\nconst apiRepoDetails: string = 'https://api.github.com/orgs/source-academy/repos';\nconst ignoreRepos: string[] = ['assessments', 'tools', 'source-academy2'];\nconst ignoreContributors: string[] = ['dependabot[bot]', 'dependabot-preview[bot]'];\n\nexport const fetchRepos = async () => {\n  const response = await fetch(apiRepoDetails);\n  const results = await response.json();\n  const repos = await results\n    .filter((repo: ReposInApi) => {\n      return !ignoreRepos.includes(repo.name);\n    })\n    .map((repo: ReposInApi) => {\n      return {\n        key: repo.id,\n        name: repo.name,\n        description: repo.description,\n        link: repo.contributors_url\n      };\n    });\n  return repos;\n};\n\nexport const fetchContributors = async (endpoints: Repo[]) => {\n  const responses = await Promise.all(\n    endpoints.map((endpoint: Repo) => {\n      return fetch(endpoint.link);\n    })\n  );\n  const results = await Promise.all(\n    responses.map((res: any) => {\n      return res.json();\n    })\n  );\n  const contributorsByRepo = await Promise.all(\n    results.map((contributors: ContributorsInApi[]) => {\n      return contributors\n        .filter((contributor: ContributorsInApi) => {\n          return !ignoreContributors.includes(contributor.login);\n        })\n        .map((contributor: ContributorsInApi) => {\n          return {\n            key: contributor.id,\n            photo: contributor.avatar_url,\n            githubPage: contributor.html_url,\n            githubName: contributor.login,\n            commits: contributor.contributions\n          };\n        });\n    })\n  );\n  return contributorsByRepo;\n};\n","import { Card, Elevation } from '@blueprintjs/core';\nimport { H2, H3, H5 } from '@blueprintjs/core';\nimport * as React from 'react';\n\nimport {\n  Contributor,\n  ContributorsState,\n  Repo\n} from '../../../features/contributors/ContributorsTypes';\nimport { fetchContributors, fetchRepos } from './ContributorsGithubApi';\n\nclass ContributorsList extends React.Component<{}, ContributorsState> {\n  constructor(props: {}) {\n    super(props);\n\n    this.state = {\n      repos: [],\n      contributors: []\n    };\n  }\n\n  public componentDidMount() {\n    fetchRepos()\n      .then((repos: Repo[]) => {\n        this.setState({\n          repos\n        });\n        return repos;\n      })\n      .then((repos: Repo[]) => {\n        fetchContributors(repos).then((contributors: Contributor[][]) => {\n          this.setState({\n            contributors\n          });\n        });\n      });\n  }\n\n  public render() {\n    const { contributors, repos } = this.state;\n    const contributorList = contributors.length ? (\n      contributors.map((array: Contributor[], index: number) => {\n        const repo = repos[index];\n        const arrayMapped = array.map((contributor: Contributor) => {\n          return (\n            <div key={contributor.key}>\n              <img src={contributor.photo} alt=\"Contributor\" />\n              <p>\n                <a href={contributor.githubPage} rel=\"noopener noreferrer\" target=\"_blank\">\n                  {contributor.githubName}\n                </a>\n              </p>\n              <p>Commits: {contributor.commits}</p>\n            </div>\n          );\n        });\n        return (\n          <Card key={repo.key} className=\"containerPermalink\" elevation={Elevation.ONE}>\n            <div className=\"repoDetailsPermalink\">\n              <H3>{repo.name}</H3>\n              <H5>{repo.description}</H5>\n            </div>\n            <div className=\"inPermalink\">{arrayMapped}</div>\n          </Card>\n        );\n      })\n    ) : (\n      <H2>Loading...</H2>\n    );\n    return <div>{contributorList}</div>;\n  }\n}\n\nexport default ContributorsList;\n","import { Card, Elevation } from '@blueprintjs/core';\nimport * as React from 'react';\n\nimport ContributorsDetails from './subcomponents/ContributorsDetails';\nimport ContributorsList from './subcomponents/ContributorsList';\n\nexport class Contributors extends React.Component {\n  public render() {\n    return (\n      <div className=\"fullpage\">\n        <Card className=\"fullpage-content\" elevation={Elevation.THREE}>\n          <ContributorsDetails />\n          <ContributorsList />\n        </Card>\n      </div>\n    );\n  }\n}\n\nexport default Contributors;\n","import {\n  Button,\n  ButtonGroup,\n  Card,\n  Classes,\n  H4,\n  Icon,\n  NonIdealState,\n  Spinner\n} from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nexport type LoginProps = DispatchProps & OwnProps;\n\nexport type DispatchProps = {\n  handleFetchAuth: (code: string, providerId?: string) => void;\n  handleLogin: (providerId: string) => void;\n};\n\nexport type OwnProps = {\n  providers: Array<{ id: string; name: string }>;\n  code?: string;\n  providerId?: string;\n};\n\nconst Login: React.FunctionComponent<LoginProps> = props => {\n  const { code, providerId, handleFetchAuth } = props;\n\n  React.useEffect(() => {\n    if (code) {\n      handleFetchAuth(code, providerId);\n    }\n  }, [code, providerId, handleFetchAuth]);\n\n  if (code) {\n    return (\n      <div className={classNames('Login', Classes.DARK)}>\n        <Card className={classNames('login-card', Classes.ELEVATION_4)}>\n          <div className=\"login-body\">\n            <NonIdealState\n              description=\"Logging In...\"\n              icon={<Spinner size={Spinner.SIZE_LARGE} />}\n            />\n          </div>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className={classNames('Login', Classes.DARK)}>\n      <Card className={classNames('login-card', Classes.ELEVATION_4)}>\n        <div className=\"login-header\">\n          <H4>\n            <Icon icon={IconNames.LOCK} />\n            LOGIN\n          </H4>\n        </div>\n        <div className=\"login-body\">\n          <ButtonGroup fill={true} vertical={true}>\n            {props.providers.map(({ id, name }) => (\n              <LoginButton handleClick={props.handleLogin} name={name} id={id} key={id} />\n            ))}\n            {playgroundButton}\n          </ButtonGroup>\n        </div>\n      </Card>\n    </div>\n  );\n};\n\nconst LoginButton = ({\n  handleClick,\n  id,\n  name\n}: {\n  handleClick: (id: string) => void;\n  id: string;\n  name: string;\n}) => {\n  return (\n    <Button\n      className={Classes.LARGE}\n      rightIcon={IconNames.LOG_IN}\n      onClick={React.useCallback(() => handleClick(id), [handleClick, id])}\n    >\n      {`Log in with ${name}`}\n    </Button>\n  );\n};\n\nconst playgroundButton = (\n  <NavLink to=\"/playground\">\n    <Button className={Classes.LARGE} rightIcon={IconNames.CODE}>\n      Try out the playground\n    </Button>\n  </NavLink>\n);\n\nexport default Login;\n","import * as React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n\nimport { fetchAuth, login } from '../../commons/application/actions/SessionActions';\nimport Login, { OwnProps } from './Login';\n\nconst LoginContainer: React.FunctionComponent<OwnProps> = props => {\n  const dispatch = useDispatch();\n  const dispatchProps = React.useMemo(\n    () =>\n      bindActionCreators(\n        {\n          handleFetchAuth: fetchAuth,\n          handleLogin: login\n        },\n        dispatch\n      ),\n    [dispatch]\n  );\n\n  return <Login {...dispatchProps} {...props} />;\n};\n\nexport default LoginContainer;\n","import { ExternalLibraryName } from '../application/types/ExternalTypes';\nimport { Question } from '../assessment/AssessmentTypes';\n\nexport const EDITING_ID = -1;\n\nexport type XmlParseStrTask = {\n  $: XmlParseStrOverview;\n  DEPLOYMENT: XmlParseStrDeployment[];\n  GRADERDEPLOYMENT: XmlParseStrDeployment[];\n  PROBLEMS: Array<{ PROBLEM: XmlParseStrProblem[] }>;\n  READING: string[];\n  TEXT: string[];\n  WEBSUMMARY?: string[];\n};\n\nexport type XmlParseStrDeployment = {\n  $: {\n    interpreter: string;\n  };\n  GLOBAL?: Array<{\n    IDENTIFIER: string[];\n    VALUE: string[];\n  }>;\n  IMPORT?: Array<{\n    $: {\n      name: ExternalLibraryName;\n    };\n    SYMBOL: string[];\n  }>;\n  // deprecated EXTERNAL in DEPLOYMENT and GRADERDEPLOYMENT, use IMPORT instead\n  EXTERNAL?: Array<{\n    $: {\n      name: ExternalLibraryName;\n    };\n    SYMBOL: string[];\n  }>;\n};\n\nexport type XmlParseStrOverview = {\n  coverimage: string;\n  duedate: string;\n  kind: string;\n  number: string;\n  title: string;\n  startdate: string;\n  story: string | null;\n};\n\nexport type XmlParseStrProblem = {\n  $: {\n    type: Question['type'];\n    maxgrade: string;\n    maxxp: string;\n  };\n  DEPLOYMENT?: XmlParseStrDeployment[];\n  GRADERDEPLOYMENT?: XmlParseStrDeployment[];\n  TEXT: string[];\n};\n\ntype PProblem = {\n  SNIPPET: Array<{\n    TEMPLATE: string[];\n    PREPEND: string;\n    SOLUTION: string[];\n    POSTPEND: string;\n    TESTCASES: Array<{\n      PUBLIC?: XmlParseStrTestcase[];\n      PRIVATE?: XmlParseStrTestcase[];\n    }>;\n    GRADER: string[];\n  }>;\n  TEXT: string[];\n};\n\nexport type XmlParseStrPProblem = PProblem & XmlParseStrProblem;\n\ntype CProblem = {\n  CHOICE: XmlParseStrProblemChoice[];\n  SNIPPET: {\n    SOLUTION: string[];\n  };\n};\n\nexport type XmlParseStrCProblem = CProblem & XmlParseStrProblem;\n\nexport type XmlParseStrProblemChoice = {\n  $: {\n    correct: string;\n  };\n  TEXT: string[];\n};\n\nexport type XmlParseStrTestcase = {\n  $: {\n    answer: string;\n    score: string;\n  };\n  _: string;\n};\n","import { Builder } from 'xml2js';\n\nimport { ExternalLibraryName } from '../application/types/ExternalTypes';\nimport {\n  Assessment,\n  AssessmentCategories,\n  AssessmentOverview,\n  AssessmentStatuses,\n  BaseQuestion,\n  GradingStatuses,\n  IMCQQuestion,\n  IProgrammingQuestion,\n  Library,\n  MCQChoice,\n  Question,\n  Testcase,\n  TestcaseTypes\n} from '../assessment/AssessmentTypes';\nimport {\n  EDITING_ID,\n  XmlParseStrCProblem,\n  XmlParseStrDeployment,\n  XmlParseStrOverview,\n  XmlParseStrPProblem,\n  XmlParseStrProblem,\n  XmlParseStrProblemChoice,\n  XmlParseStrTask,\n  XmlParseStrTestcase\n} from './XMLParserTypes';\n\nconst capitalizeFirstLetter = (str: string) => {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};\n\nexport const retrieveLocalAssessment = (): Assessment | null => {\n  const assessment = localStorage.getItem('MissionEditingAssessmentSA');\n  if (assessment) {\n    return JSON.parse(assessment);\n  } else {\n    return null;\n  }\n};\n\nexport const retrieveLocalAssessmentOverview = (): AssessmentOverview | null => {\n  const assessment = localStorage.getItem('MissionEditingOverviewSA');\n  if (assessment) {\n    return JSON.parse(assessment);\n  } else {\n    return null;\n  }\n};\n\nexport const storeLocalAssessment = (assessment: Assessment): void => {\n  localStorage.setItem('MissionEditingAssessmentSA', JSON.stringify(assessment));\n};\n\nexport const storeLocalAssessmentOverview = (overview: AssessmentOverview): void => {\n  localStorage.setItem('MissionEditingOverviewSA', JSON.stringify(overview));\n};\n\nexport const makeEntireAssessment = (result: any): [AssessmentOverview, Assessment] => {\n  const assessmentArr = makeAssessment(result);\n  const overview = makeAssessmentOverview(result, assessmentArr[1], assessmentArr[2]);\n  return [overview, assessmentArr[0]];\n};\n\nconst makeAssessmentOverview = (\n  result: any,\n  maxGradeVal: number,\n  maxXpVal: number\n): AssessmentOverview => {\n  const task: XmlParseStrTask = result.CONTENT.TASK[0];\n  const rawOverview: XmlParseStrOverview = task.$;\n  return {\n    category: capitalizeFirstLetter(rawOverview.kind) as AssessmentCategories,\n    closeAt: rawOverview.duedate,\n    coverImage: rawOverview.coverimage,\n    grade: 1,\n    id: EDITING_ID,\n    maxGrade: maxGradeVal,\n    maxXp: maxXpVal,\n    number: rawOverview.number || '',\n    openAt: rawOverview.startdate,\n    title: rawOverview.title,\n    reading: task.READING ? task.READING[0] : '',\n    shortSummary: task.WEBSUMMARY ? task.WEBSUMMARY[0] : '',\n    status: AssessmentStatuses.attempting,\n    story: rawOverview.story,\n    xp: 0,\n    gradingStatus: 'none' as GradingStatuses\n  };\n};\n\nconst makeAssessment = (result: any): [Assessment, number, number] => {\n  const task: XmlParseStrTask = result.CONTENT.TASK[0];\n  const rawOverview: XmlParseStrOverview = task.$;\n  const questionArr = makeQuestions(task);\n  return [\n    {\n      category: capitalizeFirstLetter(rawOverview.kind) as AssessmentCategories,\n      id: EDITING_ID,\n      globalDeployment: makeLibrary(task.DEPLOYMENT),\n      graderDeployment: makeLibrary(task.GRADERDEPLOYMENT),\n      longSummary: task.TEXT[0],\n      missionPDF: 'google.com',\n      questions: questionArr[0],\n      title: rawOverview.title\n    },\n    questionArr[1],\n    questionArr[2]\n  ];\n};\n\nconst altEval = (str: string): any => {\n  // eslint-disable-next-line no-new-func\n  return Function('\"use strict\";return (' + str + ')')();\n};\n\nconst makeLibrary = (deploymentArr: XmlParseStrDeployment[] | undefined): Library => {\n  if (deploymentArr === undefined) {\n    return {\n      chapter: -1,\n      external: {\n        name: 'NONE' as ExternalLibraryName,\n        symbols: []\n      },\n      globals: []\n    };\n  } else {\n    const deployment = deploymentArr[0];\n    const external = deployment.IMPORT || deployment.EXTERNAL;\n    const nameVal = external ? external[0].$.name : 'NONE';\n    const symbolsVal = external ? external[0].SYMBOL || [] : [];\n    const globalsVal = deployment.GLOBAL\n      ? (deployment.GLOBAL.map(x => [x.IDENTIFIER[0], altEval(x.VALUE[0]), x.VALUE[0]]) as Array<\n          [string, any, string]\n        >)\n      : [];\n    return {\n      chapter: parseInt(deployment.$.interpreter, 10),\n      external: {\n        name: nameVal as ExternalLibraryName,\n        symbols: symbolsVal\n      },\n      globals: globalsVal\n    };\n  }\n};\n\nconst makeQuestions = (task: XmlParseStrTask): [Question[], number, number] => {\n  let maxGrade = 0;\n  let maxXp = 0;\n  const questions: Array<IProgrammingQuestion | IMCQQuestion> = [];\n  task.PROBLEMS[0].PROBLEM.forEach((problem: XmlParseStrProblem, curId: number) => {\n    const localMaxXp = problem.$.maxxp ? parseInt(problem.$.maxxp, 10) : 0;\n    const question: BaseQuestion = {\n      answer: null,\n      roomId: null,\n      content: problem.TEXT[0],\n      id: curId,\n      library: makeLibrary(problem.DEPLOYMENT),\n      graderLibrary: makeLibrary(problem.GRADERDEPLOYMENT),\n      type: problem.$.type,\n      xp: 0,\n      grade: 0,\n      maxGrade: parseInt(problem.$.maxgrade, 10),\n      maxXp: localMaxXp\n    };\n    maxGrade += parseInt(problem.$.maxgrade, 10);\n    maxXp += localMaxXp;\n    if (question.type === 'programming') {\n      questions.push(makeProgramming(problem as XmlParseStrPProblem, question));\n    }\n    if (question.type === 'mcq') {\n      questions.push(makeMCQ(problem as XmlParseStrCProblem, question));\n    }\n  });\n  return [questions, maxGrade, maxXp];\n};\n\nconst makeMCQ = (problem: XmlParseStrCProblem, question: BaseQuestion): IMCQQuestion => {\n  const choicesVal: MCQChoice[] = [];\n  const solution = problem.SNIPPET ? problem.SNIPPET[0].SOLUTION : undefined;\n  let solutionVal = 0;\n  problem.CHOICE.forEach((choice: XmlParseStrProblemChoice, i: number) => {\n    choicesVal.push({\n      content: choice.TEXT[0],\n      hint: null\n    });\n    solutionVal = choice.$.correct === 'true' ? i : solutionVal;\n  });\n  return {\n    ...question,\n    type: 'mcq',\n    answer: solution ? parseInt(solution[0], 10) : 0,\n    choices: choicesVal,\n    solution: solutionVal\n  };\n};\n\nconst makeProgramming = (\n  problem: XmlParseStrPProblem,\n  question: BaseQuestion\n): IProgrammingQuestion => {\n  const testcases = problem.SNIPPET[0].TESTCASES;\n  const publicTestcases = testcases ? testcases[0].PUBLIC || [] : [];\n  const privateTestcases = testcases ? testcases[0].PRIVATE || [] : [];\n  const prepend = problem.SNIPPET[0].PREPEND;\n  const postpend = problem.SNIPPET[0].POSTPEND;\n  const solution = problem.SNIPPET[0].SOLUTION;\n\n  const result: IProgrammingQuestion = {\n    ...question,\n    autogradingResults: [],\n    prepend: prepend ? (prepend[0] as string).trim() : '',\n    solutionTemplate: problem.SNIPPET[0].TEMPLATE[0].trim() as string,\n    postpend: postpend ? (postpend[0] as string).trim() : '',\n    testcases: publicTestcases.map(testcase => makeTestcase(testcase)),\n    testcasesPrivate: privateTestcases.map(testcase => makeTestcase(testcase)),\n    answer: solution ? (solution[0] as string).trim() : '',\n    type: 'programming'\n  };\n  if (problem.SNIPPET[0].GRADER) {\n    result.graderTemplate = problem.SNIPPET[0].GRADER[0];\n  }\n  return result;\n};\n\nconst makeTestcase = (testcase: XmlParseStrTestcase): Testcase => {\n  return {\n    type: TestcaseTypes.public,\n    answer: testcase.$.answer,\n    score: parseInt(testcase.$.score, 10),\n    program: testcase._\n  };\n};\n\nexport const exportXml = () => {\n  const assessmentStr = localStorage.getItem('MissionEditingAssessmentSA');\n  const overviewStr = localStorage.getItem('MissionEditingOverviewSA');\n  if (assessmentStr && overviewStr) {\n    const assessment: Assessment = JSON.parse(assessmentStr);\n    const overview: AssessmentOverview = JSON.parse(overviewStr);\n    const filename = overview.fileName || overview.title;\n    const builder = new Builder();\n    const xmlTask: XmlParseStrTask = assessmentToXml(assessment, overview);\n    const xml = {\n      CONTENT: {\n        $: {\n          'xmlns:xsi': 'http://www.w3.org/2001/XMLSchema-instance'\n        },\n        TASK: xmlTask\n      }\n    };\n    let xmlStr = builder.buildObject(xml);\n    xmlStr = xmlStr.replace(/(&#xD;)+/g, '');\n    download(filename + '.xml', xmlStr);\n  }\n};\n\nconst download = (filename: string, text: string) => {\n  const element = document.createElement('a');\n  element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));\n  element.setAttribute('download', filename);\n\n  element.style.display = 'none';\n  document.body.appendChild(element);\n\n  element.click();\n\n  document.body.removeChild(element);\n};\n\nconst exportLibrary = (library: Library) => {\n  const deployment = {\n    $: {\n      interpreter: library.chapter.toString()\n    },\n    EXTERNAL: {\n      $: {\n        name: library.external.name\n      }\n    }\n  };\n\n  if (library.external.symbols.length !== 0) {\n    /* tslint:disable:no-string-literal */\n    deployment.EXTERNAL['SYMBOL'] = library.external.symbols;\n  }\n  if (library.globals.length !== 0) {\n    /* tslint:disable:no-string-literal */\n    deployment['GLOBAL'] = library.globals.map(x => {\n      return {\n        IDENTIFIER: x[0],\n        VALUE: x[2]\n      };\n    });\n  }\n  return deployment;\n};\n\nexport const assessmentToXml = (\n  assessment: Assessment,\n  overview: AssessmentOverview\n): XmlParseStrTask => {\n  const task: any = {};\n  const rawOverview: XmlParseStrOverview = {\n    coverimage: overview.coverImage,\n    duedate: overview.closeAt,\n    kind: overview.category.toLowerCase(),\n    number: overview.number || '',\n    startdate: overview.openAt,\n    story: overview.story,\n    title: overview.title\n  };\n  task.$ = rawOverview;\n\n  if (overview.reading && overview.reading !== '') {\n    task.READING = overview.reading;\n  }\n\n  task.WEBSUMMARY = overview.shortSummary;\n  task.TEXT = assessment.longSummary;\n  task.PROBLEMS = { PROBLEM: [] };\n\n  task.DEPLOYMENT = exportLibrary(assessment.globalDeployment!);\n\n  if (assessment.graderDeployment!.chapter !== -1) {\n    task.GRADERDEPLOYMENT = exportLibrary(assessment.graderDeployment!);\n  }\n\n  assessment.questions.forEach((question: IProgrammingQuestion | IMCQQuestion) => {\n    const problem = {\n      $: {\n        type: question.type,\n        maxgrade: question.maxGrade\n      },\n      SNIPPET: {\n        SOLUTION: question.answer\n      },\n      TEXT: question.content,\n      CHOICE: [] as any[]\n    };\n\n    if (question.library.chapter !== -1) {\n      /* tslint:disable:no-string-literal */\n      problem.$['DEPLOYMENT'] = exportLibrary(question.library);\n    }\n\n    if (question.graderLibrary!.chapter !== -1) {\n      /* tslint:disable:no-string-literal */\n      problem.$['GRADERDEPLOYMENT'] = exportLibrary(question.graderLibrary!);\n    }\n\n    if (question.maxXp) {\n      /* tslint:disable:no-string-literal */\n      problem.$['maxxp'] = question.maxXp;\n    }\n\n    if (question.type === 'programming') {\n      if (question.graderTemplate) {\n        /* tslint:disable:no-string-literal */\n        problem.SNIPPET['GRADER'] = question.graderTemplate;\n      }\n      const snippet = {\n        ...problem.SNIPPET,\n        TEMPLATE: question.solutionTemplate,\n        PREPEND: question.prepend,\n        POSTPEND: question.postpend,\n        TESTCASES: '' as any\n      };\n\n      if (question.testcases.length || question.testcasesPrivate!.length) {\n        /* tslint:disable:no-string-literal */\n        snippet.TESTCASES = {};\n        if (question.testcases.length) {\n          const publicTests = question.testcases.map(testcase => {\n            return {\n              $: {\n                answer: testcase.answer,\n                score: testcase.score\n              },\n              _: testcase.program\n            };\n          });\n          snippet.TESTCASES['PUBLIC'] = publicTests;\n        }\n\n        if (question.testcasesPrivate && question.testcasesPrivate.length) {\n          const privateTests = question.testcasesPrivate.map(testcase => {\n            return {\n              $: {\n                answer: testcase.answer,\n                score: testcase.score\n              },\n              _: testcase.program\n            };\n          });\n          snippet.TESTCASES['PRIVATE'] = privateTests;\n        }\n      }\n\n      problem.SNIPPET = snippet;\n    }\n\n    if (question.type === 'mcq') {\n      question.choices.forEach((choice: MCQChoice, i: number) => {\n        problem.CHOICE.push({\n          $: {\n            correct: question.solution === i ? 'true' : 'false'\n          },\n          TEXT: choice.content\n        });\n      });\n    }\n\n    task.PROBLEMS.PROBLEM.push(problem);\n  });\n\n  return task;\n};\n","import {\n  Button,\n  Card,\n  Classes,\n  Dialog,\n  Elevation,\n  H3,\n  H4,\n  H6,\n  Icon,\n  Intent,\n  MenuItem,\n  Text\n} from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport { ItemRenderer, Select } from '@blueprintjs/select';\nimport * as React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport Textarea from 'react-textarea-autosize';\n\nimport defaultCoverImage from '../../assets/default_cover_image.jpg';\nimport {\n  AssessmentCategories,\n  AssessmentCategory,\n  AssessmentOverview\n} from '../assessment/AssessmentTypes';\nimport controlButton from '../ControlButton';\nimport Markdown from '../Markdown';\nimport Constants from '../utils/Constants';\nimport { getPrettyDate } from '../utils/DateHelper';\nimport { assessmentCategoryLink } from '../utils/ParamParseHelper';\nimport { exportXml, storeLocalAssessmentOverview } from '../XMLParser/XMLParserHelper';\n\ntype EditingOverviewCardProps = DispatchProps & StateProps;\n\ntype DispatchProps = {\n  updateEditingOverview: (overview: AssessmentOverview) => void;\n};\n\ntype StateProps = {\n  listingPath?: string;\n  overview: AssessmentOverview;\n};\n\ntype State = {\n  editingOverviewField: string;\n  fieldValue: any;\n  showOptionsOverlay: boolean;\n};\n\nexport class EditingOverviewCard extends React.Component<EditingOverviewCardProps, State> {\n  public constructor(props: EditingOverviewCardProps) {\n    super(props);\n    this.state = {\n      editingOverviewField: '',\n      fieldValue: '',\n      showOptionsOverlay: false\n    };\n  }\n\n  public render() {\n    return (\n      <div>\n        {this.optionsOverlay()}\n        {this.makeEditingOverviewCard(this.props.overview)}\n      </div>\n    );\n  }\n\n  private saveEditOverview = (field: keyof AssessmentOverview) => (e: any) => {\n    const overview = {\n      ...this.props.overview,\n      [field]: this.state.fieldValue\n    };\n    this.setState({\n      editingOverviewField: '',\n      fieldValue: ''\n    });\n    storeLocalAssessmentOverview(overview);\n    this.props.updateEditingOverview(overview);\n  };\n\n  private handleEditOverview = () => (e: any) => {\n    this.setState({\n      fieldValue: e.target.value\n    });\n  };\n\n  private toggleEditField = (field: keyof AssessmentOverview) => (e: any) => {\n    if (this.state.editingOverviewField !== field) {\n      this.setState({\n        editingOverviewField: field,\n        fieldValue: this.props.overview[field]\n      });\n    }\n  };\n\n  private toggleOptionsOverlay = () => {\n    this.setState({\n      showOptionsOverlay: !this.state.showOptionsOverlay\n    });\n  };\n\n  private handleExportXml = (e: any) => {\n    exportXml();\n  };\n\n  private makeEditingOverviewTextarea = (field: keyof AssessmentOverview) => (\n    <Textarea\n      autoFocus={true}\n      className={'editing-textarea'}\n      onChange={this.handleEditOverview()}\n      onBlur={this.saveEditOverview(field)}\n      value={this.state.fieldValue}\n    />\n  );\n\n  private makeEditingOverviewCard = (overview: AssessmentOverview) => (\n    <div>\n      <Card className=\"row listing\" elevation={Elevation.ONE}>\n        <div className=\"col-xs-3 listing-picture\" onClick={this.toggleEditField('coverImage')}>\n          {this.state.editingOverviewField === 'coverImage' ? (\n            this.makeEditingOverviewTextarea('coverImage')\n          ) : (\n            <img\n              alt=\"Assessment cover\"\n              className={`cover-image-${overview.status}`}\n              src={overview.coverImage ? overview.coverImage : defaultCoverImage}\n            />\n          )}\n        </div>\n\n        <div className=\"col-xs-9 listing-text\">\n          {this.makeEditingOverviewCardTitle(overview, overview.title)}\n          <div className=\"row listing-grade\">\n            <H6> {`Max Grade: ${overview.maxGrade}`} </H6>\n          </div>\n          <div className=\"row listing-xp\">\n            <H6> {`Max XP: ${overview.maxXp}`} </H6>\n          </div>\n          <div className=\"row listing-description\" onClick={this.toggleEditField('shortSummary')}>\n            {this.state.editingOverviewField === 'shortSummary' ? (\n              this.makeEditingOverviewTextarea('shortSummary')\n            ) : (\n              <Markdown content={createPlaceholder(overview.shortSummary)} />\n            )}\n          </div>\n          <div className=\"listing-controls\">\n            <Text className=\"listing-due-date\">\n              <Icon className=\"listing-due-icon\" iconSize={12} icon={IconNames.TIME} />\n              <div className=\"date-container\">Opens at:&nbsp;</div>\n              <div className=\"date-container\" onClick={this.toggleEditField('openAt')}>\n                {this.state.editingOverviewField === 'openAt'\n                  ? this.makeEditingOverviewTextarea('openAt')\n                  : `${getPrettyDate(overview.openAt)}`}\n              </div>\n\n              <div className=\"date-container\">&nbsp;&nbsp;Due:&nbsp;</div>\n              <div className=\"date-container\" onClick={this.toggleEditField('closeAt')}>\n                {this.state.editingOverviewField === 'closeAt'\n                  ? this.makeEditingOverviewTextarea('closeAt')\n                  : `${getPrettyDate(overview.closeAt)}`}\n              </div>\n            </Text>\n            {this.makeOptionsButton()}\n            {makeOverviewCardButton(overview, this.props.listingPath)}\n          </div>\n        </div>\n      </Card>\n    </div>\n  );\n\n  private makeEditingOverviewCardTitle = (overview: AssessmentOverview, title: string) => (\n    <div className=\"row listing-title\">\n      <Text ellipsize={true} className={'col-xs-10'}>\n        <H4 onClick={this.toggleEditField('title')}>\n          {this.state.editingOverviewField === 'title'\n            ? this.makeEditingOverviewTextarea('title')\n            : createPlaceholder(title)}\n        </H4>\n      </Text>\n      <div className=\"col-xs-2\">{this.makeExportButton(overview)}</div>\n    </div>\n  );\n\n  private makeExportButton = (overview: AssessmentOverview) => (\n    <Button\n      icon={IconNames.EXPORT}\n      intent={Intent.DANGER}\n      minimal={true}\n      // intentional: each menu renders own version of onClick\n      // tslint:disable-next-line:jsx-no-lambda\n      onClick={this.handleExportXml}\n    >\n      Save as XML\n    </Button>\n  );\n\n  private makeOptionsButton = () => (\n    <Button icon={IconNames.WRENCH} minimal={true} onClick={this.toggleOptionsOverlay}>\n      Other Options\n    </Button>\n  );\n\n  private saveCategory = (i: AssessmentCategory, e: any) => {\n    const overview = {\n      ...this.props.overview,\n      category: i\n    };\n    storeLocalAssessmentOverview(overview);\n    this.props.updateEditingOverview(overview);\n  };\n\n  private optionsOverlay = () => (\n    <Dialog\n      canOutsideClickClose={false}\n      className=\"assessment-reset\"\n      icon={IconNames.WRENCH}\n      isCloseButtonShown={true}\n      isOpen={this.state.showOptionsOverlay}\n      onClose={this.toggleOptionsOverlay}\n      title=\"Other options\"\n    >\n      <div className={Classes.DIALOG_BODY}>\n        <H3>Category</H3>\n        {categorySelect(this.props.overview.category, this.saveCategory)}\n        <H3>Number</H3>\n        <div onClick={this.toggleEditField('number')}>\n          {this.state.editingOverviewField === 'number'\n            ? this.makeEditingOverviewTextarea('number')\n            : createPlaceholder(this.props.overview.number || '')}\n        </div>\n        <H3>Story</H3>\n        <div onClick={this.toggleEditField('story')}>\n          {this.state.editingOverviewField === 'story'\n            ? this.makeEditingOverviewTextarea('story')\n            : createPlaceholder(this.props.overview.story || '')}\n        </div>\n        <br />\n        <H3>Filename</H3>\n        <div onClick={this.toggleEditField('fileName')}>\n          {this.state.editingOverviewField === 'fileName'\n            ? this.makeEditingOverviewTextarea('fileName')\n            : createPlaceholder(this.props.overview.fileName || '')}\n        </div>\n      </div>\n    </Dialog>\n  );\n}\n\nconst createPlaceholder = (str: string): string => {\n  if (str.match('^(\\n| )*$')) {\n    return 'Enter Value Here (If Applicable)';\n  } else {\n    return str;\n  }\n};\n\nconst makeOverviewCardButton = (overview: AssessmentOverview, listingPath: string | undefined) => {\n  const label: string = 'Edit mission';\n  listingPath = listingPath || '/academy/' + assessmentCategoryLink(overview.category);\n  return (\n    <NavLink to={listingPath + `/${overview.id.toString()}/${Constants.defaultQuestionId}`}>\n      {controlButton(label, IconNames.EDIT)}\n    </NavLink>\n  );\n};\n\nconst assessmentCategoriesArr = [\n  AssessmentCategories.Mission,\n  AssessmentCategories.Path,\n  AssessmentCategories.Sidequest,\n  AssessmentCategories.Contest\n];\n\nconst categorySelect = (\n  category: AssessmentCategory,\n  handleSelect = (i: AssessmentCategory, e?: React.SyntheticEvent<HTMLElement>) => {}\n) => (\n  <CategorySelectComponent\n    className={Classes.MINIMAL}\n    items={assessmentCategoriesArr}\n    onItemSelect={handleSelect}\n    itemRenderer={categoryRenderer}\n    filterable={false}\n  >\n    <Button\n      className={Classes.MINIMAL}\n      text={category}\n      rightIcon={IconNames.DOUBLE_CARET_VERTICAL}\n    />\n  </CategorySelectComponent>\n);\n\nconst CategorySelectComponent = Select.ofType<AssessmentCategory>();\n\nconst categoryRenderer: ItemRenderer<AssessmentCategory> = (\n  category,\n  { handleClick, modifiers, query }\n) => <MenuItem active={false} key={category} onClick={handleClick} text={category} />;\n","import { Tooltip } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport * as React from 'react';\n\nimport controlButton from '../ControlButton';\n\ntype ControlBarToggleEditModeButtonProps = DispatchProps & StateProps;\n\ntype DispatchProps = {\n  toggleEditMode?(): void;\n};\n\ntype StateProps = {\n  key: string;\n  editingMode?: string;\n};\n\nexport function ControlBarToggleEditModeButton(props: ControlBarToggleEditModeButtonProps) {\n  const editMode = props.editingMode === 'question' ? 'Global' : 'Question Specific';\n  return (\n    <Tooltip content={'Switch to ' + editMode + ' Editing Mode'}>\n      {controlButton(editMode + ' Editing Mode', IconNames.REFRESH, props.toggleEditMode)}\n    </Tooltip>\n  );\n}\n","export const getValueFromPath = (path: Array<string | number>, obj: any): any => {\n  for (const next of path) {\n    obj = obj[next];\n  }\n  return obj;\n};\n\nexport const assignToPath = (path: Array<string | number>, value: any, obj: any): void => {\n  let i = 0;\n  for (i = 0; i < path.length - 1; i++) {\n    obj = obj[path[i]];\n  }\n  obj[path[i]] = value;\n};\n\nexport const limitNumberRange = (min: number | null = 0, max: number | null = null) => (\n  value: number | string\n): number => {\n  value = typeof value === 'string' ? parseInt(value, 10) : value;\n  let result;\n  if (min !== null && value < min) {\n    result = min;\n  } else if (max !== null && value > max) {\n    result = max;\n  } else {\n    result = value;\n  }\n  return result;\n};\n","import * as React from 'react';\nimport Textarea from 'react-textarea-autosize';\n\nimport { Assessment } from '../assessment/AssessmentTypes';\nimport Markdown from '../Markdown';\nimport { assignToPath, getValueFromPath } from './EditingWorkspaceSideContentHelper';\n\ntype TextAreaContentProps = DispatchProps & StateProps;\n\ntype DispatchProps = {\n  processResults?: (newVal: string | number) => string | number;\n  updateAssessment: (assessment: Assessment) => void;\n};\n\ntype StateProps = {\n  assessment: Assessment;\n  isNumber?: boolean;\n  path: Array<string | number>;\n  useRawValue?: boolean;\n};\n\ntype State = {\n  isEditing: boolean;\n  isNumber: boolean;\n  fieldValue: string;\n  useRawValue: boolean;\n};\n\nexport class TextAreaContent extends React.Component<TextAreaContentProps, State> {\n  public constructor(props: TextAreaContentProps) {\n    super(props);\n    const isNumberVal = this.props.isNumber || false;\n    this.state = {\n      isEditing: false,\n      isNumber: isNumberVal,\n      fieldValue: '',\n      useRawValue: this.props.useRawValue || isNumberVal\n    };\n  }\n\n  public render() {\n    let display;\n    if (this.state.isEditing) {\n      display = this.makeEditingTextarea();\n    } else {\n      const filler = 'Please enter value (if applicable)';\n      let value = getValueFromPath(this.props.path, this.props.assessment);\n      if (!this.props.isNumber) {\n        value = value || '';\n        value = value.match(/^\\s*$/) ? filler : value;\n      }\n      if (this.state.useRawValue) {\n        display = value;\n      } else {\n        display = <Markdown content={value} />;\n      }\n    }\n    return <div onClick={this.toggleEditField()}>{display}</div>;\n  }\n\n  private saveEditAssessment = (e: any) => {\n    let fieldValue: number | string;\n    if (this.state.isNumber) {\n      fieldValue = parseInt(this.state.fieldValue, 10);\n      if (isNaN(fieldValue)) {\n        fieldValue = getValueFromPath(this.props.path, this.props.assessment);\n      }\n    } else {\n      fieldValue = this.state.fieldValue;\n    }\n    const originalVal = getValueFromPath(this.props.path, this.props.assessment);\n    if (this.props.processResults) {\n      fieldValue = this.props.processResults(fieldValue);\n    }\n    if (fieldValue !== originalVal) {\n      const assessmentVal = this.props.assessment;\n      assignToPath(this.props.path, fieldValue, assessmentVal);\n      this.props.updateAssessment(assessmentVal);\n    }\n\n    this.setState({\n      isEditing: false\n    });\n  };\n\n  private handleEditAssessment = (e: any) => {\n    this.setState({\n      fieldValue: e.target.value\n    });\n  };\n\n  private makeEditingTextarea = () => (\n    <Textarea\n      autoFocus={true}\n      className={'editing-textarea'}\n      onChange={this.handleEditAssessment}\n      onBlur={this.saveEditAssessment}\n      value={this.state.fieldValue}\n    />\n  );\n\n  private toggleEditField = () => (e: any) => {\n    if (!this.state.isEditing) {\n      const fieldVal = getValueFromPath(this.props.path, this.props.assessment) || '';\n      this.setState({\n        isEditing: true,\n        fieldValue: typeof fieldVal === 'string' ? fieldVal : fieldVal.toString()\n      });\n    }\n  };\n}\n\nexport default TextAreaContent;\n","import { Card, Elevation, H6 } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport * as React from 'react';\n\nimport {\n  Assessment,\n  IProgrammingQuestion,\n  Testcase,\n  testcaseTemplate\n} from '../assessment/AssessmentTypes';\nimport controlButton from '../ControlButton';\nimport { getValueFromPath } from './EditingWorkspaceSideContentHelper';\nimport TextAreaContent from './EditingWorkspaceSideContentTextAreaContent';\n\ntype AutograderProps = DispatchProps & StateProps;\n\ntype DispatchProps = {\n  handleTestcaseEval: (testcase: Testcase) => void;\n  updateAssessment: (assessment: Assessment) => void;\n};\n\ntype StateProps = {\n  assessment: Assessment;\n  questionId: number;\n};\n\nexport class AutograderTab extends React.Component<AutograderProps, {}> {\n  public render() {\n    const question = this.props.assessment.questions[this.props.questionId] as IProgrammingQuestion;\n    const publicTestPath = ['questions', this.props.questionId, 'testcases'];\n\n    const publicTestcases = question.testcases.map((testcase, index) => (\n      <div key={index}>{this.autograderCard(publicTestPath, index)}</div>\n    ));\n\n    const privateTestPath = ['questions', this.props.questionId, 'testcasesPrivate'];\n    const privateTestcases = question.testcasesPrivate!.map((testcase, index) => (\n      <div key={index}>{this.autograderCard(privateTestPath, index)}</div>\n    ));\n\n    return (\n      <div>\n        Public Testcases\n        {publicTestcases}\n        {controlButton('New public testcase', IconNames.PLUS, this.addTestcase(question.testcases))}\n        <br />\n        <br />\n        Private Testcases\n        {privateTestcases}\n        {controlButton(\n          'New private testcase',\n          IconNames.PLUS,\n          this.addTestcase(question.testcasesPrivate!)\n        )}\n      </div>\n    );\n  }\n\n  private addTestcase = (testcases: Testcase[]) => () => {\n    testcases.push(testcaseTemplate());\n    this.props.updateAssessment(this.props.assessment);\n  };\n\n  private removeTestcase = (testcases: Testcase[], id: number) => {\n    testcases.splice(id, 1);\n    this.props.updateAssessment(this.props.assessment);\n  };\n\n  private autograderCard = (testcasePath: Array<string | number>, index: number) => {\n    const testcases = getValueFromPath(testcasePath, this.props.assessment) as Testcase[];\n    const testcase = testcases[index];\n\n    return (\n      <div>\n        <Card className=\"row listing\" elevation={Elevation.ONE}>\n          <div className=\"col-xs-9 listing-text\">\n            {/* {makeOverviewCardTitle(overview, index, setBetchaAssessment, renderGradingStatus)} */}\n            <div className=\"row listing-program\">\n              <H6>\n                Test Program:\n                <TextAreaContent\n                  assessment={this.props.assessment}\n                  path={testcasePath.concat([index, 'program'])}\n                  useRawValue={true}\n                  updateAssessment={this.props.updateAssessment}\n                />\n              </H6>\n            </div>\n            <div className=\"row listing-expected\">\n              <H6>\n                Score:\n                <TextAreaContent\n                  assessment={this.props.assessment}\n                  isNumber={true}\n                  path={testcasePath.concat([index, 'score'])}\n                  updateAssessment={this.props.updateAssessment}\n                />\n              </H6>\n            </div>\n            <div className=\"row listing-expected\">\n              <H6>\n                Expected Answer:\n                <TextAreaContent\n                  assessment={this.props.assessment}\n                  path={testcasePath.concat([index, 'answer'])}\n                  useRawValue={true}\n                  updateAssessment={this.props.updateAssessment}\n                />\n              </H6>\n            </div>\n            <div className=\"listing-controls\">\n              <div>\n                {controlButton('Test', IconNames.PLAY, () =>\n                  this.props.handleTestcaseEval(testcase)\n                )}\n                {controlButton('Delete', IconNames.DELETE, () =>\n                  this.removeTestcase(testcases, index)\n                )}\n              </div>\n            </div>\n          </div>\n        </Card>\n      </div>\n    );\n  };\n}\n","import { Button, Classes, Divider, MenuItem, Switch } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport { ItemRenderer, Select } from '@blueprintjs/select';\nimport { Variant } from 'js-slang/dist/types';\nimport * as React from 'react';\n\nimport { sourceLanguages, styliseChapter } from '../application/ApplicationTypes';\nimport { Chapter } from '../application/types/ChapterTypes';\nimport {\n  External,\n  externalLibraries,\n  ExternalLibraryName\n} from '../application/types/ExternalTypes';\nimport { Assessment, emptyLibrary, Library } from '../assessment/AssessmentTypes';\nimport controlButton from '../ControlButton';\nimport { assignToPath, getValueFromPath } from './EditingWorkspaceSideContentHelper';\nimport TextAreaContent from './EditingWorkspaceSideContentTextAreaContent';\n\ntype DeploymentTabProps = DispatchProps & StateProps;\n\ntype DispatchProps = {\n  updateAssessment: (assessment: Assessment) => void;\n  handleRefreshLibrary: (library: Library) => void;\n};\n\ntype StateProps = {\n  assessment: Assessment;\n  label: string;\n  pathToLibrary: Array<string | number>;\n  pathToCopy?: Array<string | number>;\n  isOptionalDeployment: boolean;\n};\n\nexport class DeploymentTab extends React.Component<DeploymentTabProps, {}> {\n  public render() {\n    if (!this.props.isOptionalDeployment) {\n      return (\n        <div>\n          {this.props.label + ' Deployment'}\n          <br />\n          {this.deploymentTab()}\n        </div>\n      );\n    } else {\n      return (\n        <div>\n          <Switch\n            checked={!this.isEmptyLibrary()}\n            label={'Enable ' + this.props.label + ' Deployment'}\n            onChange={this.handleSwitchDeployment}\n          />\n          {this.isEmptyLibrary() ? null : this.deploymentTab()}\n        </div>\n      );\n    }\n  }\n\n  private deploymentTab = () => {\n    const deploymentPath = this.props.pathToLibrary;\n    const deployment = getValueFromPath(deploymentPath, this.props.assessment) as Library;\n    // const deploymentDisp = this.props.isGlobalDeployment ? 'Global Deployment' : 'Local Deployment';\n    const symbols = deployment.external.symbols.map((symbol, i) => (\n      <tr key={i}>\n        <td>{this.textareaContent(deploymentPath.concat(['external', 'symbols', i]))}</td>\n        <td style={{ width: '100px' }}>\n          {controlButton('Delete', IconNames.MINUS, this.handleSymbolDelete(i))}\n        </td>\n      </tr>\n    ));\n\n    const globals = deployment.globals.map((symbol, i) => (\n      <tr key={i}>\n        <td style={{ width: '170px' }}>\n          {this.textareaContent(deploymentPath.concat(['globals', i, 0]))}\n        </td>\n        <td>{this.globalValueTextareaContent(i)}</td>\n        <td style={{ width: '90px' }}>\n          {controlButton('Delete', IconNames.MINUS, this.handleGlobalDelete(i))}\n        </td>\n      </tr>\n    ));\n\n    const resetLibrary = controlButton('Use this Library', IconNames.REFRESH, () =>\n      this.props.handleRefreshLibrary(deployment)\n    );\n\n    const symbolsFragment = (\n      <React.Fragment>\n        External Library:\n        <br />\n        {externalSelect(deployment.external.name, this.handleExternalSelect!)}\n        <Divider />\n        <div>Symbols:</div>\n        <br />\n        <table style={{ width: '100%' }}>\n          <tbody>{symbols}</tbody>\n        </table>\n        {controlButton('New Symbol', IconNames.PLUS, this.handleNewSymbol)}\n      </React.Fragment>\n    );\n\n    const globalsFragment = (\n      <React.Fragment>\n        <div>Globals:</div>\n        <br />\n        <table style={{ width: '100%', borderSpacing: '5px' }}>\n          <tbody>{globals}</tbody>\n        </table>\n        {controlButton('New Global', IconNames.PLUS, this.handleNewGlobal)}\n      </React.Fragment>\n    );\n\n    return (\n      <div>\n        {/* {deploymentDisp}\n        <br /> */}\n        <Divider />\n        {resetLibrary}\n        <Divider />\n        Interpreter:\n        <br />\n        {chapterSelect(deployment.chapter, deployment.variant, this.handleChapterSelect)}\n        <Divider />\n        {symbolsFragment}\n        <Divider />\n        {globalsFragment}\n      </div>\n    );\n  };\n\n  private textareaContent = (path: Array<string | number>) => {\n    return (\n      <TextAreaContent\n        assessment={this.props.assessment}\n        path={path}\n        processResults={removeSpaces}\n        updateAssessment={this.props.updateAssessment}\n        useRawValue={true}\n      />\n    );\n  };\n\n  private globalValueTextareaContent = (i: number) => {\n    const pathVal = this.props.pathToLibrary.concat(['globals', i, 2]);\n    return (\n      <TextAreaContent\n        assessment={this.props.assessment}\n        path={pathVal}\n        updateAssessment={this.handleGlobalValueUpdate(i)}\n        useRawValue={true}\n      />\n    );\n  };\n\n  private handleGlobalValueUpdate = (i: number) => (assessment: Assessment) => {\n    const deployment = getValueFromPath(this.props.pathToLibrary, this.props.assessment) as Library;\n    const global = deployment.globals[i];\n    try {\n      global[1] = altEval(global[2]!);\n      this.props.updateAssessment(assessment);\n    } catch (e) {\n      global[2] = '\"Invalid Expression\"';\n    }\n  };\n\n  private handleSymbolDelete = (index: number) => () => {\n    const assessment = this.props.assessment;\n    const deployment = getValueFromPath(this.props.pathToLibrary, assessment) as Library;\n    const symbols = deployment.external.symbols;\n    symbols.splice(index, 1);\n    this.props.updateAssessment(assessment);\n  };\n\n  private handleNewSymbol = () => {\n    const assessment = this.props.assessment;\n    const deployment = getValueFromPath(this.props.pathToLibrary, assessment) as Library;\n    const symbols = deployment.external.symbols;\n    symbols.push('new_symbol');\n    this.props.updateAssessment(assessment);\n  };\n\n  private handleGlobalDelete = (index: number) => () => {\n    const assessment = this.props.assessment;\n    const deployment = getValueFromPath(this.props.pathToLibrary, assessment) as Library;\n    deployment.globals.splice(index, 1);\n    this.props.updateAssessment(assessment);\n  };\n\n  private handleNewGlobal = () => {\n    const assessment = this.props.assessment;\n    const deployment = getValueFromPath(this.props.pathToLibrary, assessment) as Library;\n    deployment.globals.push(['new_global', null, 'null']);\n    this.props.updateAssessment(assessment);\n  };\n\n  private handleChapterSelect = (i: Chapter, _e?: React.SyntheticEvent<HTMLElement>) => {\n    const assessment = this.props.assessment;\n    const deployment = getValueFromPath(this.props.pathToLibrary, assessment) as Library;\n    deployment.chapter = i.chapter;\n    this.props.updateAssessment(assessment);\n  };\n\n  private handleExternalSelect = (i: External, _e?: React.SyntheticEvent<HTMLElement>) => {\n    const assessment = this.props.assessment;\n    const deployment = getValueFromPath(this.props.pathToLibrary, assessment) as Library;\n    deployment.external.name = i.name;\n    deployment.external.symbols = JSON.parse(JSON.stringify(externalLibraries.get(i.name)!));\n    this.props.updateAssessment(assessment);\n  };\n\n  private handleSwitchDeployment = () => {\n    const assessment = this.props.assessment;\n    if (this.isEmptyLibrary()) {\n      let library = getValueFromPath(\n        this.props.pathToCopy || ['globalDeployment'],\n        assessment\n      ) as Library;\n      if (library.chapter === -1) {\n        library = assessment.globalDeployment!;\n      }\n      library = JSON.parse(JSON.stringify(library));\n      assignToPath(this.props.pathToLibrary, library, assessment);\n    } else {\n      assignToPath(this.props.pathToLibrary, emptyLibrary(), assessment);\n    }\n    this.props.updateAssessment(assessment);\n  };\n\n  private isEmptyLibrary = (path: Array<string | number> = this.props.pathToLibrary) => {\n    return getValueFromPath(path.concat(['chapter']), this.props.assessment) === -1;\n  };\n}\n\nconst removeSpaces = (str: string | number) => {\n  return typeof str === 'string' ? str.replace(/\\s+/g, '') : str;\n};\n\nconst altEval = (str: string): any => {\n  // eslint-disable-next-line no-new-func\n  return Function('\"use strict\";return (' + str + ')')();\n};\n\nconst chapters = sourceLanguages.map(lang => ({\n  chapter: lang.chapter,\n  variant: lang.variant,\n  displayName: styliseChapter(lang.chapter, lang.variant)\n}));\n\nconst chapterSelect = (\n  currentChap: number,\n  variant: Variant = 'default',\n  handleSelect = (i: Chapter, e?: React.SyntheticEvent<HTMLElement>) => {}\n) => (\n  <ChapterSelectComponent\n    className={Classes.MINIMAL}\n    items={chapters}\n    onItemSelect={handleSelect}\n    itemRenderer={chapterRenderer}\n    filterable={false}\n  >\n    <Button\n      className={Classes.MINIMAL}\n      text={styliseChapter(currentChap, variant)}\n      rightIcon={IconNames.DOUBLE_CARET_VERTICAL}\n    />\n  </ChapterSelectComponent>\n);\n\nconst ChapterSelectComponent = Select.ofType<Chapter>();\n\nconst chapterRenderer: ItemRenderer<Chapter> = (chap, { handleClick, modifiers, query }) => (\n  <MenuItem active={false} key={chap.chapter} onClick={handleClick} text={chap.displayName} />\n);\n\nconst iExternals = Array.from(externalLibraries.entries()).map((entry, index) => ({\n  name: entry[0] as ExternalLibraryName,\n  key: index,\n  symbols: entry[1]\n}));\n\nconst externalSelect = (\n  currentExternal: string,\n  handleSelect: (i: External, e?: React.SyntheticEvent<HTMLElement>) => void\n) => (\n  <ExternalSelectComponent\n    className={Classes.MINIMAL}\n    items={iExternals}\n    onItemSelect={handleSelect}\n    itemRenderer={externalRenderer}\n    filterable={false}\n  >\n    <Button\n      className={Classes.MINIMAL}\n      text={currentExternal}\n      rightIcon={IconNames.DOUBLE_CARET_VERTICAL}\n    />\n  </ExternalSelectComponent>\n);\n\nconst ExternalSelectComponent = Select.ofType<External>();\n\nconst externalRenderer: ItemRenderer<External> = (external, { handleClick, modifiers, query }) => (\n  <MenuItem active={false} key={external.key} onClick={handleClick} text={external.name} />\n);\n\nexport default DeploymentTab;\n","import * as React from 'react';\n\nimport { Assessment } from '../assessment/AssessmentTypes';\nimport { limitNumberRange } from './EditingWorkspaceSideContentHelper';\nimport TextAreaContent from './EditingWorkspaceSideContentTextAreaContent';\n\ntype GradingTabProps = DispatchProps & StateProps;\n\ntype DispatchProps = {\n  updateAssessment: (assessment: Assessment) => void;\n};\n\ntype StateProps = {\n  assessment: Assessment;\n  path: Array<string | number>;\n};\n\nexport class GradingTab extends React.Component<GradingTabProps, {}> {\n  public constructor(props: GradingTabProps) {\n    super(props);\n  }\n\n  public render() {\n    return this.gradingTab();\n  }\n\n  private textareaContent = (path: Array<string | number>) => {\n    return (\n      <TextAreaContent\n        assessment={this.props.assessment}\n        isNumber={true}\n        path={path}\n        processResults={limitNumberRange(0)}\n        updateAssessment={this.props.updateAssessment}\n      />\n    );\n  };\n\n  private gradingTab = () => (\n    <div>\n      Max Grade:\n      {this.textareaContent(this.props.path.concat(['maxGrade']))}\n      <br />\n      Max Xp:\n      {this.textareaContent(this.props.path.concat(['maxXp']))}\n    </div>\n  );\n}\n\nexport default GradingTab;\n","import { Button, ButtonGroup, Classes, Dialog, Intent } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport * as React from 'react';\n\nimport { Assessment, mcqTemplate, programmingTemplate } from '../assessment/AssessmentTypes';\nimport controlButton from '../ControlButton';\nimport Markdown from '../Markdown';\nimport { history } from '../utils/HistoryHelper';\n\ntype ManageQuestionTabProps = DispatchProps & StateProps;\n\ntype DispatchProps = {\n  updateAssessment: (assessment: Assessment) => void;\n};\n\ntype StateProps = {\n  assessment: Assessment;\n  hasUnsavedChanges: boolean;\n  questionId: number;\n};\n\ntype State = {\n  showSaveOverlay: boolean;\n  modifyAssessment: () => void;\n};\n\nexport class ManageQuestionTab extends React.Component<ManageQuestionTabProps, State> {\n  public constructor(props: ManageQuestionTabProps) {\n    super(props);\n    this.state = {\n      showSaveOverlay: false,\n      modifyAssessment: () => {}\n    };\n  }\n\n  public render() {\n    return (\n      <div>\n        {this.confirmSaveOverlay()}\n        {this.props.assessment.questions.map((q, index) => (\n          <div key={index}>\n            Question {index + 1}\n            <br />\n            <Button className=\"mcq-option col-xs-12\" minimal={true}>\n              <Markdown\n                content={q.content.length > 200 ? q.content.substring(0, 300) + '...' : q.content}\n              />\n            </Button>\n            {this.manageQuestionTab(index)}\n            <br />\n            <br />\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  private manageQuestionTab = (index: number) => {\n    return (\n      <div>\n        {controlButton(\n          `Clone`,\n          IconNames.DOCUMENT,\n          this.confirmSave(\n            this.makeQuestion(() => deepCopy(this.props.assessment.questions[index]), index)\n          )\n        )}\n        {controlButton(`Delete`, IconNames.REMOVE, this.confirmSave(this.deleteQuestion(index)))}\n        {controlButton(\n          `Shift Up`,\n          IconNames.CARET_UP,\n          this.confirmSave(this.shiftQuestion(-1, index)),\n          {},\n          index === 0\n        )}\n        {controlButton(\n          `Shift Down`,\n          IconNames.CARET_DOWN,\n          this.confirmSave(this.shiftQuestion(1, index)),\n          {},\n          index >= this.props.assessment.questions.length - 1\n        )}\n        <br />\n        {controlButton(\n          'Insert Programming Question',\n          IconNames.FONT,\n          this.confirmSave(this.makeQuestion(programmingTemplate, index))\n        )}\n        {controlButton(\n          'Insert MCQ Question',\n          IconNames.CONFIRM,\n          this.confirmSave(this.makeQuestion(mcqTemplate, index))\n        )}\n      </div>\n    );\n  };\n\n  private shiftQuestion = (dir: number, index: number) => () => {\n    const assessment = this.props.assessment;\n    const newIndex = index + dir;\n    if (newIndex >= 0 && newIndex < assessment.questions.length) {\n      const question = assessment.questions[index];\n      const questions = assessment.questions;\n      questions[index] = questions[newIndex];\n      questions[newIndex] = question;\n      assessment.questions = questions;\n      this.props.updateAssessment(assessment);\n      history.push('/mission-control/-1/' + newIndex.toString());\n    }\n  };\n\n  private makeQuestion = (template: () => any, index: number) => () => {\n    const assessment = this.props.assessment;\n    index = index + 1;\n    const questions = assessment.questions;\n    questions.splice(index, 0, template());\n    assessment.questions = questions;\n    this.props.updateAssessment(assessment);\n    history.push('/mission-control/-1/' + index.toString());\n  };\n\n  private deleteQuestion = (index: number) => () => {\n    const assessment = this.props.assessment;\n    let questions = assessment.questions;\n    if (questions.length > 1) {\n      questions = questions.slice(0, index).concat(questions.slice(index + 1));\n    }\n    assessment.questions = questions;\n    this.props.updateAssessment(assessment);\n  };\n\n  private confirmSave = (modifyAssessment: () => void) => () => {\n    if (this.props.hasUnsavedChanges) {\n      this.setState({\n        showSaveOverlay: true,\n        modifyAssessment\n      });\n    } else {\n      modifyAssessment();\n    }\n  };\n\n  /**\n   * Asks to save work.\n   */\n  private confirmSaveOverlay = () => (\n    <Dialog\n      className=\"assessment-reset\"\n      icon={IconNames.ERROR}\n      isCloseButtonShown={true}\n      isOpen={this.state.showSaveOverlay}\n      title=\"Confirmation: Save unsaved changes?\"\n    >\n      <div className={Classes.DIALOG_BODY}>\n        <Markdown content=\"Are you sure you want to save over your unsaved changes?\" />\n      </div>\n      <div className={Classes.DIALOG_FOOTER}>\n        <ButtonGroup>\n          {controlButton('Cancel', null, () => this.setState({ showSaveOverlay: false }), {\n            minimal: false\n          })}\n          {controlButton(\n            'Confirm',\n            null,\n            () => {\n              this.state.modifyAssessment();\n              this.setState({\n                showSaveOverlay: false\n              });\n            },\n            { minimal: false, intent: Intent.DANGER }\n          )}\n        </ButtonGroup>\n      </div>\n    </Dialog>\n  );\n}\n\nconst deepCopy = (arr: any) => {\n  return JSON.parse(JSON.stringify(arr));\n};\n\nexport default ManageQuestionTab;\n","import { Card } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport * as React from 'react';\n\nimport { Assessment, IMCQQuestion } from '../assessment/AssessmentTypes';\nimport controlButton from '../ControlButton';\nimport { limitNumberRange } from './EditingWorkspaceSideContentHelper';\nimport TextAreaContent from './EditingWorkspaceSideContentTextAreaContent';\n\ntype MCQQuestionTemplateTabProps = DispatchProps & StateProps;\n\ntype DispatchProps = {\n  updateAssessment: (assessment: Assessment) => void;\n};\n\ntype StateProps = {\n  assessment: Assessment;\n  questionId: number;\n};\n\nexport class MCQQuestionTemplateTab extends React.Component<MCQQuestionTemplateTabProps, {}> {\n  public constructor(props: MCQQuestionTemplateTabProps) {\n    super(props);\n  }\n\n  public render() {\n    return this.mcqTab();\n  }\n\n  private mcqTab = () => {\n    const questionId = this.props.questionId;\n    const question = this.props.assessment!.questions[questionId] as IMCQQuestion;\n    const mcqButton = question.choices.map((choice, i) => (\n      <div key={i} className=\"mcq-option col-xs-12\">\n        Option {i}:{this.textareaContent(['questions', questionId, 'choices', i, 'content'])}\n        <br />\n        Hint:\n        {this.textareaContent(['questions', questionId, 'choices', i, 'hint'])}\n      </div>\n    ));\n    const deleteButton = controlButton('Delete Option', IconNames.REMOVE, this.delOption);\n\n    return (\n      <div className=\"MCQChooser row\">\n        <Card className=\"mcq-content-parent col-xs-12 middle-xs\">\n          <div className=\"row mcq-options-parent between-xs\">\n            {mcqButton}\n            Solution:\n            {this.textareaContent(['questions', questionId, 'solution'], true, [\n              0,\n              question.choices.length\n            ])}\n            <br />\n            {controlButton('Add Option', IconNames.CONFIRM, this.addOption)}\n            {question.choices.length > 0 ? deleteButton : undefined}\n          </div>\n        </Card>\n      </div>\n    );\n  };\n\n  private addOption = () => {\n    const assessment = this.props.assessment;\n    const questionId = this.props.questionId;\n    const question = assessment!.questions[questionId] as IMCQQuestion;\n    const choices = question.choices.concat([\n      {\n        content: 'A',\n        hint: null\n      }\n    ]);\n    question.choices = choices;\n    assessment!.questions[questionId] = question;\n    this.props.updateAssessment(assessment);\n  };\n\n  private delOption = () => {\n    const assessment = this.props.assessment;\n    const questionId = this.props.questionId;\n    const question = assessment!.questions[questionId] as IMCQQuestion;\n    const choices = question.choices.slice(0, question.choices.length - 1);\n    question.choices = choices;\n    assessment!.questions[questionId] = question;\n    this.props.updateAssessment(assessment);\n  };\n\n  private textareaContent = (\n    path: Array<string | number>,\n    isNumber: boolean = false,\n    range: number[] = [0]\n  ) => {\n    if (isNumber) {\n      return (\n        <TextAreaContent\n          assessment={this.props.assessment}\n          isNumber={true}\n          path={path}\n          processResults={limitNumberRange(range[0], range[1])}\n          updateAssessment={this.props.updateAssessment}\n        />\n      );\n    } else {\n      return (\n        <TextAreaContent\n          assessment={this.props.assessment}\n          path={path}\n          updateAssessment={this.props.updateAssessment}\n        />\n      );\n    }\n  };\n}\n\nexport default MCQQuestionTemplateTab;\n","import { Button, Card, Classes, Divider, IconName, MenuItem } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport { ItemRenderer, Select } from '@blueprintjs/select';\nimport * as React from 'react';\nimport AceEditor from 'react-ace';\n\nimport { Assessment } from '../assessment/AssessmentTypes';\nimport controlButton from '../ControlButton';\nimport { WorkspaceState } from '../workspace/WorkspaceTypes';\nimport { assignToPath, getValueFromPath } from './EditingWorkspaceSideContentHelper';\n\ntype QuestionEditorProps = DispatchProps & StateProps;\n\ntype DispatchProps = {\n  updateAssessment: (assessment: Assessment) => void;\n  handleEditorValueChange: (val: string) => void;\n  handleUpdateWorkspace: (options: Partial<WorkspaceState>) => void;\n};\n\ntype StateProps = {\n  assessment: Assessment;\n  editorValue: string | null;\n  questionId: number;\n};\n\ntype OwnProps = {\n  activeEditor: QuestionEditor;\n  templateValue: string;\n  templateFocused: boolean;\n};\n\nconst questionEditorPaths = ['prepend', 'postpend', 'solutionTemplate', 'answer'] as const;\n\nexport type QuestionEditorId = typeof questionEditorPaths[number];\n\nconst QuestionEditorSelect = Select.ofType<QuestionEditor>();\n\nexport type QuestionEditor = {\n  label: string;\n  icon: IconName;\n  id: QuestionEditorId;\n};\n\nconst questionEditors: QuestionEditor[] = [\n  {\n    label: 'Prepend',\n    icon: IconNames.CHEVRON_UP,\n    id: 'prepend'\n  },\n  {\n    label: 'Postpend',\n    icon: IconNames.CHEVRON_DOWN,\n    id: 'postpend'\n  },\n  {\n    label: 'Solution Template',\n    icon: IconNames.MANUAL,\n    id: 'solutionTemplate'\n  },\n  {\n    label: 'Suggested Answer',\n    icon: IconNames.TICK,\n    id: 'answer'\n  }\n];\n\n/*\n * activeEditor is the default editor to show initially\n */\nexport class ProgrammingQuestionTemplateTab extends React.Component<QuestionEditorProps, OwnProps> {\n  public constructor(props: QuestionEditorProps) {\n    super(props);\n    this.state = {\n      activeEditor: questionEditors[0],\n      templateValue: '',\n      templateFocused: false\n    };\n  }\n\n  public render() {\n    return this.programmingTab();\n  }\n\n  private programmingTab = () => {\n    const qnPath = ['questions', this.props.questionId];\n    const path = qnPath.concat(this.state.activeEditor.id);\n\n    const copyFromEditorButton = controlButton(\n      'Copy from Editor',\n      IconNames.IMPORT,\n      this.handleCopyFromEditor(path)\n    );\n\n    const copyToEditorButton = controlButton(\n      'Copy to Editor',\n      IconNames.EXPORT,\n      this.handleCopyToEditor(path)\n    );\n\n    const editorPanel = (\n      <div>\n        {copyFromEditorButton}\n        {copyToEditorButton}\n        <Divider />\n        {this.editor(path)}\n      </div>\n    );\n\n    const menuRenderer: ItemRenderer<QuestionEditor> = (editor, { handleClick }) => (\n      <MenuItem\n        active={false}\n        key={editor.id}\n        onClick={handleClick}\n        text={editor.label}\n        icon={editor.icon}\n      />\n    );\n\n    const editorSelect = (\n      currentEditor: QuestionEditor,\n      handleSelect: (i: QuestionEditor) => void\n    ) => (\n      <QuestionEditorSelect\n        className={Classes.MINIMAL}\n        items={questionEditors}\n        itemRenderer={menuRenderer}\n        onItemSelect={handleSelect}\n        filterable={false}\n      >\n        <Button\n          className={Classes.MINIMAL}\n          text={currentEditor.label}\n          icon={IconNames.EDIT}\n          rightIcon={IconNames.DOUBLE_CARET_VERTICAL}\n        />\n      </QuestionEditorSelect>\n    );\n\n    return (\n      <div className=\"side-content\">\n        <Card>\n          {editorSelect(this.state.activeEditor, this.handleChangeActiveEditor)}\n          <Divider />\n          <div className=\"side-content-text\">{editorPanel}</div>\n        </Card>\n      </div>\n    );\n  };\n\n  private editor = (path: Array<string | number>) => {\n    const value = this.state.templateFocused\n      ? this.state.templateValue\n      : getValueFromPath(path, this.props.assessment);\n\n    return (\n      <div onClick={this.focusEditor(path)} onBlur={this.unFocusEditor(path)}>\n        <AceEditor\n          className=\"react-ace\"\n          editorProps={{\n            $blockScrolling: Infinity\n          }}\n          fontSize={14}\n          highlightActiveLine={false}\n          mode=\"javascript\"\n          onChange={this.handleTemplateChange}\n          theme=\"source\"\n          value={value}\n          width=\"100%\"\n        />\n      </div>\n    );\n  };\n\n  private handleChangeActiveEditor = (editor: QuestionEditor) => {\n    this.setState({\n      activeEditor: editor\n    });\n  };\n\n  private handleTemplateChange = (newCode: string) => {\n    this.setState({\n      templateValue: newCode\n    });\n  };\n\n  private focusEditor = (path: Array<string | number>) => (e: any): void => {\n    if (!this.state.templateFocused) {\n      this.setState({\n        templateValue: getValueFromPath(path, this.props.assessment),\n        templateFocused: true\n      });\n    }\n  };\n\n  private unFocusEditor = (path: Array<string | number>) => (e: any): void => {\n    if (this.state.templateFocused) {\n      const value = getValueFromPath(path, this.props.assessment);\n      if (value !== this.state.templateValue) {\n        const assessmentVal = this.props.assessment;\n        assignToPath(path, this.state.templateValue, assessmentVal);\n        this.props.updateAssessment(assessmentVal);\n      }\n\n      if (this.state.activeEditor.id === 'prepend') {\n        const editorPrepend = this.state.templateValue;\n        this.props.handleUpdateWorkspace({ editorPrepend });\n      } else if (this.state.activeEditor.id === 'postpend') {\n        const editorPostpend = this.state.templateValue;\n        this.props.handleUpdateWorkspace({ editorPostpend });\n      }\n\n      this.setState({\n        templateValue: '',\n        templateFocused: false\n      });\n    }\n  };\n\n  private handleCopyFromEditor = (path: Array<string | number>) => (): void => {\n    const assessment = this.props.assessment;\n    assignToPath(path, this.props.editorValue, assessment);\n    this.props.updateAssessment(assessment);\n  };\n\n  private handleCopyToEditor = (path: Array<string | number>) => (): void => {\n    const value = getValueFromPath(path, this.props.assessment);\n    this.props.handleEditorValueChange(value);\n  };\n}\n\nexport default ProgrammingQuestionTemplateTab;\n","import { ButtonGroup, Classes, Dialog, Intent, NonIdealState, Spinner } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport classNames from 'classnames';\nimport * as React from 'react';\n\nimport { InterpreterOutput } from '../application/ApplicationTypes';\nimport {\n  Assessment,\n  AssessmentOverview,\n  IMCQQuestion,\n  IProgrammingQuestion,\n  Library,\n  Question,\n  QuestionTypes,\n  Testcase\n} from '../assessment/AssessmentTypes';\nimport { ControlBarProps } from '../controlBar/ControlBar';\nimport { ControlBarClearButton } from '../controlBar/ControlBarClearButton';\nimport { ControlBarEvalButton } from '../controlBar/ControlBarEvalButton';\nimport { ControlBarNextButton } from '../controlBar/ControlBarNextButton';\nimport { ControlBarPreviousButton } from '../controlBar/ControlBarPreviousButton';\nimport { ControlBarQuestionViewButton } from '../controlBar/ControlBarQuestionViewButton';\nimport { ControlBarResetButton } from '../controlBar/ControlBarResetButton';\nimport { ControlBarRunButton } from '../controlBar/ControlBarRunButton';\nimport { ControlButtonSaveButton } from '../controlBar/ControlBarSaveButton';\nimport { ControlBarToggleEditModeButton } from '../controlBar/ControlBarToggleEditModeButton';\nimport controlButton from '../ControlButton';\nimport { AutograderTab } from '../editingWorkspaceSideContent/EditingWorkspaceSideContentAutograderTab';\nimport { DeploymentTab } from '../editingWorkspaceSideContent/EditingWorkspaceSideContentDeploymentTab';\nimport { GradingTab } from '../editingWorkspaceSideContent/EditingWorkspaceSideContentGradingTab';\nimport { ManageQuestionTab } from '../editingWorkspaceSideContent/EditingWorkspaceSideContentManageQuestionTab';\nimport { MCQQuestionTemplateTab } from '../editingWorkspaceSideContent/EditingWorkspaceSideContentMcqQuestionTemplateTab';\nimport { ProgrammingQuestionTemplateTab } from '../editingWorkspaceSideContent/EditingWorkspaceSideContentProgrammingQuestionTemplateTab';\nimport { TextAreaContent } from '../editingWorkspaceSideContent/EditingWorkspaceSideContentTextAreaContent';\nimport { HighlightedLines, Position } from '../editor/EditorTypes';\nimport Markdown from '../Markdown';\nimport { SideContentProps } from '../sideContent/SideContent';\nimport SideContentToneMatrix from '../sideContent/SideContentToneMatrix';\nimport { SideContentTab, SideContentType } from '../sideContent/SideContentTypes';\nimport { history } from '../utils/HistoryHelper';\nimport Workspace, { WorkspaceProps } from '../workspace/Workspace';\nimport { WorkspaceState } from '../workspace/WorkspaceTypes';\nimport {\n  retrieveLocalAssessment,\n  storeLocalAssessment,\n  storeLocalAssessmentOverview\n} from '../XMLParser/XMLParserHelper';\n\nexport type EditingWorkspaceProps = DispatchProps & StateProps & OwnProps;\n\nexport type DispatchProps = {\n  handleBrowseHistoryDown: () => void;\n  handleBrowseHistoryUp: () => void;\n  handleChapterSelect: (chapter: any, changeEvent: any) => void;\n  handleClearContext: (library: Library) => void;\n  handleDeclarationNavigate: (cursorPosition: Position) => void;\n  handleEditorEval: () => void;\n  handleEditorValueChange: (val: string) => void;\n  handleEditorHeightChange: (height: number) => void;\n  handleEditorWidthChange: (widthChange: number) => void;\n  handleEditorUpdateBreakpoints: (breakpoints: string[]) => void;\n  handleInterruptEval: () => void;\n  handleReplEval: () => void;\n  handleReplOutputClear: () => void;\n  handleReplValueChange: (newValue: string) => void;\n  handleResetWorkspace: (options: Partial<WorkspaceState>) => void;\n  handleUpdateWorkspace: (options: Partial<WorkspaceState>) => void;\n  handleSave: (id: number, answer: number | string) => void;\n  handleSideContentHeightChange: (heightChange: number) => void;\n  handleTestcaseEval: (testcaseId: number) => void;\n  handleDebuggerPause: () => void;\n  handleDebuggerResume: () => void;\n  handleDebuggerReset: () => void;\n  handleUpdateCurrentAssessmentId: (assessmentId: number, questionId: number) => void;\n  handleUpdateHasUnsavedChanges: (hasUnsavedChanges: boolean) => void;\n  handlePromptAutocomplete: (row: number, col: number, callback: any) => void;\n};\n\nexport type OwnProps = {\n  assessmentId: number;\n  questionId: number;\n  assessmentOverview: AssessmentOverview;\n  updateAssessmentOverview: (overview: AssessmentOverview) => void;\n  notAttempted: boolean;\n  closeDate: string;\n};\n\nexport type StateProps = {\n  editorHeight?: number;\n  editorValue: string | null;\n  editorWidth: string;\n  breakpoints: string[];\n  highlightedLines: HighlightedLines[];\n  hasUnsavedChanges: boolean;\n  isRunning: boolean;\n  isDebugging: boolean;\n  enableDebugging: boolean;\n  newCursorPosition?: Position;\n  output: InterpreterOutput[];\n  replValue: string;\n  sideContentHeight?: number;\n  storedAssessmentId?: number;\n  storedQuestionId?: number;\n};\n\ntype State = {\n  assessment: Assessment | null;\n  activeTab: SideContentType;\n  editingMode: string;\n  hasUnsavedChanges: boolean;\n  showResetTemplateOverlay: boolean;\n  originalMaxGrade: number;\n  originalMaxXp: number;\n};\n\nclass EditingWorkspace extends React.Component<EditingWorkspaceProps, State> {\n  public constructor(props: EditingWorkspaceProps) {\n    super(props);\n    this.state = {\n      assessment: retrieveLocalAssessment(),\n      activeTab: SideContentType.editorQuestionOverview,\n      editingMode: 'question',\n      hasUnsavedChanges: false,\n      showResetTemplateOverlay: false,\n      originalMaxGrade: 0,\n      originalMaxXp: 0\n    };\n  }\n\n  /**\n   * After mounting (either an older copy of the assessment\n   * or a loading screen), try to fetch a newer assessment,\n   * and show the briefing.\n   */\n  public componentDidMount() {\n    if (this.state.assessment) {\n      this.resetWorkspaceValues();\n      this.setState({\n        originalMaxGrade: this.getMaxMarks('maxGrade'),\n        originalMaxXp: this.getMaxMarks('maxXp')\n      });\n    }\n  }\n\n  /**\n   * Once there is an update (due to the assessment being fetched), check\n   * if a workspace reset is needed.\n   */\n  public componentDidUpdate() {\n    this.checkWorkspaceReset(this.props);\n  }\n\n  public render() {\n    if (this.state.assessment === null || this.state.assessment!.questions.length === 0) {\n      return (\n        <NonIdealState\n          className={classNames('WorkspaceParent', Classes.DARK)}\n          description=\"Getting mission ready...\"\n          icon={<Spinner size={Spinner.SIZE_LARGE} />}\n        />\n      );\n    }\n\n    const questionId = this.formatedQuestionId();\n    const question: Question = this.state.assessment.questions[questionId];\n    const workspaceProps: WorkspaceProps = {\n      controlBarProps: this.controlBarProps(questionId),\n      editorProps:\n        question.type === QuestionTypes.programming\n          ? {\n              editorSessionId: '',\n              editorValue:\n                this.props.editorValue ||\n                question.editorValue ||\n                (question as IProgrammingQuestion).solutionTemplate,\n              handleDeclarationNavigate: this.props.handleDeclarationNavigate,\n              handleEditorEval: this.props.handleEditorEval,\n              handleEditorValueChange: this.props.handleEditorValueChange,\n              breakpoints: this.props.breakpoints,\n              highlightedLines: this.props.highlightedLines,\n              newCursorPosition: this.props.newCursorPosition,\n              handleEditorUpdateBreakpoints: this.props.handleEditorUpdateBreakpoints,\n              handleUpdateHasUnsavedChanges: this.props.handleUpdateHasUnsavedChanges,\n              handlePromptAutocomplete: this.props.handlePromptAutocomplete,\n              isEditorAutorun: false\n            }\n          : undefined,\n      editorHeight: this.props.editorHeight,\n      editorWidth: this.props.editorWidth,\n      handleEditorHeightChange: this.props.handleEditorHeightChange,\n      handleEditorWidthChange: this.props.handleEditorWidthChange,\n      handleSideContentHeightChange: this.props.handleSideContentHeightChange,\n      hasUnsavedChanges: this.state.hasUnsavedChanges,\n      mcqProps: {\n        mcq: question as IMCQQuestion,\n        handleMCQSubmit: (option: number) =>\n          this.props.handleSave(this.state.assessment!.questions[questionId].id, option)\n      },\n      sideContentHeight: this.props.sideContentHeight,\n      sideContentProps: this.sideContentProps(this.props, questionId),\n      replProps: {\n        handleBrowseHistoryDown: this.props.handleBrowseHistoryDown,\n        handleBrowseHistoryUp: this.props.handleBrowseHistoryUp,\n        handleReplEval: this.props.handleReplEval,\n        handleReplValueChange: this.props.handleReplValueChange,\n        output: this.props.output,\n        replValue: this.props.replValue\n      }\n    };\n    return (\n      <div className={classNames('WorkspaceParent', Classes.DARK)}>\n        {this.resetTemplateOverlay()}\n        <Workspace {...workspaceProps} />\n      </div>\n    );\n  }\n\n  /* If questionId is out of bounds, set it within range. */\n  private formatedQuestionId = () => {\n    let questionId = this.props.questionId;\n    if (questionId < 0) {\n      questionId = 0;\n    } else if (questionId >= this.state.assessment!.questions.length) {\n      questionId = this.state.assessment!.questions.length - 1;\n    }\n    return questionId;\n  };\n\n  /**\n   * Resets to last save.\n   */\n  private resetTemplateOverlay = () => (\n    <Dialog\n      className=\"assessment-reset\"\n      icon={IconNames.ERROR}\n      isCloseButtonShown={true}\n      isOpen={this.state.showResetTemplateOverlay}\n      title=\"Confirmation: Reset editor?\"\n    >\n      <div className={Classes.DIALOG_BODY}>\n        <Markdown content=\"Are you sure you want to reset to your last save?\" />\n      </div>\n      <div className={Classes.DIALOG_FOOTER}>\n        <ButtonGroup>\n          {controlButton('Cancel', null, () => this.setState({ showResetTemplateOverlay: false }), {\n            minimal: false\n          })}\n          {controlButton(\n            'Confirm',\n            null,\n            () => {\n              const assessment = retrieveLocalAssessment()!;\n              this.setState({\n                assessment,\n                hasUnsavedChanges: false,\n                showResetTemplateOverlay: false,\n                originalMaxGrade: this.getMaxMarks('maxGrade'),\n                originalMaxXp: this.getMaxMarks('maxXp')\n              });\n              this.handleRefreshLibrary();\n              this.resetWorkspaceValues();\n            },\n            { minimal: false, intent: Intent.DANGER }\n          )}\n        </ButtonGroup>\n      </div>\n    </Dialog>\n  );\n\n  /**\n   * Checks if there is a need to reset the workspace, then executes\n   * a dispatch (in the props) if needed.\n   */\n  private checkWorkspaceReset(props: EditingWorkspaceProps) {\n    /* Don't reset workspace if assessment not fetched yet. */\n    if (this.state.assessment === undefined) {\n      return;\n    }\n\n    /* Reset assessment if it has changed.*/\n    const assessmentId = -1;\n    const questionId = this.formatedQuestionId();\n\n    if (\n      this.props.storedAssessmentId !== assessmentId ||\n      this.props.storedQuestionId !== questionId\n    ) {\n      this.resetWorkspaceValues();\n      this.props.handleUpdateCurrentAssessmentId(assessmentId, questionId);\n      this.props.handleUpdateHasUnsavedChanges(false);\n      if (this.state.hasUnsavedChanges) {\n        this.setState({\n          assessment: retrieveLocalAssessment(),\n          hasUnsavedChanges: false\n        });\n      }\n      this.handleRefreshLibrary();\n    }\n  }\n\n  private handleRefreshLibrary = (library: Library | undefined = undefined) => {\n    const question = this.state.assessment!.questions[this.formatedQuestionId()];\n    if (!library) {\n      library =\n        question.library.chapter === -1\n          ? this.state.assessment!.globalDeployment!\n          : question.library;\n    }\n    if (library && library.globals.length > 0) {\n      const globalsVal = library.globals.map((x: any) => x[0]);\n      const symbolsVal = library.external.symbols.concat(globalsVal);\n      library = {\n        ...library,\n        external: {\n          name: library.external.name,\n          symbols: uniq(symbolsVal)\n        }\n      };\n    }\n    this.props.handleClearContext(library);\n  };\n\n  private resetWorkspaceValues = () => {\n    const question: Question = this.state.assessment!.questions[this.formatedQuestionId()];\n    let editorValue: string;\n    let editorPrepend = '';\n    let editorPostpend = '';\n    if (question.type === QuestionTypes.programming) {\n      if (question.editorValue) {\n        editorValue = question.editorValue;\n      } else {\n        editorValue = (question as IProgrammingQuestion).solutionTemplate as string;\n      }\n      editorPrepend = (question as IProgrammingQuestion).prepend;\n      editorPostpend = (question as IProgrammingQuestion).postpend;\n    } else {\n      editorValue = '//If you see this, this is a bug. Please report bug.';\n    }\n\n    this.props.handleResetWorkspace({\n      editorPrepend,\n      editorValue,\n      editorPostpend\n    });\n    this.props.handleEditorValueChange(editorValue);\n  };\n\n  private handleTestcaseEval = (testcase: Testcase) => {\n    const editorTestcases = [testcase];\n    this.props.handleUpdateWorkspace({ editorTestcases });\n    this.props.handleTestcaseEval(0);\n  };\n\n  private handleSave = () => {\n    const assessment = this.state.assessment!;\n    assessment.questions[this.formatedQuestionId()].editorValue = this.props.editorValue;\n    this.setState({\n      assessment,\n      hasUnsavedChanges: false\n    });\n    storeLocalAssessment(assessment);\n    // this.handleRefreshLibrary();\n    this.handleSaveGradeAndXp();\n  };\n\n  private handleSaveGradeAndXp = () => {\n    const curGrade = this.getMaxMarks('maxGrade');\n    const changeGrade = curGrade - this.state.originalMaxGrade;\n    const curXp = this.getMaxMarks('maxXp');\n    const changeXp = curXp - this.state.originalMaxXp;\n    if (changeGrade !== 0 || changeXp !== 0) {\n      const overview = this.props.assessmentOverview;\n      if (changeGrade !== 0) {\n        overview.maxGrade = curGrade;\n      }\n      if (changeXp !== 0) {\n        overview.maxXp = curXp;\n      }\n      this.setState({\n        originalMaxGrade: curGrade,\n        originalMaxXp: curXp\n      });\n      this.props.updateAssessmentOverview(overview);\n      storeLocalAssessmentOverview(overview);\n    }\n  };\n\n  private getMaxMarks = (field: string) => {\n    let result = 0;\n    const questions = this.state.assessment!.questions;\n    for (const question of questions) {\n      result += question[field];\n    }\n    return result as number;\n  };\n  private updateEditAssessmentState = (assessmentVal: Assessment) => {\n    this.setState({\n      assessment: assessmentVal,\n      hasUnsavedChanges: true\n    });\n  };\n\n  private updateAndSaveAssessment = (assessmentVal: Assessment) => {\n    this.setState({\n      assessment: assessmentVal\n    });\n    this.handleRefreshLibrary();\n    this.handleSave();\n    this.resetWorkspaceValues();\n  };\n\n  private handleActiveTabChange = (tab: SideContentType) => {\n    this.setState({\n      activeTab: tab\n    });\n  };\n  private toggleEditingMode = () => {\n    const toggle = this.state.editingMode === 'question' ? 'global' : 'question';\n    this.setState({\n      editingMode: toggle\n    });\n  };\n\n  /** Pre-condition: IAssessment has been loaded */\n  private sideContentProps: (p: EditingWorkspaceProps, q: number) => SideContentProps = (\n    props: EditingWorkspaceProps,\n    questionId: number\n  ) => {\n    const assessment = this.state.assessment!;\n    let tabs: SideContentTab[];\n    if (this.state.editingMode === 'question') {\n      const qnType = this.state.assessment!.questions[this.props.questionId].type;\n      const questionTemplateTab =\n        qnType === 'mcq' ? (\n          <MCQQuestionTemplateTab\n            assessment={assessment}\n            questionId={questionId}\n            updateAssessment={this.updateEditAssessmentState}\n          />\n        ) : (\n          <ProgrammingQuestionTemplateTab\n            assessment={assessment}\n            questionId={questionId}\n            updateAssessment={this.updateEditAssessmentState}\n            editorValue={this.props.editorValue}\n            handleEditorValueChange={this.props.handleEditorValueChange}\n            handleUpdateWorkspace={this.props.handleUpdateWorkspace}\n          />\n        );\n\n      tabs = [\n        {\n          label: `Task ${questionId + 1}`,\n          iconName: IconNames.NINJA,\n          body: (\n            <TextAreaContent\n              assessment={assessment}\n              path={['questions', questionId, 'content']}\n              updateAssessment={this.updateEditAssessmentState}\n            />\n          ),\n          id: SideContentType.editorQuestionOverview,\n          toSpawn: () => true\n        },\n        {\n          label: `Question Template`,\n          iconName: IconNames.DOCUMENT,\n          body: questionTemplateTab,\n          id: SideContentType.editorQuestionTemplate,\n          toSpawn: () => true\n        },\n        {\n          label: `Manage Local Deployment`,\n          iconName: IconNames.HOME,\n          body: (\n            <DeploymentTab\n              assessment={assessment}\n              label={'Question Specific'}\n              handleRefreshLibrary={this.handleRefreshLibrary}\n              pathToLibrary={['questions', questionId, 'library']}\n              updateAssessment={this.updateEditAssessmentState}\n              isOptionalDeployment={true}\n            />\n          ),\n          id: SideContentType.editorLocalDeployment,\n          toSpawn: () => true\n        },\n        {\n          label: `Manage Local Grader Deployment`,\n          iconName: IconNames.CONFIRM,\n          body: (\n            <DeploymentTab\n              assessment={assessment}\n              label={'Question Specific Grader'}\n              handleRefreshLibrary={this.handleRefreshLibrary}\n              pathToLibrary={['questions', questionId, 'graderLibrary']}\n              pathToCopy={['questions', questionId, 'library']}\n              updateAssessment={this.updateEditAssessmentState}\n              isOptionalDeployment={true}\n            />\n          ),\n          id: SideContentType.editorLocalGraderDeployment,\n          toSpawn: () => true\n        },\n        {\n          label: `Grading`,\n          iconName: IconNames.TICK,\n          body: (\n            <GradingTab\n              assessment={assessment}\n              path={['questions', questionId]}\n              updateAssessment={this.updateEditAssessmentState}\n            />\n          ),\n          id: SideContentType.editorGrading,\n          toSpawn: () => true\n        }\n      ];\n      if (qnType === 'programming') {\n        tabs.push({\n          label: `Autograder`,\n          iconName: IconNames.AIRPLANE,\n          body: (\n            <AutograderTab\n              assessment={assessment}\n              questionId={questionId}\n              handleTestcaseEval={this.handleTestcaseEval}\n              updateAssessment={this.updateEditAssessmentState}\n            />\n          ),\n          id: SideContentType.editorAutograder,\n          toSpawn: () => true\n        });\n      }\n      const functionsAttached = assessment!.globalDeployment!.external.symbols;\n      if (functionsAttached.includes('get_matrix')) {\n        tabs.push({\n          label: `Tone Matrix`,\n          iconName: IconNames.GRID_VIEW,\n          body: <SideContentToneMatrix />,\n          id: SideContentType.toneMatrix,\n          toSpawn: () => true\n        });\n      }\n    } else {\n      tabs = [\n        {\n          label: `${assessment!.category} Briefing`,\n          iconName: IconNames.BRIEFCASE,\n          body: (\n            <TextAreaContent\n              assessment={assessment}\n              path={['longSummary']}\n              updateAssessment={this.updateEditAssessmentState}\n            />\n          ),\n          id: SideContentType.editorBriefing,\n          toSpawn: () => true\n        },\n        {\n          label: `Manage Question`,\n          iconName: IconNames.WRENCH,\n          body: (\n            <ManageQuestionTab\n              assessment={assessment}\n              hasUnsavedChanges={this.state.hasUnsavedChanges}\n              questionId={questionId}\n              updateAssessment={this.updateAndSaveAssessment}\n            />\n          ),\n          id: SideContentType.editorManageQuestion,\n          toSpawn: () => true\n        },\n        {\n          label: `Manage Global Deployment`,\n          iconName: IconNames.GLOBE,\n          body: (\n            <DeploymentTab\n              assessment={assessment}\n              label={'Global'}\n              handleRefreshLibrary={this.handleRefreshLibrary}\n              pathToLibrary={['globalDeployment']}\n              updateAssessment={this.updateEditAssessmentState}\n              isOptionalDeployment={false}\n            />\n          ),\n          id: SideContentType.editorGlobalDeployment,\n          toSpawn: () => true\n        },\n        {\n          label: `Manage Global Grader Deployment`,\n          iconName: IconNames.CONFIRM,\n          body: (\n            <DeploymentTab\n              assessment={assessment}\n              label={'Global Grader'}\n              handleRefreshLibrary={this.handleRefreshLibrary}\n              pathToLibrary={['graderDeployment']}\n              updateAssessment={this.updateEditAssessmentState}\n              isOptionalDeployment={true}\n            />\n          ),\n          id: SideContentType.editorGlobalGraderDeployment,\n          toSpawn: () => true\n        }\n      ];\n    }\n\n    return { handleActiveTabChange: this.handleActiveTabChange, tabs };\n  };\n\n  /** Pre-condition: IAssessment has been loaded */\n  private controlBarProps: (q: number) => ControlBarProps = (questionId: number) => {\n    const listingPath = '/mission-control';\n    const assessmentWorkspacePath = listingPath + `/${this.state.assessment!.id.toString()}`;\n    const questionProgress: [number, number] = [\n      questionId + 1,\n      this.state.assessment!.questions.length\n    ];\n\n    const onClickPrevious = () =>\n      history.push(assessmentWorkspacePath + `/${(questionId - 1).toString()}`);\n    const onClickNext = () =>\n      history.push(assessmentWorkspacePath + `/${(questionId + 1).toString()}`);\n    const onClickReturn = () => history.push(listingPath);\n\n    const onClickResetTemplate = () => {\n      this.setState((currentState: State) => {\n        return {\n          ...currentState,\n          showResetTemplateOverlay: currentState.hasUnsavedChanges\n        };\n      });\n    };\n\n    const clearButton = (\n      <ControlBarClearButton\n        handleReplOutputClear={this.props.handleReplOutputClear}\n        key=\"clear_repl\"\n      />\n    );\n\n    const evalButton = (\n      <ControlBarEvalButton\n        handleReplEval={this.props.handleReplEval}\n        isRunning={this.props.isRunning}\n        key=\"eval_repl\"\n      />\n    );\n\n    const nextButton = (\n      <ControlBarNextButton\n        onClickNext={onClickNext}\n        onClickReturn={onClickReturn}\n        questionProgress={questionProgress}\n        key=\"next_question\"\n      />\n    );\n\n    const previousButton = (\n      <ControlBarPreviousButton\n        onClick={onClickPrevious}\n        questionProgress={questionProgress}\n        key=\"previous_question\"\n      />\n    );\n\n    const questionView = (\n      <ControlBarQuestionViewButton questionProgress={questionProgress} key=\"question_view\" />\n    );\n\n    const resetButton = (\n      <ControlBarResetButton onClick={onClickResetTemplate} key=\"reset_template\" />\n    );\n\n    const runButton = (\n      <ControlBarRunButton handleEditorEval={this.props.handleEditorEval} key=\"run\" />\n    );\n\n    const saveButton = (\n      <ControlButtonSaveButton\n        hasUnsavedChanges={this.state.hasUnsavedChanges}\n        onClickSave={this.handleSave}\n        key=\"save\"\n      />\n    );\n\n    const toggleEditModeButton = (\n      <ControlBarToggleEditModeButton\n        editingMode={this.state.editingMode}\n        toggleEditMode={this.toggleEditingMode}\n        key=\"toggle_edit_mode\"\n      />\n    );\n\n    return {\n      editorButtons: [runButton, saveButton, resetButton],\n      flowButtons: [previousButton, questionView, nextButton],\n      replButtons: [evalButton, clearButton, toggleEditModeButton]\n    };\n  };\n}\n\nfunction uniq(a: string[]) {\n  const seen = {};\n  return a.filter(item => (seen.hasOwnProperty(item) ? false : (seen[item] = true)));\n}\n\nexport default EditingWorkspace;\n","import { connect, MapDispatchToProps, MapStateToProps } from 'react-redux';\nimport { bindActionCreators, Dispatch } from 'redux';\n\nimport {\n  beginDebuggerPause,\n  beginInterruptExecution,\n  debuggerReset,\n  debuggerResume\n} from '../application/actions/InterpreterActions';\nimport { submitAnswer } from '../application/actions/SessionActions';\nimport { OverallState } from '../application/ApplicationTypes';\nimport { Library } from '../assessment/AssessmentTypes';\nimport { Position } from '../editor/EditorTypes';\nimport {\n  beginClearContext,\n  browseReplHistoryDown,\n  browseReplHistoryUp,\n  changeEditorHeight,\n  changeEditorWidth,\n  changeSideContentHeight,\n  chapterSelect,\n  clearReplOutput,\n  evalEditor,\n  evalRepl,\n  evalTestcase,\n  navigateToDeclaration,\n  promptAutocomplete,\n  resetWorkspace,\n  setEditorBreakpoint,\n  updateCurrentAssessmentId,\n  updateEditorValue,\n  updateHasUnsavedChanges,\n  updateReplValue,\n  updateWorkspace\n} from '../workspace/WorkspaceActions';\nimport { WorkspaceLocation, WorkspaceState } from '../workspace/WorkspaceTypes';\nimport EditingWorkspace, { DispatchProps, OwnProps, StateProps } from './EditingWorkspace';\n\nconst mapStateToProps: MapStateToProps<StateProps, OwnProps, OverallState> = (state, props) => {\n  return {\n    editorValue: state.workspaces.assessment.editorValue,\n    editorHeight: state.workspaces.assessment.editorHeight,\n    editorWidth: state.workspaces.assessment.editorWidth,\n    breakpoints: state.workspaces.assessment.breakpoints,\n    highlightedLines: state.workspaces.assessment.highlightedLines,\n    hasUnsavedChanges: state.workspaces.assessment.hasUnsavedChanges,\n    isRunning: state.workspaces.assessment.isRunning,\n    isDebugging: state.workspaces.assessment.isDebugging,\n    enableDebugging: state.workspaces.assessment.enableDebugging,\n    newCursorPosition: state.workspaces.assessment.newCursorPosition,\n    output: state.workspaces.assessment.output,\n    replValue: state.workspaces.assessment.replValue,\n    sideContentHeight: state.workspaces.assessment.sideContentHeight,\n    storedAssessmentId: state.workspaces.assessment.currentAssessment,\n    storedQuestionId: state.workspaces.assessment.currentQuestion\n  };\n};\n\nconst workspaceLocation: WorkspaceLocation = 'assessment';\n\nconst mapDispatchToProps: MapDispatchToProps<DispatchProps, {}> = (dispatch: Dispatch) =>\n  bindActionCreators(\n    {\n      handleBrowseHistoryDown: () => browseReplHistoryDown(workspaceLocation),\n      handleBrowseHistoryUp: () => browseReplHistoryUp(workspaceLocation),\n      handleChapterSelect: (chapter: any, changeEvent: any) =>\n        chapterSelect(chapter, 'default', workspaceLocation),\n      handleClearContext: (library: Library) => beginClearContext(library, workspaceLocation),\n      handleDeclarationNavigate: (cursorPosition: Position) =>\n        navigateToDeclaration(workspaceLocation, cursorPosition),\n      handleEditorEval: () => evalEditor(workspaceLocation),\n      handleEditorValueChange: (val: string) => updateEditorValue(val, workspaceLocation),\n      handleEditorHeightChange: (height: number) => changeEditorHeight(height, workspaceLocation),\n      handleEditorWidthChange: (widthChange: number) =>\n        changeEditorWidth(widthChange.toString(), workspaceLocation),\n      handleEditorUpdateBreakpoints: (breakpoints: string[]) =>\n        setEditorBreakpoint(breakpoints, workspaceLocation),\n      handleInterruptEval: () => beginInterruptExecution(workspaceLocation),\n      handleReplEval: () => evalRepl(workspaceLocation),\n      handleReplOutputClear: () => clearReplOutput(workspaceLocation),\n      handleReplValueChange: (newValue: string) => updateReplValue(newValue, workspaceLocation),\n      handleResetWorkspace: (options: Partial<WorkspaceState>) =>\n        resetWorkspace(workspaceLocation, options),\n      handleUpdateWorkspace: (options: Partial<WorkspaceState>) =>\n        updateWorkspace(workspaceLocation, options),\n      handleSave: submitAnswer,\n      handleSideContentHeightChange: (heightChange: number) =>\n        changeSideContentHeight(heightChange, workspaceLocation),\n      handleTestcaseEval: (testcaseId: number) => evalTestcase(workspaceLocation, testcaseId),\n      handleUpdateHasUnsavedChanges: (hasUnsavedChanges: boolean) =>\n        updateHasUnsavedChanges(workspaceLocation, hasUnsavedChanges),\n      handleUpdateCurrentAssessmentId: updateCurrentAssessmentId,\n      handleDebuggerPause: () => beginDebuggerPause(workspaceLocation),\n      handleDebuggerResume: () => debuggerResume(workspaceLocation),\n      handleDebuggerReset: () => debuggerReset(workspaceLocation),\n      handlePromptAutocomplete: (row: number, col: number, callback: any) =>\n        promptAutocomplete(workspaceLocation, row, col, callback)\n    },\n    dispatch\n  );\n\nconst EditingWorkspaceContainer = connect(mapStateToProps, mapDispatchToProps)(EditingWorkspace);\n\nexport default EditingWorkspaceContainer;\n","import { FileInput } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport * as React from 'react';\nimport { parseString } from 'xml2js';\n\nimport {\n  Assessment,\n  AssessmentOverview,\n  assessmentTemplate,\n  overviewTemplate\n} from '../assessment/AssessmentTypes';\nimport controlButton from '../ControlButton';\nimport {\n  makeEntireAssessment,\n  retrieveLocalAssessment,\n  storeLocalAssessment,\n  storeLocalAssessmentOverview\n} from '../XMLParser/XMLParserHelper';\n\ntype MissionCreatorProps = DispatchProps & OwnProps;\n\nexport type DispatchProps = {\n  newAssessment: (assessment: Assessment) => void;\n};\n\ntype OwnProps = {\n  updateEditingOverview: (overview: AssessmentOverview) => void;\n};\n\ntype State = {\n  fileInputText: string;\n};\n\nclass MissionCreator extends React.Component<MissionCreatorProps, State> {\n  private fileReader?: FileReader = undefined;\n  public constructor(props: any) {\n    super(props);\n    this.handleFileRead = this.handleFileRead.bind(this);\n    this.handleChangeFile = this.handleChangeFile.bind(this);\n    this.makeMission = this.makeMission.bind(this);\n    this.state = {\n      fileInputText: 'Import XML'\n    };\n  }\n\n  public componentDidMount() {\n    const assessment = retrieveLocalAssessment();\n    if (assessment) {\n      this.props.newAssessment(assessment);\n    }\n  }\n\n  public render() {\n    return (\n      <div>\n        <div>Please ensure that the xml uploaded is trustable.</div>\n        <div>\n          <FileInput\n            text={this.state.fileInputText}\n            inputProps={{ accept: '.xml' }}\n            onChange={this.handleChangeFile}\n          />\n        </div>\n        <div>{controlButton('Make New Mission', IconNames.NEW_OBJECT, this.makeMission)}</div>\n      </div>\n    );\n  }\n\n  private handleFileRead = (file: any) => (e: any) => {\n    if (!this.fileReader) {\n      return;\n    }\n    const content = this.fileReader.result;\n    if (content) {\n      parseString(content, (err: any, result: any) => {\n        // tslint:disable-next-line:no-console\n        console.dir(file);\n        try {\n          const entireAssessment: [AssessmentOverview, Assessment] = makeEntireAssessment(result);\n          entireAssessment[0].fileName = file.name.slice(0, -4);\n          storeLocalAssessmentOverview(entireAssessment[0]);\n          this.props.updateEditingOverview(entireAssessment[0]);\n\n          storeLocalAssessment(entireAssessment[1]);\n          this.props.newAssessment(entireAssessment[1]);\n          this.setState({\n            fileInputText: 'Success!'\n          });\n        } catch (err) {\n          // tslint:disable-next-line:no-console\n          console.log(err);\n          this.setState({\n            fileInputText: 'Invalid XML!'\n          });\n        }\n      });\n    }\n  };\n\n  private handleChangeFile = (e: any) => {\n    const files = e.target.files;\n    if (e.target.files) {\n      this.fileReader = new FileReader();\n      this.fileReader.onloadend = this.handleFileRead(files[0]);\n      this.fileReader.readAsText(files[0]);\n    }\n  };\n\n  private makeMission = () => {\n    storeLocalAssessmentOverview(overviewTemplate());\n    this.props.updateEditingOverview(overviewTemplate());\n    storeLocalAssessment(assessmentTemplate());\n    this.props.newAssessment(assessmentTemplate());\n  };\n}\n\nexport default MissionCreator;\n","import { connect, MapDispatchToProps, MapStateToProps } from 'react-redux';\nimport { bindActionCreators, Dispatch } from 'redux';\n\nimport { updateAssessment } from '../application/actions/SessionActions';\nimport MissionCreator, { DispatchProps } from './MissionCreator';\n\nconst mapStateToProps: MapStateToProps<{}, any, {}> = (state, ownProps) => ownProps;\n\nconst mapDispatchToProps: MapDispatchToProps<DispatchProps, {}> = (dispatch: Dispatch) =>\n  bindActionCreators(\n    {\n      newAssessment: updateAssessment\n    },\n    dispatch\n  );\n\nconst MissionCreatorContainer = connect(mapStateToProps, mapDispatchToProps)(MissionCreator);\n\nexport default MissionCreatorContainer;\n","import * as React from 'react';\nimport { RouteComponentProps } from 'react-router';\n\nimport {\n  AssessmentOverview,\n  AssessmentStatuses,\n  AssessmentWorkspaceParams\n} from '../../commons/assessment/AssessmentTypes';\nimport ContentDisplay from '../../commons/ContentDisplay';\nimport { EditingOverviewCard } from '../../commons/editingOverviewCard/EditingOverviewCard';\nimport { OwnProps as EditingWorkspaceOwnProps } from '../../commons/editingWorkspace/EditingWorkspace';\nimport EditingWorkspaceContainer from '../../commons/editingWorkspace/EditingWorkspaceContainer';\nimport MissionCreator from '../../commons/missionCreator/MissionCreatorContainer';\nimport Constants from '../../commons/utils/Constants';\nimport { stringParamToInt } from '../../commons/utils/ParamParseHelper';\nimport { retrieveLocalAssessmentOverview } from '../../commons/XMLParser/XMLParserHelper';\n\nexport type MissionControlProps = DispatchProps &\n  StateProps &\n  RouteComponentProps<AssessmentWorkspaceParams>;\n\nexport type DispatchProps = {\n  handleAssessmentOverviewFetch: () => void;\n  handleSubmitAssessment: (id: number) => void;\n};\n\nexport type StateProps = {\n  isStudent: boolean;\n};\n\ntype State = {\n  editOverview: string;\n  editingOverview: AssessmentOverview | null;\n};\n\nclass MissionControl extends React.Component<MissionControlProps, State> {\n  public constructor(props: MissionControlProps) {\n    super(props);\n    this.state = {\n      editOverview: '',\n      editingOverview: retrieveLocalAssessmentOverview()\n    };\n  }\n\n  public render() {\n    const assessmentId: number | null = stringParamToInt(this.props.match.params.assessmentId);\n    const questionId: number =\n      stringParamToInt(this.props.match.params.questionId) || Constants.defaultQuestionId;\n\n    // If mission for testing is to render, create workspace\n    if (assessmentId === -1) {\n      if (this.state.editingOverview) {\n        const overview = this.state.editingOverview;\n        const assessmentProps: EditingWorkspaceOwnProps = {\n          assessmentId,\n          questionId,\n          assessmentOverview: overview,\n          updateAssessmentOverview: this.updateEditingOverview,\n          notAttempted: overview.status === AssessmentStatuses.not_attempted,\n          closeDate: overview.closeAt\n        };\n        return (\n          <div className=\"Academy\">\n            <EditingWorkspaceContainer {...assessmentProps} />\n          </div>\n        );\n      }\n    }\n\n    /** Mission editing card */\n    const missionEditingCard = this.state.editingOverview ? (\n      <EditingOverviewCard\n        overview={this.state.editingOverview}\n        updateEditingOverview={this.updateEditingOverview}\n        listingPath=\"/mission-control\"\n      />\n    ) : null;\n\n    const display = (\n      <>\n        <MissionCreator updateEditingOverview={this.updateEditingOverview} />\n        {missionEditingCard}\n      </>\n    );\n\n    // Finally, render the ContentDisplay.\n    return (\n      <div className=\"Assessment Academy\">\n        <ContentDisplay\n          display={display}\n          loadContentDispatch={this.props.handleAssessmentOverviewFetch}\n        />\n      </div>\n    );\n  }\n\n  private updateEditingOverview = (overview: AssessmentOverview) => {\n    this.setState({\n      editingOverview: overview\n    });\n  };\n}\n\nexport default MissionControl;\n","import { connect, MapDispatchToProps, MapStateToProps } from 'react-redux';\nimport { withRouter } from 'react-router';\nimport { bindActionCreators, Dispatch } from 'redux';\n\nimport {\n  fetchAssessmentOverviews,\n  submitAssessment\n} from '../../commons/application/actions/SessionActions';\nimport { OverallState, Role } from '../../commons/application/ApplicationTypes';\nimport MissionControl, { DispatchProps, StateProps } from './MissionControl';\n\nconst mapStateToProps: MapStateToProps<StateProps, {}, OverallState> = (state, props) => {\n  const stateProps: StateProps = {\n    isStudent: state.session.role ? state.session.role === Role.Student : true\n  };\n  return stateProps;\n};\n\nconst mapDispatchToProps: MapDispatchToProps<DispatchProps, {}> = (dispatch: Dispatch) =>\n  bindActionCreators(\n    {\n      handleAssessmentOverviewFetch: fetchAssessmentOverviews,\n      handleSubmitAssessment: submitAssessment\n    },\n    dispatch\n  );\n\nconst MissionControlContainer = withRouter(\n  connect(mapStateToProps, mapDispatchToProps)(MissionControl)\n);\n\nexport default MissionControlContainer;\n","import { Classes, NonIdealState } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport classNames from 'classnames';\nimport * as React from 'react';\n\nconst NotFound: React.SFC<{}> = () => (\n  <div className={classNames('NotFound', Classes.DARK)}>\n    <NonIdealState\n      icon={IconNames.ERROR}\n      title=\"404 Not Found\"\n      description=\"The requested resource could not be found\"\n    />\n  </div>\n);\n\nexport default NotFound;\n","import { NumericInput, Tooltip } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport * as React from 'react';\n\ntype ControlBarExecutionTimeProps = DispatchProps & StateProps;\n\ntype DispatchProps = {\n  handleChangeExecTime?: (execTime: number) => void;\n};\n\ntype StateProps = {\n  execTime?: number;\n  key: string;\n};\n\nexport function ControlBarExecutionTime(props: ControlBarExecutionTimeProps) {\n  return (\n    <Tooltip content=\"Execution Time\">\n      <NumericInput\n        leftIcon={IconNames.TIME}\n        style={{ width: 80 }}\n        min={1000}\n        value={props.execTime}\n        onValueChange={props.handleChangeExecTime}\n      />\n    </Tooltip>\n  );\n}\n","import { ButtonGroup, Classes, Intent, Popover, Tooltip } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport * as React from 'react';\n\nimport { PersistenceFile, PersistenceState } from '../../features/persistence/PersistenceTypes';\nimport controlButton from '../ControlButton';\n\nexport type ControlBarPersistenceButtonsProps = {\n  loggedInAs?: string;\n  currentFile?: PersistenceFile;\n  isDirty?: boolean;\n  onClickOpen?: () => any;\n  onClickSave?: () => any;\n  onClickSaveAs?: () => any;\n  onClickLogOut?: () => any;\n  onPopoverOpening?: () => any;\n};\n\nconst stateToIntent: { [state in PersistenceState]: Intent } = {\n  INACTIVE: Intent.NONE,\n  SAVED: Intent.PRIMARY,\n  DIRTY: Intent.WARNING\n};\n\nexport const ControlBarPersistenceButtons: React.FC<ControlBarPersistenceButtonsProps> = props => {\n  const state: PersistenceState = props.currentFile\n    ? props.isDirty\n      ? 'DIRTY'\n      : 'SAVED'\n    : 'INACTIVE';\n  const mainButton = controlButton(\n    (props.currentFile && props.currentFile.name) || 'Google Drive',\n    IconNames.CLOUD,\n    null,\n    {\n      intent: stateToIntent[state]\n    }\n  );\n  const openButton = controlButton('Open', IconNames.DOCUMENT_OPEN, props.onClickOpen);\n  const saveButton = controlButton(\n    'Save',\n    IconNames.FLOPPY_DISK,\n    props.onClickSave,\n    undefined,\n    // disable if logged_in only (i.e. not linked to a file)\n    state === 'INACTIVE'\n  );\n  const saveAsButton = controlButton('Save as', IconNames.SEND_TO, props.onClickSaveAs);\n  const logoutButton = props.loggedInAs && (\n    <Tooltip content={`Logged in as ${props.loggedInAs}`}>\n      {controlButton('Log out', IconNames.LOG_OUT, props.onClickLogOut)}\n    </Tooltip>\n  );\n\n  return (\n    <Popover\n      autoFocus={false}\n      content={\n        <div>\n          <ButtonGroup large={true}>\n            {openButton}\n            {saveButton}\n            {saveAsButton}\n            {logoutButton}\n          </ButtonGroup>\n        </div>\n      }\n      onOpening={props.onPopoverOpening}\n      popoverClassName={Classes.POPOVER_DISMISS}\n    >\n      {mainButton}\n    </Popover>\n  );\n};\n","import { Classes, Colors, Menu, Popover } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport * as React from 'react';\nimport * as CopyToClipboard from 'react-copy-to-clipboard';\n\nimport { checkSessionIdExists, createNewSession } from '../collabEditing/CollabEditingHelper';\nimport controlButton from '../ControlButton';\n\ntype ControlBarSessionButtonsProps = DispatchProps & StateProps;\n\ntype DispatchProps = {\n  handleInitInvite?: (value: string) => void;\n  handleInvalidEditorSessionId?: () => void;\n  handleSetEditorSessionId?: (editorSessionId: string) => void;\n};\n\ntype StateProps = {\n  editorSessionId?: string;\n  editorValue?: string | null;\n  websocketStatus?: number;\n  key: string;\n};\n\ntype State = {\n  joinElemValue: string;\n};\n\nexport class ControlBarSessionButtons extends React.PureComponent<\n  ControlBarSessionButtonsProps,\n  State\n> {\n  private inviteInputElem: React.RefObject<HTMLInputElement>;\n\n  constructor(props: ControlBarSessionButtonsProps) {\n    super(props);\n    this.state = { joinElemValue: '' };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.inviteInputElem = React.createRef();\n    this.selectInviteInputText = this.selectInviteInputText.bind(this);\n  }\n\n  public render() {\n    const handleStartInvite = () => {\n      if (this.props.editorSessionId === '') {\n        const onSessionCreated = (sessionId: string) => {\n          this.props.handleSetEditorSessionId!(sessionId);\n          const code = this.props.editorValue || '// Collaborative Editing Mode!';\n          this.props.handleInitInvite!(code);\n        };\n        createNewSession(onSessionCreated);\n      }\n    };\n\n    const inviteButton = (\n      <Popover popoverClassName=\"Popover-share\" inheritDarkTheme={false}>\n        {controlButton('Invite', IconNames.GRAPH, handleStartInvite)}\n        <>\n          <input value={this.props.editorSessionId} readOnly={true} ref={this.inviteInputElem} />\n          <CopyToClipboard text={'' + this.props.editorSessionId}>\n            {controlButton('', IconNames.DUPLICATE, this.selectInviteInputText)}\n          </CopyToClipboard>\n        </>\n      </Popover>\n    );\n\n    const handleStartJoining = (event: React.FormEvent<HTMLFormElement>) => {\n      const onSessionIdExists = () =>\n        this.props.handleSetEditorSessionId!(this.state!.joinElemValue);\n\n      const onSessionIdNotExist = () => {\n        this.props.handleInvalidEditorSessionId!();\n        this.props.handleSetEditorSessionId!('');\n      };\n\n      const onServerUnreachable = () => this.props.handleSetEditorSessionId!('');\n\n      checkSessionIdExists(\n        this.state.joinElemValue,\n        onSessionIdExists,\n        onSessionIdNotExist,\n        onServerUnreachable\n      );\n      event.preventDefault();\n    };\n\n    const joinButton = (\n      <Popover popoverClassName=\"Popover-share\" inheritDarkTheme={false}>\n        {controlButton('Join', IconNames.LOG_IN)}\n        <>\n          <form onSubmit={handleStartJoining}>\n            <input type=\"text\" value={this.state.joinElemValue} onChange={this.handleChange} />\n            <span className={Classes.POPOVER_DISMISS}>\n              {controlButton('', IconNames.KEY_ENTER, null, { type: 'submit' })}\n            </span>\n          </form>\n        </>\n      </Popover>\n    );\n\n    const leaveButton = controlButton('Leave', IconNames.FEED, () => {\n      this.props.handleSetEditorSessionId!('');\n      this.setState({ joinElemValue: '' });\n    });\n\n    return (\n      <Popover\n        content={\n          <Menu large={true}>\n            {inviteButton}\n            {this.props.editorSessionId === '' ? joinButton : leaveButton}\n          </Menu>\n        }\n      >\n        {controlButton('Session', IconNames.SOCIAL_MEDIA, undefined, {\n          iconColor:\n            this.props.editorSessionId === ''\n              ? undefined\n              : this.props.websocketStatus === 0\n              ? Colors.RED3\n              : Colors.GREEN3\n        })}\n      </Popover>\n    );\n  }\n\n  private selectInviteInputText() {\n    if (this.inviteInputElem.current !== null) {\n      this.inviteInputElem.current.focus();\n      this.inviteInputElem.current.select();\n    }\n  }\n\n  private handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n    this.setState({ joinElemValue: event.target.value });\n  }\n}\n","import { NonIdealState, Popover, Spinner, Text, Tooltip } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport * as React from 'react';\nimport * as CopyToClipboard from 'react-copy-to-clipboard';\n\nimport controlButton from '../ControlButton';\nimport Constants from '../utils/Constants';\n\ntype ControlBarShareButtonProps = DispatchProps & StateProps;\n\ntype DispatchProps = {\n  handleGenerateLz?: () => void;\n  handleShortenURL: (s: string) => void;\n  handleUpdateShortURL: (s: string) => void;\n};\n\ntype StateProps = {\n  queryString?: string;\n  shortURL?: string;\n  key: string;\n};\n\ntype State = {\n  keyword: string;\n  isLoading: boolean;\n};\n\nexport class ControlBarShareButton extends React.PureComponent<ControlBarShareButtonProps, State> {\n  private shareInputElem: React.RefObject<HTMLInputElement>;\n\n  constructor(props: ControlBarShareButtonProps) {\n    super(props);\n    this.selectShareInputText = this.selectShareInputText.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.toggleButton = this.toggleButton.bind(this);\n    this.shareInputElem = React.createRef();\n    this.state = { keyword: '', isLoading: false };\n  }\n\n  public render() {\n    let url = '';\n    const { urlShortener } = Constants;\n    if (urlShortener) {\n      url = urlShortener.split('/').slice(0, -1).join('/') + '/';\n    }\n\n    return (\n      <Popover popoverClassName=\"Popover-share\" inheritDarkTheme={false}>\n        <Tooltip content=\"Get shareable link\">\n          {controlButton('Share', IconNames.SHARE, () => this.toggleButton())}\n        </Tooltip>\n        {this.props.queryString === undefined ? (\n          <Text>\n            Share your programs! Type something into the editor (left), then click on this button\n            again.\n          </Text>\n        ) : (\n          <>\n            {!this.props.shortURL || this.props.shortURL === 'ERROR' ? (\n              !this.state.isLoading || this.props.shortURL === 'ERROR' ? (\n                <div>\n                  {url}&nbsp;\n                  <input\n                    placeholder={'custom string (optional)'}\n                    onChange={this.handleChange}\n                    style={{ width: 175 }}\n                  />\n                  {controlButton('Get Link', IconNames.SHARE, () => {\n                    this.props.handleShortenURL(this.state.keyword);\n                    this.setState({ isLoading: true });\n                  })}\n                </div>\n              ) : (\n                <div>\n                  <NonIdealState\n                    description=\"Generating Shareable Link...\"\n                    icon={<Spinner size={Spinner.SIZE_SMALL} />}\n                  />\n                </div>\n              )\n            ) : (\n              <div key={this.props.shortURL}>\n                <input\n                  defaultValue={this.props.shortURL}\n                  readOnly={true}\n                  ref={this.shareInputElem}\n                />\n                <Tooltip content=\"Copy link to clipboard\">\n                  <CopyToClipboard text={this.props.shortURL}>\n                    {controlButton('', IconNames.DUPLICATE, this.selectShareInputText)}\n                  </CopyToClipboard>\n                </Tooltip>\n              </div>\n            )}\n          </>\n        )}\n      </Popover>\n    );\n  }\n\n  public componentDidUpdate(prevProps: ControlBarShareButtonProps) {\n    if (this.props.shortURL !== prevProps.shortURL) {\n      this.setState({ keyword: '', isLoading: false });\n    }\n  }\n\n  private toggleButton() {\n    if (this.props.handleGenerateLz) {\n      this.props.handleGenerateLz();\n    }\n\n    // reset state\n    this.props.handleUpdateShortURL('');\n    this.setState({ keyword: '', isLoading: false });\n  }\n\n  private handleChange(event: React.FormEvent<HTMLInputElement>) {\n    this.setState({ keyword: event.currentTarget.value });\n  }\n\n  private selectShareInputText() {\n    if (this.shareInputElem.current !== null) {\n      this.shareInputElem.current.focus();\n      this.shareInputElem.current.select();\n    }\n  }\n}\n","import { Button, Divider } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport * as React from 'react';\n\ntype State = {\n  width: number;\n  height: number;\n};\n\nclass SideContentFaceapiDisplay extends React.Component<{}, State> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      width: (window as any)._WIDTH,\n      height: (window as any)._HEIGHT\n    };\n  }\n\n  public takePhotoA() {\n    (window as any).video.takePhotoA();\n  }\n\n  public takePhotoB() {\n    (window as any).video.takePhotoB();\n  }\n\n  public takePhotoC() {\n    (window as any).video.takePhotoC();\n  }\n\n  public resetPhotoA() {\n    (window as any).resetPhotoA();\n  }\n\n  public resetPhotoB() {\n    (window as any).resetPhotoB();\n  }\n\n  public resetPhotoC() {\n    (window as any).resetPhotoC();\n  }\n\n  // UI can be improved\n  public render() {\n    return (\n      <div className=\"sa-video\">\n        <div className=\"sa-video-element\">\n          <video\n            id=\"video\"\n            style={{ position: 'absolute' }}\n            autoPlay={true}\n            width={333}\n            height={250}\n          />\n\n          <canvas\n            id=\"canvas\"\n            style={{ position: 'relative', top: 0, left: 0 }}\n            width={333}\n            height={250}\n          />\n        </div>\n\n        <Divider />\n\n        <div className=\"sa-video-header\">\n          <div className=\"sa-video-header-element\">\n            <Button\n              className={'sa-live-video-button'}\n              style={{ height: 20 }}\n              icon={IconNames.CAMERA}\n              onClick={this.takePhotoA}\n              text={'Take picture'}\n            />\n          </div>\n          <Divider />\n          <div className=\"sa-video-header-element\">\n            <canvas id=\"canvas-capture-a\" style={{ height: 30 }} />\n          </div>\n          <Divider />\n          <div className=\"sa-video-header-element\">\n            <Button\n              className={'sa-still-image-button'}\n              style={{ height: 20 }}\n              icon={IconNames.RESET}\n              onClick={this.resetPhotoA}\n              text={'Reset'}\n            />\n          </div>\n        </div>\n\n        <div className=\"sa-video-header\">\n          <div className=\"sa-video-header-element\">\n            <Button\n              className={'sa-live-video-button'}\n              style={{ height: 20 }}\n              icon={IconNames.CAMERA}\n              onClick={this.takePhotoB}\n              text={'Take picture'}\n            />\n          </div>\n          <Divider />\n          <div className=\"sa-video-header-element\">\n            <canvas id=\"canvas-capture-b\" style={{ height: 20 }} />\n          </div>\n          <Divider />\n          <div className=\"sa-video-header-element\">\n            <Button\n              className={'sa-still-image-button'}\n              style={{ height: 20 }}\n              icon={IconNames.RESET}\n              onClick={this.resetPhotoB}\n              text={'Reset'}\n            />\n          </div>\n        </div>\n\n        <div className=\"sa-video-header\">\n          <div className=\"sa-video-header-element\">\n            <Button\n              className={'sa-live-video-button'}\n              style={{ height: 20 }}\n              icon={IconNames.CAMERA}\n              onClick={this.takePhotoC}\n              text={'Take picture'}\n            />\n          </div>\n          <Divider />\n          <div className=\"sa-video-header-element\">\n            <canvas id=\"canvas-capture-c\" style={{ height: 20 }} />\n          </div>\n          <Divider />\n          <div className=\"sa-video-header-element\">\n            <Button\n              className={'sa-still-image-button'}\n              style={{ height: 20 }}\n              icon={IconNames.RESET}\n              onClick={this.resetPhotoC}\n              text={'Reset'}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default SideContentFaceapiDisplay;\n","/* eslint-disable simple-import-sort/sort */\nimport { Card, Classes, Divider, Pre, Slider } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport * as React from 'react';\nimport AceEditor from 'react-ace';\nimport { HotKeys } from 'react-hotkeys';\n\nimport { HighlightRulesSelector, ModeSelector } from 'js-slang/dist/editors/ace/modes/source';\nimport 'js-slang/dist/editors/ace/theme/source';\nimport { IStepperPropContents } from 'js-slang/dist/stepper/stepper';\n\nimport controlButton from '../ControlButton';\n\nconst SubstDefaultText = () => {\n  return (\n    <div>\n      <div id=\"substituter-default-text\" className={Classes.RUNNING_TEXT}>\n        Welcome to the Stepper!\n        <br />\n        <br />\n        On this tab, the REPL will be hidden from view, so do check that your code has no errors\n        before running the stepper. You may use this tool by writing your program on the left, then\n        dragging the slider above to see its evaluation.\n        <br />\n        <br />\n        On even-numbered steps, the part of the program that will be evaluated next is highlighted\n        in yellow. On odd-numbered steps, the result of the evaluation is highlighted in green.\n        <br />\n        <br />\n        <Divider />\n        Some useful keyboard shortcuts:\n        <br />\n        <br />\n        {controlButton('(Comma)', IconNames.LESS_THAN)}: Move to the first step\n        <br />\n        {controlButton('(Period)', IconNames.GREATER_THAN)}: Move to the last step\n        <br />\n        <br />\n        Note that the first and last step shortcuts are only active when the browser focus is on\n        this panel (click on the slider or the text!).\n        <br />\n        <br />\n        When the focus is on the slider, the arrow keys may also be used to move a single step.\n      </div>\n    </div>\n  );\n};\n\nconst substKeyMap = {\n  FIRST_STEP: ',',\n  LAST_STEP: '.'\n};\n\nconst SubstCodeDisplay = (props: { content: string }) => {\n  return (\n    <Card>\n      <Pre className=\"resultOutput\">{props.content}</Pre>\n    </Card>\n  );\n};\n\ntype SubstVisualizerProps = StateProps;\n\ntype StateProps = {\n  content: IStepperPropContents[];\n};\n\ntype State = {\n  value: number;\n};\n\nclass SideContentSubstVisualizer extends React.Component<SubstVisualizerProps, State> {\n  constructor(props: SubstVisualizerProps) {\n    super(props);\n    this.state = {\n      value: 1\n    };\n\n    // set source mode as 2\n    HighlightRulesSelector(2);\n    ModeSelector(2);\n  }\n\n  public render() {\n    const lastStepValue = this.props.content.length;\n    // 'content' property is initialised to '[]' by Playground component\n    const hasRunCode = lastStepValue !== 0;\n    const substHandlers = hasRunCode\n      ? {\n          FIRST_STEP: this.stepFirst,\n          LAST_STEP: this.stepLast(lastStepValue)\n        }\n      : {\n          FIRST_STEP: () => {},\n          LAST_STEP: () => {}\n        };\n\n    return (\n      <HotKeys keyMap={substKeyMap} handlers={substHandlers}>\n        <div>\n          <div className=\"sa-substituter\">\n            <Slider\n              disabled={!hasRunCode}\n              min={1}\n              max={this.props.content.length}\n              onChange={this.sliderShift}\n              value={this.state.value <= lastStepValue ? this.state.value : 1}\n            />\n            {hasRunCode ? (\n              <AceEditor\n                className=\"react-ace\"\n                mode=\"source2defaultNONE\"\n                theme=\"source\"\n                fontSize={17}\n                highlightActiveLine={false}\n                wrapEnabled={true}\n                height=\"unset\"\n                width=\"100%\"\n                showGutter={false}\n                readOnly={true}\n                maxLines={Infinity}\n                value={this.getText(this.state.value)}\n                markers={this.getDiffMarkers(this.state.value)}\n                setOptions={{\n                  fontFamily: \"'Inconsolata', 'Consolas', monospace\"\n                }}\n              />\n            ) : (\n              <SubstDefaultText />\n            )}\n            {hasRunCode ? (\n              <SubstCodeDisplay\n                content={\n                  this.state.value <= lastStepValue\n                    ? this.props.content[this.state.value - 1].explanation\n                    : this.props.content[0].explanation\n                }\n              />\n            ) : null}\n          </div>\n        </div>\n      </HotKeys>\n    );\n  }\n\n  private getDiffMarkers = (value: number) => {\n    const lastStepValue = this.props.content.length;\n    const contIndex = value <= lastStepValue ? value - 1 : 0;\n    const pathified = this.props.content[contIndex];\n    const redexed = pathified.code;\n    const redex = pathified.redex.split('\\n');\n\n    const diffMarkers = [] as any[];\n    if (redex.length > 0) {\n      const mainprog = redexed.split('$');\n      let text = mainprog[0];\n      let front = text.split('\\n');\n\n      let startR = front.length - 1;\n      let startC = front[startR].length;\n\n      for (let i = 0; i < mainprog.length - 1; i++) {\n        const endR = startR + redex.length - 1;\n        const endC =\n          redex.length === 1\n            ? startC + redex[redex.length - 1].length\n            : redex[redex.length - 1].length;\n\n        diffMarkers.push({\n          startRow: startR,\n          startCol: startC,\n          endRow: endR,\n          endCol: endC,\n          className: value % 2 === 0 ? 'beforeMarker' : 'afterMarker',\n          type: 'background'\n        });\n\n        text = text + redex + mainprog[i + 1];\n        front = text.split('\\n');\n        startR = front.length - 1;\n        startC = front[startR].length;\n      }\n    }\n    return diffMarkers;\n  };\n\n  private getText(value: number) {\n    const lastStepValue = this.props.content.length;\n    const contIndex = value <= lastStepValue ? value - 1 : 0;\n    const pathified = this.props.content[contIndex];\n    const redexed = pathified.code;\n    const redex = pathified.redex;\n    const split = pathified.code.split('$');\n    if (split.length > 1) {\n      let text = split[0];\n      for (let i = 1; i < split.length; i++) {\n        text = text + redex + split[i];\n      }\n      return text;\n    } else {\n      return redexed;\n    }\n  }\n\n  private sliderShift = (newValue: number) => {\n    this.setState((state: State) => {\n      return { value: newValue };\n    });\n  };\n\n  private stepFirst = () => {\n    // Move to the first step\n    this.sliderShift(1);\n  };\n\n  private stepLast = (lastStepValue: number) => () => {\n    // Move to the last step\n    this.sliderShift(lastStepValue);\n  };\n}\n\nexport default SideContentSubstVisualizer;\n","import { Button, ButtonGroup, Divider, NumericInput, Tooltip } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport * as React from 'react';\n\nexport type SideContentVideoDisplayMode = 'video' | 'still';\n\ntype State = {\n  width: number;\n  height: number;\n  mode: SideContentVideoDisplayMode;\n};\n\nclass SideContentVideoDisplay extends React.Component<{}, State> {\n  private $video: HTMLElement | null = null;\n  private $canvas: HTMLElement | null = null;\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      width: (window as any)._WIDTH,\n      height: (window as any)._HEIGHT,\n      mode: 'video' as SideContentVideoDisplayMode\n    };\n    this.handleWidthChange = this.handleWidthChange.bind(this);\n    this.handleHeightChange = this.handleHeightChange.bind(this);\n  }\n  public componentDidMount() {\n    if (this.$video && this.$canvas) {\n      (window as any).VD.init(this.$video, this.$canvas);\n    }\n  }\n  public componentWillUnmount() {\n    (window as any).VD.deinit();\n  }\n  public handleStartVideo() {\n    (window as any).VD.handleStartVideo();\n  }\n  public handleSnapPicture() {\n    (window as any).VD.handleSnapPicture();\n  }\n  public handleCloseVideo() {\n    (window as any).VD.handleCloseVideo();\n  }\n  public handleWidthChange(n: number) {\n    if (n > 0) {\n      this.setState({\n        width: n,\n        height: this.state.height\n      });\n      this.handleUpdateDimensions(n, this.state.height);\n    }\n  }\n  public handleHeightChange(m: number) {\n    if (m > 0) {\n      this.setState({\n        width: this.state.width,\n        height: m\n      });\n      this.handleUpdateDimensions(this.state.width, m);\n    }\n  }\n  public handleUpdateDimensions(n: number, m: number) {\n    (window as any).VD.handleUpdateDimensions(n, m);\n  }\n  // UI can be improved\n  public render() {\n    const hideVideo = {\n      display: 'none'\n    };\n\n    const videoIsActive = this.state.mode === ('video' as SideContentVideoDisplayMode);\n    const stillIsActive = this.state.mode === ('still' as SideContentVideoDisplayMode);\n\n    return (\n      <div className=\"sa-video\">\n        <div className=\"sa-video-header\">\n          <div className=\"sa-video-header-element\">\n            <ButtonGroup>\n              <Button\n                className={'sa-live-video-button'}\n                icon={IconNames.VIDEO}\n                active={videoIsActive}\n                onClick={this.swapModes(this.state.mode)}\n                text={'Live Video'}\n              />\n              <Button\n                className={'sa-still-image-button'}\n                icon={IconNames.CAMERA}\n                active={stillIsActive}\n                onClick={stillIsActive ? this.handleSnapPicture : this.swapModes(this.state.mode)}\n                text={'Still Image'}\n              />\n            </ButtonGroup>\n          </div>\n          <Divider />\n          <div className=\"sa-video-header-element\">\n            <div className=\"sa-video-header-numeric-input\">\n              <Tooltip content=\"Change width\">\n                <NumericInput\n                  leftIcon={IconNames.HORIZONTAL_DISTRIBUTION}\n                  style={{ width: 70 }}\n                  value={this.state.width}\n                  onValueChange={this.handleWidthChange}\n                  minorStepSize={1}\n                  stepSize={10}\n                  majorStepSize={100}\n                />\n              </Tooltip>\n            </div>\n            <div className=\"sa-video-header-numeric-input\">\n              <Tooltip content=\"Change height\">\n                <NumericInput\n                  leftIcon={IconNames.VERTICAL_DISTRIBUTION}\n                  style={{ width: 70 }}\n                  value={this.state.height}\n                  onValueChange={this.handleHeightChange}\n                  minorStepSize={1}\n                  stepSize={10}\n                  majorStepSize={100}\n                />\n              </Tooltip>\n            </div>\n          </div>\n        </div>\n        <div className=\"sa-video-element\">\n          <video\n            ref={r => (this.$video = r)}\n            style={hideVideo}\n            autoPlay={true}\n            width={(window as any)._WIDTH}\n            height={(window as any)._HEIGHT}\n          />\n          <canvas\n            ref={r => (this.$canvas = r)}\n            width={(window as any)._WIDTH}\n            height={(window as any)._HEIGHT}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  private swapModes = (mode: SideContentVideoDisplayMode) => () => {\n    switch (mode) {\n      case 'video':\n        this.setState((state: State) => {\n          return { ...state, mode: 'still' as SideContentVideoDisplayMode };\n        }, this.handleSnapPicture);\n        break;\n\n      case 'still':\n        this.setState((state: State) => {\n          return { ...state, mode: 'video' as SideContentVideoDisplayMode };\n        }, this.handleStartVideo);\n        break;\n    }\n  };\n}\n\nexport default SideContentVideoDisplay;\n","import { Links } from './Constants';\n\nconst CHAP = '\\xa7';\n\nconst MAIN_INTRODUCTION = `\nWelcome to the Source Academy playground!\n\nThe language [_Source_](${Links.sourceDocs}) is the official language of the textbook [_Structure and\nInterpretation of Computer Programs, JavaScript Adaptation_](${Links.textbook}). `;\n\nconst HOTKEYS_INTRODUCTION = `\n\nIn the editor on the left, you can use the [_Ace keyboard shortcuts_](${Links.aceHotkeys}) \nand also the [_Source Academy keyboard shortcuts_](${Links.sourceHotkeys}).\n\n`;\n\nconst generateSourceDocsLink = (sourceType: string) => {\n  switch (sourceType) {\n    case '1 default':\n      return `You have chosen the sublanguage [_Source ${CHAP}1_](${Links.source_1}).`;\n    case '1 wasm':\n      return `You have chosen the sublanguage [_Source ${CHAP}1 WebAssembly_](${Links.source_1_Wasm}).`;\n    case '1 lazy':\n      return `You have chosen the sublanguage [_Source ${CHAP}1 Lazy_](${Links.source_1_Lazy}).`;\n    case '2 default':\n      return `You have chosen the sublanguage [_Source ${CHAP}2_](${Links.source_2}).`;\n    case '2 lazy':\n      return `You have chosen the sublanguage [_Source ${CHAP}2 Lazy_](${Links.source_2_Lazy}).`;\n    case '3 default':\n      return `You have chosen the sublanguage [_Source ${CHAP}3_](${Links.source_3}).`;\n    case '3 non-det':\n      return `You have chosen the sublanguage [_Source ${CHAP}3 Non-Det_](${Links.source_3_Nondet}).`;\n    case '3 concurrent':\n      return `You have chosen the sublanguage [_Source ${CHAP}3 Concurrent_](${Links.source_3_Concurrent}).`;\n    case '4 default':\n      return `You have chosen the sublanguage [_Source ${CHAP}4_](${Links.source_4}).`;\n    case '4 gpu':\n      return `You have chosen the sublanguage [_Source ${CHAP}4 GPU_](${Links.source_4_Gpu}).`;\n    default:\n      return 'You have chosen an invalid sublanguage. Please pick a sublanguage from the dropdown instead.';\n  }\n};\n\nconst generateIntroductionText = (sourceType: string) => {\n  return MAIN_INTRODUCTION + generateSourceDocsLink(sourceType) + HOTKEYS_INTRODUCTION;\n};\n\nexport const generateSourceIntroduction = (sourceChapter: number, sourceVariant: string) => {\n  return generateIntroductionText(`${sourceChapter} ${sourceVariant}`);\n};\n","import { Classes } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport classNames from 'classnames';\nimport { isStepperOutput } from 'js-slang/dist/stepper/stepper';\nimport { Variant } from 'js-slang/dist/types';\nimport * as React from 'react';\nimport { HotKeys } from 'react-hotkeys';\nimport { RouteComponentProps } from 'react-router';\n\nimport { InterpreterOutput } from '../../commons/application/ApplicationTypes';\nimport { ExternalLibraryName } from '../../commons/application/types/ExternalTypes';\nimport { ControlBarAutorunButtons } from '../../commons/controlBar/ControlBarAutorunButtons';\nimport { ControlBarChapterSelect } from '../../commons/controlBar/ControlBarChapterSelect';\nimport { ControlBarClearButton } from '../../commons/controlBar/ControlBarClearButton';\nimport { ControlBarEvalButton } from '../../commons/controlBar/ControlBarEvalButton';\nimport { ControlBarExecutionTime } from '../../commons/controlBar/ControlBarExecutionTime';\nimport { ControlBarExternalLibrarySelect } from '../../commons/controlBar/ControlBarExternalLibrarySelect';\nimport { ControlBarPersistenceButtons } from '../../commons/controlBar/ControlBarPersistenceButtons';\nimport { ControlBarSessionButtons } from '../../commons/controlBar/ControlBarSessionButton';\nimport { ControlBarShareButton } from '../../commons/controlBar/ControlBarShareButton';\nimport { HighlightedLines, Position } from '../../commons/editor/EditorTypes';\nimport Markdown from '../../commons/Markdown';\nimport SideContentEnvVisualizer from '../../commons/sideContent/SideContentEnvVisualizer';\nimport SideContentFaceapiDisplay from '../../commons/sideContent/SideContentFaceapiDisplay';\nimport SideContentInspector from '../../commons/sideContent/SideContentInspector';\nimport SideContentListVisualizer from '../../commons/sideContent/SideContentListVisualizer';\nimport SideContentSubstVisualizer from '../../commons/sideContent/SideContentSubstVisualizer';\nimport { SideContentTab, SideContentType } from '../../commons/sideContent/SideContentTypes';\nimport SideContentVideoDisplay from '../../commons/sideContent/SideContentVideoDisplay';\nimport { generateSourceIntroduction } from '../../commons/utils/IntroductionHelper';\nimport Workspace, { WorkspaceProps } from '../../commons/workspace/Workspace';\nimport { PersistenceFile } from '../../features/persistence/PersistenceTypes';\n\nexport type PlaygroundProps = DispatchProps & StateProps & RouteComponentProps<{}>;\n\nexport type DispatchProps = {\n  handleActiveTabChange: (activeTab: SideContentType) => void;\n  handleBrowseHistoryDown: () => void;\n  handleBrowseHistoryUp: () => void;\n  handleChangeExecTime: (execTime: number) => void;\n  handleChapterSelect: (chapter: number, variant: Variant) => void;\n  handleDeclarationNavigate: (cursorPosition: Position) => void;\n  handleEditorEval: () => void;\n  handleEditorHeightChange: (height: number) => void;\n  handleEditorValueChange: (val: string) => void;\n  handleEditorWidthChange: (widthChange: number) => void;\n  handleEditorUpdateBreakpoints: (breakpoints: string[]) => void;\n  handleFinishInvite: () => void;\n  handleGenerateLz: () => void;\n  handleShortenURL: (s: string) => void;\n  handleUpdateShortURL: (s: string) => void;\n  handleInterruptEval: () => void;\n  handleInvalidEditorSessionId: () => void;\n  handleExternalSelect: (externalLibraryName: ExternalLibraryName) => void;\n  handleInitInvite: (value: string) => void;\n  handleReplEval: () => void;\n  handleReplOutputClear: () => void;\n  handleReplValueChange: (newValue: string) => void;\n  handleSendReplInputToOutput: (code: string) => void;\n  handleSetEditorSessionId: (editorSessionId: string) => void;\n  handleSetWebsocketStatus: (websocketStatus: number) => void;\n  handleSideContentHeightChange: (heightChange: number) => void;\n  handleUsingSubst: (usingSubst: boolean) => void;\n  handleDebuggerPause: () => void;\n  handleDebuggerResume: () => void;\n  handleDebuggerReset: () => void;\n  handleToggleEditorAutorun: () => void;\n  handleFetchChapter: () => void;\n  handlePromptAutocomplete: (row: number, col: number, callback: any) => void;\n  handlePersistenceOpenPicker: () => void;\n  handlePersistenceSaveFile: () => void;\n  handlePersistenceUpdateFile: (file: PersistenceFile) => void;\n  handlePersistenceInitialise: () => void;\n  handlePersistenceLogOut: () => void;\n};\n\nexport type StateProps = {\n  editorSessionId: string;\n  editorValue: string;\n  editorHeight?: number;\n  editorWidth: string;\n  execTime: number;\n  breakpoints: string[];\n  highlightedLines: HighlightedLines[];\n  isEditorAutorun: boolean;\n  isRunning: boolean;\n  isDebugging: boolean;\n  enableDebugging: boolean;\n  newCursorPosition?: Position;\n  output: InterpreterOutput[];\n  queryString?: string;\n  shortURL?: string;\n  replValue: string;\n  sideContentHeight?: number;\n  sharedbAceInitValue: string;\n  sharedbAceIsInviting: boolean;\n  sourceChapter: number;\n  sourceVariant: Variant;\n  websocketStatus: number;\n  externalLibraryName: string;\n  usingSubst: boolean;\n  persistenceUser: string | undefined;\n  persistenceFile: PersistenceFile | undefined;\n};\n\nconst keyMap = { goGreen: 'h u l k' };\n\nconst Playground: React.FC<PlaygroundProps> = props => {\n  const [lastEdit, setLastEdit] = React.useState(new Date());\n  const [isGreen, setIsGreen] = React.useState(false);\n  const [selectedTab, setSelectedTab] = React.useState(SideContentType.introduction);\n  const [hasBreakpoints, setHasBreakpoints] = React.useState(false);\n\n  const handlers = React.useMemo(\n    () => ({\n      goGreen: () => setIsGreen(!isGreen)\n    }),\n    [isGreen, setIsGreen]\n  );\n\n  const { handleEditorValueChange } = props;\n  const onEditorValueChange = React.useCallback(\n    val => {\n      setLastEdit(new Date());\n      handleEditorValueChange(val);\n    },\n    [handleEditorValueChange]\n  );\n\n  const { handleUsingSubst, handleReplOutputClear, sourceChapter } = props;\n  const onChangeTabs = React.useCallback(\n    (\n      newTabId: SideContentType,\n      prevTabId: SideContentType,\n      event: React.MouseEvent<HTMLElement>\n    ) => {\n      if (newTabId === prevTabId) {\n        return;\n      }\n\n      if (sourceChapter <= 2 && newTabId === SideContentType.substVisualizer) {\n        handleUsingSubst(true);\n      }\n\n      if (prevTabId === SideContentType.substVisualizer && !hasBreakpoints) {\n        handleReplOutputClear();\n        handleUsingSubst(false);\n      }\n\n      setSelectedTab(newTabId);\n    },\n    [handleReplOutputClear, handleUsingSubst, hasBreakpoints, sourceChapter]\n  );\n\n  const processStepperOutput = (output: InterpreterOutput[]) => {\n    const editorOutput = output[0];\n    if (\n      editorOutput &&\n      editorOutput.type === 'result' &&\n      editorOutput.value instanceof Array &&\n      editorOutput.value[0] === Object(editorOutput.value[0]) &&\n      isStepperOutput(editorOutput.value[0])\n    ) {\n      return editorOutput.value;\n    } else {\n      return [];\n    }\n  };\n\n  const autorunButtons = React.useMemo(\n    () => (\n      <ControlBarAutorunButtons\n        handleDebuggerPause={props.handleDebuggerPause}\n        handleDebuggerReset={props.handleDebuggerReset}\n        handleDebuggerResume={props.handleDebuggerResume}\n        handleEditorEval={props.handleEditorEval}\n        handleInterruptEval={props.handleInterruptEval}\n        handleToggleEditorAutorun={props.handleToggleEditorAutorun}\n        isDebugging={props.isDebugging}\n        isEditorAutorun={props.isEditorAutorun}\n        isRunning={props.isRunning}\n        key=\"autorun\"\n      />\n    ),\n    [\n      props.handleDebuggerPause,\n      props.handleDebuggerReset,\n      props.handleDebuggerResume,\n      props.handleEditorEval,\n      props.handleInterruptEval,\n      props.handleToggleEditorAutorun,\n      props.isDebugging,\n      props.isEditorAutorun,\n      props.isRunning\n    ]\n  );\n\n  const { handleChapterSelect } = props;\n  const chapterSelectHandler = React.useCallback(\n    ({ chapter, variant }: { chapter: number; variant: Variant }, e: any) => {\n      if ((chapter <= 2 && hasBreakpoints) || selectedTab === SideContentType.substVisualizer) {\n        handleUsingSubst(true);\n      }\n      if (chapter > 2) {\n        handleReplOutputClear();\n        handleUsingSubst(false);\n      }\n      handleChapterSelect(chapter, variant);\n    },\n    [handleReplOutputClear, handleUsingSubst, hasBreakpoints, handleChapterSelect, selectedTab]\n  );\n\n  const chapterSelect = React.useMemo(\n    () => (\n      <ControlBarChapterSelect\n        handleChapterSelect={chapterSelectHandler}\n        sourceChapter={props.sourceChapter}\n        sourceVariant={props.sourceVariant}\n        key=\"chapter\"\n      />\n    ),\n    [chapterSelectHandler, props.sourceChapter, props.sourceVariant]\n  );\n\n  const clearButton = React.useMemo(\n    () =>\n      selectedTab === SideContentType.substVisualizer ? null : (\n        <ControlBarClearButton\n          handleReplOutputClear={props.handleReplOutputClear}\n          key=\"clear_repl\"\n        />\n      ),\n    [props.handleReplOutputClear, selectedTab]\n  );\n\n  const evalButton = React.useMemo(\n    () =>\n      selectedTab === SideContentType.substVisualizer ? null : (\n        <ControlBarEvalButton\n          handleReplEval={props.handleReplEval}\n          isRunning={props.isRunning}\n          key=\"eval_repl\"\n        />\n      ),\n    [props.handleReplEval, props.isRunning, selectedTab]\n  );\n\n  const { persistenceUser, persistenceFile, handlePersistenceUpdateFile } = props;\n  // Compute this here to avoid re-rendering the button every keystroke\n  const persistenceIsDirty =\n    persistenceFile && (!persistenceFile.lastSaved || persistenceFile.lastSaved < lastEdit);\n  const persistenceButtons = React.useMemo(() => {\n    return (\n      <ControlBarPersistenceButtons\n        currentFile={persistenceFile}\n        loggedInAs={persistenceUser}\n        isDirty={persistenceIsDirty}\n        key=\"googledrive\"\n        onClickSaveAs={props.handlePersistenceSaveFile}\n        onClickOpen={props.handlePersistenceOpenPicker}\n        onClickSave={\n          persistenceFile ? () => handlePersistenceUpdateFile(persistenceFile) : undefined\n        }\n        onClickLogOut={props.handlePersistenceLogOut}\n        onPopoverOpening={props.handlePersistenceInitialise}\n      />\n    );\n  }, [\n    persistenceUser,\n    persistenceFile,\n    persistenceIsDirty,\n    props.handlePersistenceSaveFile,\n    props.handlePersistenceOpenPicker,\n    props.handlePersistenceLogOut,\n    props.handlePersistenceInitialise,\n    handlePersistenceUpdateFile\n  ]);\n\n  const { handleChangeExecTime, execTime } = props;\n  const executionTime = React.useMemo(\n    () => (\n      <ControlBarExecutionTime\n        execTime={execTime}\n        handleChangeExecTime={(execTime: number) => handleChangeExecTime(execTime)}\n        key=\"execution_time\"\n      />\n    ),\n    [execTime, handleChangeExecTime]\n  );\n\n  const { handleExternalSelect, externalLibraryName } = props;\n  const externalLibrarySelect = React.useMemo(\n    () => (\n      <ControlBarExternalLibrarySelect\n        externalLibraryName={externalLibraryName}\n        handleExternalSelect={({ name }: { name: ExternalLibraryName }, e: any) =>\n          handleExternalSelect(name)\n        }\n        key=\"external_library\"\n      />\n    ),\n    [externalLibraryName, handleExternalSelect]\n  );\n\n  const sessionButtons = React.useMemo(\n    () => (\n      <ControlBarSessionButtons\n        editorSessionId={props.editorSessionId}\n        editorValue={props.editorValue}\n        handleInitInvite={props.handleInitInvite}\n        handleInvalidEditorSessionId={props.handleInvalidEditorSessionId}\n        handleSetEditorSessionId={props.handleSetEditorSessionId}\n        websocketStatus={props.websocketStatus}\n        key=\"session\"\n      />\n    ),\n    [\n      props.editorSessionId,\n      props.editorValue,\n      props.handleInitInvite,\n      props.handleInvalidEditorSessionId,\n      props.handleSetEditorSessionId,\n      props.websocketStatus\n    ]\n  );\n\n  const shareButton = React.useMemo(\n    () => (\n      <ControlBarShareButton\n        handleGenerateLz={props.handleGenerateLz}\n        handleShortenURL={props.handleShortenURL}\n        handleUpdateShortURL={props.handleUpdateShortURL}\n        queryString={props.queryString}\n        shortURL={props.shortURL}\n        key=\"share\"\n      />\n    ),\n    [\n      props.handleGenerateLz,\n      props.handleShortenURL,\n      props.handleUpdateShortURL,\n      props.queryString,\n      props.shortURL\n    ]\n  );\n\n  const playgroundIntroductionTab: SideContentTab = React.useMemo(\n    () => ({\n      label: 'Introduction',\n      iconName: IconNames.COMPASS,\n      body: (\n        <Markdown\n          content={generateSourceIntroduction(props.sourceChapter, props.sourceVariant)}\n          openLinksInNewWindow={true}\n        />\n      ),\n      id: SideContentType.introduction,\n      toSpawn: () => true\n    }),\n    [props.sourceChapter, props.sourceVariant]\n  );\n\n  const tabs = React.useMemo(() => {\n    const tabs: SideContentTab[] = [playgroundIntroductionTab];\n\n    // Conditional logic for tab rendering\n    if (\n      props.externalLibraryName === ExternalLibraryName.PIXNFLIX ||\n      props.externalLibraryName === ExternalLibraryName.ALL\n    ) {\n      // Enable video tab only when 'PIX&FLIX' is selected\n      tabs.push(videoDisplayTab);\n    }\n    if (props.externalLibraryName === ExternalLibraryName.MACHINELEARNING) {\n      // Enable Face API Display only when 'MACHINELEARNING' is selected\n      tabs.push(FaceapiDisplayTab);\n    }\n    if (props.sourceChapter >= 2) {\n      // Enable Data Visualizer for Source Chapter 2 and above\n      tabs.push(listVisualizerTab);\n    }\n    if (\n      props.sourceChapter >= 3 &&\n      props.sourceVariant !== 'concurrent' &&\n      props.sourceVariant !== 'non-det'\n    ) {\n      // Enable Inspector, Env Visualizer for Source Chapter 3 and above\n      tabs.push(inspectorTab);\n      tabs.push(envVisualizerTab);\n    }\n\n    if (props.sourceChapter <= 2 && props.sourceVariant !== 'wasm') {\n      // Enable Subst Visualizer for Source 1 & 2\n      tabs.push({\n        label: 'Stepper',\n        iconName: IconNames.FLOW_REVIEW,\n        body: <SideContentSubstVisualizer content={processStepperOutput(props.output)} />,\n        id: SideContentType.substVisualizer,\n        toSpawn: () => true\n      });\n    }\n    return tabs;\n  }, [\n    playgroundIntroductionTab,\n    props.externalLibraryName,\n    props.output,\n    props.sourceChapter,\n    props.sourceVariant\n  ]);\n\n  const workspaceProps: WorkspaceProps = {\n    controlBarProps: {\n      editorButtons: [\n        autorunButtons,\n        shareButton,\n        chapterSelect,\n        props.sourceVariant !== 'concurrent' ? externalLibrarySelect : null,\n        sessionButtons,\n        persistenceButtons,\n        executionTime\n      ],\n      replButtons: [props.sourceVariant !== 'concurrent' ? evalButton : null, clearButton]\n    },\n    editorProps: {\n      sourceChapter: props.sourceChapter,\n      externalLibraryName: props.externalLibraryName,\n      sourceVariant: props.sourceVariant,\n      editorValue: props.editorValue,\n      editorSessionId: props.editorSessionId,\n      handleDeclarationNavigate: props.handleDeclarationNavigate,\n      handleEditorEval: props.handleEditorEval,\n      handleEditorValueChange: onEditorValueChange,\n      handleSendReplInputToOutput: props.handleSendReplInputToOutput,\n      handlePromptAutocomplete: props.handlePromptAutocomplete,\n      handleFinishInvite: props.handleFinishInvite,\n      sharedbAceInitValue: props.sharedbAceInitValue,\n      sharedbAceIsInviting: props.sharedbAceIsInviting,\n      isEditorAutorun: props.isEditorAutorun,\n      breakpoints: props.breakpoints,\n      highlightedLines: props.highlightedLines,\n      newCursorPosition: props.newCursorPosition,\n      handleEditorUpdateBreakpoints: (breakpoints: string[]) => {\n        // get rid of holes in array\n        const numberOfBreakpoints = breakpoints.filter(arrayItem => !!arrayItem).length;\n        if (numberOfBreakpoints > 0) {\n          setHasBreakpoints(true);\n          if (props.sourceChapter <= 2) {\n            /**\n             * There are breakpoints set on Source Chapter 2, so we set the\n             * Redux state for the editor to evaluate to the substituter\n             */\n\n            props.handleUsingSubst(true);\n          }\n        }\n        if (numberOfBreakpoints === 0) {\n          setHasBreakpoints(false);\n\n          if (selectedTab !== SideContentType.substVisualizer) {\n            props.handleReplOutputClear();\n            props.handleUsingSubst(false);\n          }\n        }\n        props.handleEditorUpdateBreakpoints(breakpoints);\n      },\n      handleSetWebsocketStatus: props.handleSetWebsocketStatus\n    },\n    editorHeight: props.editorHeight,\n    editorWidth: props.editorWidth,\n    handleEditorHeightChange: props.handleEditorHeightChange,\n    handleEditorWidthChange: props.handleEditorWidthChange,\n    handleSideContentHeightChange: props.handleSideContentHeightChange,\n    replProps: {\n      sourceChapter: props.sourceChapter,\n      sourceVariant: props.sourceVariant,\n      output: props.output,\n      replValue: props.replValue,\n      handleBrowseHistoryDown: props.handleBrowseHistoryDown,\n      handleBrowseHistoryUp: props.handleBrowseHistoryUp,\n      handleReplEval: props.handleReplEval,\n      handleReplValueChange: props.handleReplValueChange,\n      hidden: selectedTab === SideContentType.substVisualizer,\n      usingSubst: props.usingSubst\n    },\n    sideContentHeight: props.sideContentHeight,\n    sideContentProps: {\n      defaultSelectedTabId: selectedTab,\n      handleActiveTabChange: props.handleActiveTabChange,\n      onChange: onChangeTabs,\n      tabs,\n      workspaceLocation: 'playground'\n    },\n    sideContentIsResizeable: selectedTab !== SideContentType.substVisualizer\n  };\n\n  return (\n    <HotKeys\n      className={classNames('Playground', Classes.DARK, isGreen ? 'GreenScreen' : undefined)}\n      keyMap={keyMap}\n      handlers={handlers}\n    >\n      <Workspace {...workspaceProps} />\n    </HotKeys>\n  );\n};\n\nconst listVisualizerTab: SideContentTab = {\n  label: 'Data Visualizer',\n  iconName: IconNames.EYE_OPEN,\n  body: <SideContentListVisualizer />,\n  id: SideContentType.dataVisualiser,\n  toSpawn: () => true\n};\n\nconst videoDisplayTab: SideContentTab = {\n  label: 'Video Display',\n  iconName: IconNames.MOBILE_VIDEO,\n  body: <SideContentVideoDisplay />,\n  toSpawn: () => true\n};\n\nconst FaceapiDisplayTab: SideContentTab = {\n  label: 'Face API Display',\n  iconName: IconNames.MUGSHOT,\n  body: <SideContentFaceapiDisplay />,\n  toSpawn: () => true\n};\n\nconst inspectorTab: SideContentTab = {\n  label: 'Inspector',\n  iconName: IconNames.SEARCH,\n  body: <SideContentInspector />,\n  id: SideContentType.inspector,\n  toSpawn: () => true\n};\n\nconst envVisualizerTab: SideContentTab = {\n  label: 'Env Visualizer',\n  iconName: IconNames.GLOBE,\n  body: <SideContentEnvVisualizer />,\n  id: SideContentType.envVisualiser,\n  toSpawn: () => true\n};\n\nexport default Playground;\n","import { Variant } from 'js-slang/dist/types';\nimport { connect, MapDispatchToProps, MapStateToProps } from 'react-redux';\nimport { withRouter } from 'react-router';\nimport { bindActionCreators, Dispatch } from 'redux';\n\nimport {\n  beginDebuggerPause,\n  beginInterruptExecution,\n  debuggerReset,\n  debuggerResume\n} from '../../commons/application/actions/InterpreterActions';\nimport { logoutGoogle } from '../../commons/application/actions/SessionActions';\nimport { OverallState } from '../../commons/application/ApplicationTypes';\nimport { ExternalLibraryName } from '../../commons/application/types/ExternalTypes';\nimport {\n  finishInvite,\n  initInvite,\n  invalidEditorSessionId,\n  setEditorSessionId,\n  setWebsocketStatus\n} from '../../commons/collabEditing/CollabEditingActions';\nimport { Position } from '../../commons/editor/EditorTypes';\nimport { SideContentType } from '../../commons/sideContent/SideContentTypes';\nimport {\n  browseReplHistoryDown,\n  browseReplHistoryUp,\n  changeEditorHeight,\n  changeEditorWidth,\n  changeExecTime,\n  changeSideContentHeight,\n  chapterSelect,\n  clearReplOutput,\n  evalEditor,\n  evalRepl,\n  externalLibrarySelect,\n  fetchChapter,\n  navigateToDeclaration,\n  promptAutocomplete,\n  sendReplInputToOutput,\n  setEditorBreakpoint,\n  toggleEditorAutorun,\n  updateActiveTab,\n  updateEditorValue,\n  updateReplValue\n} from '../../commons/workspace/WorkspaceActions';\nimport { WorkspaceLocation } from '../../commons/workspace/WorkspaceTypes';\nimport {\n  persistenceInitialise,\n  persistenceOpenPicker,\n  persistenceSaveFile,\n  persistenceSaveFileAs\n} from '../../features/persistence/PersistenceActions';\nimport {\n  generateLzString,\n  shortenURL,\n  toggleUsingSubst,\n  updateShortURL\n} from '../../features/playground/PlaygroundActions';\nimport Playground, { DispatchProps, StateProps } from './Playground';\n\nconst mapStateToProps: MapStateToProps<StateProps, {}, OverallState> = state => ({\n  editorSessionId: state.workspaces.playground.editorSessionId,\n  editorWidth: state.workspaces.playground.editorWidth,\n  editorValue: state.workspaces.playground.editorValue!,\n  execTime: state.workspaces.playground.execTime,\n  isEditorAutorun: state.workspaces.playground.isEditorAutorun,\n  breakpoints: state.workspaces.playground.breakpoints,\n  highlightedLines: state.workspaces.playground.highlightedLines,\n  isRunning: state.workspaces.playground.isRunning,\n  isDebugging: state.workspaces.playground.isDebugging,\n  enableDebugging: state.workspaces.playground.enableDebugging,\n  newCursorPosition: state.workspaces.playground.newCursorPosition,\n  output: state.workspaces.playground.output,\n  queryString: state.playground.queryString,\n  shortURL: state.playground.shortURL,\n  replValue: state.workspaces.playground.replValue,\n  sharedbAceIsInviting: state.workspaces.playground.sharedbAceIsInviting,\n  sharedbAceInitValue: state.workspaces.playground.sharedbAceInitValue,\n  sideContentHeight: state.workspaces.playground.sideContentHeight,\n  sourceChapter: state.workspaces.playground.context.chapter,\n  sourceVariant: state.workspaces.playground.context.variant,\n  websocketStatus: state.workspaces.playground.websocketStatus,\n  externalLibraryName: state.workspaces.playground.externalLibrary,\n  usingSubst: state.playground.usingSubst,\n  persistenceUser: state.session.googleUser,\n  persistenceFile: state.playground.persistenceFile\n});\n\nconst workspaceLocation: WorkspaceLocation = 'playground';\n\nconst mapDispatchToProps: MapDispatchToProps<DispatchProps, {}> = (dispatch: Dispatch) =>\n  bindActionCreators(\n    {\n      handleActiveTabChange: (activeTab: SideContentType) =>\n        updateActiveTab(activeTab, workspaceLocation),\n      handleBrowseHistoryDown: () => browseReplHistoryDown(workspaceLocation),\n      handleBrowseHistoryUp: () => browseReplHistoryUp(workspaceLocation),\n      handleChangeExecTime: (execTime: number) =>\n        changeExecTime(execTime.toString(), workspaceLocation),\n      handleChapterSelect: (chapter: number, variant: Variant) =>\n        chapterSelect(chapter, variant, workspaceLocation),\n      handleDeclarationNavigate: (cursorPosition: Position) =>\n        navigateToDeclaration(workspaceLocation, cursorPosition),\n      handleEditorEval: () => evalEditor(workspaceLocation),\n      handleEditorValueChange: (val: string) => updateEditorValue(val, workspaceLocation),\n      handleEditorHeightChange: (height: number) => changeEditorHeight(height, workspaceLocation),\n      handleEditorWidthChange: (widthChange: number) =>\n        changeEditorWidth(widthChange.toString(), workspaceLocation),\n      handleEditorUpdateBreakpoints: (breakpoints: string[]) =>\n        setEditorBreakpoint(breakpoints, workspaceLocation),\n      handleFinishInvite: () => finishInvite(workspaceLocation),\n      handleGenerateLz: generateLzString,\n      handleShortenURL: (s: string) => shortenURL(s),\n      handleUpdateShortURL: (s: string) => updateShortURL(s),\n      handleInterruptEval: () => beginInterruptExecution(workspaceLocation),\n      handleInvalidEditorSessionId: () => invalidEditorSessionId(),\n      handleExternalSelect: (externalLibraryName: ExternalLibraryName) =>\n        externalLibrarySelect(externalLibraryName, workspaceLocation),\n      handleInitInvite: (editorValue: string) => initInvite(editorValue, workspaceLocation),\n      handleReplEval: () => evalRepl(workspaceLocation),\n      handleReplOutputClear: () => clearReplOutput(workspaceLocation),\n      handleReplValueChange: (newValue: string) => updateReplValue(newValue, workspaceLocation),\n      handleSetEditorSessionId: (editorSessionId: string) =>\n        setEditorSessionId(workspaceLocation, editorSessionId),\n      handleSendReplInputToOutput: (code: string) => sendReplInputToOutput(code, workspaceLocation),\n      handleSetWebsocketStatus: (websocketStatus: number) =>\n        setWebsocketStatus(workspaceLocation, websocketStatus),\n      handleSideContentHeightChange: (heightChange: number) =>\n        changeSideContentHeight(heightChange, workspaceLocation),\n      handleToggleEditorAutorun: () => toggleEditorAutorun(workspaceLocation),\n      handleUsingSubst: (usingSubst: boolean) => toggleUsingSubst(usingSubst),\n      handleDebuggerPause: () => beginDebuggerPause(workspaceLocation),\n      handleDebuggerResume: () => debuggerResume(workspaceLocation),\n      handleDebuggerReset: () => debuggerReset(workspaceLocation),\n      handleFetchChapter: fetchChapter,\n      handlePromptAutocomplete: (row: number, col: number, callback: any) =>\n        promptAutocomplete(workspaceLocation, row, col, callback),\n      handlePersistenceOpenPicker: persistenceOpenPicker,\n      handlePersistenceSaveFile: persistenceSaveFileAs,\n      handlePersistenceUpdateFile: persistenceSaveFile,\n      handlePersistenceInitialise: persistenceInitialise,\n      handlePersistenceLogOut: logoutGoogle\n    },\n    dispatch\n  );\n\nconst PlaygroundContainer = withRouter(connect(mapStateToProps, mapDispatchToProps)(Playground));\n\nexport default PlaygroundContainer;\n","import { Classes, Pre } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport classNames from 'classnames';\nimport { Variant } from 'js-slang/dist/types';\nimport * as React from 'react';\n\nimport { InterpreterOutput } from '../../commons/application/ApplicationTypes';\nimport { ExternalLibraryName } from '../../commons/application/types/ExternalTypes';\nimport { ControlBarAutorunButtons } from '../../commons/controlBar/ControlBarAutorunButtons';\nimport { ControlBarChapterSelect } from '../../commons/controlBar/ControlBarChapterSelect';\nimport { ControlBarClearButton } from '../../commons/controlBar/ControlBarClearButton';\nimport { ControlBarEvalButton } from '../../commons/controlBar/ControlBarEvalButton';\nimport { ControlBarExternalLibrarySelect } from '../../commons/controlBar/ControlBarExternalLibrarySelect';\nimport { HighlightedLines, Position } from '../../commons/editor/EditorTypes';\nimport SideContentEnvVisualizer from '../../commons/sideContent/SideContentEnvVisualizer';\nimport SideContentInspector from '../../commons/sideContent/SideContentInspector';\nimport SideContentListVisualizer from '../../commons/sideContent/SideContentListVisualizer';\nimport { SideContentTab, SideContentType } from '../../commons/sideContent/SideContentTypes';\nimport SourceRecorderControlBar, {\n  SourceRecorderControlBarProps\n} from '../../commons/sourceRecorder/SourceRecorderControlBar';\nimport SourceRecorderEditor, {\n  SourceRecorderEditorProps\n} from '../../commons/sourceRecorder/SourceRecorderEditor';\nimport SourceRecorderTable from '../../commons/sourceRecorder/SourceRecorderTable';\nimport Workspace, { WorkspaceProps } from '../../commons/workspace/Workspace';\nimport {\n  CodeDelta,\n  Input,\n  PlaybackData,\n  PlaybackStatus,\n  SourcecastData\n} from '../../features/sourceRecorder/SourceRecorderTypes';\n\nexport type SourcecastProps = DispatchProps & StateProps;\n\nexport type DispatchProps = {\n  handleActiveTabChange: (activeTab: SideContentType) => void;\n  handleBrowseHistoryDown: () => void;\n  handleBrowseHistoryUp: () => void;\n  handleChapterSelect: (chapter: number) => void;\n  handleDebuggerPause: () => void;\n  handleDebuggerResume: () => void;\n  handleDebuggerReset: () => void;\n  handleDeclarationNavigate: (cursorPosition: Position) => void;\n  handleEditorEval: () => void;\n  handleEditorHeightChange: (height: number) => void;\n  handleEditorValueChange: (val: string) => void;\n  handlePromptAutocomplete: (row: number, col: number, callback: any) => void;\n  handleEditorWidthChange: (widthChange: number) => void;\n  handleEditorUpdateBreakpoints: (breakpoints: string[]) => void;\n  handleExternalSelect: (externalLibraryName: ExternalLibraryName) => void;\n  handleFetchSourcecastIndex: () => void;\n  handleInterruptEval: () => void;\n  handleReplEval: () => void;\n  handleReplOutputClear: () => void;\n  handleReplValueChange: (newValue: string) => void;\n  handleSetCurrentPlayerTime: (playTime: number) => void;\n  handleSetCodeDeltasToApply: (delta: CodeDelta[]) => void;\n  handleSetEditorReadonly: (editorReadonly: boolean) => void;\n  handleSetInputToApply: (inputToApply: Input) => void;\n  handleSetSourcecastData: (\n    title: string,\n    description: string,\n    audioUrl: string,\n    playbackData: PlaybackData\n  ) => void;\n  handleSetSourcecastDuration: (duration: number) => void;\n  handleSetSourcecastStatus: (PlaybackStatus: PlaybackStatus) => void;\n  handleSideContentHeightChange: (heightChange: number) => void;\n  handleToggleEditorAutorun: () => void;\n};\n\nexport type StateProps = {\n  audioUrl: string;\n  currentPlayerTime: number;\n  codeDeltasToApply: CodeDelta[] | null;\n  title: string | null;\n  description: string | null;\n  editorReadonly: boolean;\n  editorValue: string;\n  editorHeight?: number;\n  editorWidth: string;\n  externalLibraryName: string;\n  breakpoints: string[];\n  highlightedLines: HighlightedLines[];\n  isEditorAutorun: boolean;\n  inputToApply: Input | null;\n  isRunning: boolean;\n  isDebugging: boolean;\n  enableDebugging: boolean;\n  newCursorPosition?: Position;\n  output: InterpreterOutput[];\n  playbackDuration: number;\n  playbackData: PlaybackData;\n  playbackStatus: PlaybackStatus;\n  replValue: string;\n  sideContentActiveTab: SideContentType;\n  sideContentHeight?: number;\n  sourcecastIndex: SourcecastData[] | null;\n  sourceChapter: number;\n  sourceVariant: Variant;\n};\n\nclass Sourcecast extends React.Component<SourcecastProps> {\n  public componentDidUpdate(prevProps: SourcecastProps) {\n    const { inputToApply } = this.props;\n\n    if (!inputToApply || inputToApply === prevProps.inputToApply) {\n      return;\n    }\n\n    switch (inputToApply.type) {\n      case 'activeTabChange':\n        this.props.handleActiveTabChange(inputToApply.data);\n        break;\n      case 'chapterSelect':\n        this.props.handleChapterSelect(inputToApply.data);\n        break;\n      case 'externalLibrarySelect':\n        this.props.handleExternalSelect(inputToApply.data);\n        break;\n    }\n  }\n\n  public render() {\n    const autorunButtons = (\n      <ControlBarAutorunButtons\n        handleDebuggerPause={this.props.handleDebuggerPause}\n        handleDebuggerReset={this.props.handleDebuggerReset}\n        handleDebuggerResume={this.props.handleDebuggerResume}\n        handleEditorEval={this.props.handleEditorEval}\n        handleInterruptEval={this.props.handleInterruptEval}\n        handleToggleEditorAutorun={this.props.handleToggleEditorAutorun}\n        isDebugging={this.props.isDebugging}\n        isEditorAutorun={this.props.isEditorAutorun}\n        isRunning={this.props.isRunning}\n        key=\"autorun\"\n      />\n    );\n\n    const chapterSelectHandler = ({ chapter }: { chapter: number }, e: any) =>\n      this.props.handleChapterSelect(chapter);\n\n    const chapterSelect = (\n      <ControlBarChapterSelect\n        handleChapterSelect={chapterSelectHandler}\n        sourceChapter={this.props.sourceChapter}\n        sourceVariant={this.props.sourceVariant}\n        key=\"chapter\"\n      />\n    );\n\n    const clearButton = (\n      <ControlBarClearButton\n        handleReplOutputClear={this.props.handleReplOutputClear}\n        key=\"clear_repl\"\n      />\n    );\n\n    const evalButton = (\n      <ControlBarEvalButton\n        handleReplEval={this.props.handleReplEval}\n        isRunning={this.props.isRunning}\n        key=\"eval_repl\"\n      />\n    );\n\n    const externalSelectHandler = ({ name }: { name: ExternalLibraryName }, e: any) =>\n      this.props.handleExternalSelect(name);\n\n    const externalLibrarySelect = (\n      <ControlBarExternalLibrarySelect\n        externalLibraryName={this.props.externalLibraryName}\n        handleExternalSelect={externalSelectHandler}\n        key=\"external_library\"\n      />\n    );\n\n    const editorProps: SourceRecorderEditorProps = {\n      codeDeltasToApply: this.props.codeDeltasToApply,\n      editorReadonly: this.props.editorReadonly,\n      editorValue: this.props.editorValue,\n      editorSessionId: '',\n      handleDeclarationNavigate: this.props.handleDeclarationNavigate,\n      handleEditorEval: this.props.handleEditorEval,\n      handleEditorValueChange: this.props.handleEditorValueChange,\n      isEditorAutorun: this.props.isEditorAutorun,\n      inputToApply: this.props.inputToApply,\n      isPlaying: this.props.playbackStatus === PlaybackStatus.playing,\n      breakpoints: this.props.breakpoints,\n      highlightedLines: this.props.highlightedLines,\n      newCursorPosition: this.props.newCursorPosition,\n      handleEditorUpdateBreakpoints: this.props.handleEditorUpdateBreakpoints\n    };\n    const workspaceProps: WorkspaceProps = {\n      controlBarProps: {\n        editorButtons: [autorunButtons, chapterSelect, externalLibrarySelect],\n        replButtons: [evalButton, clearButton]\n      },\n      customEditor: <SourceRecorderEditor {...editorProps} />,\n      editorHeight: this.props.editorHeight,\n      editorWidth: this.props.editorWidth,\n      handleEditorHeightChange: this.props.handleEditorHeightChange,\n      handleEditorWidthChange: this.props.handleEditorWidthChange,\n      handleSideContentHeightChange: this.props.handleSideContentHeightChange,\n      replProps: {\n        output: this.props.output,\n        replValue: this.props.replValue,\n        handleBrowseHistoryDown: this.props.handleBrowseHistoryDown,\n        handleBrowseHistoryUp: this.props.handleBrowseHistoryUp,\n        handleReplEval: this.props.handleReplEval,\n        handleReplValueChange: this.props.handleReplValueChange\n      },\n      sideContentHeight: this.props.sideContentHeight,\n      sideContentProps: {\n        handleActiveTabChange: this.props.handleActiveTabChange,\n        selectedTabId: this.props.sideContentActiveTab,\n        tabs: [\n          {\n            label: 'Sourcecast Table',\n            iconName: IconNames.COMPASS,\n            body: (\n              <div>\n                <span className=\"Multi-line\">\n                  <Pre>\n                    {this.props.title\n                      ? 'Title: ' + this.props.title + '\\nDescription: ' + this.props.description\n                      : INTRODUCTION}\n                  </Pre>\n                </span>\n                <SourceRecorderTable\n                  handleFetchSourcecastIndex={this.props.handleFetchSourcecastIndex}\n                  handleSetSourcecastData={this.props.handleSetSourcecastData}\n                  sourcecastIndex={this.props.sourcecastIndex}\n                />\n              </div>\n            ),\n            id: SideContentType.introduction,\n            toSpawn: () => true\n          },\n          listVisualizerTab,\n          inspectorTab,\n          envVisualizerTab\n        ],\n        workspaceLocation: 'sourcecast'\n      }\n    };\n    const sourcecastControlbarProps: SourceRecorderControlBarProps = {\n      handleEditorValueChange: this.props.handleEditorValueChange,\n      handlePromptAutocomplete: this.props.handlePromptAutocomplete,\n      handleSetCurrentPlayerTime: this.props.handleSetCurrentPlayerTime,\n      handleSetCodeDeltasToApply: this.props.handleSetCodeDeltasToApply,\n      handleSetEditorReadonly: this.props.handleSetEditorReadonly,\n      handleSetInputToApply: this.props.handleSetInputToApply,\n      handleSetSourcecastDuration: this.props.handleSetSourcecastDuration,\n      handleSetSourcecastStatus: this.props.handleSetSourcecastStatus,\n      audioUrl: this.props.audioUrl,\n      currentPlayerTime: this.props.currentPlayerTime,\n      duration: this.props.playbackDuration,\n      playbackData: this.props.playbackData,\n      playbackStatus: this.props.playbackStatus,\n      handleChapterSelect: this.props.handleChapterSelect,\n      handleExternalSelect: this.props.handleExternalSelect\n    };\n    return (\n      <div className={classNames('Sourcecast', Classes.DARK)}>\n        <SourceRecorderControlBar {...sourcecastControlbarProps} />\n        <Workspace {...workspaceProps} />\n      </div>\n    );\n  }\n}\n\nconst INTRODUCTION = 'Welcome to Sourcecast!';\n\nconst listVisualizerTab: SideContentTab = {\n  label: 'Data Visualizer',\n  iconName: IconNames.EYE_OPEN,\n  body: <SideContentListVisualizer />,\n  id: SideContentType.dataVisualiser,\n  toSpawn: () => true\n};\n\nconst inspectorTab: SideContentTab = {\n  label: 'Inspector',\n  iconName: IconNames.SEARCH,\n  body: <SideContentInspector />,\n  id: SideContentType.inspector,\n  toSpawn: () => true\n};\n\nconst envVisualizerTab: SideContentTab = {\n  label: 'Env Visualizer',\n  iconName: IconNames.GLOBE,\n  body: <SideContentEnvVisualizer />,\n  id: SideContentType.envVisualiser,\n  toSpawn: () => true\n};\n\nexport default Sourcecast;\n","import { connect, MapDispatchToProps, MapStateToProps } from 'react-redux';\nimport { bindActionCreators, Dispatch } from 'redux';\n\nimport {\n  beginDebuggerPause,\n  beginInterruptExecution,\n  debuggerReset,\n  debuggerResume\n} from '../../commons/application/actions/InterpreterActions';\nimport { OverallState } from '../../commons/application/ApplicationTypes';\nimport { ExternalLibraryName } from '../../commons/application/types/ExternalTypes';\nimport { Position } from '../../commons/editor/EditorTypes';\nimport { SideContentType } from '../../commons/sideContent/SideContentTypes';\nimport {\n  browseReplHistoryDown,\n  browseReplHistoryUp,\n  changeEditorHeight,\n  changeEditorWidth,\n  changeSideContentHeight,\n  chapterSelect,\n  clearReplOutput,\n  evalEditor,\n  evalRepl,\n  externalLibrarySelect,\n  navigateToDeclaration,\n  promptAutocomplete,\n  setEditorBreakpoint,\n  setEditorReadonly,\n  toggleEditorAutorun,\n  updateActiveTab,\n  updateEditorValue,\n  updateReplValue\n} from '../../commons/workspace/WorkspaceActions';\nimport { WorkspaceLocation } from '../../commons/workspace/WorkspaceTypes';\nimport { fetchSourcecastIndex } from '../../features/sourceRecorder/sourcecast/SourcecastActions';\nimport {\n  setCodeDeltasToApply,\n  setCurrentPlayerTime,\n  setInputToApply,\n  setSourcecastData,\n  setSourcecastDuration,\n  setSourcecastStatus\n} from '../../features/sourceRecorder/SourceRecorderActions';\nimport {\n  CodeDelta,\n  Input,\n  PlaybackData,\n  PlaybackStatus\n} from '../../features/sourceRecorder/SourceRecorderTypes';\nimport Sourcecast, { DispatchProps, StateProps } from './Sourcecast';\n\nconst mapStateToProps: MapStateToProps<StateProps, {}, OverallState> = state => ({\n  audioUrl: state.workspaces.sourcecast.audioUrl,\n  currentPlayerTime: state.workspaces.sourcecast.currentPlayerTime,\n  codeDeltasToApply: state.workspaces.sourcecast.codeDeltasToApply,\n  title: state.workspaces.sourcecast.title,\n  description: state.workspaces.sourcecast.description,\n  editorReadonly: state.workspaces.sourcecast.editorReadonly,\n  editorWidth: state.workspaces.sourcecast.editorWidth,\n  editorValue: state.workspaces.sourcecast.editorValue!,\n  externalLibraryName: state.workspaces.sourcecast.externalLibrary,\n  isEditorAutorun: state.workspaces.sourcecast.isEditorAutorun,\n  inputToApply: state.workspaces.sourcecast.inputToApply,\n  breakpoints: state.workspaces.sourcecast.breakpoints,\n  highlightedLines: state.workspaces.sourcecast.highlightedLines,\n  isRunning: state.workspaces.sourcecast.isRunning,\n  isDebugging: state.workspaces.sourcecast.isDebugging,\n  enableDebugging: state.workspaces.sourcecast.enableDebugging,\n  newCursorPosition: state.workspaces.sourcecast.newCursorPosition,\n  output: state.workspaces.sourcecast.output,\n  playbackDuration: state.workspaces.sourcecast.playbackDuration,\n  playbackData: state.workspaces.sourcecast.playbackData,\n  playbackStatus: state.workspaces.sourcecast.playbackStatus,\n  replValue: state.workspaces.sourcecast.replValue,\n  sideContentActiveTab: state.workspaces.sourcecast.sideContentActiveTab,\n  sideContentHeight: state.workspaces.sourcecast.sideContentHeight,\n  sourcecastIndex: state.workspaces.sourcecast.sourcecastIndex,\n  sourceChapter: state.workspaces.sourcecast.context.chapter,\n  sourceVariant: state.workspaces.sourcecast.context.variant\n});\n\nconst location: WorkspaceLocation = 'sourcecast';\n\nconst mapDispatchToProps: MapDispatchToProps<DispatchProps, {}> = (dispatch: Dispatch) =>\n  bindActionCreators(\n    {\n      handleActiveTabChange: (activeTab: SideContentType) => updateActiveTab(activeTab, location),\n      handleBrowseHistoryDown: () => browseReplHistoryDown(location),\n      handleBrowseHistoryUp: () => browseReplHistoryUp(location),\n      handleChapterSelect: (chapter: number) => chapterSelect(chapter, 'default', location),\n      handleDeclarationNavigate: (cursorPosition: Position) =>\n        navigateToDeclaration(location, cursorPosition),\n      handleEditorEval: () => evalEditor(location),\n      handleEditorValueChange: (val: string) => updateEditorValue(val, location),\n      handleEditorHeightChange: (height: number) => changeEditorHeight(height, location),\n      handleEditorWidthChange: (widthChange: number) =>\n        changeEditorWidth(widthChange.toString(), location),\n      handleEditorUpdateBreakpoints: (breakpoints: string[]) =>\n        setEditorBreakpoint(breakpoints, location),\n      handleExternalSelect: (externalLibraryName: ExternalLibraryName) =>\n        externalLibrarySelect(externalLibraryName, location),\n      handleFetchSourcecastIndex: () => fetchSourcecastIndex(location),\n      handleInterruptEval: () => beginInterruptExecution(location),\n      handleReplEval: () => evalRepl(location),\n      handleReplOutputClear: () => clearReplOutput(location),\n      handleReplValueChange: (newValue: string) => updateReplValue(newValue, location),\n      handleSetCurrentPlayerTime: (playerTime: number) =>\n        setCurrentPlayerTime(playerTime, location),\n      handleSetCodeDeltasToApply: (deltas: CodeDelta[]) => setCodeDeltasToApply(deltas, location),\n      handleSetEditorReadonly: (editorReadonly: boolean) =>\n        setEditorReadonly(location, editorReadonly),\n      handleSetInputToApply: (inputToApply: Input) => setInputToApply(inputToApply, location),\n      handleSetSourcecastData: (\n        title: string,\n        description: string,\n        audioUrl: string,\n        playbackData: PlaybackData\n      ) => setSourcecastData(title, description, audioUrl, playbackData, location),\n      handleSetSourcecastDuration: (duration: number) => setSourcecastDuration(duration, location),\n      handleSetSourcecastStatus: (playbackStatus: PlaybackStatus) =>\n        setSourcecastStatus(playbackStatus, location),\n      handleSideContentHeightChange: (heightChange: number) =>\n        changeSideContentHeight(heightChange, location),\n      handleToggleEditorAutorun: () => toggleEditorAutorun(location),\n      handleDebuggerPause: () => beginDebuggerPause(location),\n      handleDebuggerResume: () => debuggerResume(location),\n      handleDebuggerReset: () => debuggerReset(location),\n      handlePromptAutocomplete: (row: number, col: number, callback: any) =>\n        promptAutocomplete(location, row, col, callback)\n    },\n    dispatch\n  );\n\nconst SourcecastContainer = connect(mapStateToProps, mapDispatchToProps)(Sourcecast);\n\nexport default SourcecastContainer;\n","import { Callout, ProgressBar } from '@blueprintjs/core';\nimport { IconName } from '@blueprintjs/icons';\nimport * as React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nimport {\n  AssessmentCategories,\n  AssessmentCategory,\n  AssessmentOverview\n} from '../assessment/AssessmentTypes';\nimport { assessmentCategoryLink } from '../utils/ParamParseHelper';\n\ntype ProfileCardProps = DispatchProps & StateProps;\n\ntype StateProps = {\n  item: AssessmentOverview;\n};\n\ntype DispatchProps = {\n  getFrac: (num: number, den: number) => number;\n  parseColour: (frac: number) => string;\n  renderIcon: (category: AssessmentCategory) => IconName;\n};\n\nclass ProfileCard extends React.Component<ProfileCardProps, {}> {\n  public render() {\n    const { item } = this.props;\n\n    const isInvalidMission =\n      item.category !== AssessmentCategories.Mission || (item.maxGrade <= 0 && item.grade === 0);\n    const isInvalidXP = item.maxXp <= 0 && item.xp === 0;\n\n    const missionDetail = (\n      <div className=\"grade-details\">\n        <div className=\"title\">Grade</div>\n        <div className=\"value\">\n          {item.grade} / {item.maxGrade}\n        </div>\n        <ProgressBar\n          animate={false}\n          className={\n            'value-bar' + this.props.parseColour(this.props.getFrac(item.grade, item.maxGrade))\n          }\n          stripes={false}\n          value={this.props.getFrac(item.grade, item.maxGrade)}\n        />\n      </div>\n    );\n\n    const xpDetails = (\n      <div className=\"xp-details\">\n        <div className=\"title\">XP</div>\n        <div className=\"value\">\n          {item.xp} / {item.maxXp}\n        </div>\n        <ProgressBar\n          animate={false}\n          className={'value-bar' + this.props.parseColour(this.props.getFrac(item.xp, item.maxXp))}\n          stripes={false}\n          value={this.props.getFrac(item.xp, item.maxXp)}\n        />\n      </div>\n    );\n\n    return (\n      // Make each card navigate the user to the respective assessment\n      <NavLink\n        className=\"profile-summary-navlink\"\n        key={`${item.title}-${item.id}`}\n        target=\"_blank\"\n        to={`/academy/${assessmentCategoryLink(item.category)}/${item.id}/0`}\n        activeClassName=\"profile-summary-navlink\"\n      >\n        <Callout\n          className=\"profile-summary-callout\"\n          key={`${item.title}-${item.id}`}\n          icon={this.props.renderIcon(item.category)}\n          title={item.title}\n        >\n          {isInvalidMission ? '' : missionDetail}\n          {isInvalidXP ? '' : xpDetails}\n        </Callout>\n      </NavLink>\n    );\n  }\n}\n\nexport default ProfileCard;\n","import { Drawer, NonIdealState, Spinner } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport * as React from 'react';\n\nimport { Role } from '../application/ApplicationTypes';\nimport {\n  AssessmentCategories,\n  AssessmentCategory,\n  AssessmentOverview,\n  AssessmentStatuses,\n  GradingStatuses\n} from '../assessment/AssessmentTypes';\nimport ProfileCard from './ProfileCard';\n\ntype ProfileProps = DispatchProps & StateProps & OwnProps;\n\nexport type DispatchProps = {\n  handleAssessmentOverviewFetch: () => void;\n};\n\nexport type StateProps = {\n  name?: string;\n  role?: Role;\n  assessmentOverviews?: AssessmentOverview[];\n};\n\ntype OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\nclass Profile extends React.Component<ProfileProps, {}> {\n  public componentDidMount() {\n    if (this.props.name && this.props.role && !this.props.assessmentOverviews) {\n      // If assessment overviews are not loaded, fetch them\n      this.props.handleAssessmentOverviewFetch();\n    }\n  }\n\n  public render() {\n    const isLoaded = this.props.name && this.props.role && this.props.assessmentOverviews;\n    let content: JSX.Element;\n\n    if (!isLoaded) {\n      content = <NonIdealState description=\"Loading...\" icon={<Spinner />} />;\n    } else {\n      // Check if there are any closed assessments, else render a placeholder <div>\n      const numClosed = this.props.assessmentOverviews!.filter(\n        item => item.status === AssessmentStatuses.submitted\n      ).length;\n\n      const userDetails = (\n        <div className=\"profile-header\">\n          <div className=\"profile-username\">\n            <div className=\"name\">{this.props.name}</div>\n            <div className=\"role\">{this.props.role}</div>\n          </div>\n        </div>\n      );\n\n      if (numClosed === 0) {\n        content = (\n          <div className=\"profile-content\">\n            {userDetails}\n            <div className=\"profile-placeholder\">\n              There are no closed assessments to render grade and XP of.\n            </div>\n          </div>\n        );\n      } else {\n        // Compute the user's current total grade and XP from submitted assessments\n        const [currentGrade, currentXp, maxGrade, maxXp] = this.props.assessmentOverviews!.reduce(\n          (acc, item) =>\n            item.status === AssessmentStatuses.submitted\n              ? item.category === AssessmentCategories.Mission &&\n                item.gradingStatus === GradingStatuses.graded\n                ? [\n                    acc[0] + item.grade / item.maxGrade,\n                    acc[1] + item.xp,\n                    acc[2] + 1,\n                    acc[3] + item.maxXp\n                  ]\n                : [acc[0], acc[1] + item.xp, acc[2], acc[3] + item.maxXp]\n              : acc,\n          [0, 0, 0, 0]\n        );\n\n        // Performs boundary checks if denominator is 0 or if it exceeds 1 (100%)\n        const getFrac = (num: number, den: number): number => {\n          return den <= 0 || num / den > 1 ? 1 : num / den;\n        };\n\n        // Given a fraction between 0 and 1 inclusive, returns a className to apply colour with CSS\n        const parseColour = (frac: number): string => {\n          return frac < 0\n            ? ''\n            : frac >= 0.8\n            ? ' progress-steelblue'\n            : frac >= 0.45\n            ? ' progress-deepskyblue'\n            : ' progress-skyblue';\n        };\n\n        // Given an assessment category, return its icon\n        const renderIcon = (category: AssessmentCategory) => {\n          switch (category) {\n            case AssessmentCategories.Mission:\n              return IconNames.FLAME;\n            case AssessmentCategories.Sidequest:\n              return IconNames.LIGHTBULB;\n            case AssessmentCategories.Path:\n              return IconNames.PREDICTIVE_ANALYSIS;\n            case AssessmentCategories.Contest:\n              return IconNames.COMPARISON;\n            default:\n              // For rendering hidden assessments not visible to the student\n              // e.g. studio participation marks\n              return IconNames.PULSE;\n          }\n        };\n\n        // Build condensed assessment cards from an array of assessments\n        const summaryCallouts = this.props\n          .assessmentOverviews!.filter(item => item.status === AssessmentStatuses.submitted)\n          .map((assessment, index) => {\n            return (\n              <ProfileCard\n                key={index}\n                item={assessment}\n                getFrac={getFrac}\n                parseColour={parseColour}\n                renderIcon={renderIcon}\n              />\n            );\n          });\n\n        // Compute the user's maximum total grade and XP from submitted assessments\n        content = (\n          <div className=\"profile-content\">\n            {userDetails}\n            <div className=\"profile-progress\">\n              <div className=\"profile-grade\">\n                <Spinner\n                  className={'profile-spinner' + parseColour(getFrac(currentGrade, maxGrade))}\n                  size={144}\n                  value={getFrac(currentGrade, maxGrade)}\n                />\n                <div className=\"type\">Grade</div>\n                <div className=\"total-value\">\n                  {currentGrade.toFixed(2)} / {maxGrade.toFixed(2)}\n                </div>\n                <div className=\"percentage\">\n                  {(getFrac(currentGrade, maxGrade) * 100).toFixed(2)}%\n                </div>\n              </div>\n              <div className=\"profile-xp\">\n                <Spinner\n                  className={'profile-spinner' + parseColour(getFrac(currentXp, maxXp))}\n                  size={144}\n                  value={getFrac(currentXp, maxXp)}\n                />\n                <div className=\"type\">XP</div>\n                <div className=\"total-value\">\n                  {currentXp} / {maxXp}\n                </div>\n                <div className=\"percentage\">{(getFrac(currentXp, maxXp) * 100).toFixed(2)}%</div>\n              </div>\n            </div>\n            <div className=\"profile-callouts\">{summaryCallouts}</div>\n          </div>\n        );\n      }\n    }\n\n    return (\n      <Drawer\n        className=\"profile\"\n        icon={IconNames.USER}\n        isCloseButtonShown={true}\n        isOpen={this.props.isOpen}\n        onClose={this.props.onClose}\n        title=\"User Profile\"\n        position=\"left\"\n        size={'30%'}\n      >\n        {content}\n      </Drawer>\n    );\n  }\n}\n\nexport default Profile;\n","import { connect, MapDispatchToProps, MapStateToProps } from 'react-redux';\nimport { bindActionCreators, Dispatch } from 'redux';\n\nimport { fetchAssessmentOverviews } from '../application/actions/SessionActions';\nimport { OverallState } from '../application/ApplicationTypes';\nimport Profile, { DispatchProps, StateProps } from './Profile';\n\nconst mapStateToProps: MapStateToProps<StateProps, {}, OverallState> = state => ({\n  assessmentOverviews: state.session.assessmentOverviews,\n  name: state.session.name,\n  role: state.session.role\n});\n\nconst mapDispatchToProps: MapDispatchToProps<DispatchProps, {}> = (dispatch: Dispatch) =>\n  bindActionCreators(\n    {\n      handleAssessmentOverviewFetch: fetchAssessmentOverviews\n    },\n    dispatch\n  );\n\nconst ProfileContainer = connect(mapStateToProps, mapDispatchToProps)(Profile);\n\nexport default ProfileContainer;\n","import { Classes, Dialog } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport * as React from 'react';\n\nimport { Links } from '../utils/Constants';\n\ntype DialogProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\nconst DropdownAbout: React.SFC<DialogProps> = props => (\n  <Dialog\n    className=\"about\"\n    icon={IconNames.HELP}\n    isCloseButtonShown={true}\n    isOpen={props.isOpen}\n    onClose={props.onClose}\n    title=\"About\"\n  >\n    <div className={Classes.DIALOG_BODY}>\n      <div className=\"abt\">\n        <p>\n          The <i>Source Academy</i> is a computer-mediated learning environment for studying the\n          structure and interpretation of computer programs. Students write and run their programs\n          in their web browser, using sublanguages of JavaScript called{' '}\n          <a href={Links.sourceDocs}>Source</a>, designed for the textbook{' '}\n          <a href={Links.textbook}>\n            Structure and Interpretation of Computer Programs, JavaScript Adaptation\n          </a>\n          .\n        </p>\n        <p>\n          The Source Academy is available under the Apache License 2.0 at our GitHub organisation,{' '}\n          <a href={Links.githubOrg}>Source Academy</a>. The National University of Singapore uses\n          the Source Academy for teaching Programming Methodology to freshmen Computer Science\n          students in the course <a href={Links.moduleDetails}>CS1101S</a>.\n        </p>\n      </div>\n    </div>\n  </Dialog>\n);\n\nexport default DropdownAbout;\n","import { Classes, Dialog } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport * as React from 'react';\n\nimport { Links } from '../utils/Constants';\n\ntype DialogProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\nconst DropdownHelp: React.SFC<DialogProps> = props => (\n  <Dialog\n    className=\"help\"\n    icon={IconNames.ERROR}\n    isCloseButtonShown={true}\n    isOpen={props.isOpen}\n    onClose={props.onClose}\n    title=\"Help\"\n  >\n    <div className={Classes.DIALOG_BODY}>\n      <p>Please use the following resources when you encounter issues with this system.</p>\n      <p>\n        As of August 2020, we recommend the browsers <b>Google Chrome</b> or <b>Microsoft Edge</b>,\n        Version 83 or higher, or <b>Mozilla Firefox</b>, Version 78 or higher, to visit the Source\n        Academy. If you encounter issues with the Source Academy using these browsers, please use\n        the following resources.\n      </p>\n      <ul>\n        <li>\n          For critical technical issues that seriously affect your learning experience, email the\n          Technical Services of the NUS School of Computing at{' '}\n          <a href={Links.techSVC}>{Links.techSVC}</a> or call {Links.techSVCNumber}.\n        </li>\n        <li>\n          For non-critical technical issues, such as enhancement suggestions, please use the issue\n          system of the <a href={Links.githubIssues}>Source Academy repositories on GitHub</a>.\n        </li>\n        <li>\n          For issues related to the content of missions, quests, paths and contests, use the\n          respective forum at <a href={Links.piazza}> piazza</a>, or approach your Avenger,\n          Reflection instructor or lecturer.\n        </li>\n      </ul>\n    </div>\n  </Dialog>\n);\n\nexport default DropdownHelp;\n","import { Menu, MenuItem, Popover, Position } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport * as React from 'react';\n\nimport controlButton from '../ControlButton';\nimport Profile from '../profile/ProfileContainer';\nimport DropdownAbout from './DropdownAbout';\nimport DropdownHelp from './DropdownHelp';\n\ntype DropdownProps = DispatchProps & StateProps;\n\ntype DispatchProps = {\n  handleLogOut: () => void;\n};\n\ntype StateProps = {\n  name?: string;\n};\n\ntype State = {\n  isAboutOpen: boolean;\n  isHelpOpen: boolean;\n  isProfileOpen: boolean;\n};\n\nclass Dropdown extends React.Component<DropdownProps, State> {\n  constructor(props: DropdownProps) {\n    super(props);\n    this.state = {\n      isAboutOpen: false,\n      isHelpOpen: false,\n      isProfileOpen: false\n    };\n  }\n\n  public render() {\n    return (\n      <>\n        <Popover\n          content={this.menu(this.props)}\n          inheritDarkTheme={false}\n          position={Position.BOTTOM}\n        >\n          {controlButton('', IconNames.CARET_DOWN)}\n        </Popover>\n        <DropdownAbout isOpen={this.state.isAboutOpen} onClose={this.toggleAboutOpen} />\n        <DropdownHelp isOpen={this.state.isHelpOpen} onClose={this.toggleHelpOpen} />\n        {this.props.name ? (\n          <Profile isOpen={this.state.isProfileOpen} onClose={this.toggleProfileOpen} />\n        ) : null}\n      </>\n    );\n  }\n\n  private menu(props: DropdownProps) {\n    const profile = this.props.name ? (\n      <MenuItem\n        icon={IconNames.USER}\n        onClick={this.toggleProfileOpen}\n        text={titleCase(this.props.name)}\n      />\n    ) : null;\n\n    const logout = this.props.name ? (\n      <MenuItem icon={IconNames.LOG_OUT} text=\"Logout\" onClick={this.props.handleLogOut} />\n    ) : null;\n\n    return (\n      <Menu>\n        {profile}\n        <MenuItem icon={IconNames.HELP} onClick={this.toggleAboutOpen} text=\"About\" />\n        <MenuItem icon={IconNames.ERROR} onClick={this.toggleHelpOpen} text=\"Help\" />\n        {logout}\n      </Menu>\n    );\n  }\n\n  private toggleAboutOpen = () => {\n    this.setState({ ...this.state, isAboutOpen: !this.state.isAboutOpen });\n  };\n\n  private toggleHelpOpen = () =>\n    this.setState({ ...this.state, isHelpOpen: !this.state.isHelpOpen });\n\n  private toggleProfileOpen = () =>\n    this.setState({ ...this.state, isProfileOpen: !this.state.isProfileOpen });\n}\n\nconst titleCase = (str: string) =>\n  str.replace(/\\w\\S*/g, wrd => wrd.charAt(0).toUpperCase() + wrd.substr(1).toLowerCase());\n\nexport default Dropdown;\n","import {\n  Alignment,\n  Classes,\n  Icon,\n  Navbar,\n  NavbarDivider,\n  NavbarGroup,\n  NavbarHeading\n} from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nimport { Role } from '../application/ApplicationTypes';\nimport Dropdown from '../dropdown/Dropdown';\nimport Constants from '../utils/Constants';\n\ntype NavigationBarProps = DispatchProps & StateProps;\n\ntype DispatchProps = {\n  handleLogOut: () => void;\n};\n\ntype StateProps = {\n  role?: Role;\n  title: string;\n  name?: string;\n};\n\nconst NavigationBar: React.SFC<NavigationBarProps> = props => (\n  <Navbar className={classNames('NavigationBar', 'primary-navbar', Classes.DARK)}>\n    <NavbarGroup align={Alignment.LEFT}>\n      {!Constants.playgroundOnly && (\n        <>\n          <NavLink\n            activeClassName={Classes.ACTIVE}\n            className={classNames('NavigationBar__link', Classes.BUTTON, Classes.MINIMAL)}\n            to=\"/academy\"\n          >\n            <Icon icon={IconNames.SYMBOL_DIAMOND} />\n            <NavbarHeading className=\"hidden-xs hidden-sm\">Source Academy</NavbarHeading>\n          </NavLink>{' '}\n          <NavLink\n            activeClassName={Classes.ACTIVE}\n            className={classNames('NavigationBar__link', Classes.BUTTON, Classes.MINIMAL)}\n            to=\"/sourcecast\"\n          >\n            <Icon icon={IconNames.MUSIC} />\n            <div className=\"navbar-button-text hidden-xs hidden-sm\">Sourcecast</div>\n          </NavLink>\n        </>\n      )}\n      <NavLink\n        activeClassName={Classes.ACTIVE}\n        className={classNames('NavigationBar__link', Classes.BUTTON, Classes.MINIMAL)}\n        to=\"/playground\"\n      >\n        <Icon icon={IconNames.CODE} />\n        <div className=\"navbar-button-text hidden-xs hidden-sm\">\n          {Constants.playgroundOnly ? 'Source Academy Playground' : 'Playground'}\n        </div>\n      </NavLink>\n    </NavbarGroup>\n\n    <NavbarGroup align={Alignment.RIGHT}>\n      <NavLink\n        activeClassName={Classes.ACTIVE}\n        className={classNames('NavigationBar__link', Classes.BUTTON, Classes.MINIMAL)}\n        to=\"/contributors\"\n      >\n        <Icon icon={IconNames.HEART} />\n        <div className=\"navbar-button-text hidden-xs hidden-sm\">Contributors</div>\n      </NavLink>\n\n      <div className=\"visible-xs\">\n        <NavbarDivider className=\"thin-divider\" />\n      </div>\n      <div className=\"hidden-xs\">\n        <NavbarDivider className=\"default-divider\" />\n      </div>\n\n      <Dropdown handleLogOut={props.handleLogOut} name={props.name} />\n    </NavbarGroup>\n  </Navbar>\n);\n\nexport default NavigationBar;\n","import * as qs from 'query-string';\nimport { isArray } from 'util';\n\nexport interface IParsedQuery {\n  [key: string]: string | undefined;\n}\n\n/**\n * Parse a query string into an object.\n *\n * This is a wrapper for query-string that disables array and null parsing (so\n * the object has only strings).\n */\nexport function parseQuery(query: string): IParsedQuery {\n  const parsed = qs.parse(query);\n  for (const [key, val] of Object.entries(parsed)) {\n    if (isArray(val)) {\n      parsed[key] = val.join(',');\n    } else if (val === null) {\n      delete parsed[key];\n    }\n  }\n\n  return parsed as IParsedQuery;\n}\n","import { Variant } from 'js-slang/dist/types';\nimport { decompressFromEncodedURIComponent } from 'lz-string';\nimport * as React from 'react';\nimport { Redirect, Route, RouteComponentProps, Switch } from 'react-router';\n\nimport Academy from '../../pages/academy/AcademyContainer';\nimport Contributors from '../../pages/contributors/Contributors';\nimport Login from '../../pages/login/LoginContainer';\nimport MissionControlContainer from '../../pages/missionControl/MissionControlContainer';\nimport NotFound from '../../pages/notFound/NotFound';\nimport Playground from '../../pages/playground/PlaygroundContainer';\nimport SourcecastContainer from '../../pages/sourcecast/SourcecastContainer';\nimport NavigationBar from '../navigationBar/NavigationBar';\nimport Constants from '../utils/Constants';\nimport { stringParamToInt } from '../utils/ParamParseHelper';\nimport { parseQuery } from '../utils/QueryHelper';\nimport { Role, sourceLanguages } from './ApplicationTypes';\nimport { ExternalLibraryName } from './types/ExternalTypes';\n\nexport type ApplicationProps = DispatchProps & StateProps & RouteComponentProps<{}>;\n\nexport type DispatchProps = {\n  handleClearContext: (\n    chapter: number,\n    variant: Variant,\n    externalLibraryName: ExternalLibraryName\n  ) => void;\n  handleEditorValueChange: (val: string) => void;\n  handleEditorUpdateBreakpoints: (breakpoints: string[]) => void;\n  handleEnsureLibrariesLoaded: () => void;\n  handleLogOut: () => void;\n  handleExternalLibrarySelect: (external: ExternalLibraryName) => void;\n  handleSetExecTime: (execTime: string) => void;\n};\n\nexport type StateProps = {\n  accessToken?: string;\n  currentPlaygroundChapter: number;\n  currentPlaygroundVariant: Variant;\n  role?: Role;\n  title: string;\n  name?: string;\n  currentExternalLibrary: ExternalLibraryName;\n};\n\nconst assessmentRegExp = ':assessmentId(-?\\\\d+)?/:questionId(\\\\d+)?';\n\nclass Application extends React.Component<ApplicationProps, {}> {\n  public componentDidMount() {\n    parsePlayground(this.props);\n  }\n\n  public render() {\n    return (\n      <div className=\"Application\">\n        <NavigationBar\n          handleLogOut={this.props.handleLogOut}\n          role={this.props.role}\n          name={this.props.name}\n          title={this.props.title}\n        />\n        <div className=\"Application__main\">\n          {/* Unfortunately Switches cannot contain fragments :( */}\n          {Constants.playgroundOnly ? (\n            <Switch>\n              <Route path=\"/playground\" component={Playground} />\n              <Route path=\"/contributors\" component={Contributors} />\n              <Route path=\"/sourcecast\" component={SourcecastContainer} />\n              <Route exact={true} path=\"/\" render={this.redirectToPlayground} />\n              <Route component={NotFound} />\n            </Switch>\n          ) : (\n            <Switch>\n              <Route path=\"/academy\" component={toAcademy(this.props)} />\n              <Route path={`/mission-control/${assessmentRegExp}`} render={toIncubator} />\n              <Route path=\"/playground\" component={Playground} />\n              <Route path=\"/login\" render={toLogin(this.props)} />\n              <Route path=\"/contributors\" component={Contributors} />\n              <Route path=\"/sourcecast\" component={SourcecastContainer} />\n              <Route exact={true} path=\"/\" render={this.redirectToAcademy} />\n              <Route component={NotFound} />\n            </Switch>\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  private redirectToPlayground = () => <Redirect to=\"/playground\" />;\n  private redirectToAcademy = () => <Redirect to=\"/academy\" />;\n}\n\n/**\n * A user routes to /academy,\n *  1. If the user is logged in, render the Academy component\n *  2. If the user is not logged in, redirect to /login\n */\nconst toAcademy = (props: ApplicationProps) =>\n  props.accessToken === undefined || props.role === undefined\n    ? () => <Redirect to=\"/login\" />\n    : () => <Academy accessToken={props.accessToken} role={props.role!} />;\n\nconst toLogin = (props: ApplicationProps) => () => {\n  const qstr = parseQuery(props.location.search);\n\n  return (\n    <Login\n      code={qstr.code}\n      providerId={qstr.provider}\n      providers={[...Constants.authProviders.entries()].map(([id, { name }]) => ({\n        id,\n        name\n      }))}\n    />\n  );\n};\n\nconst parsePlayground = (props: ApplicationProps) => {\n  const prgrm = parsePrgrm(props);\n  const chapter = parseChapter(props) || props.currentPlaygroundChapter;\n  const variant = parseVariant(props, chapter) || props.currentPlaygroundVariant;\n  const externalLibraryName = parseExternalLibrary(props) || props.currentExternalLibrary;\n  const execTime = parseExecTime(props);\n  if (prgrm) {\n    props.handleEditorValueChange(prgrm);\n    props.handleEnsureLibrariesLoaded();\n    props.handleClearContext(chapter, variant, externalLibraryName);\n    props.handleExternalLibrarySelect(externalLibraryName);\n    props.handleSetExecTime(execTime);\n  }\n};\n\nconst toIncubator = (routerProps: RouteComponentProps<any>) => <MissionControlContainer />;\n\nconst parsePrgrm = (props: RouteComponentProps<{}>) => {\n  const qsParsed = parseQuery(props.location.hash);\n  // legacy support\n  const program = qsParsed.lz !== undefined ? qsParsed.lz : qsParsed.prgrm;\n  return program !== undefined ? decompressFromEncodedURIComponent(program) : undefined;\n};\n\nconst parseChapter = (props: RouteComponentProps<{}>) => {\n  return stringParamToInt(parseQuery(props.location.hash).chap) || undefined;\n};\n\nconst parseVariant = (props: RouteComponentProps<{}>, chap: number) => {\n  const variantQuery = parseQuery(props.location.hash).variant;\n  // find a language with this variant and chapter (if any)\n  const matchingLang = sourceLanguages.find(\n    language => language.chapter === chap && language.variant === variantQuery\n  );\n\n  const variant: Variant = matchingLang ? matchingLang.variant : 'default';\n\n  return variant;\n};\n\nconst parseExternalLibrary = (props: RouteComponentProps<{}>) => {\n  const ext = parseQuery(props.location.hash).ext || '';\n  return Object.values(ExternalLibraryName).find(v => v === ext) || ExternalLibraryName.NONE;\n};\n\nconst parseExecTime = (props: RouteComponentProps<{}>) => {\n  const time = parseQuery(props.location.hash).exec || '1000';\n  // Parse the time string to a number, defaulting execTime to 1000\n  const execTime = stringParamToInt(time) || 1000;\n  return `${execTime < 1000 ? 1000 : execTime}`;\n};\n\nexport default Application;\n","import { Variant } from 'js-slang/dist/types';\nimport { connect, MapDispatchToProps, MapStateToProps } from 'react-redux';\nimport { withRouter } from 'react-router';\nimport { bindActionCreators, Dispatch } from 'redux';\n\nimport {\n  beginClearContext,\n  changeExecTime,\n  ensureLibrariesLoaded,\n  externalLibrarySelect,\n  promptAutocomplete,\n  setEditorBreakpoint,\n  updateEditorValue\n} from '../workspace/WorkspaceActions';\nimport { logOut } from './actions/CommonsActions';\nimport Application, { DispatchProps, StateProps } from './Application';\nimport { OverallState } from './ApplicationTypes';\nimport { externalLibraries, ExternalLibraryName } from './types/ExternalTypes';\n\n/**\n * Provides the title of the application for display.\n * An object with the relevant properties must be\n * returned instead of an object of type @type {IApplicationProps},\n * as the routing properties of @type {RouteComponentProps} are\n * provided using the withRouter() method below.\n */\nconst mapStateToProps: MapStateToProps<StateProps, {}, OverallState> = state => ({\n  title: state.application.title,\n  accessToken: state.session.accessToken,\n  role: state.session.role,\n  name: state.session.name,\n  currentPlaygroundChapter: state.workspaces.playground.context.chapter,\n  currentPlaygroundVariant: state.workspaces.playground.context.variant,\n  currentExternalLibrary: state.workspaces.playground.externalLibrary\n});\n\nconst workspaceLocation = 'playground';\n\nconst mapDispatchToProps: MapDispatchToProps<DispatchProps, {}> = (dispatch: Dispatch) =>\n  bindActionCreators(\n    {\n      handleClearContext: (\n        chapter: number,\n        variant: Variant,\n        externalLibraryName: ExternalLibraryName\n      ) =>\n        beginClearContext(\n          {\n            chapter,\n            variant,\n            external: {\n              name: externalLibraryName,\n              symbols: externalLibraries.get(externalLibraryName)!\n            },\n            globals: []\n          },\n          workspaceLocation\n        ),\n      handleEditorValueChange: (val: string) => updateEditorValue(val, workspaceLocation),\n      handlePromptAutocomplete: (row: number, col: number, callback: any) =>\n        promptAutocomplete(workspaceLocation, row, col, callback),\n      handleEditorUpdateBreakpoints: (breakpoints: string[]) =>\n        setEditorBreakpoint(breakpoints, workspaceLocation),\n      handleEnsureLibrariesLoaded: ensureLibrariesLoaded,\n      handleLogOut: logOut,\n      handleExternalLibrarySelect: (externalLibraryName: ExternalLibraryName) =>\n        externalLibrarySelect(externalLibraryName, workspaceLocation),\n      handleSetExecTime: (execTime: string) => changeExecTime(execTime, workspaceLocation)\n    },\n    dispatch\n  );\n\nconst ApplicationContainer = withRouter(connect(mapStateToProps, mapDispatchToProps)(Application));\n\nexport default ApplicationContainer;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL || '', window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL || ''}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'src/styles/index.scss';\n\nimport * as Sentry from '@sentry/browser';\nimport { ConnectedRouter } from 'connected-react-router';\nimport { setBackendStaticURL } from 'js-slang/dist/modules/moduleLoader';\nimport * as React from 'react';\nimport { render } from 'react-dom';\nimport { Provider } from 'react-redux';\nimport ApplicationContainer from 'src/commons/application/ApplicationContainer';\nimport Constants, { Links } from 'src/commons/utils/Constants';\nimport { history } from 'src/commons/utils/HistoryHelper';\nimport { showWarningMessage } from 'src/commons/utils/NotificationsHelper';\nimport { register as registerServiceWorker } from 'src/commons/utils/RegisterServiceWorker';\nimport { store } from 'src/pages/createStore';\n\nif (Constants.sentryDsn) {\n  Sentry.init({ dsn: Constants.sentryDsn });\n}\n\nconst rootContainer = document.getElementById('root') as HTMLElement;\n(window as any).__REDUX_STORE__ = store; // need this for slang's display\nconsole.log(\n  `%c Source Academy ${Constants.sourceAcademyVersion}; ` +\n    `Please visit ${Links.githubIssues} to report bugs or issues.`,\n  'font-weight: bold;'\n);\n\nsetBackendStaticURL(Constants.moduleBackendUrl);\nconsole.log(`Using module backend: ${Constants.moduleBackendUrl}`);\n\nrender(\n  <Provider store={store}>\n    <ConnectedRouter history={history}>\n      <ApplicationContainer />\n    </ConnectedRouter>\n  </Provider>,\n  rootContainer\n);\n\nregisterServiceWorker({\n  onUpdate: () => {\n    showWarningMessage(\n      'A new version of Source Academy is available. Please refresh the browser.',\n      0\n    );\n  }\n});\n","module.exports = __webpack_public_path__ + \"static/media/default_cover_image.6f45c87a.jpg\";"],"sourceRoot":""}
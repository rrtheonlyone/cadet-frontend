{"version":3,"sources":["../node_modules/sourceror/wasm/source_compiler.js","../node_modules/sourceror/wasm/source_compiler_bg.js"],"names":["cachedTextDecoder","TextDecoder","module","require","ignoreBOM","fatal","decode","cachegetUint8Memory0","getUint8Memory0","buffer","wasm","Uint8Array","WASM_VECTOR_LEN","cachedTextEncoder","TextEncoder","encodeString","encodeInto","arg","view","buf","encode","set","read","length","written","passStringToWasm0","malloc","realloc","undefined","ptr","subarray","len","mem","offset","code","charCodeAt","slice","cachegetInt32Memory0","getInt32Memory0","Int32Array","compile","context","source_code","import_spec","ptr0","len0","ptr1","len1","r0","r1","v2","__wbg_sourcerorLogCallback_9555c6dd7a1fa2a1","arg0","arg1","arg2","arg3","arg4","arg5","sourcerorLogCallback"],"mappings":"yHAAA,8I,mCCAA,8FAIA,IAAIA,EAAoB,IAFoB,qBAAhBC,aAA8B,EAAIC,EAAOC,SAAS,QAAQF,YAAcA,aAE3D,QAAS,CAAEG,WAAW,EAAMC,OAAO,IAE5EL,EAAkBM,SAElB,IAAIC,EAAuB,KAC3B,SAASC,IAIL,OAH6B,OAAzBD,GAAiCA,EAAqBE,SAAWC,IAAYD,SAC7EF,EAAuB,IAAII,WAAWD,IAAYD,SAE/CF,EAOX,IAAIK,EAAkB,EAItB,IAAIC,EAAoB,IAFoB,qBAAhBC,aAA8B,EAAIZ,EAAOC,SAAS,QAAQW,YAAcA,aAE3D,SAEzC,MAAMC,EAAwD,oBAAjCF,EAAkBG,WACzC,SAAUC,EAAKC,GACjB,OAAOL,EAAkBG,WAAWC,EAAKC,IAEvC,SAAUD,EAAKC,GACjB,MAAMC,EAAMN,EAAkBO,OAAOH,GAErC,OADAC,EAAKG,IAAIF,GACF,CACHG,KAAML,EAAIM,OACVC,QAASL,EAAII,SAIrB,SAASE,EAAkBR,EAAKS,EAAQC,GAEpC,QAAgBC,IAAZD,EAAuB,CACvB,MAAMR,EAAMN,EAAkBO,OAAOH,GAC/BY,EAAMH,EAAOP,EAAII,QAGvB,OAFAf,IAAkBsB,SAASD,EAAKA,EAAMV,EAAII,QAAQF,IAAIF,GACtDP,EAAkBO,EAAII,OACfM,EAGX,IAAIE,EAAMd,EAAIM,OACVM,EAAMH,EAAOK,GAEjB,MAAMC,EAAMxB,IAEZ,IAAIyB,EAAS,EAEb,KAAOA,EAASF,EAAKE,IAAU,CAC3B,MAAMC,EAAOjB,EAAIkB,WAAWF,GAC5B,GAAIC,EAAO,IAAM,MACjBF,EAAIH,EAAMI,GAAUC,EAGxB,GAAID,IAAWF,EAAK,CACD,IAAXE,IACAhB,EAAMA,EAAImB,MAAMH,IAEpBJ,EAAMF,EAAQE,EAAKE,EAAKA,EAAME,EAAsB,EAAbhB,EAAIM,QAC3C,MAAML,EAAOV,IAAkBsB,SAASD,EAAMI,EAAQJ,EAAME,GAG5DE,GAFYlB,EAAaE,EAAKC,GAEhBM,QAIlB,OADAZ,EAAkBqB,EACXJ,EAGX,IAAIQ,EAAuB,KAC3B,SAASC,IAIL,OAH6B,OAAzBD,GAAiCA,EAAqB5B,SAAWC,IAAYD,SAC7E4B,EAAuB,IAAIE,WAAW7B,IAAYD,SAE/C4B,EAgBJ,SAASG,EAAQC,EAASC,EAAaC,GAC1C,IAAIC,EAAOnB,EAAkBiB,EAAahC,IAAwBA,KAC9DmC,EAAOjC,EACPkC,EAAOrB,EAAkBkB,EAAajC,IAAwBA,KAC9DqC,EAAOnC,EACXF,IAAa,EAAG+B,EAASG,EAAMC,EAAMC,EAAMC,GAC3C,IAnByBlB,EAAKE,EAmB1BiB,EAAKV,IAAkB,GACvBW,EAAKX,IAAkB,GACvBY,GArBqBrB,EAqBImB,EArBCjB,EAqBGkB,EApB1BzC,IAAkBsB,SAASD,EAAM,EAAGA,EAAM,EAAIE,IAoBhBK,QAErC,OADA1B,IAAqBsC,EAAS,EAALC,GAClBC,EAGJ,MAAMC,EAA8C,SAASC,EAAMC,EAAMC,EAAMC,EAAMC,EAAMC,GAC9F,IACIC,qBAAqBN,EAAMC,GAjGPxB,EAiGgCyB,EAjG3BvB,EAiGiCwB,EAhGvDvD,EAAkBM,OAAOE,IAAkBsB,SAASD,EAAKA,EAAME,KAgGDyB,EAAMC,GAD3E,QAGI/C,IAAqB4C,EAAMC,GAnGnC,IAA4B1B,EAAKE,K","file":"static/js/3.2111c004.chunk.js","sourcesContent":["import * as wasm from \"./source_compiler_bg.wasm\";\nexport * from \"./source_compiler_bg.js\";","import * as wasm from './source_compiler_bg.wasm';\n\nconst lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;\n\nlet cachedTextDecoder = new lTextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nconst lTextEncoder = typeof TextEncoder === 'undefined' ? (0, module.require)('util').TextEncoder : TextEncoder;\n\nlet cachedTextEncoder = new lTextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length);\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len);\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3);\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nlet cachegetInt32Memory0 = null;\nfunction getInt32Memory0() {\n    if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachegetInt32Memory0;\n}\n\nfunction getArrayU8FromWasm0(ptr, len) {\n    return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);\n}\n/**\n* The entry function for compilation.\n* `context` is an opaque value so that the host code can associate our calls to compiler_log() with the correct call to compile().\n* `source_code`: ESTree JSON representation of validated program\n* `import_spec`: list of imports following the import file format\n* @param {number} context\n* @param {string} source_code\n* @param {string} import_spec\n* @returns {Uint8Array}\n*/\nexport function compile(context, source_code, import_spec) {\n    var ptr0 = passStringToWasm0(source_code, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ptr1 = passStringToWasm0(import_spec, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len1 = WASM_VECTOR_LEN;\n    wasm.compile(8, context, ptr0, len0, ptr1, len1);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v2 = getArrayU8FromWasm0(r0, r1).slice();\n    wasm.__wbindgen_free(r0, r1 * 1);\n    return v2;\n}\n\nexport const __wbg_sourcerorLogCallback_9555c6dd7a1fa2a1 = function(arg0, arg1, arg2, arg3, arg4, arg5) {\n    try {\n        sourcerorLogCallback(arg0, arg1, getStringFromWasm0(arg2, arg3), arg4, arg5);\n    } finally {\n        wasm.__wbindgen_free(arg2, arg3);\n    }\n};\n\n"],"sourceRoot":""}